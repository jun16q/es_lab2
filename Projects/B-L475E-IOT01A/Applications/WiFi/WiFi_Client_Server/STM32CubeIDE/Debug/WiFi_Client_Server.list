
WiFi_Client_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  0800c870  0800c870  0000d870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d774  0800d774  0000f21c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d774  0800d774  0000e774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d77c  0800d77c  0000f21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d77c  0800d77c  0000e77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d780  0800d780  0000e780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800d784  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000f21c  2**0
                  CONTENTS
 10 .bss          00000c98  2000021c  2000021c  0000f21c  2**2
                  ALLOC
 11 ._user_heap_stack 00017004  20000eb4  20000eb4  0000f21c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY
 13 .debug_line   000173e9  00000000  00000000  0000f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009d  00000000  00000000  00026635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00015154  00000000  00000000  000266d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002e7b  00000000  00000000  0003b826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001340  00000000  00000000  0003e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1008  00000000  00000000  0003f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000eeb  00000000  00000000  001309f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002877c  00000000  00000000  001318db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015a057  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006788  00000000  00000000  0015a09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c858 	.word	0x0800c858

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800c858 	.word	0x0800c858

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001024:	f002 fa84 	bl	8003530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	@ (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	@ (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104e:	f008 f929 	bl	80092a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001052:	f000 f861 	bl	8001118 <main>

08001056 <LoopForever>:

LoopForever:
    b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001058:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001064:	0800d784 	.word	0x0800d784
  ldr r2, =_sbss
 8001068:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 800106c:	20000eb4 	.word	0x20000eb4

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <Motion_INT_Init>:
  * @brief  Initialize Motion Detection GPIO and EXTI (with test button)
  * @param  None
  * @retval None
  */
static void Motion_INT_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* Enable GPIO clocks */
  MOTION_INT_GPIO_CLK_ENABLE();
 800108a:	4b20      	ldr	r3, [pc, #128]	@ (800110c <Motion_INT_Init+0x98>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a1f      	ldr	r2, [pc, #124]	@ (800110c <Motion_INT_Init+0x98>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <Motion_INT_Init+0x98>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  TEST_BUTTON_CLK_ENABLE();
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <Motion_INT_Init+0x98>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a19      	ldr	r2, [pc, #100]	@ (800110c <Motion_INT_Init+0x98>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <Motion_INT_Init+0x98>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin for motion interrupt */
  GPIO_InitStruct.Pin = MOTION_INT_PIN;
 80010ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTION_INT_GPIO_PORT, &GPIO_InitStruct);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4619      	mov	r1, r3
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <Motion_INT_Init+0x9c>)
 80010d2:	f002 fc55 	bl	8003980 <HAL_GPIO_Init>

  /* Configure test button (User Button) for debugging */
  GPIO_InitStruct.Pin = TEST_BUTTON_PIN;
 80010d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Button press (falling edge)
 80010dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TEST_BUTTON_PORT, &GPIO_InitStruct);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <Motion_INT_Init+0xa0>)
 80010ee:	f002 fc47 	bl	8003980 <HAL_GPIO_Init>

  /* Enable EXTI interrupts */
  HAL_NVIC_SetPriority(MOTION_INT_EXTI_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2028      	movs	r0, #40	@ 0x28
 80010f8:	f002 fbcb 	bl	8003892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MOTION_INT_EXTI_IRQn);
 80010fc:	2028      	movs	r0, #40	@ 0x28
 80010fe:	f002 fbe4 	bl	80038ca <HAL_NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	48000c00 	.word	0x48000c00
 8001114:	48000800 	.word	0x48000800

08001118 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b08e      	sub	sp, #56	@ 0x38
 800111c:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6] = {0};
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	809a      	strh	r2, [r3, #4]
  uint8_t  IP_Addr[4] = {0};
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  static uint8_t TxData[200];
  int32_t Socket = -1;
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;
 8001132:	230a      	movs	r3, #10
 8001134:	847b      	strh	r3, [r7, #34]	@ 0x22

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001136:	f002 fa31 	bl	800359c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800113a:	f000 f9d9 	bl	80014f0 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 800113e:	2000      	movs	r0, #0
 8001140:	f001 fe66 	bl	8002e10 <BSP_LED_Init>

#if defined (TERMINAL_USE)
  /* Initialize UART for terminal output */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8001144:	4b99      	ldr	r3, [pc, #612]	@ (80013ac <main+0x294>)
 8001146:	4a9a      	ldr	r2, [pc, #616]	@ (80013b0 <main+0x298>)
 8001148:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 9600;
 800114a:	4b98      	ldr	r3, [pc, #608]	@ (80013ac <main+0x294>)
 800114c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001150:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b96      	ldr	r3, [pc, #600]	@ (80013ac <main+0x294>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b94      	ldr	r3, [pc, #592]	@ (80013ac <main+0x294>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800115e:	4b93      	ldr	r3, [pc, #588]	@ (80013ac <main+0x294>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b91      	ldr	r3, [pc, #580]	@ (80013ac <main+0x294>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b90      	ldr	r3, [pc, #576]	@ (80013ac <main+0x294>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b8e      	ldr	r3, [pc, #568]	@ (80013ac <main+0x294>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b8d      	ldr	r3, [pc, #564]	@ (80013ac <main+0x294>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117c:	4b8b      	ldr	r3, [pc, #556]	@ (80013ac <main+0x294>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	@ 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 8001182:	498a      	ldr	r1, [pc, #552]	@ (80013ac <main+0x294>)
 8001184:	2000      	movs	r0, #0
 8001186:	f001 fe9f 	bl	8002ec8 <BSP_COM_Init>
#endif /* TERMINAL_USE */

  TERMOUT("****** WIFI Module with Motion Detection Demo ****** \r\n\n");
 800118a:	488a      	ldr	r0, [pc, #552]	@ (80013b4 <main+0x29c>)
 800118c:	f007 fe62 	bl	8008e54 <puts>
  TERMOUT("Motion Detection Instructions :\r\n");
 8001190:	4889      	ldr	r0, [pc, #548]	@ (80013b8 <main+0x2a0>)
 8001192:	f007 fe5f 	bl	8008e54 <puts>
  TERMOUT("1- The LSM6DSL accelerometer will detect significant motion\r\n");
 8001196:	4889      	ldr	r0, [pc, #548]	@ (80013bc <main+0x2a4>)
 8001198:	f007 fe5c 	bl	8008e54 <puts>
  TERMOUT("2- Motion events will be sent to the TCP server\r\n");
 800119c:	4888      	ldr	r0, [pc, #544]	@ (80013c0 <main+0x2a8>)
 800119e:	f007 fe59 	bl	8008e54 <puts>
  TERMOUT("3- Regular accelerometer data is also transmitted\r\n\n");
 80011a2:	4888      	ldr	r0, [pc, #544]	@ (80013c4 <main+0x2ac>)
 80011a4:	f007 fe56 	bl	8008e54 <puts>

  /* Initialize accelerometer */
  if(BSP_ACCELERO_Init() == ACCELERO_OK)
 80011a8:	f002 f84a 	bl	8003240 <BSP_ACCELERO_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d111      	bne.n	80011d6 <main+0xbe>
  {
    TERMOUT("> Accelerometer initialized successfully\r\n");
 80011b2:	4885      	ldr	r0, [pc, #532]	@ (80013c8 <main+0x2b0>)
 80011b4:	f007 fe4e 	bl	8008e54 <puts>

    /* Initialize motion detection GPIO */
    Motion_INT_Init();
 80011b8:	f7ff ff5c 	bl	8001074 <Motion_INT_Init>

    /* Enable significant motion detection interrupt */
    if(BSP_ACCELERO_Enable_Motion_Detection_IT() == ACCELERO_OK)
 80011bc:	f002 f898 	bl	80032f0 <BSP_ACCELERO_Enable_Motion_Detection_IT>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d103      	bne.n	80011ce <main+0xb6>
    {
      TERMOUT("> Motion detection enabled successfully\r\n");
 80011c6:	4881      	ldr	r0, [pc, #516]	@ (80013cc <main+0x2b4>)
 80011c8:	f007 fe44 	bl	8008e54 <puts>
 80011cc:	e006      	b.n	80011dc <main+0xc4>
    }
    else
    {
      TERMOUT("> ERROR: Failed to enable motion detection\r\n");
 80011ce:	4880      	ldr	r0, [pc, #512]	@ (80013d0 <main+0x2b8>)
 80011d0:	f007 fe40 	bl	8008e54 <puts>
 80011d4:	e002      	b.n	80011dc <main+0xc4>
    }
  }
  else
  {
    TERMOUT("> ERROR: Failed to initialize accelerometer\r\n");
 80011d6:	487f      	ldr	r0, [pc, #508]	@ (80013d4 <main+0x2bc>)
 80011d8:	f007 fe3c 	bl	8008e54 <puts>
  }

  /* Initialize WIFI module */
  if(WIFI_Init() == WIFI_STATUS_OK)
 80011dc:	f001 fd28 	bl	8002c30 <WIFI_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 8090 	bne.w	8001308 <main+0x1f0>
  {
    TERMOUT("> WIFI Module Initialized.\r\n");
 80011e8:	487b      	ldr	r0, [pc, #492]	@ (80013d8 <main+0x2c0>)
 80011ea:	f007 fe33 	bl	8008e54 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2106      	movs	r1, #6
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fd69 	bl	8002ccc <WIFI_GetMAC_Address>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d112      	bne.n	8001226 <main+0x10e>
    {
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\r\n",
 8001200:	7c3b      	ldrb	r3, [r7, #16]
 8001202:	4618      	mov	r0, r3
 8001204:	7c7b      	ldrb	r3, [r7, #17]
 8001206:	461c      	mov	r4, r3
 8001208:	7cbb      	ldrb	r3, [r7, #18]
 800120a:	461d      	mov	r5, r3
 800120c:	7cfb      	ldrb	r3, [r7, #19]
 800120e:	7d3a      	ldrb	r2, [r7, #20]
 8001210:	7d79      	ldrb	r1, [r7, #21]
 8001212:	9102      	str	r1, [sp, #8]
 8001214:	9201      	str	r2, [sp, #4]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	462b      	mov	r3, r5
 800121a:	4622      	mov	r2, r4
 800121c:	4601      	mov	r1, r0
 800121e:	486f      	ldr	r0, [pc, #444]	@ (80013dc <main+0x2c4>)
 8001220:	f007 fdb0 	bl	8008d84 <iprintf>
 8001224:	e005      	b.n	8001232 <main+0x11a>
               MAC_Addr[0], MAC_Addr[1], MAC_Addr[2],
               MAC_Addr[3], MAC_Addr[4], MAC_Addr[5]);
    }
    else
    {
      TERMOUT("> ERROR : CANNOT get MAC address\r\n");
 8001226:	486e      	ldr	r0, [pc, #440]	@ (80013e0 <main+0x2c8>)
 8001228:	f007 fe14 	bl	8008e54 <puts>
      BSP_LED_On(LED2);
 800122c:	2000      	movs	r0, #0
 800122e:	f001 fe1f 	bl	8002e70 <BSP_LED_On>
    }

    if(WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8001232:	2203      	movs	r2, #3
 8001234:	496b      	ldr	r1, [pc, #428]	@ (80013e4 <main+0x2cc>)
 8001236:	486c      	ldr	r0, [pc, #432]	@ (80013e8 <main+0x2d0>)
 8001238:	f001 fd26 	bl	8002c88 <WIFI_Connect>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d15b      	bne.n	80012fa <main+0x1e2>
    {
      TERMOUT("> es-wifi module connected \r\n");
 8001242:	486a      	ldr	r0, [pc, #424]	@ (80013ec <main+0x2d4>)
 8001244:	f007 fe06 	bl	8008e54 <puts>
      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2104      	movs	r1, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fd5c 	bl	8002d0c <WIFI_GetIP_Address>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d148      	bne.n	80012ec <main+0x1d4>
      {
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\r\n",
 800125a:	7b3b      	ldrb	r3, [r7, #12]
 800125c:	4619      	mov	r1, r3
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	461a      	mov	r2, r3
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	4618      	mov	r0, r3
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	4603      	mov	r3, r0
 800126c:	4860      	ldr	r0, [pc, #384]	@ (80013f0 <main+0x2d8>)
 800126e:	f007 fd89 	bl	8008d84 <iprintf>
               IP_Addr[0], IP_Addr[1], IP_Addr[2], IP_Addr[3]);

        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\r\n",
 8001272:	4b60      	ldr	r3, [pc, #384]	@ (80013f4 <main+0x2dc>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	4b5e      	ldr	r3, [pc, #376]	@ (80013f4 <main+0x2dc>)
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	4618      	mov	r0, r3
 800127e:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <main+0x2dc>)
 8001280:	789b      	ldrb	r3, [r3, #2]
 8001282:	461c      	mov	r4, r3
 8001284:	4b5b      	ldr	r3, [pc, #364]	@ (80013f4 <main+0x2dc>)
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	461a      	mov	r2, r3
 800128a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	9200      	str	r2, [sp, #0]
 8001292:	4623      	mov	r3, r4
 8001294:	4602      	mov	r2, r0
 8001296:	4858      	ldr	r0, [pc, #352]	@ (80013f8 <main+0x2e0>)
 8001298:	f007 fd74 	bl	8008d84 <iprintf>
               RemoteIP[0], RemoteIP[1], RemoteIP[2], RemoteIP[3], RemotePORT);

        while (Trials--)
 800129c:	e013      	b.n	80012c6 <main+0x1ae>
        {
          if(WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 800129e:	2300      	movs	r3, #0
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	4b52      	ldr	r3, [pc, #328]	@ (80013f4 <main+0x2dc>)
 80012aa:	4a54      	ldr	r2, [pc, #336]	@ (80013fc <main+0x2e4>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	2000      	movs	r0, #0
 80012b0:	f001 fd50 	bl	8002d54 <WIFI_OpenClientConnection>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <main+0x1ae>
          {
            TERMOUT("> TCP Connection opened successfully.\r\n");
 80012ba:	4851      	ldr	r0, [pc, #324]	@ (8001400 <main+0x2e8>)
 80012bc:	f007 fdca 	bl	8008e54 <puts>
            Socket = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012c4:	e007      	b.n	80012d6 <main+0x1be>
        while (Trials--)
 80012c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	3a01      	subs	r2, #1
 80012ce:	b292      	uxth	r2, r2
 80012d0:	847a      	strh	r2, [r7, #34]	@ 0x22
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e3      	bne.n	800129e <main+0x186>
          }
        }
        if(Socket == -1)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d11a      	bne.n	8001314 <main+0x1fc>
        {
          TERMOUT("> ERROR : Cannot open Connection\r\n");
 80012de:	4849      	ldr	r0, [pc, #292]	@ (8001404 <main+0x2ec>)
 80012e0:	f007 fdb8 	bl	8008e54 <puts>
          BSP_LED_On(LED2);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f001 fdc3 	bl	8002e70 <BSP_LED_On>
 80012ea:	e013      	b.n	8001314 <main+0x1fc>
        }
      }
      else
      {
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\r\n");
 80012ec:	4846      	ldr	r0, [pc, #280]	@ (8001408 <main+0x2f0>)
 80012ee:	f007 fdb1 	bl	8008e54 <puts>
        BSP_LED_On(LED2);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f001 fdbc 	bl	8002e70 <BSP_LED_On>
 80012f8:	e00c      	b.n	8001314 <main+0x1fc>
      }
    }
    else
    {
      TERMOUT("> ERROR : es-wifi module NOT connected\r\n");
 80012fa:	4844      	ldr	r0, [pc, #272]	@ (800140c <main+0x2f4>)
 80012fc:	f007 fdaa 	bl	8008e54 <puts>
      BSP_LED_On(LED2);
 8001300:	2000      	movs	r0, #0
 8001302:	f001 fdb5 	bl	8002e70 <BSP_LED_On>
 8001306:	e005      	b.n	8001314 <main+0x1fc>
    }
  }
  else
  {
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\r\n");
 8001308:	4841      	ldr	r0, [pc, #260]	@ (8001410 <main+0x2f8>)
 800130a:	f007 fda3 	bl	8008e54 <puts>
    BSP_LED_On(LED2);
 800130e:	2000      	movs	r0, #0
 8001310:	f001 fdae 	bl	8002e70 <BSP_LED_On>
  }

  int16_t pDataXYZ[3] = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	809a      	strh	r2, [r3, #4]
  uint32_t last_motion_time = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]

  while(1)
  {
    if(Socket != -1)
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001326:	d0fb      	beq.n	8001320 <main+0x208>
    {
      /* Check if motion was detected */
      if(motion_detected)
 8001328:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <main+0x2fc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d07c      	beq.n	800142c <main+0x314>
      {
        motion_detected = 0; /* Clear the flag */
 8001332:	4b38      	ldr	r3, [pc, #224]	@ (8001414 <main+0x2fc>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
        motion_count++;
 8001338:	4b37      	ldr	r3, [pc, #220]	@ (8001418 <main+0x300>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a36      	ldr	r2, [pc, #216]	@ (8001418 <main+0x300>)
 8001340:	6013      	str	r3, [r2, #0]
        last_motion_time = HAL_GetTick();
 8001342:	f002 f99b 	bl	800367c <HAL_GetTick>
 8001346:	61f8      	str	r0, [r7, #28]

        /* Send motion detection event */
        snprintf((char*)TxData, sizeof(TxData),
 8001348:	4b33      	ldr	r3, [pc, #204]	@ (8001418 <main+0x300>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	4a32      	ldr	r2, [pc, #200]	@ (800141c <main+0x304>)
 8001354:	21c8      	movs	r1, #200	@ 0xc8
 8001356:	4832      	ldr	r0, [pc, #200]	@ (8001420 <main+0x308>)
 8001358:	f007 fd84 	bl	8008e64 <sniprintf>
                 "MOTION_DETECTED,Count=%lu,Time=%lu\r\n",
                 motion_count, last_motion_time);

        TERMOUT(">> Significant Motion Detected! Count: %lu\r\n", motion_count);
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <main+0x300>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	4830      	ldr	r0, [pc, #192]	@ (8001424 <main+0x30c>)
 8001364:	f007 fd0e 	bl	8008d84 <iprintf>

        /* Blink LED to indicate motion detection */
        BSP_LED_On(LED2);
 8001368:	2000      	movs	r0, #0
 800136a:	f001 fd81 	bl	8002e70 <BSP_LED_On>
        HAL_Delay(100);
 800136e:	2064      	movs	r0, #100	@ 0x64
 8001370:	f002 f990 	bl	8003694 <HAL_Delay>
        BSP_LED_Off(LED2);
 8001374:	2000      	movs	r0, #0
 8001376:	f001 fd91 	bl	8002e9c <BSP_LED_Off>

        ret = WIFI_SendData(Socket, TxData, strlen((char*)TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 800137a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800137c:	4828      	ldr	r0, [pc, #160]	@ (8001420 <main+0x308>)
 800137e:	f7fe ff77 	bl	8000270 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	f107 030a 	add.w	r3, r7, #10
 800138a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800138e:	9100      	str	r1, [sp, #0]
 8001390:	4923      	ldr	r1, [pc, #140]	@ (8001420 <main+0x308>)
 8001392:	4620      	mov	r0, r4
 8001394:	f001 fd1a 	bl	8002dcc <WIFI_SendData>
 8001398:	4603      	mov	r3, r0
 800139a:	61bb      	str	r3, [r7, #24]
        if (ret != WIFI_STATUS_OK)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d044      	beq.n	800142c <main+0x314>
        {
          TERMOUT("> ERROR : Failed to Send Motion Data, connection closed\r\n");
 80013a2:	4821      	ldr	r0, [pc, #132]	@ (8001428 <main+0x310>)
 80013a4:	f007 fd56 	bl	8008e54 <puts>
          break;
 80013a8:	e091      	b.n	80014ce <main+0x3b6>
 80013aa:	bf00      	nop
 80013ac:	20000cd8 	.word	0x20000cd8
 80013b0:	40013800 	.word	0x40013800
 80013b4:	0800c870 	.word	0x0800c870
 80013b8:	0800c8a8 	.word	0x0800c8a8
 80013bc:	0800c8cc 	.word	0x0800c8cc
 80013c0:	0800c90c 	.word	0x0800c90c
 80013c4:	0800c940 	.word	0x0800c940
 80013c8:	0800c974 	.word	0x0800c974
 80013cc:	0800c9a0 	.word	0x0800c9a0
 80013d0:	0800c9cc 	.word	0x0800c9cc
 80013d4:	0800c9f8 	.word	0x0800c9f8
 80013d8:	0800ca28 	.word	0x0800ca28
 80013dc:	0800ca44 	.word	0x0800ca44
 80013e0:	0800ca78 	.word	0x0800ca78
 80013e4:	0800ca9c 	.word	0x0800ca9c
 80013e8:	0800caa8 	.word	0x0800caa8
 80013ec:	0800cab0 	.word	0x0800cab0
 80013f0:	0800cad0 	.word	0x0800cad0
 80013f4:	20000000 	.word	0x20000000
 80013f8:	0800cb00 	.word	0x0800cb00
 80013fc:	0800cb34 	.word	0x0800cb34
 8001400:	0800cb40 	.word	0x0800cb40
 8001404:	0800cb68 	.word	0x0800cb68
 8001408:	0800cb8c 	.word	0x0800cb8c
 800140c:	0800cbbc 	.word	0x0800cbbc
 8001410:	0800cbe4 	.word	0x0800cbe4
 8001414:	20000238 	.word	0x20000238
 8001418:	2000023c 	.word	0x2000023c
 800141c:	0800cc14 	.word	0x0800cc14
 8001420:	20000240 	.word	0x20000240
 8001424:	0800cc3c 	.word	0x0800cc3c
 8001428:	0800cc6c 	.word	0x0800cc6c
        }
      }

      /* Regular accelerometer reading and transmission */
      BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f001 ff46 	bl	80032c0 <BSP_ACCELERO_AccGetXYZ>

      /* Send regular data with motion status */
      snprintf((char*)TxData, sizeof(TxData),
               "ACCEL,%d,%d,%d,MotionCount=%lu\r\n",
               pDataXYZ[0], pDataXYZ[1], pDataXYZ[2], motion_count);
 8001434:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
      snprintf((char*)TxData, sizeof(TxData),
 8001438:	4618      	mov	r0, r3
               pDataXYZ[0], pDataXYZ[1], pDataXYZ[2], motion_count);
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
      snprintf((char*)TxData, sizeof(TxData),
 800143e:	461a      	mov	r2, r3
               pDataXYZ[0], pDataXYZ[1], pDataXYZ[2], motion_count);
 8001440:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
      snprintf((char*)TxData, sizeof(TxData),
 8001444:	4619      	mov	r1, r3
 8001446:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <main+0x3c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	9101      	str	r1, [sp, #4]
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	4603      	mov	r3, r0
 8001452:	4a22      	ldr	r2, [pc, #136]	@ (80014dc <main+0x3c4>)
 8001454:	21c8      	movs	r1, #200	@ 0xc8
 8001456:	4822      	ldr	r0, [pc, #136]	@ (80014e0 <main+0x3c8>)
 8001458:	f007 fd04 	bl	8008e64 <sniprintf>

      ret = WIFI_SendData(Socket, TxData, strlen((char*)TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 800145c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800145e:	4820      	ldr	r0, [pc, #128]	@ (80014e0 <main+0x3c8>)
 8001460:	f7fe ff06 	bl	8000270 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	f107 030a 	add.w	r3, r7, #10
 800146c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001470:	9100      	str	r1, [sp, #0]
 8001472:	491b      	ldr	r1, [pc, #108]	@ (80014e0 <main+0x3c8>)
 8001474:	4620      	mov	r0, r4
 8001476:	f001 fca9 	bl	8002dcc <WIFI_SendData>
 800147a:	4603      	mov	r3, r0
 800147c:	61bb      	str	r3, [r7, #24]
      if (ret != WIFI_STATUS_OK)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <main+0x374>
      {
        TERMOUT("> ERROR : Failed to Send Data, connection closed\r\n");
 8001484:	4817      	ldr	r0, [pc, #92]	@ (80014e4 <main+0x3cc>)
 8001486:	f007 fce5 	bl	8008e54 <puts>
        break;
 800148a:	e020      	b.n	80014ce <main+0x3b6>
      }

      /* Print to terminal every 20 iterations (reduce spam) */
      static uint8_t print_counter = 0;
      if(++print_counter >= 20)
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <main+0x3d0>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <main+0x3d0>)
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <main+0x3d0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b13      	cmp	r3, #19
 800149e:	d912      	bls.n	80014c6 <main+0x3ae>
      {
        print_counter = 0;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <main+0x3d0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
        printf("Accelerometer: X=%d, Y=%d, Z=%d, Motion Count=%lu\r\n",
               pDataXYZ[0], pDataXYZ[1], pDataXYZ[2], motion_count);
 80014a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
        printf("Accelerometer: X=%d, Y=%d, Z=%d, Motion Count=%lu\r\n",
 80014aa:	4619      	mov	r1, r3
               pDataXYZ[0], pDataXYZ[1], pDataXYZ[2], motion_count);
 80014ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
        printf("Accelerometer: X=%d, Y=%d, Z=%d, Motion Count=%lu\r\n",
 80014b0:	461a      	mov	r2, r3
               pDataXYZ[0], pDataXYZ[1], pDataXYZ[2], motion_count);
 80014b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
        printf("Accelerometer: X=%d, Y=%d, Z=%d, Motion Count=%lu\r\n",
 80014b6:	4618      	mov	r0, r3
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <main+0x3c0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	4603      	mov	r3, r0
 80014c0:	480a      	ldr	r0, [pc, #40]	@ (80014ec <main+0x3d4>)
 80014c2:	f007 fc5f 	bl	8008d84 <iprintf>
      }

      HAL_Delay(100); /* Increased delay for better readability */
 80014c6:	2064      	movs	r0, #100	@ 0x64
 80014c8:	f002 f8e4 	bl	8003694 <HAL_Delay>
    if(Socket != -1)
 80014cc:	e728      	b.n	8001320 <main+0x208>
 80014ce:	2300      	movs	r3, #0
    }
  }
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bdb0      	pop	{r4, r5, r7, pc}
 80014d8:	2000023c 	.word	0x2000023c
 80014dc:	0800cca8 	.word	0x0800cca8
 80014e0:	20000240 	.word	0x20000240
 80014e4:	0800cccc 	.word	0x0800cccc
 80014e8:	20000308 	.word	0x20000308
 80014ec:	0800cd00 	.word	0x0800cd00

080014f0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b096      	sub	sp, #88	@ 0x58
 80014f4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014f6:	2310      	movs	r3, #16
 80014f8:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014fe:	2360      	movs	r3, #96	@ 0x60
 8001500:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2302      	movs	r3, #2
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800150a:	2301      	movs	r3, #1
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800150e:	2301      	movs	r3, #1
 8001510:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001512:	2328      	movs	r3, #40	@ 0x28
 8001514:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001516:	2302      	movs	r3, #2
 8001518:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 800151a:	2307      	movs	r3, #7
 800151c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800151e:	2304      	movs	r3, #4
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	4618      	mov	r0, r3
 8001526:	f003 fa45 	bl	80049b4 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x44>
  {
    /* Initialization Error */
    while(1);
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001534:	230f      	movs	r3, #15
 8001536:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2303      	movs	r3, #3
 800153a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	657b      	str	r3, [r7, #84]	@ 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001548:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800154c:	2104      	movs	r1, #4
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fe0c 	bl	800516c <HAL_RCC_ClockConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x6e>
  {
    /* Initialization Error */
    while(1);
 800155a:	bf00      	nop
 800155c:	e7fd      	b.n	800155a <SystemClock_Config+0x6a>
  }
}
 800155e:	bf00      	nop
 8001560:	3758      	adds	r7, #88	@ 0x58
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8001570:	1d39      	adds	r1, r7, #4
 8001572:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001576:	2201      	movs	r2, #1
 8001578:	4803      	ldr	r0, [pc, #12]	@ (8001588 <__io_putchar+0x20>)
 800157a:	f005 ff82 	bl	8007482 <HAL_UART_Transmit>
  return ch;
 800157e:	687b      	ldr	r3, [r7, #4]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000cd8 	.word	0x20000cd8

0800158c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800159c:	d012      	beq.n	80015c4 <HAL_GPIO_EXTI_Callback+0x38>
 800159e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015a2:	dc16      	bgt.n	80015d2 <HAL_GPIO_EXTI_Callback+0x46>
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_EXTI_Callback+0x24>
 80015a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_EXTI_Callback+0x2a>
      TERMOUT("Test button pressed - simulating motion!\r\n");
      break;
    }
    default:
    {
      break;
 80015ae:	e010      	b.n	80015d2 <HAL_GPIO_EXTI_Callback+0x46>
      SPI_WIFI_ISR();
 80015b0:	f001 fb2e 	bl	8002c10 <SPI_WIFI_ISR>
      break;
 80015b4:	e00e      	b.n	80015d4 <HAL_GPIO_EXTI_Callback+0x48>
      motion_detected = 1; /* Set motion detection flag */
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_GPIO_EXTI_Callback+0x50>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
      TERMOUT("Motion interrupt triggered!\r\n");
 80015bc:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <HAL_GPIO_EXTI_Callback+0x54>)
 80015be:	f007 fc49 	bl	8008e54 <puts>
      break;
 80015c2:	e007      	b.n	80015d4 <HAL_GPIO_EXTI_Callback+0x48>
      motion_detected = 1; /* Set motion detection flag */
 80015c4:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <HAL_GPIO_EXTI_Callback+0x50>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
      TERMOUT("Test button pressed - simulating motion!\r\n");
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <HAL_GPIO_EXTI_Callback+0x58>)
 80015cc:	f007 fc42 	bl	8008e54 <puts>
      break;
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_EXTI_Callback+0x48>
      break;
 80015d2:	bf00      	nop
    }
  }
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000238 	.word	0x20000238
 80015e0:	0800cd34 	.word	0x0800cd34
 80015e4:	0800cd54 	.word	0x0800cd54

080015e8 <EXTI15_10_IRQHandler>:
  * @brief  EXTI15_10_IRQHandler for motion detection and test button
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* Check if it's the motion detection pin interrupt */
  if(__HAL_GPIO_EXTI_GET_IT(MOTION_INT_PIN) != RESET)
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <EXTI15_10_IRQHandler+0x30>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <EXTI15_10_IRQHandler+0x18>
  {
    HAL_GPIO_EXTI_IRQHandler(MOTION_INT_PIN);
 80015f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80015fc:	f002 fb9a 	bl	8003d34 <HAL_GPIO_EXTI_IRQHandler>
  }

  /* Check if it's the test button interrupt */
  if(__HAL_GPIO_EXTI_GET_IT(TEST_BUTTON_PIN) != RESET)
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <EXTI15_10_IRQHandler+0x30>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <EXTI15_10_IRQHandler+0x2c>
  {
    HAL_GPIO_EXTI_IRQHandler(TEST_BUTTON_PIN);
 800160c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001610:	f002 fb90 	bl	8003d34 <HAL_GPIO_EXTI_IRQHandler>
  }
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40010400 	.word	0x40010400

0800161c <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <SPI3_IRQHandler+0x10>)
 8001622:	f005 f853 	bl	80066cc <HAL_SPI_IRQHandler>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000310 	.word	0x20000310

08001630 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001642:	bf00      	nop
 8001644:	e7fd      	b.n	8001642 <HardFault_Handler+0x4>

08001646 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800164a:	bf00      	nop
 800164c:	e7fd      	b.n	800164a <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001652:	bf00      	nop
 8001654:	e7fd      	b.n	8001652 <BusFault_Handler+0x4>

08001656 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800165a:	bf00      	nop
 800165c:	e7fd      	b.n	800165a <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800168c:	f001 ffe2 	bl	8003654 <HAL_IncTick>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001698:	2002      	movs	r0, #2
 800169a:	f002 fb4b 	bl	8003d34 <HAL_GPIO_EXTI_IRQHandler>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  return 1;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_kill>:

int _kill(int pid, int sig)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016bc:	f007 fdec 	bl	8009298 <__errno>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2216      	movs	r2, #22
 80016c4:	601a      	str	r2, [r3, #0]
  return -1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_exit>:

void _exit (int status)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016da:	f04f 31ff 	mov.w	r1, #4294967295
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffe7 	bl	80016b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <_exit+0x12>

080016e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e00a      	b.n	8001710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fa:	f3af 8000 	nop.w
 80016fe:	4601      	mov	r1, r0
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60ba      	str	r2, [r7, #8]
 8001706:	b2ca      	uxtb	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf0      	blt.n	80016fa <_read+0x12>
  }

  return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e009      	b.n	8001748 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff13 	bl	8001568 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf1      	blt.n	8001734 <_write+0x12>
  }
  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_close>:

int _close(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001782:	605a      	str	r2, [r3, #4]
  return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_isatty>:

int _isatty(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f007 fd50 	bl	8009298 <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20018000 	.word	0x20018000
 8001824:	00007000 	.word	0x00007000
 8001828:	2000030c 	.word	0x2000030c
 800182c:	20000eb8 	.word	0x20000eb8

08001830 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b2f      	cmp	r3, #47	@ 0x2f
 800183e:	d906      	bls.n	800184e <Hex2Num+0x1e>
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b39      	cmp	r3, #57	@ 0x39
 8001844:	d803      	bhi.n	800184e <Hex2Num+0x1e>
        return a - '0';
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	3b30      	subs	r3, #48	@ 0x30
 800184a:	b2db      	uxtb	r3, r3
 800184c:	e014      	b.n	8001878 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2b60      	cmp	r3, #96	@ 0x60
 8001852:	d906      	bls.n	8001862 <Hex2Num+0x32>
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2b66      	cmp	r3, #102	@ 0x66
 8001858:	d803      	bhi.n	8001862 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	3b57      	subs	r3, #87	@ 0x57
 800185e:	b2db      	uxtb	r3, r3
 8001860:	e00a      	b.n	8001878 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b40      	cmp	r3, #64	@ 0x40
 8001866:	d906      	bls.n	8001876 <Hex2Num+0x46>
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b46      	cmp	r3, #70	@ 0x46
 800186c:	d803      	bhi.n	8001876 <Hex2Num+0x46>
        return (a - 'A') + 10;
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	3b37      	subs	r3, #55	@ 0x37
 8001872:	b2db      	uxtb	r3, r3
 8001874:	e000      	b.n	8001878 <Hex2Num+0x48>
    }

    return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001896:	e012      	b.n	80018be <ParseHexNumber+0x3a>
        sum <<= 4;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ffc4 	bl	8001830 <Hex2Num>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	4413      	add	r3, r2
 80018b0:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3301      	adds	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
        done_count++;
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	3301      	adds	r3, #1
 80018bc:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80018c4:	d903      	bls.n	80018ce <ParseHexNumber+0x4a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b39      	cmp	r3, #57	@ 0x39
 80018cc:	d90f      	bls.n	80018ee <ParseHexNumber+0x6a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b60      	cmp	r3, #96	@ 0x60
 80018d4:	d903      	bls.n	80018de <ParseHexNumber+0x5a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b66      	cmp	r3, #102	@ 0x66
 80018dc:	d907      	bls.n	80018ee <ParseHexNumber+0x6a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b40      	cmp	r3, #64	@ 0x40
 80018e4:	d906      	bls.n	80018f4 <ParseHexNumber+0x70>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b46      	cmp	r3, #70	@ 0x46
 80018ec:	d802      	bhi.n	80018f4 <ParseHexNumber+0x70>
 80018ee:	7bbb      	ldrb	r3, [r7, #14]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d9d1      	bls.n	8001898 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <ParseHexNumber+0x7c>
        *cnt = done_count;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	7bba      	ldrb	r2, [r7, #14]
 80018fe:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8001900:	7bfb      	ldrb	r3, [r7, #15]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 800190a:	b480      	push	{r7}
 800190c:	b085      	sub	sp, #20
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b2d      	cmp	r3, #45	@ 0x2d
 8001926:	d119      	bne.n	800195c <ParseNumber+0x52>
        minus = 1;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
        done_count++;
 8001932:	7bbb      	ldrb	r3, [r7, #14]
 8001934:	3301      	adds	r3, #1
 8001936:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001938:	e010      	b.n	800195c <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	461a      	mov	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	3b30      	subs	r3, #48	@ 0x30
 800194c:	4413      	add	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3301      	adds	r3, #1
 8001954:	607b      	str	r3, [r7, #4]
        done_count++;
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	3301      	adds	r3, #1
 800195a:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b2f      	cmp	r3, #47	@ 0x2f
 8001962:	d903      	bls.n	800196c <ParseNumber+0x62>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b39      	cmp	r3, #57	@ 0x39
 800196a:	d9e6      	bls.n	800193a <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <ParseNumber+0x6e>
        *cnt = done_count;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	7bba      	ldrb	r2, [r7, #14]
 8001976:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <ParseNumber+0x7a>
        return 0 - sum;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	425b      	negs	r3, r3
 8001982:	e000      	b.n	8001986 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8001984:	68bb      	ldr	r3, [r7, #8]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8001992:	b590      	push	{r4, r7, lr}
 8001994:	b087      	sub	sp, #28
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d027      	beq.n	80019f8 <ParseMAC+0x66>
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d024      	beq.n	80019f8 <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80019ae:	e018      	b.n	80019e2 <ParseMAC+0x50>
    uint8_t done_count = 1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80019ba:	d00d      	beq.n	80019d8 <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	75fa      	strb	r2, [r7, #23]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	189c      	adds	r4, r3, r2
 80019c8:	f107 0316 	add.w	r3, r7, #22
 80019cc:	4619      	mov	r1, r3
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7ff ff58 	bl	8001884 <ParseHexNumber>
 80019d4:	4603      	mov	r3, r0
 80019d6:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 80019d8:	7dbb      	ldrb	r3, [r7, #22]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d906      	bls.n	80019f8 <ParseMAC+0x66>
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d803      	bhi.n	80019f8 <ParseMAC+0x66>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1db      	bne.n	80019b0 <ParseMAC+0x1e>
   }
  }
}
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd90      	pop	{r4, r7, pc}

08001a00 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d027      	beq.n	8001a66 <ParseIP+0x66>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d024      	beq.n	8001a66 <ParseIP+0x66>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d921      	bls.n	8001a66 <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001a22:	e019      	b.n	8001a58 <ParseIP+0x58>
    uint8_t done_count = 1;
 8001a24:	2301      	movs	r3, #1
 8001a26:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a2e:	d00e      	beq.n	8001a4e <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001a30:	f107 0316 	add.w	r3, r7, #22
 8001a34:	4619      	mov	r1, r3
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f7ff ff67 	bl	800190a <ParseNumber>
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	75fa      	strb	r2, [r7, #23]
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8001a4e:	7dbb      	ldrb	r3, [r7, #22]
 8001a50:	461a      	mov	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4413      	add	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d803      	bhi.n	8001a66 <ParseIP+0x66>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1de      	bne.n	8001a24 <ParseIP+0x24>
   }
  }
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	3302      	adds	r3, #2
 8001a82:	4940      	ldr	r1, [pc, #256]	@ (8001b84 <AT_ParseInfo+0x114>)
 8001a84:	4618      	mov	r0, r3
 8001a86:	f007 fb4b 	bl	8009120 <strtok>
 8001a8a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001a8c:	e071      	b.n	8001b72 <AT_ParseInfo+0x102>
    switch (num++) {
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	72fa      	strb	r2, [r7, #11]
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	d866      	bhi.n	8001b66 <AT_ParseInfo+0xf6>
 8001a98:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa0 <AT_ParseInfo+0x30>)
 8001a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9e:	bf00      	nop
 8001aa0:	08001abd 	.word	0x08001abd
 8001aa4:	08001ad1 	.word	0x08001ad1
 8001aa8:	08001ae9 	.word	0x08001ae9
 8001aac:	08001b01 	.word	0x08001b01
 8001ab0:	08001b19 	.word	0x08001b19
 8001ab4:	08001b31 	.word	0x08001b31
 8001ab8:	08001b45 	.word	0x08001b45
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	221f      	movs	r2, #31
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f007 fb18 	bl	80090f8 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	77da      	strb	r2, [r3, #31]
      break;
 8001ace:	e04b      	b.n	8001b68 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3320      	adds	r3, #32
 8001ad4:	2217      	movs	r2, #23
 8001ad6:	68f9      	ldr	r1, [r7, #12]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f007 fb0d 	bl	80090f8 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 8001ae6:	e03f      	b.n	8001b68 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3338      	adds	r3, #56	@ 0x38
 8001aec:	220f      	movs	r2, #15
 8001aee:	68f9      	ldr	r1, [r7, #12]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f007 fb01 	bl	80090f8 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001afe:	e033      	b.n	8001b68 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3348      	adds	r3, #72	@ 0x48
 8001b04:	220f      	movs	r2, #15
 8001b06:	68f9      	ldr	r1, [r7, #12]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f007 faf5 	bl	80090f8 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 8001b16:	e027      	b.n	8001b68 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3358      	adds	r3, #88	@ 0x58
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	68f9      	ldr	r1, [r7, #12]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f007 fae9 	bl	80090f8 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 8001b2e:	e01b      	b.n	8001b68 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001b30:	2100      	movs	r1, #0
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f7ff fee9 	bl	800190a <ParseNumber>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 8001b42:	e011      	b.n	8001b68 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8001b44:	4910      	ldr	r1, [pc, #64]	@ (8001b88 <AT_ParseInfo+0x118>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f007 faea 	bl	8009120 <strtok>
 8001b4c:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3368      	adds	r3, #104	@ 0x68
 8001b52:	221f      	movs	r2, #31
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 face 	bl	80090f8 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 8001b64:	e000      	b.n	8001b68 <AT_ParseInfo+0xf8>

    default: break;
 8001b66:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001b68:	4906      	ldr	r1, [pc, #24]	@ (8001b84 <AT_ParseInfo+0x114>)
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f007 fad8 	bl	8009120 <strtok>
 8001b70:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d18a      	bne.n	8001a8e <AT_ParseInfo+0x1e>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	0800cdb0 	.word	0x0800cdb0
 8001b88:	0800cdb4 	.word	0x0800cdb4

08001b8c <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	4959      	ldr	r1, [pc, #356]	@ (8001d04 <AT_ParseConnSettings+0x178>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f007 fabd 	bl	8009120 <strtok>
 8001ba6:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001ba8:	e0a2      	b.n	8001cf0 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	73fa      	strb	r2, [r7, #15]
 8001bb0:	2b0b      	cmp	r3, #11
 8001bb2:	f200 808c 	bhi.w	8001cce <AT_ParseConnSettings+0x142>
 8001bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <AT_ParseConnSettings+0x30>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bed 	.word	0x08001bed
 8001bc0:	08001c03 	.word	0x08001c03
 8001bc4:	08001c1b 	.word	0x08001c1b
 8001bc8:	08001c2f 	.word	0x08001c2f
 8001bcc:	08001c43 	.word	0x08001c43
 8001bd0:	08001c57 	.word	0x08001c57
 8001bd4:	08001c67 	.word	0x08001c67
 8001bd8:	08001c77 	.word	0x08001c77
 8001bdc:	08001c87 	.word	0x08001c87
 8001be0:	08001c97 	.word	0x08001c97
 8001be4:	08001ca7 	.word	0x08001ca7
 8001be8:	08001cbb 	.word	0x08001cbb
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f007 fa80 	bl	80090f8 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8001c00:	e066      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	3321      	adds	r3, #33	@ 0x21
 8001c06:	2220      	movs	r2, #32
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f007 fa74 	bl	80090f8 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 8001c18:	e05a      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	68b8      	ldr	r0, [r7, #8]
 8001c1e:	f7ff fe74 	bl	800190a <ParseNumber>
 8001c22:	4603      	mov	r3, r0
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8001c2c:	e050      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	68b8      	ldr	r0, [r7, #8]
 8001c32:	f7ff fe6a 	bl	800190a <ParseNumber>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8001c40:	e046      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001c42:	2100      	movs	r1, #0
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f7ff fe60 	bl	800190a <ParseNumber>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001c54:	e03c      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	3348      	adds	r3, #72	@ 0x48
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	68b8      	ldr	r0, [r7, #8]
 8001c60:	f7ff fece 	bl	8001a00 <ParseIP>
      break;
 8001c64:	e034      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	334c      	adds	r3, #76	@ 0x4c
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	68b8      	ldr	r0, [r7, #8]
 8001c70:	f7ff fec6 	bl	8001a00 <ParseIP>
      break;
 8001c74:	e02c      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	3350      	adds	r3, #80	@ 0x50
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	68b8      	ldr	r0, [r7, #8]
 8001c80:	f7ff febe 	bl	8001a00 <ParseIP>
      break;
 8001c84:	e024      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	3354      	adds	r3, #84	@ 0x54
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	68b8      	ldr	r0, [r7, #8]
 8001c90:	f7ff feb6 	bl	8001a00 <ParseIP>
      break;
 8001c94:	e01c      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	3358      	adds	r3, #88	@ 0x58
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	68b8      	ldr	r0, [r7, #8]
 8001ca0:	f7ff feae 	bl	8001a00 <ParseIP>
      break;
 8001ca4:	e014      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	68b8      	ldr	r0, [r7, #8]
 8001caa:	f7ff fe2e 	bl	800190a <ParseNumber>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8001cb8:	e00a      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8001cba:	2100      	movs	r1, #0
 8001cbc:	68b8      	ldr	r0, [r7, #8]
 8001cbe:	f7ff fe24 	bl	800190a <ParseNumber>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8001ccc:	e000      	b.n	8001cd0 <AT_ParseConnSettings+0x144>

    default:
      break;
 8001cce:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001cd0:	490c      	ldr	r1, [pc, #48]	@ (8001d04 <AT_ParseConnSettings+0x178>)
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f007 fa24 	bl	8009120 <strtok>
 8001cd8:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <AT_ParseConnSettings+0x164>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ce8:	d102      	bne.n	8001cf0 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	3301      	adds	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f47f af59 	bne.w	8001baa <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	0800cdb0 	.word	0x0800cdb0

08001d08 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d056      	beq.n	8001dd4 <AT_ExecuteCommand+0xcc>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d051      	beq.n	8001dd4 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8001d36:	68b8      	ldr	r0, [r7, #8]
 8001d38:	f7fe fa9a 	bl	8000270 <strlen>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	b299      	uxth	r1, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001d46:	461a      	mov	r2, r3
 8001d48:	68b8      	ldr	r0, [r7, #8]
 8001d4a:	47a0      	blx	r4
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	dd3e      	ble.n	8001dd4 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001d62:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001d6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	dd27      	ble.n	8001dc6 <AT_ExecuteCommand+0xbe>
 8001d76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d7a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d7e:	dc22      	bgt.n	8001dc6 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001d80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d84:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d88:	d105      	bne.n	8001d96 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001d8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001d96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8001da2:	490f      	ldr	r1, [pc, #60]	@ (8001de0 <AT_ExecuteCommand+0xd8>)
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f007 fa17 	bl	80091d8 <strstr>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e010      	b.n	8001dd6 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8001db4:	490b      	ldr	r1, [pc, #44]	@ (8001de4 <AT_ExecuteCommand+0xdc>)
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f007 fa0e 	bl	80091d8 <strstr>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	e007      	b.n	8001dd6 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001dc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001dca:	f113 0f04 	cmn.w	r3, #4
 8001dce:	d101      	bne.n	8001dd4 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	e000      	b.n	8001dd6 <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001dd4:	2304      	movs	r3, #4
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	0800cdc8 	.word	0x0800cdc8
 8001de4:	0800cdd4 	.word	0x0800cdd4

08001de8 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 8001e02:	68b8      	ldr	r0, [r7, #8]
 8001e04:	f7fe fa34 	bl	8000270 <strlen>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001e0c:	8a7b      	ldrh	r3, [r7, #18]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <AT_RequestSendData+0x32>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e05d      	b.n	8001ed6 <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d057      	beq.n	8001ed4 <AT_RequestSendData+0xec>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d052      	beq.n	8001ed4 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001e3a:	8a79      	ldrh	r1, [r7, #18]
 8001e3c:	68b8      	ldr	r0, [r7, #8]
 8001e3e:	4798      	blx	r3
 8001e40:	4603      	mov	r3, r0
 8001e42:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001e44:	8a3a      	ldrh	r2, [r7, #16]
 8001e46:	8a7b      	ldrh	r3, [r7, #18]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d143      	bne.n	8001ed4 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001e58:	8879      	ldrh	r1, [r7, #2]
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
 8001e5e:	4603      	mov	r3, r0
 8001e60:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001e62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d131      	bne.n	8001ed0 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001e78:	2100      	movs	r1, #0
 8001e7a:	6a38      	ldr	r0, [r7, #32]
 8001e7c:	4798      	blx	r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001e82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	dd19      	ble.n	8001ebe <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8001e8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e8e:	6a3a      	ldr	r2, [r7, #32]
 8001e90:	4413      	add	r3, r2
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001e96:	4912      	ldr	r1, [pc, #72]	@ (8001ee0 <AT_RequestSendData+0xf8>)
 8001e98:	6a38      	ldr	r0, [r7, #32]
 8001e9a:	f007 f99d 	bl	80091d8 <strstr>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e016      	b.n	8001ed6 <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001ea8:	490e      	ldr	r1, [pc, #56]	@ (8001ee4 <AT_RequestSendData+0xfc>)
 8001eaa:	6a38      	ldr	r0, [r7, #32]
 8001eac:	f007 f994 	bl	80091d8 <strstr>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	e00d      	b.n	8001ed6 <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e00b      	b.n	8001ed6 <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001ebe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ec2:	f113 0f04 	cmn.w	r3, #4
 8001ec6:	d101      	bne.n	8001ecc <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001ec8:	2306      	movs	r3, #6
 8001eca:	e004      	b.n	8001ed6 <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e002      	b.n	8001ed6 <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e000      	b.n	8001ed6 <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8001ed4:	2304      	movs	r3, #4
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	0800cdc8 	.word	0x0800cdc8
 8001ee4:	0800cdd4 	.word	0x0800cdd4

08001ee8 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001efa:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01b      	beq.n	8001f40 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001f0e:	2000      	movs	r0, #0
 8001f10:	4798      	blx	r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d113      	bne.n	8001f40 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f1e:	461a      	mov	r2, r3
 8001f20:	490a      	ldr	r1, [pc, #40]	@ (8001f4c <ES_WIFI_Init+0x64>)
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fef0 	bl	8001d08 <AT_ExecuteCommand>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff fd98 	bl	8001a70 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	0800cde4 	.word	0x0800cde4

08001f50 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00b      	beq.n	8001f7c <ES_WIFI_RegisterBusIO+0x2c>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <ES_WIFI_RegisterBusIO+0x2c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <ES_WIFI_RegisterBusIO+0x2c>
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <ES_WIFI_RegisterBusIO+0x2c>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e014      	b.n	8001faa <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	4932      	ldr	r1, [pc, #200]	@ (8002098 <ES_WIFI_Connect+0xe0>)
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f006 ff7d 	bl	8008ed0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff fe8f 	bl	8001d08 <AT_ExecuteCommand>
 8001fea:	4603      	mov	r3, r0
 8001fec:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d14b      	bne.n	800208c <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4927      	ldr	r1, [pc, #156]	@ (800209c <ES_WIFI_Connect+0xe4>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f006 ff66 	bl	8008ed0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002010:	461a      	mov	r2, r3
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7ff fe78 	bl	8001d08 <AT_ExecuteCommand>
 8002018:	4603      	mov	r3, r0
 800201a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d134      	bne.n	800208c <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	491b      	ldr	r1, [pc, #108]	@ (80020a0 <ES_WIFI_Connect+0xe8>)
 8002034:	4618      	mov	r0, r3
 8002036:	f006 ff4b 	bl	8008ed0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002046:	461a      	mov	r2, r3
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7ff fe5d 	bl	8001d08 <AT_ExecuteCommand>
 800204e:	4603      	mov	r3, r0
 8002050:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d119      	bne.n	800208c <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800205e:	4911      	ldr	r1, [pc, #68]	@ (80020a4 <ES_WIFI_Connect+0xec>)
 8002060:	4618      	mov	r0, r3
 8002062:	f006 ff35 	bl	8008ed0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002072:	461a      	mov	r2, r3
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff fe47 	bl	8001d08 <AT_ExecuteCommand>
 800207a:	4603      	mov	r3, r0
 800207c:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d103      	bne.n	800208c <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800208c:	7dfb      	ldrb	r3, [r7, #23]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	0800cdfc 	.word	0x0800cdfc
 800209c:	0800ce04 	.word	0x0800ce04
 80020a0:	0800ce0c 	.word	0x0800ce0c
 80020a4:	0800ce14 	.word	0x0800ce14

080020a8 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020b6:	4913      	ldr	r1, [pc, #76]	@ (8002104 <ES_WIFI_IsConnected+0x5c>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f006 ff09 	bl	8008ed0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020ca:	461a      	mov	r2, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff fe1b 	bl	8001d08 <AT_ExecuteCommand>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 80020e2:	2b31      	cmp	r3, #49	@ 0x31
 80020e4:	bf0c      	ite	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	2300      	movne	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	0800ce18 	.word	0x0800ce18

08002108 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002116:	4910      	ldr	r1, [pc, #64]	@ (8002158 <ES_WIFI_GetNetworkSettings+0x50>)
 8002118:	4618      	mov	r0, r3
 800211a:	f006 fed9 	bl	8008ed0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800212a:	461a      	mov	r2, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fdeb 	bl	8001d08 <AT_ExecuteCommand>
 8002132:	4603      	mov	r3, r0
 8002134:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d108      	bne.n	800214e <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	338d      	adds	r3, #141	@ 0x8d
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f7ff fd1f 	bl	8001b8c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	0800ce20 	.word	0x0800ce20

0800215c <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	4613      	mov	r3, r2
 8002168:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002170:	4913      	ldr	r1, [pc, #76]	@ (80021c0 <ES_WIFI_GetMACAddress+0x64>)
 8002172:	4618      	mov	r0, r3
 8002174:	f006 feac 	bl	8008ed0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002184:	461a      	mov	r2, r3
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff fdbe 	bl	8001d08 <AT_ExecuteCommand>
 800218c:	4603      	mov	r3, r0
 800218e:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10e      	bne.n	80021b4 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800219c:	3302      	adds	r3, #2
 800219e:	4909      	ldr	r1, [pc, #36]	@ (80021c4 <ES_WIFI_GetMACAddress+0x68>)
 80021a0:	4618      	mov	r0, r3
 80021a2:	f006 ffbd 	bl	8009120 <strtok>
 80021a6:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	6938      	ldr	r0, [r7, #16]
 80021b0:	f7ff fbef 	bl	8001992 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	0800ce70 	.word	0x0800ce70
 80021c4:	0800ce74 	.word	0x0800ce74

080021c8 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <ES_WIFI_StartClientConnection+0x1e>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d105      	bne.n	80021f2 <ES_WIFI_StartClientConnection+0x2a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	885b      	ldrh	r3, [r3, #2]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <ES_WIFI_StartClientConnection+0x2a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e0b1      	b.n	8002356 <ES_WIFI_StartClientConnection+0x18e>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4958      	ldr	r1, [pc, #352]	@ (8002360 <ES_WIFI_StartClientConnection+0x198>)
 8002200:	f006 fe66 	bl	8008ed0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002210:	461a      	mov	r2, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fd78 	bl	8001d08 <AT_ExecuteCommand>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d114      	bne.n	800224c <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	494d      	ldr	r1, [pc, #308]	@ (8002364 <ES_WIFI_StartClientConnection+0x19c>)
 8002230:	f006 fe4e 	bl	8008ed0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002240:	461a      	mov	r2, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fd60 	bl	8001d08 <AT_ExecuteCommand>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d114      	bne.n	800227c <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	889b      	ldrh	r3, [r3, #4]
 800225c:	461a      	mov	r2, r3
 800225e:	4942      	ldr	r1, [pc, #264]	@ (8002368 <ES_WIFI_StartClientConnection+0x1a0>)
 8002260:	f006 fe36 	bl	8008ed0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002270:	461a      	mov	r2, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fd48 	bl	8001d08 <AT_ExecuteCommand>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d114      	bne.n	80022ac <ES_WIFI_StartClientConnection+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	885b      	ldrh	r3, [r3, #2]
 800228c:	461a      	mov	r2, r3
 800228e:	4937      	ldr	r1, [pc, #220]	@ (800236c <ES_WIFI_StartClientConnection+0x1a4>)
 8002290:	f006 fe1e 	bl	8008ed0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022a0:	461a      	mov	r2, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fd30 	bl	8001d08 <AT_ExecuteCommand>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d120      	bne.n	80022f4 <ES_WIFI_StartClientConnection+0x12c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	799b      	ldrb	r3, [r3, #6]
 80022bc:	4619      	mov	r1, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	79db      	ldrb	r3, [r3, #7]
 80022c2:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80022c8:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	9200      	str	r2, [sp, #0]
 80022d2:	4623      	mov	r3, r4
 80022d4:	460a      	mov	r2, r1
 80022d6:	4926      	ldr	r1, [pc, #152]	@ (8002370 <ES_WIFI_StartClientConnection+0x1a8>)
 80022d8:	f006 fdfa 	bl	8008ed0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022e8:	461a      	mov	r2, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff fd0c 	bl	8001d08 <AT_ExecuteCommand>
 80022f0:	4603      	mov	r3, r0
 80022f2:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <ES_WIFI_StartClientConnection+0x160>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d112      	bne.n	8002328 <ES_WIFI_StartClientConnection+0x160>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002308:	491a      	ldr	r1, [pc, #104]	@ (8002374 <ES_WIFI_StartClientConnection+0x1ac>)
 800230a:	4618      	mov	r0, r3
 800230c:	f006 fde0 	bl	8008ed0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800231c:	461a      	mov	r2, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fcf2 	bl	8001d08 <AT_ExecuteCommand>
 8002324:	4603      	mov	r3, r0
 8002326:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d112      	bne.n	8002354 <ES_WIFI_StartClientConnection+0x18c>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002334:	4910      	ldr	r1, [pc, #64]	@ (8002378 <ES_WIFI_StartClientConnection+0x1b0>)
 8002336:	4618      	mov	r0, r3
 8002338:	f006 fdca 	bl	8008ed0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002348:	461a      	mov	r2, r3
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fcdc 	bl	8001d08 <AT_ExecuteCommand>
 8002350:	4603      	mov	r3, r0
 8002352:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bd90      	pop	{r4, r7, pc}
 800235e:	bf00      	nop
 8002360:	0800ced8 	.word	0x0800ced8
 8002364:	0800cee0 	.word	0x0800cee0
 8002368:	0800cee8 	.word	0x0800cee8
 800236c:	0800cef0 	.word	0x0800cef0
 8002370:	0800cef8 	.word	0x0800cef8
 8002374:	0800cf08 	.word	0x0800cf08
 8002378:	0800cf10 	.word	0x0800cf10

0800237c <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	461a      	mov	r2, r3
 8002388:	460b      	mov	r3, r1
 800238a:	72fb      	strb	r3, [r7, #11]
 800238c:	4613      	mov	r3, r2
 800238e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002390:	2302      	movs	r3, #2
 8002392:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800239a:	2301      	movs	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e001      	b.n	80023a4 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 80023a4:	893b      	ldrh	r3, [r7, #8]
 80023a6:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80023aa:	d302      	bcc.n	80023b2 <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 80023ac:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80023b0:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	893a      	ldrh	r2, [r7, #8]
 80023b6:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80023be:	7afa      	ldrb	r2, [r7, #11]
 80023c0:	4942      	ldr	r1, [pc, #264]	@ (80024cc <ES_WIFI_SendData+0x150>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	f006 fd84 	bl	8008ed0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80023d4:	461a      	mov	r2, r3
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff fc96 	bl	8001d08 <AT_ExecuteCommand>
 80023dc:	4603      	mov	r3, r0
 80023de:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d15e      	bne.n	80024a4 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4938      	ldr	r1, [pc, #224]	@ (80024d0 <ES_WIFI_SendData+0x154>)
 80023f0:	4618      	mov	r0, r3
 80023f2:	f006 fd6d 	bl	8008ed0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002402:	461a      	mov	r2, r3
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7ff fc7f 	bl	8001d08 <AT_ExecuteCommand>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d13d      	bne.n	8002490 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800241a:	893a      	ldrh	r2, [r7, #8]
 800241c:	492d      	ldr	r1, [pc, #180]	@ (80024d4 <ES_WIFI_SendData+0x158>)
 800241e:	4618      	mov	r0, r3
 8002420:	f006 fd56 	bl	8008ed0 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002430:	893a      	ldrh	r2, [r7, #8]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff fcd5 	bl	8001de8 <AT_RequestSendData>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d119      	bne.n	800247c <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800244e:	4922      	ldr	r1, [pc, #136]	@ (80024d8 <ES_WIFI_SendData+0x15c>)
 8002450:	4618      	mov	r0, r3
 8002452:	f006 fec1 	bl	80091d8 <strstr>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02c      	beq.n	80024b6 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800245c:	f640 1201 	movw	r2, #2305	@ 0x901
 8002460:	491e      	ldr	r1, [pc, #120]	@ (80024dc <ES_WIFI_SendData+0x160>)
 8002462:	481f      	ldr	r0, [pc, #124]	@ (80024e0 <ES_WIFI_SendData+0x164>)
 8002464:	f006 fc8e 	bl	8008d84 <iprintf>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800246e:	4619      	mov	r1, r3
 8002470:	481c      	ldr	r0, [pc, #112]	@ (80024e4 <ES_WIFI_SendData+0x168>)
 8002472:	f006 fc87 	bl	8008d84 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8002476:	2302      	movs	r3, #2
 8002478:	74fb      	strb	r3, [r7, #19]
 800247a:	e01c      	b.n	80024b6 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800247c:	f640 1207 	movw	r2, #2311	@ 0x907
 8002480:	4916      	ldr	r1, [pc, #88]	@ (80024dc <ES_WIFI_SendData+0x160>)
 8002482:	4817      	ldr	r0, [pc, #92]	@ (80024e0 <ES_WIFI_SendData+0x164>)
 8002484:	f006 fc7e 	bl	8008d84 <iprintf>
 8002488:	4817      	ldr	r0, [pc, #92]	@ (80024e8 <ES_WIFI_SendData+0x16c>)
 800248a:	f006 fce3 	bl	8008e54 <puts>
 800248e:	e012      	b.n	80024b6 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8002490:	f640 120c 	movw	r2, #2316	@ 0x90c
 8002494:	4911      	ldr	r1, [pc, #68]	@ (80024dc <ES_WIFI_SendData+0x160>)
 8002496:	4812      	ldr	r0, [pc, #72]	@ (80024e0 <ES_WIFI_SendData+0x164>)
 8002498:	f006 fc74 	bl	8008d84 <iprintf>
 800249c:	4813      	ldr	r0, [pc, #76]	@ (80024ec <ES_WIFI_SendData+0x170>)
 800249e:	f006 fcd9 	bl	8008e54 <puts>
 80024a2:	e008      	b.n	80024b6 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80024a4:	f640 1211 	movw	r2, #2321	@ 0x911
 80024a8:	490c      	ldr	r1, [pc, #48]	@ (80024dc <ES_WIFI_SendData+0x160>)
 80024aa:	480d      	ldr	r0, [pc, #52]	@ (80024e0 <ES_WIFI_SendData+0x164>)
 80024ac:	f006 fc6a 	bl	8008d84 <iprintf>
 80024b0:	480f      	ldr	r0, [pc, #60]	@ (80024f0 <ES_WIFI_SendData+0x174>)
 80024b2:	f006 fccf 	bl	8008e54 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d102      	bne.n	80024c2 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	2200      	movs	r2, #0
 80024c0:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	0800ced8 	.word	0x0800ced8
 80024d0:	0800d0d4 	.word	0x0800d0d4
 80024d4:	0800d0dc 	.word	0x0800d0dc
 80024d8:	0800d0e8 	.word	0x0800d0e8
 80024dc:	0800cf68 	.word	0x0800cf68
 80024e0:	0800cfc8 	.word	0x0800cfc8
 80024e4:	0800d0f0 	.word	0x0800d0f0
 80024e8:	0800d10c 	.word	0x0800d10c
 80024ec:	0800d128 	.word	0x0800d128
 80024f0:	0800d13c 	.word	0x0800d13c

080024f4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08c      	sub	sp, #48	@ 0x30
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 80024fc:	4b57      	ldr	r3, [pc, #348]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	4a56      	ldr	r2, [pc, #344]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 8002502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002506:	6593      	str	r3, [r2, #88]	@ 0x58
 8002508:	4b54      	ldr	r3, [pc, #336]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	4b51      	ldr	r3, [pc, #324]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	4a50      	ldr	r2, [pc, #320]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002520:	4b4e      	ldr	r3, [pc, #312]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252c:	4b4b      	ldr	r3, [pc, #300]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002530:	4a4a      	ldr	r2, [pc, #296]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002538:	4b48      	ldr	r3, [pc, #288]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 800253a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002544:	4b45      	ldr	r3, [pc, #276]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	4a44      	ldr	r2, [pc, #272]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 800254a:	f043 0310 	orr.w	r3, r3, #16
 800254e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002550:	4b42      	ldr	r3, [pc, #264]	@ (800265c <SPI_WIFI_MspInit+0x168>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800255c:	2200      	movs	r2, #0
 800255e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002562:	483f      	ldr	r0, [pc, #252]	@ (8002660 <SPI_WIFI_MspInit+0x16c>)
 8002564:	f001 fbce 	bl	8003d04 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002568:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800256c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800256e:	2301      	movs	r3, #1
 8002570:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	4619      	mov	r1, r3
 8002580:	4837      	ldr	r0, [pc, #220]	@ (8002660 <SPI_WIFI_MspInit+0x16c>)
 8002582:	f001 f9fd 	bl	8003980 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002586:	2302      	movs	r3, #2
 8002588:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800258a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800258e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	4619      	mov	r1, r3
 800259e:	4831      	ldr	r0, [pc, #196]	@ (8002664 <SPI_WIFI_MspInit+0x170>)
 80025a0:	f001 f9ee 	bl	8003980 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80025a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025a8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80025aa:	2301      	movs	r3, #1
 80025ac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	4619      	mov	r1, r3
 80025c0:	4828      	ldr	r0, [pc, #160]	@ (8002664 <SPI_WIFI_MspInit+0x170>)
 80025c2:	f001 f9dd 	bl	8003980 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80025c6:	2201      	movs	r2, #1
 80025c8:	2101      	movs	r1, #1
 80025ca:	4826      	ldr	r0, [pc, #152]	@ (8002664 <SPI_WIFI_MspInit+0x170>)
 80025cc:	f001 fb9a 	bl	8003d04 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80025d0:	2301      	movs	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80025dc:	2301      	movs	r3, #1
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	4619      	mov	r1, r3
 80025e6:	481f      	ldr	r0, [pc, #124]	@ (8002664 <SPI_WIFI_MspInit+0x170>)
 80025e8:	f001 f9ca 	bl	8003980 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80025ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025f0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80025fa:	2301      	movs	r3, #1
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80025fe:	2306      	movs	r3, #6
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8002602:	f107 031c 	add.w	r3, r7, #28
 8002606:	4619      	mov	r1, r3
 8002608:	4817      	ldr	r0, [pc, #92]	@ (8002668 <SPI_WIFI_MspInit+0x174>)
 800260a:	f001 f9b9 	bl	8003980 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800260e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002612:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800261c:	2301      	movs	r3, #1
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002620:	2306      	movs	r3, #6
 8002622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4619      	mov	r1, r3
 800262a:	480f      	ldr	r0, [pc, #60]	@ (8002668 <SPI_WIFI_MspInit+0x174>)
 800262c:	f001 f9a8 	bl	8003980 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002630:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002634:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800263a:	2301      	movs	r3, #1
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800263e:	2301      	movs	r3, #1
 8002640:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002642:	2306      	movs	r3, #6
 8002644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	4619      	mov	r1, r3
 800264c:	4806      	ldr	r0, [pc, #24]	@ (8002668 <SPI_WIFI_MspInit+0x174>)
 800264e:	f001 f997 	bl	8003980 <HAL_GPIO_Init>
}
 8002652:	bf00      	nop
 8002654:	3730      	adds	r7, #48	@ 0x30
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	48000400 	.word	0x48000400
 8002664:	48001000 	.word	0x48001000
 8002668:	48000800 	.word	0x48000800

0800266c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d145      	bne.n	800270c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002680:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 8002682:	4a28      	ldr	r2, [pc, #160]	@ (8002724 <SPI_WIFI_Init+0xb8>)
 8002684:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8002686:	4826      	ldr	r0, [pc, #152]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 8002688:	f7ff ff34 	bl	80024f4 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 800268c:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 800268e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002692:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002694:	4b22      	ldr	r3, [pc, #136]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800269a:	4b21      	ldr	r3, [pc, #132]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 800269c:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80026a0:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80026a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80026a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80026ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 80026b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b4:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80026b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 80026b8:	2210      	movs	r2, #16
 80026ba:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80026bc:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80026c2:	4b17      	ldr	r3, [pc, #92]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80026c8:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 80026ce:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80026d4:	4812      	ldr	r0, [pc, #72]	@ (8002720 <SPI_WIFI_Init+0xb4>)
 80026d6:	f002 ff6d 	bl	80055b4 <HAL_SPI_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	e018      	b.n	8002718 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	2007      	movs	r0, #7
 80026ec:	f001 f8d1 	bl	8003892 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80026f0:	2007      	movs	r0, #7
 80026f2:	f001 f8ea 	bl	80038ca <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	2033      	movs	r0, #51	@ 0x33
 80026fc:	f001 f8c9 	bl	8003892 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002700:	2033      	movs	r0, #51	@ 0x33
 8002702:	f001 f8e2 	bl	80038ca <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8002706:	200a      	movs	r0, #10
 8002708:	f000 fa08 	bl	8002b1c <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 800270c:	f000 f80c 	bl	8002728 <SPI_WIFI_ResetModule>
 8002710:	4603      	mov	r3, r0
 8002712:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000310 	.word	0x20000310
 8002724:	40003c00 	.word	0x40003c00

08002728 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800272e:	f000 ffa5 	bl	800367c <HAL_GetTick>
 8002732:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002738:	2200      	movs	r2, #0
 800273a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800273e:	4835      	ldr	r0, [pc, #212]	@ (8002814 <SPI_WIFI_ResetModule+0xec>)
 8002740:	f001 fae0 	bl	8003d04 <HAL_GPIO_WritePin>
 8002744:	200a      	movs	r0, #10
 8002746:	f000 ffa5 	bl	8003694 <HAL_Delay>
 800274a:	2201      	movs	r2, #1
 800274c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002750:	4830      	ldr	r0, [pc, #192]	@ (8002814 <SPI_WIFI_ResetModule+0xec>)
 8002752:	f001 fad7 	bl	8003d04 <HAL_GPIO_WritePin>
 8002756:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800275a:	f000 ff9b 	bl	8003694 <HAL_Delay>
  WIFI_ENABLE_NSS();
 800275e:	2200      	movs	r2, #0
 8002760:	2101      	movs	r1, #1
 8002762:	482c      	ldr	r0, [pc, #176]	@ (8002814 <SPI_WIFI_ResetModule+0xec>)
 8002764:	f001 face 	bl	8003d04 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002768:	200f      	movs	r0, #15
 800276a:	f000 f9d7 	bl	8002b1c <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 800276e:	e02b      	b.n	80027c8 <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d907      	bls.n	8002786 <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 8002776:	2201      	movs	r2, #1
 8002778:	2101      	movs	r1, #1
 800277a:	4826      	ldr	r0, [pc, #152]	@ (8002814 <SPI_WIFI_ResetModule+0xec>)
 800277c:	f001 fac2 	bl	8003d04 <HAL_GPIO_WritePin>
      return -1;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	e042      	b.n	800280c <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	463a      	mov	r2, r7
 800278a:	18d1      	adds	r1, r2, r3
 800278c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002790:	2201      	movs	r2, #1
 8002792:	4821      	ldr	r0, [pc, #132]	@ (8002818 <SPI_WIFI_ResetModule+0xf0>)
 8002794:	f003 f816 	bl	80057c4 <HAL_SPI_Receive>
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	3302      	adds	r3, #2
 80027a0:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80027a2:	f000 ff6b 	bl	800367c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b0:	d202      	bcs.n	80027b8 <SPI_WIFI_ResetModule+0x90>
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 80027b8:	2201      	movs	r2, #1
 80027ba:	2101      	movs	r1, #1
 80027bc:	4815      	ldr	r0, [pc, #84]	@ (8002814 <SPI_WIFI_ResetModule+0xec>)
 80027be:	f001 faa1 	bl	8003d04 <HAL_GPIO_WritePin>
      return -1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	e021      	b.n	800280c <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 80027c8:	2102      	movs	r1, #2
 80027ca:	4812      	ldr	r0, [pc, #72]	@ (8002814 <SPI_WIFI_ResetModule+0xec>)
 80027cc:	f001 fa82 	bl	8003cd4 <HAL_GPIO_ReadPin>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d0cc      	beq.n	8002770 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 80027d6:	2201      	movs	r2, #1
 80027d8:	2101      	movs	r1, #1
 80027da:	480e      	ldr	r0, [pc, #56]	@ (8002814 <SPI_WIFI_ResetModule+0xec>)
 80027dc:	f001 fa92 	bl	8003d04 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80027e0:	783b      	ldrb	r3, [r7, #0]
 80027e2:	2b15      	cmp	r3, #21
 80027e4:	d10e      	bne.n	8002804 <SPI_WIFI_ResetModule+0xdc>
 80027e6:	787b      	ldrb	r3, [r7, #1]
 80027e8:	2b15      	cmp	r3, #21
 80027ea:	d10b      	bne.n	8002804 <SPI_WIFI_ResetModule+0xdc>
 80027ec:	78bb      	ldrb	r3, [r7, #2]
 80027ee:	2b0d      	cmp	r3, #13
 80027f0:	d108      	bne.n	8002804 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80027f2:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80027f4:	2b0a      	cmp	r3, #10
 80027f6:	d105      	bne.n	8002804 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80027f8:	793b      	ldrb	r3, [r7, #4]
 80027fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80027fc:	d102      	bne.n	8002804 <SPI_WIFI_ResetModule+0xdc>
 80027fe:	797b      	ldrb	r3, [r7, #5]
 8002800:	2b20      	cmp	r3, #32
 8002802:	d002      	beq.n	800280a <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	e000      	b.n	800280c <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	48001000 	.word	0x48001000
 8002818:	20000310 	.word	0x20000310

0800281c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002820:	4802      	ldr	r0, [pc, #8]	@ (800282c <SPI_WIFI_DeInit+0x10>)
 8002822:	f002 ff93 	bl	800574c <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000310 	.word	0x20000310

08002830 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002838:	f000 ff20 	bl	800367c <HAL_GetTick>
 800283c:	4603      	mov	r3, r0
 800283e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002840:	e00a      	b.n	8002858 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002842:	f000 ff1b 	bl	800367c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad2      	subs	r2, r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	429a      	cmp	r2, r3
 8002850:	d902      	bls.n	8002858 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e007      	b.n	8002868 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002858:	2102      	movs	r1, #2
 800285a:	4805      	ldr	r0, [pc, #20]	@ (8002870 <wait_cmddata_rdy_high+0x40>)
 800285c:	f001 fa3a 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d1ed      	bne.n	8002842 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	48001000 	.word	0x48001000

08002874 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800287c:	f000 fefe 	bl	800367c <HAL_GetTick>
 8002880:	4603      	mov	r3, r0
 8002882:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8002884:	e00a      	b.n	800289c <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002886:	f000 fef9 	bl	800367c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad2      	subs	r2, r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	d902      	bls.n	800289c <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e004      	b.n	80028a6 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 800289c:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <wait_cmddata_rdy_rising_event+0x3c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d0f0      	beq.n	8002886 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80028a4:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000037c 	.word	0x2000037c

080028b4 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80028bc:	f000 fede 	bl	800367c <HAL_GetTick>
 80028c0:	4603      	mov	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 80028c4:	e00a      	b.n	80028dc <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80028c6:	f000 fed9 	bl	800367c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d902      	bls.n	80028dc <wait_spi_rx_event+0x28>
    {
      return -1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e004      	b.n	80028e6 <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <wait_spi_rx_event+0x3c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d0f0      	beq.n	80028c6 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80028e4:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000374 	.word	0x20000374

080028f4 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80028fc:	f000 febe 	bl	800367c <HAL_GetTick>
 8002900:	4603      	mov	r3, r0
 8002902:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8002904:	e00a      	b.n	800291c <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002906:	f000 feb9 	bl	800367c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad2      	subs	r2, r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	429a      	cmp	r2, r3
 8002914:	d902      	bls.n	800291c <wait_spi_tx_event+0x28>
    {
      return -1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	e004      	b.n	8002926 <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 800291c:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <wait_spi_tx_event+0x3c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d0f0      	beq.n	8002906 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8002924:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000378 	.word	0x20000378

08002934 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	460b      	mov	r3, r1
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8002946:	2201      	movs	r2, #1
 8002948:	2101      	movs	r1, #1
 800294a:	4834      	ldr	r0, [pc, #208]	@ (8002a1c <SPI_WIFI_ReceiveData+0xe8>)
 800294c:	f001 f9da 	bl	8003d04 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002950:	2003      	movs	r0, #3
 8002952:	f000 f8e3 	bl	8002b1c <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff8b 	bl	8002874 <wait_cmddata_rdy_rising_event>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	da02      	bge.n	800296a <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002964:	f06f 0302 	mvn.w	r3, #2
 8002968:	e054      	b.n	8002a14 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800296a:	2200      	movs	r2, #0
 800296c:	2101      	movs	r1, #1
 800296e:	482b      	ldr	r0, [pc, #172]	@ (8002a1c <SPI_WIFI_ReceiveData+0xe8>)
 8002970:	f001 f9c8 	bl	8003d04 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002974:	200f      	movs	r0, #15
 8002976:	f000 f8d1 	bl	8002b1c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800297a:	e03d      	b.n	80029f8 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 800297c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002980:	897b      	ldrh	r3, [r7, #10]
 8002982:	429a      	cmp	r2, r3
 8002984:	db02      	blt.n	800298c <SPI_WIFI_ReceiveData+0x58>
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d13c      	bne.n	8002a06 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 800298c:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <SPI_WIFI_ReceiveData+0xec>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	2201      	movs	r2, #1
 8002998:	4619      	mov	r1, r3
 800299a:	4822      	ldr	r0, [pc, #136]	@ (8002a24 <SPI_WIFI_ReceiveData+0xf0>)
 800299c:	f003 fcf2 	bl	8006384 <HAL_SPI_Receive_IT>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 80029a6:	2201      	movs	r2, #1
 80029a8:	2101      	movs	r1, #1
 80029aa:	481c      	ldr	r0, [pc, #112]	@ (8002a1c <SPI_WIFI_ReceiveData+0xe8>)
 80029ac:	f001 f9aa 	bl	8003d04 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	e02e      	b.n	8002a14 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff7b 	bl	80028b4 <wait_spi_rx_event>

      pData[0] = tmp[0];
 80029be:	7d3a      	ldrb	r2, [r7, #20]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3301      	adds	r3, #1
 80029c8:	7d7a      	ldrb	r2, [r7, #21]
 80029ca:	701a      	strb	r2, [r3, #0]
      length += 2;
 80029cc:	8afb      	ldrh	r3, [r7, #22]
 80029ce:	3302      	adds	r3, #2
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3302      	adds	r3, #2
 80029d8:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 80029da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80029de:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80029e2:	db09      	blt.n	80029f8 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80029e4:	2201      	movs	r2, #1
 80029e6:	2101      	movs	r1, #1
 80029e8:	480c      	ldr	r0, [pc, #48]	@ (8002a1c <SPI_WIFI_ReceiveData+0xe8>)
 80029ea:	f001 f98b 	bl	8003d04 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80029ee:	f7ff fe9b 	bl	8002728 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80029f2:	f06f 0303 	mvn.w	r3, #3
 80029f6:	e00d      	b.n	8002a14 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80029f8:	2102      	movs	r1, #2
 80029fa:	4808      	ldr	r0, [pc, #32]	@ (8002a1c <SPI_WIFI_ReceiveData+0xe8>)
 80029fc:	f001 f96a 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d0ba      	beq.n	800297c <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8002a06:	2201      	movs	r2, #1
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4804      	ldr	r0, [pc, #16]	@ (8002a1c <SPI_WIFI_ReceiveData+0xe8>)
 8002a0c:	f001 f97a 	bl	8003d04 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002a10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	48001000 	.word	0x48001000
 8002a20:	20000374 	.word	0x20000374
 8002a24:	20000310 	.word	0x20000310

08002a28 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	460b      	mov	r3, r1
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fef9 	bl	8002830 <wait_cmddata_rdy_high>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da02      	bge.n	8002a4a <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
 8002a48:	e04f      	b.n	8002aea <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8002a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002af4 <SPI_WIFI_SendData+0xcc>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002a50:	2200      	movs	r2, #0
 8002a52:	2101      	movs	r1, #1
 8002a54:	4828      	ldr	r0, [pc, #160]	@ (8002af8 <SPI_WIFI_SendData+0xd0>)
 8002a56:	f001 f955 	bl	8003d04 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002a5a:	200f      	movs	r0, #15
 8002a5c:	f000 f85e 	bl	8002b1c <SPI_WIFI_DelayUs>
  if (len > 1)
 8002a60:	897b      	ldrh	r3, [r7, #10]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d919      	bls.n	8002a9a <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8002a66:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <SPI_WIFI_SendData+0xd4>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8002a6c:	897b      	ldrh	r3, [r7, #10]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	68f9      	ldr	r1, [r7, #12]
 8002a76:	4822      	ldr	r0, [pc, #136]	@ (8002b00 <SPI_WIFI_SendData+0xd8>)
 8002a78:	f003 fbe8 	bl	800624c <HAL_SPI_Transmit_IT>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8002a82:	2201      	movs	r2, #1
 8002a84:	2101      	movs	r1, #1
 8002a86:	481c      	ldr	r0, [pc, #112]	@ (8002af8 <SPI_WIFI_SendData+0xd0>)
 8002a88:	f001 f93c 	bl	8003d04 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a90:	e02b      	b.n	8002aea <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff2d 	bl	80028f4 <wait_spi_tx_event>
  }

  if (len & 1)
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8002aa4:	897b      	ldrh	r3, [r7, #10]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002ab0:	230a      	movs	r3, #10
 8002ab2:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <SPI_WIFI_SendData+0xd4>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	480f      	ldr	r0, [pc, #60]	@ (8002b00 <SPI_WIFI_SendData+0xd8>)
 8002ac4:	f003 fbc2 	bl	800624c <HAL_SPI_Transmit_IT>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002ace:	2201      	movs	r2, #1
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4809      	ldr	r0, [pc, #36]	@ (8002af8 <SPI_WIFI_SendData+0xd0>)
 8002ad4:	f001 f916 	bl	8003d04 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8002adc:	e005      	b.n	8002aea <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff07 	bl	80028f4 <wait_spi_tx_event>
  }
  return len;
 8002ae6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000037c 	.word	0x2000037c
 8002af8:	48001000 	.word	0x48001000
 8002afc:	20000378 	.word	0x20000378
 8002b00:	20000310 	.word	0x20000310

08002b04 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fdc1 	bl	8003694 <HAL_Delay>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8002b2c:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <SPI_WIFI_DelayUs+0x94>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d122      	bne.n	8002b7a <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8002b34:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb4 <SPI_WIFI_DelayUs+0x98>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <SPI_WIFI_DelayUs+0x9c>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002b4a:	f000 fd97 	bl	800367c <HAL_GetTick>
 8002b4e:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002b50:	e002      	b.n	8002b58 <SPI_WIFI_DelayUs+0x3c>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f9      	bne.n	8002b52 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8002b5e:	f000 fd8d 	bl	800367c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	4a11      	ldr	r2, [pc, #68]	@ (8002bb0 <SPI_WIFI_DelayUs+0x94>)
 8002b6a:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002b6c:	4b10      	ldr	r3, [pc, #64]	@ (8002bb0 <SPI_WIFI_DelayUs+0x94>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <SPI_WIFI_DelayUs+0x5e>
 8002b74:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <SPI_WIFI_DelayUs+0x94>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb4 <SPI_WIFI_DelayUs+0x98>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bbc <SPI_WIFI_DelayUs+0xa0>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	0c9a      	lsrs	r2, r3, #18
 8002b86:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <SPI_WIFI_DelayUs+0x94>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002b9a:	e002      	b.n	8002ba2 <SPI_WIFI_DelayUs+0x86>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f9      	bne.n	8002b9c <SPI_WIFI_DelayUs+0x80>
  return;
 8002ba8:	bf00      	nop
}
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000380 	.word	0x20000380
 8002bb4:	20000048 	.word	0x20000048
 8002bb8:	10624dd3 	.word	0x10624dd3
 8002bbc:	431bde83 	.word	0x431bde83

08002bc0 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002bc8:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_SPI_RxCpltCallback+0x24>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <HAL_SPI_RxCpltCallback+0x24>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000374 	.word	0x20000374

08002be8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_SPI_TxCpltCallback+0x24>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <HAL_SPI_TxCpltCallback+0x24>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
  }
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000378 	.word	0x20000378

08002c10 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8002c14:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <SPI_WIFI_ISR+0x1c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d102      	bne.n	8002c22 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <SPI_WIFI_ISR+0x1c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
   }
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	2000037c 	.word	0x2000037c

08002c30 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <WIFI_Init+0x40>)
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <WIFI_Init+0x44>)
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <WIFI_Init+0x48>)
 8002c44:	4a0d      	ldr	r2, [pc, #52]	@ (8002c7c <WIFI_Init+0x4c>)
 8002c46:	490e      	ldr	r1, [pc, #56]	@ (8002c80 <WIFI_Init+0x50>)
 8002c48:	480e      	ldr	r0, [pc, #56]	@ (8002c84 <WIFI_Init+0x54>)
 8002c4a:	f7ff f981 	bl	8001f50 <ES_WIFI_RegisterBusIO>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d107      	bne.n	8002c64 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002c54:	480b      	ldr	r0, [pc, #44]	@ (8002c84 <WIFI_Init+0x54>)
 8002c56:	f7ff f947 	bl	8001ee8 <ES_WIFI_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002c64:	79fb      	ldrb	r3, [r7, #7]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	08002935 	.word	0x08002935
 8002c74:	08002a29 	.word	0x08002a29
 8002c78:	08002b05 	.word	0x08002b05
 8002c7c:	0800281d 	.word	0x0800281d
 8002c80:	0800266d 	.word	0x0800266d
 8002c84:	20000384 	.word	0x20000384

08002c88 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	68f9      	ldr	r1, [r7, #12]
 8002ca0:	4809      	ldr	r0, [pc, #36]	@ (8002cc8 <WIFI_Connect+0x40>)
 8002ca2:	f7ff f989 	bl	8001fb8 <ES_WIFI_Connect>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002cac:	4806      	ldr	r0, [pc, #24]	@ (8002cc8 <WIFI_Connect+0x40>)
 8002cae:	f7ff fa2b 	bl	8002108 <ES_WIFI_GetNetworkSettings>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000384 	.word	0x20000384

08002ccc <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <WIFI_GetMAC_Address+0x32>
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	461a      	mov	r2, r3
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4806      	ldr	r0, [pc, #24]	@ (8002d08 <WIFI_GetMAC_Address+0x3c>)
 8002cf0:	f7ff fa34 	bl	800215c <ES_WIFI_GetMACAddress>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000384 	.word	0x20000384

08002d0c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <WIFI_GetIP_Address+0x38>
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d90d      	bls.n	8002d44 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002d28:	4809      	ldr	r0, [pc, #36]	@ (8002d50 <WIFI_GetIP_Address+0x44>)
 8002d2a:	f7ff f9bd 	bl	80020a8 <ES_WIFI_IsConnected>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d107      	bne.n	8002d44 <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002d34:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <WIFI_GetIP_Address+0x44>)
 8002d36:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000384 	.word	0x20000384

08002d54 <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	@ 0x28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	460b      	mov	r3, r1
 8002d62:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8002d70:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002d72:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8002d74:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002d76:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	3302      	adds	r3, #2
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	3303      	adds	r3, #3
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	4619      	mov	r1, r3
 8002daa:	4807      	ldr	r0, [pc, #28]	@ (8002dc8 <WIFI_OpenClientConnection+0x74>)
 8002dac:	f7ff fa0c 	bl	80021c8 <ES_WIFI_StartClientConnection>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8002dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3728      	adds	r7, #40	@ 0x28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000384 	.word	0x20000384

08002dcc <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	b2d9      	uxtb	r1, r3
 8002de4:	88fa      	ldrh	r2, [r7, #6]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	4613      	mov	r3, r2
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	4806      	ldr	r0, [pc, #24]	@ (8002e0c <WIFI_SendData+0x40>)
 8002df4:	f7ff fac2 	bl	800237c <ES_WIFI_SendData>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000384 	.word	0x20000384

08002e10 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <BSP_LED_Init+0x28>
 8002e20:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <BSP_LED_Init+0x58>)
 8002e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e24:	4a10      	ldr	r2, [pc, #64]	@ (8002e68 <BSP_LED_Init+0x58>)
 8002e26:	f043 0302 	orr.w	r3, r3, #2
 8002e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <BSP_LED_Init+0x58>)
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002e38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e3c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e46:	2302      	movs	r3, #2
 8002e48:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <BSP_LED_Init+0x5c>)
 8002e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e52:	f107 020c 	add.w	r2, r7, #12
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fd91 	bl	8003980 <HAL_GPIO_Init>
}
 8002e5e:	bf00      	nop
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	20000004 	.word	0x20000004

08002e70 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	4a06      	ldr	r2, [pc, #24]	@ (8002e98 <BSP_LED_On+0x28>)
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e86:	b291      	uxth	r1, r2
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 ff3a 	bl	8003d04 <HAL_GPIO_WritePin>
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000004 	.word	0x20000004

08002e9c <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	4a06      	ldr	r2, [pc, #24]	@ (8002ec4 <BSP_LED_Off+0x28>)
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002eb2:	b291      	uxth	r1, r2
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 ff24 	bl	8003d04 <HAL_GPIO_WritePin>
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000004 	.word	0x20000004

08002ec8 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	@ 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <BSP_COM_Init+0x2a>
 8002eda:	4b2d      	ldr	r3, [pc, #180]	@ (8002f90 <BSP_COM_Init+0xc8>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ede:	4a2c      	ldr	r2, [pc, #176]	@ (8002f90 <BSP_COM_Init+0xc8>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f90 <BSP_COM_Init+0xc8>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <BSP_COM_Init+0x48>
 8002ef8:	4b25      	ldr	r3, [pc, #148]	@ (8002f90 <BSP_COM_Init+0xc8>)
 8002efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efc:	4a24      	ldr	r2, [pc, #144]	@ (8002f90 <BSP_COM_Init+0xc8>)
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f04:	4b22      	ldr	r3, [pc, #136]	@ (8002f90 <BSP_COM_Init+0xc8>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10b      	bne.n	8002f2e <BSP_COM_Init+0x66>
 8002f16:	4b1e      	ldr	r3, [pc, #120]	@ (8002f90 <BSP_COM_Init+0xc8>)
 8002f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <BSP_COM_Init+0xc8>)
 8002f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f22:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <BSP_COM_Init+0xc8>)
 8002f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8002f2e:	2340      	movs	r3, #64	@ 0x40
 8002f30:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f36:	2302      	movs	r3, #2
 8002f38:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002f3e:	2307      	movs	r3, #7
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	4a13      	ldr	r2, [pc, #76]	@ (8002f94 <BSP_COM_Init+0xcc>)
 8002f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4a:	f107 0214 	add.w	r2, r7, #20
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fd15 	bl	8003980 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002f56:	2380      	movs	r3, #128	@ 0x80
 8002f58:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8002f5e:	2307      	movs	r3, #7
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	4a0c      	ldr	r2, [pc, #48]	@ (8002f98 <BSP_COM_Init+0xd0>)
 8002f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6a:	f107 0214 	add.w	r2, r7, #20
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fd05 	bl	8003980 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	4a08      	ldr	r2, [pc, #32]	@ (8002f9c <BSP_COM_Init+0xd4>)
 8002f7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8002f82:	6838      	ldr	r0, [r7, #0]
 8002f84:	f004 fa25 	bl	80073d2 <HAL_UART_Init>
}
 8002f88:	bf00      	nop
 8002f8a:	3728      	adds	r7, #40	@ 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	2000000c 	.word	0x2000000c
 8002f98:	20000010 	.word	0x20000010
 8002f9c:	20000008 	.word	0x20000008

08002fa0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002fa8:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <I2Cx_MspInit+0xa8>)
 8002faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fac:	4a26      	ldr	r2, [pc, #152]	@ (8003048 <I2Cx_MspInit+0xa8>)
 8002fae:	f043 0302 	orr.w	r3, r3, #2
 8002fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fb4:	4b24      	ldr	r3, [pc, #144]	@ (8003048 <I2Cx_MspInit+0xa8>)
 8002fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002fc0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fc4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002fc6:	2312      	movs	r3, #18
 8002fc8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4619      	mov	r1, r3
 8002fdc:	481b      	ldr	r0, [pc, #108]	@ (800304c <I2Cx_MspInit+0xac>)
 8002fde:	f000 fccf 	bl	8003980 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4818      	ldr	r0, [pc, #96]	@ (800304c <I2Cx_MspInit+0xac>)
 8002fea:	f000 fcc9 	bl	8003980 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002fee:	4b16      	ldr	r3, [pc, #88]	@ (8003048 <I2Cx_MspInit+0xa8>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	4a15      	ldr	r2, [pc, #84]	@ (8003048 <I2Cx_MspInit+0xa8>)
 8002ff4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ffa:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <I2Cx_MspInit+0xa8>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <I2Cx_MspInit+0xa8>)
 8003008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300a:	4a0f      	ldr	r2, [pc, #60]	@ (8003048 <I2Cx_MspInit+0xa8>)
 800300c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003010:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003012:	4b0d      	ldr	r3, [pc, #52]	@ (8003048 <I2Cx_MspInit+0xa8>)
 8003014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003016:	4a0c      	ldr	r2, [pc, #48]	@ (8003048 <I2Cx_MspInit+0xa8>)
 8003018:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800301c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	210f      	movs	r1, #15
 8003022:	2021      	movs	r0, #33	@ 0x21
 8003024:	f000 fc35 	bl	8003892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003028:	2021      	movs	r0, #33	@ 0x21
 800302a:	f000 fc4e 	bl	80038ca <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	210f      	movs	r1, #15
 8003032:	2022      	movs	r0, #34	@ 0x22
 8003034:	f000 fc2d 	bl	8003892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003038:	2022      	movs	r0, #34	@ 0x22
 800303a:	f000 fc46 	bl	80038ca <HAL_NVIC_EnableIRQ>
}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	@ 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	48000400 	.word	0x48000400

08003050 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a12      	ldr	r2, [pc, #72]	@ (80030a4 <I2Cx_Init+0x54>)
 800305c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a11      	ldr	r2, [pc, #68]	@ (80030a8 <I2Cx_Init+0x58>)
 8003062:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff89 	bl	8002fa0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fe68 	bl	8003d64 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003094:	2100      	movs	r1, #0
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f001 fc32 	bl	8004900 <HAL_I2CEx_ConfigAnalogFilter>
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40005800 	.word	0x40005800
 80030a8:	00702681 	.word	0x00702681

080030ac <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af04      	add	r7, sp, #16
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	72fb      	strb	r3, [r7, #11]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	b299      	uxth	r1, r3
 80030ce:	88f8      	ldrh	r0, [r7, #6]
 80030d0:	893a      	ldrh	r2, [r7, #8]
 80030d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030d6:	9302      	str	r3, [sp, #8]
 80030d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4603      	mov	r3, r0
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f001 f830 	bl	8004148 <HAL_I2C_Mem_Read>
 80030e8:	4603      	mov	r3, r0
 80030ea:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80030f2:	7afb      	ldrb	r3, [r7, #11]
 80030f4:	4619      	mov	r1, r3
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f832 	bl	8003160 <I2Cx_Error>
  }
  return status;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b08a      	sub	sp, #40	@ 0x28
 800310a:	af04      	add	r7, sp, #16
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	4608      	mov	r0, r1
 8003110:	4611      	mov	r1, r2
 8003112:	461a      	mov	r2, r3
 8003114:	4603      	mov	r3, r0
 8003116:	72fb      	strb	r3, [r7, #11]
 8003118:	460b      	mov	r3, r1
 800311a:	813b      	strh	r3, [r7, #8]
 800311c:	4613      	mov	r3, r2
 800311e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003124:	7afb      	ldrb	r3, [r7, #11]
 8003126:	b299      	uxth	r1, r3
 8003128:	88f8      	ldrh	r0, [r7, #6]
 800312a:	893a      	ldrh	r2, [r7, #8]
 800312c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003130:	9302      	str	r3, [sp, #8]
 8003132:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	4603      	mov	r3, r0
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 feef 	bl	8003f20 <HAL_I2C_Mem_Write>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800314c:	7afb      	ldrb	r3, [r7, #11]
 800314e:	4619      	mov	r1, r3
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f805 	bl	8003160 <I2Cx_Error>
  }
  return status;
 8003156:	7dfb      	ldrb	r3, [r7, #23]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fe94 	bl	8003e9a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff ff6c 	bl	8003050 <I2Cx_Init>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003184:	4802      	ldr	r0, [pc, #8]	@ (8003190 <SENSOR_IO_Init+0x10>)
 8003186:	f7ff ff63 	bl	8003050 <I2Cx_Init>
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000c84 	.word	0x20000c84

08003194 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af02      	add	r7, sp, #8
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
 800319e:	460b      	mov	r3, r1
 80031a0:	71bb      	strb	r3, [r7, #6]
 80031a2:	4613      	mov	r3, r2
 80031a4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80031a6:	79bb      	ldrb	r3, [r7, #6]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	79f9      	ldrb	r1, [r7, #7]
 80031ac:	2301      	movs	r3, #1
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	1d7b      	adds	r3, r7, #5
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2301      	movs	r3, #1
 80031b6:	4803      	ldr	r0, [pc, #12]	@ (80031c4 <SENSOR_IO_Write+0x30>)
 80031b8:	f7ff ffa5 	bl	8003106 <I2Cx_WriteMultiple>
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000c84 	.word	0x20000c84

080031c8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	4603      	mov	r3, r0
 80031d0:	460a      	mov	r2, r1
 80031d2:	71fb      	strb	r3, [r7, #7]
 80031d4:	4613      	mov	r3, r2
 80031d6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80031dc:	79bb      	ldrb	r3, [r7, #6]
 80031de:	b29a      	uxth	r2, r3
 80031e0:	79f9      	ldrb	r1, [r7, #7]
 80031e2:	2301      	movs	r3, #1
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	f107 030f 	add.w	r3, r7, #15
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2301      	movs	r3, #1
 80031ee:	4804      	ldr	r0, [pc, #16]	@ (8003200 <SENSOR_IO_Read+0x38>)
 80031f0:	f7ff ff5c 	bl	80030ac <I2Cx_ReadMultiple>

  return read_value;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000c84 	.word	0x20000c84

08003204 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af02      	add	r7, sp, #8
 800320a:	603a      	str	r2, [r7, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
 8003212:	460b      	mov	r3, r1
 8003214:	71bb      	strb	r3, [r7, #6]
 8003216:	4613      	mov	r3, r2
 8003218:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800321a:	79bb      	ldrb	r3, [r7, #6]
 800321c:	b29a      	uxth	r2, r3
 800321e:	79f9      	ldrb	r1, [r7, #7]
 8003220:	88bb      	ldrh	r3, [r7, #4]
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2301      	movs	r3, #1
 800322a:	4804      	ldr	r0, [pc, #16]	@ (800323c <SENSOR_IO_ReadMultiple+0x38>)
 800322c:	f7ff ff3e 	bl	80030ac <I2Cx_ReadMultiple>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000c84 	.word	0x20000c84

08003240 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800324a:	2300      	movs	r3, #0
 800324c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800324e:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <BSP_ACCELERO_Init+0x78>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4798      	blx	r3
 8003254:	4603      	mov	r3, r0
 8003256:	2b6a      	cmp	r3, #106	@ 0x6a
 8003258:	d002      	beq.n	8003260 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	e025      	b.n	80032ac <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003260:	4b16      	ldr	r3, [pc, #88]	@ (80032bc <BSP_ACCELERO_Init+0x7c>)
 8003262:	4a15      	ldr	r2, [pc, #84]	@ (80032b8 <BSP_ACCELERO_Init+0x78>)
 8003264:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003266:	2330      	movs	r3, #48	@ 0x30
 8003268:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800326e:	2300      	movs	r3, #0
 8003270:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003272:	2340      	movs	r3, #64	@ 0x40
 8003274:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	72fb      	strb	r3, [r7, #11]

    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800327e:	797a      	ldrb	r2, [r7, #5]
 8003280:	7abb      	ldrb	r3, [r7, #10]
 8003282:	4313      	orrs	r3, r2
 8003284:	b2db      	uxtb	r3, r3
 8003286:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003288:	7a3b      	ldrb	r3, [r7, #8]
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	b2db      	uxtb	r3, r3
 8003290:	b21b      	sxth	r3, r3
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	b21a      	sxth	r2, r3
 8003296:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	b21b      	sxth	r3, r3
 800329e:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80032a0:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <BSP_ACCELERO_Init+0x7c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	89ba      	ldrh	r2, [r7, #12]
 80032a8:	4610      	mov	r0, r2
 80032aa:	4798      	blx	r3
  }

  return ret;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000014 	.word	0x20000014
 80032bc:	20000d60 	.word	0x20000d60

080032c0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80032c8:	4b08      	ldr	r3, [pc, #32]	@ (80032ec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80032d0:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80032da:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000d60 	.word	0x20000d60

080032f0 <BSP_ACCELERO_Enable_Motion_Detection_IT>:
/**
  * @brief  Enable LSM6DSL Significant Motion Detection interrupt.
  * @retval ACCELERO_OK if success, ACCELERO_ERROR otherwise.
  */
int32_t BSP_ACCELERO_Enable_Motion_Detection_IT(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
    printf("Motion detection enabled (GPIO test mode)\r\n");
 80032f4:	4802      	ldr	r0, [pc, #8]	@ (8003300 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x10>)
 80032f6:	f005 fdad 	bl	8008e54 <puts>
    return ACCELERO_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	0800d280 	.word	0x0800d280

08003304 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003312:	2110      	movs	r1, #16
 8003314:	20d4      	movs	r0, #212	@ 0xd4
 8003316:	f7ff ff57 	bl	80031c8 <SENSOR_IO_Read>
 800331a:	4603      	mov	r3, r0
 800331c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003322:	7bbb      	ldrb	r3, [r7, #14]
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800332a:	7bba      	ldrb	r2, [r7, #14]
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	4313      	orrs	r3, r2
 8003330:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003332:	7bbb      	ldrb	r3, [r7, #14]
 8003334:	461a      	mov	r2, r3
 8003336:	2110      	movs	r1, #16
 8003338:	20d4      	movs	r0, #212	@ 0xd4
 800333a:	f7ff ff2b 	bl	8003194 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800333e:	2112      	movs	r1, #18
 8003340:	20d4      	movs	r0, #212	@ 0xd4
 8003342:	f7ff ff41 	bl	80031c8 <SENSOR_IO_Read>
 8003346:	4603      	mov	r3, r0
 8003348:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	b29b      	uxth	r3, r3
 8003350:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003358:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800335a:	7bba      	ldrb	r2, [r7, #14]
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	4313      	orrs	r3, r2
 8003360:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003362:	7bbb      	ldrb	r3, [r7, #14]
 8003364:	461a      	mov	r2, r3
 8003366:	2112      	movs	r1, #18
 8003368:	20d4      	movs	r0, #212	@ 0xd4
 800336a:	f7ff ff13 	bl	8003194 <SENSOR_IO_Write>
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800337c:	2300      	movs	r3, #0
 800337e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003380:	2110      	movs	r1, #16
 8003382:	20d4      	movs	r0, #212	@ 0xd4
 8003384:	f7ff ff20 	bl	80031c8 <SENSOR_IO_Read>
 8003388:	4603      	mov	r3, r0
 800338a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	461a      	mov	r2, r3
 8003398:	2110      	movs	r1, #16
 800339a:	20d4      	movs	r0, #212	@ 0xd4
 800339c:	f7ff fefa 	bl	8003194 <SENSOR_IO_Write>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80033ac:	f7ff fee8 	bl	8003180 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80033b0:	210f      	movs	r1, #15
 80033b2:	20d4      	movs	r0, #212	@ 0xd4
 80033b4:	f7ff ff08 	bl	80031c8 <SENSOR_IO_Read>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	bd80      	pop	{r7, pc}

080033be <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80033cc:	2115      	movs	r1, #21
 80033ce:	20d4      	movs	r0, #212	@ 0xd4
 80033d0:	f7ff fefa 	bl	80031c8 <SENSOR_IO_Read>
 80033d4:	4603      	mov	r3, r0
 80033d6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	f023 0310 	bic.w	r3, r3, #16
 80033de:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	f043 0310 	orr.w	r3, r3, #16
 80033ec:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	461a      	mov	r2, r3
 80033f2:	2115      	movs	r1, #21
 80033f4:	20d4      	movs	r0, #212	@ 0xd4
 80033f6:	f7ff fecd 	bl	8003194 <SENSOR_IO_Write>
}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800341a:	2110      	movs	r1, #16
 800341c:	20d4      	movs	r0, #212	@ 0xd4
 800341e:	f7ff fed3 	bl	80031c8 <SENSOR_IO_Read>
 8003422:	4603      	mov	r3, r0
 8003424:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003426:	f107 0208 	add.w	r2, r7, #8
 800342a:	2306      	movs	r3, #6
 800342c:	2128      	movs	r1, #40	@ 0x28
 800342e:	20d4      	movs	r0, #212	@ 0xd4
 8003430:	f7ff fee8 	bl	8003204 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003434:	2300      	movs	r3, #0
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e01a      	b.n	8003470 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800343a:	7ffb      	ldrb	r3, [r7, #31]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	3301      	adds	r3, #1
 8003440:	3320      	adds	r3, #32
 8003442:	443b      	add	r3, r7
 8003444:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	b29b      	uxth	r3, r3
 800344c:	7ffa      	ldrb	r2, [r7, #31]
 800344e:	0052      	lsls	r2, r2, #1
 8003450:	3220      	adds	r2, #32
 8003452:	443a      	add	r2, r7
 8003454:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003458:	4413      	add	r3, r2
 800345a:	b29a      	uxth	r2, r3
 800345c:	7ffb      	ldrb	r3, [r7, #31]
 800345e:	b212      	sxth	r2, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	3320      	adds	r3, #32
 8003464:	443b      	add	r3, r7
 8003466:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800346a:	7ffb      	ldrb	r3, [r7, #31]
 800346c:	3301      	adds	r3, #1
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	7ffb      	ldrb	r3, [r7, #31]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d9e1      	bls.n	800343a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b0c      	cmp	r3, #12
 800347e:	d829      	bhi.n	80034d4 <LSM6DSL_AccReadXYZ+0xd0>
 8003480:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <LSM6DSL_AccReadXYZ+0x84>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	080034bd 	.word	0x080034bd
 800348c:	080034d5 	.word	0x080034d5
 8003490:	080034d5 	.word	0x080034d5
 8003494:	080034d5 	.word	0x080034d5
 8003498:	080034cf 	.word	0x080034cf
 800349c:	080034d5 	.word	0x080034d5
 80034a0:	080034d5 	.word	0x080034d5
 80034a4:	080034d5 	.word	0x080034d5
 80034a8:	080034c3 	.word	0x080034c3
 80034ac:	080034d5 	.word	0x080034d5
 80034b0:	080034d5 	.word	0x080034d5
 80034b4:	080034d5 	.word	0x080034d5
 80034b8:	080034c9 	.word	0x080034c9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80034bc:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <LSM6DSL_AccReadXYZ+0x11c>)
 80034be:	61bb      	str	r3, [r7, #24]
    break;
 80034c0:	e008      	b.n	80034d4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80034c2:	4b18      	ldr	r3, [pc, #96]	@ (8003524 <LSM6DSL_AccReadXYZ+0x120>)
 80034c4:	61bb      	str	r3, [r7, #24]
    break;
 80034c6:	e005      	b.n	80034d4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80034c8:	4b17      	ldr	r3, [pc, #92]	@ (8003528 <LSM6DSL_AccReadXYZ+0x124>)
 80034ca:	61bb      	str	r3, [r7, #24]
    break;
 80034cc:	e002      	b.n	80034d4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80034ce:	4b17      	ldr	r3, [pc, #92]	@ (800352c <LSM6DSL_AccReadXYZ+0x128>)
 80034d0:	61bb      	str	r3, [r7, #24]
    break;    
 80034d2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e01a      	b.n	8003510 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80034da:	7ffb      	ldrb	r3, [r7, #31]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	3320      	adds	r3, #32
 80034e0:	443b      	add	r3, r7
 80034e2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80034f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f6:	7ffb      	ldrb	r3, [r7, #31]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003502:	ee17 2a90 	vmov	r2, s15
 8003506:	b212      	sxth	r2, r2
 8003508:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800350a:	7ffb      	ldrb	r3, [r7, #31]
 800350c:	3301      	adds	r3, #1
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	7ffb      	ldrb	r3, [r7, #31]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d9e1      	bls.n	80034da <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	3d79db23 	.word	0x3d79db23
 8003524:	3df9db23 	.word	0x3df9db23
 8003528:	3e79db23 	.word	0x3e79db23
 800352c:	3ef9db23 	.word	0x3ef9db23

08003530 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003534:	4b17      	ldr	r3, [pc, #92]	@ (8003594 <SystemInit+0x64>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353a:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <SystemInit+0x64>)
 800353c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003544:	4b14      	ldr	r3, [pc, #80]	@ (8003598 <SystemInit+0x68>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a13      	ldr	r2, [pc, #76]	@ (8003598 <SystemInit+0x68>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003550:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <SystemInit+0x68>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <SystemInit+0x68>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a0f      	ldr	r2, [pc, #60]	@ (8003598 <SystemInit+0x68>)
 800355c:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003560:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003564:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8003566:	4b0c      	ldr	r3, [pc, #48]	@ (8003598 <SystemInit+0x68>)
 8003568:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800356c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <SystemInit+0x68>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a09      	ldr	r2, [pc, #36]	@ (8003598 <SystemInit+0x68>)
 8003574:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003578:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800357a:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <SystemInit+0x68>)
 800357c:	2200      	movs	r2, #0
 800357e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003580:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <SystemInit+0x64>)
 8003582:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003586:	609a      	str	r2, [r3, #8]
#endif
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000ed00 	.word	0xe000ed00
 8003598:	40021000 	.word	0x40021000

0800359c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035a6:	2003      	movs	r0, #3
 80035a8:	f000 f968 	bl	800387c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035ac:	200f      	movs	r0, #15
 80035ae:	f000 f815 	bl	80035dc <HAL_InitTick>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	71fb      	strb	r3, [r7, #7]
 80035bc:	e001      	b.n	80035c2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035be:	f000 f805 	bl	80035cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035c2:	79fb      	ldrb	r3, [r7, #7]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80035e8:	4b17      	ldr	r3, [pc, #92]	@ (8003648 <HAL_InitTick+0x6c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d023      	beq.n	8003638 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80035f0:	4b16      	ldr	r3, [pc, #88]	@ (800364c <HAL_InitTick+0x70>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b14      	ldr	r3, [pc, #80]	@ (8003648 <HAL_InitTick+0x6c>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f96d 	bl	80038e6 <HAL_SYSTICK_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10f      	bne.n	8003632 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b0f      	cmp	r3, #15
 8003616:	d809      	bhi.n	800362c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003618:	2200      	movs	r2, #0
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	f04f 30ff 	mov.w	r0, #4294967295
 8003620:	f000 f937 	bl	8003892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003624:	4a0a      	ldr	r2, [pc, #40]	@ (8003650 <HAL_InitTick+0x74>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e007      	b.n	800363c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e004      	b.n	800363c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
 8003636:	e001      	b.n	800363c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000050 	.word	0x20000050
 800364c:	20000048 	.word	0x20000048
 8003650:	2000004c 	.word	0x2000004c

08003654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003658:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <HAL_IncTick+0x20>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_IncTick+0x24>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4413      	add	r3, r2
 8003664:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <HAL_IncTick+0x24>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000050 	.word	0x20000050
 8003678:	20000d64 	.word	0x20000d64

0800367c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return uwTick;
 8003680:	4b03      	ldr	r3, [pc, #12]	@ (8003690 <HAL_GetTick+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000d64 	.word	0x20000d64

08003694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff ffee 	bl	800367c <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d005      	beq.n	80036ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80036ae:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <HAL_Delay+0x44>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ba:	bf00      	nop
 80036bc:	f7ff ffde 	bl	800367c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8f7      	bhi.n	80036bc <HAL_Delay+0x28>
  {
  }
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000050 	.word	0x20000050

080036dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036f8:	4013      	ands	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800370e:	4a04      	ldr	r2, [pc, #16]	@ (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	60d3      	str	r3, [r2, #12]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003728:	4b04      	ldr	r3, [pc, #16]	@ (800373c <__NVIC_GetPriorityGrouping+0x18>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	f003 0307 	and.w	r3, r3, #7
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	2b00      	cmp	r3, #0
 8003750:	db0b      	blt.n	800376a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	f003 021f 	and.w	r2, r3, #31
 8003758:	4907      	ldr	r1, [pc, #28]	@ (8003778 <__NVIC_EnableIRQ+0x38>)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2001      	movs	r0, #1
 8003762:	fa00 f202 	lsl.w	r2, r0, r2
 8003766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000e100 	.word	0xe000e100

0800377c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	6039      	str	r1, [r7, #0]
 8003786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378c:	2b00      	cmp	r3, #0
 800378e:	db0a      	blt.n	80037a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	490c      	ldr	r1, [pc, #48]	@ (80037c8 <__NVIC_SetPriority+0x4c>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	0112      	lsls	r2, r2, #4
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	440b      	add	r3, r1
 80037a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a4:	e00a      	b.n	80037bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4908      	ldr	r1, [pc, #32]	@ (80037cc <__NVIC_SetPriority+0x50>)
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	3b04      	subs	r3, #4
 80037b4:	0112      	lsls	r2, r2, #4
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	440b      	add	r3, r1
 80037ba:	761a      	strb	r2, [r3, #24]
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000e100 	.word	0xe000e100
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	@ 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f1c3 0307 	rsb	r3, r3, #7
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	bf28      	it	cs
 80037ee:	2304      	movcs	r3, #4
 80037f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3304      	adds	r3, #4
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d902      	bls.n	8003800 <NVIC_EncodePriority+0x30>
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3b03      	subs	r3, #3
 80037fe:	e000      	b.n	8003802 <NVIC_EncodePriority+0x32>
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43da      	mvns	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	401a      	ands	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003818:	f04f 31ff 	mov.w	r1, #4294967295
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	fa01 f303 	lsl.w	r3, r1, r3
 8003822:	43d9      	mvns	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003828:	4313      	orrs	r3, r2
         );
}
 800382a:	4618      	mov	r0, r3
 800382c:	3724      	adds	r7, #36	@ 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3b01      	subs	r3, #1
 8003844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003848:	d301      	bcc.n	800384e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800384a:	2301      	movs	r3, #1
 800384c:	e00f      	b.n	800386e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800384e:	4a0a      	ldr	r2, [pc, #40]	@ (8003878 <SysTick_Config+0x40>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3b01      	subs	r3, #1
 8003854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003856:	210f      	movs	r1, #15
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	f7ff ff8e 	bl	800377c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003860:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <SysTick_Config+0x40>)
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003866:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <SysTick_Config+0x40>)
 8003868:	2207      	movs	r2, #7
 800386a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	e000e010 	.word	0xe000e010

0800387c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff29 	bl	80036dc <__NVIC_SetPriorityGrouping>
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	4603      	mov	r3, r0
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038a4:	f7ff ff3e 	bl	8003724 <__NVIC_GetPriorityGrouping>
 80038a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	6978      	ldr	r0, [r7, #20]
 80038b0:	f7ff ff8e 	bl	80037d0 <NVIC_EncodePriority>
 80038b4:	4602      	mov	r2, r0
 80038b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ba:	4611      	mov	r1, r2
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff5d 	bl	800377c <__NVIC_SetPriority>
}
 80038c2:	bf00      	nop
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4603      	mov	r3, r0
 80038d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff31 	bl	8003740 <__NVIC_EnableIRQ>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ffa2 	bl	8003838 <SysTick_Config>
 80038f4:	4603      	mov	r3, r0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d005      	beq.n	8003922 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2204      	movs	r2, #4
 800391a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e029      	b.n	8003976 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 020e 	bic.w	r2, r2, #14
 8003930:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	f003 021c 	and.w	r2, r3, #28
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	2101      	movs	r1, #1
 8003950:	fa01 f202 	lsl.w	r2, r1, r2
 8003954:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
    }
  }
  return status;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398e:	e17f      	b.n	8003c90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2101      	movs	r1, #1
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	4013      	ands	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8171 	beq.w	8003c8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d005      	beq.n	80039c0 <HAL_GPIO_Init+0x40>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d130      	bne.n	8003a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f6:	2201      	movs	r2, #1
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0201 	and.w	r2, r3, #1
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d118      	bne.n	8003a60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a34:	2201      	movs	r2, #1
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	08db      	lsrs	r3, r3, #3
 8003a4a:	f003 0201 	and.w	r2, r3, #1
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d017      	beq.n	8003a9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	2203      	movs	r2, #3
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d123      	bne.n	8003af0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	08da      	lsrs	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3208      	adds	r2, #8
 8003ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	220f      	movs	r2, #15
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	08da      	lsrs	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3208      	adds	r2, #8
 8003aea:	6939      	ldr	r1, [r7, #16]
 8003aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2203      	movs	r2, #3
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 0203 	and.w	r2, r3, #3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80ac 	beq.w	8003c8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b32:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb0 <HAL_GPIO_Init+0x330>)
 8003b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b36:	4a5e      	ldr	r2, [pc, #376]	@ (8003cb0 <HAL_GPIO_Init+0x330>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8003cb0 <HAL_GPIO_Init+0x330>)
 8003b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b4a:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb4 <HAL_GPIO_Init+0x334>)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	089b      	lsrs	r3, r3, #2
 8003b50:	3302      	adds	r3, #2
 8003b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	220f      	movs	r2, #15
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b74:	d025      	beq.n	8003bc2 <HAL_GPIO_Init+0x242>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4f      	ldr	r2, [pc, #316]	@ (8003cb8 <HAL_GPIO_Init+0x338>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d01f      	beq.n	8003bbe <HAL_GPIO_Init+0x23e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4e      	ldr	r2, [pc, #312]	@ (8003cbc <HAL_GPIO_Init+0x33c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d019      	beq.n	8003bba <HAL_GPIO_Init+0x23a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4d      	ldr	r2, [pc, #308]	@ (8003cc0 <HAL_GPIO_Init+0x340>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_GPIO_Init+0x236>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a4c      	ldr	r2, [pc, #304]	@ (8003cc4 <HAL_GPIO_Init+0x344>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00d      	beq.n	8003bb2 <HAL_GPIO_Init+0x232>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a4b      	ldr	r2, [pc, #300]	@ (8003cc8 <HAL_GPIO_Init+0x348>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <HAL_GPIO_Init+0x22e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ccc <HAL_GPIO_Init+0x34c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_GPIO_Init+0x22a>
 8003ba6:	2306      	movs	r3, #6
 8003ba8:	e00c      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003baa:	2307      	movs	r3, #7
 8003bac:	e00a      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bae:	2305      	movs	r3, #5
 8003bb0:	e008      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	e006      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e004      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e002      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	f002 0203 	and.w	r2, r2, #3
 8003bca:	0092      	lsls	r2, r2, #2
 8003bcc:	4093      	lsls	r3, r2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd4:	4937      	ldr	r1, [pc, #220]	@ (8003cb4 <HAL_GPIO_Init+0x334>)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	089b      	lsrs	r3, r3, #2
 8003bda:	3302      	adds	r3, #2
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003be2:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd0 <HAL_GPIO_Init+0x350>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c06:	4a32      	ldr	r2, [pc, #200]	@ (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c0c:	4b30      	ldr	r3, [pc, #192]	@ (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c30:	4a27      	ldr	r2, [pc, #156]	@ (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c36:	4b26      	ldr	r3, [pc, #152]	@ (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c60:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c84:	4a12      	ldr	r2, [pc, #72]	@ (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f47f ae78 	bne.w	8003990 <HAL_GPIO_Init+0x10>
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	48000400 	.word	0x48000400
 8003cbc:	48000800 	.word	0x48000800
 8003cc0:	48000c00 	.word	0x48000c00
 8003cc4:	48001000 	.word	0x48001000
 8003cc8:	48001400 	.word	0x48001400
 8003ccc:	48001800 	.word	0x48001800
 8003cd0:	40010400 	.word	0x40010400

08003cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	887b      	ldrh	r3, [r7, #2]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
 8003cf0:	e001      	b.n	8003cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
 8003d10:	4613      	mov	r3, r2
 8003d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d14:	787b      	ldrb	r3, [r7, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d20:	e002      	b.n	8003d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d006      	beq.n	8003d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d4a:	4a05      	ldr	r2, [pc, #20]	@ (8003d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fd fc1a 	bl	800158c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40010400 	.word	0x40010400

08003d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e08d      	b.n	8003e92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8b4 	bl	8003ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	@ 0x24
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003db4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	e006      	b.n	8003dec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d108      	bne.n	8003e06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	e007      	b.n	8003e16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69d9      	ldr	r1, [r3, #28]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e021      	b.n	8003ef0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	@ 0x24
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f821 	bl	8003f0c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	4608      	mov	r0, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	817b      	strh	r3, [r7, #10]
 8003f32:	460b      	mov	r3, r1
 8003f34:	813b      	strh	r3, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	f040 80f9 	bne.w	800413a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_I2C_Mem_Write+0x34>
 8003f4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d105      	bne.n	8003f60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0ed      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_I2C_Mem_Write+0x4e>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e0e6      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f76:	f7ff fb81 	bl	800367c <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	2319      	movs	r3, #25
 8003f82:	2201      	movs	r2, #1
 8003f84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fac3 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0d1      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2221      	movs	r2, #33	@ 0x21
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2240      	movs	r2, #64	@ 0x40
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a3a      	ldr	r2, [r7, #32]
 8003fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fc0:	88f8      	ldrh	r0, [r7, #6]
 8003fc2:	893a      	ldrh	r2, [r7, #8]
 8003fc4:	8979      	ldrh	r1, [r7, #10]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	4603      	mov	r3, r0
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f9d3 	bl	800437c <I2C_RequestMemoryWrite>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0a9      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2bff      	cmp	r3, #255	@ 0xff
 8003ff0:	d90e      	bls.n	8004010 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	22ff      	movs	r2, #255	@ 0xff
 8003ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	8979      	ldrh	r1, [r7, #10]
 8004000:	2300      	movs	r3, #0
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fc47 	bl	800489c <I2C_TransferConfig>
 800400e:	e00f      	b.n	8004030 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401e:	b2da      	uxtb	r2, r3
 8004020:	8979      	ldrh	r1, [r7, #10]
 8004022:	2300      	movs	r3, #0
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fc36 	bl	800489c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fac6 	bl	80045c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e07b      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	781a      	ldrb	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d034      	beq.n	80040e8 <HAL_I2C_Mem_Write+0x1c8>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d130      	bne.n	80040e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	@ 0x80
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fa3f 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e04d      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2bff      	cmp	r3, #255	@ 0xff
 80040a8:	d90e      	bls.n	80040c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	22ff      	movs	r2, #255	@ 0xff
 80040ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	8979      	ldrh	r1, [r7, #10]
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fbeb 	bl	800489c <I2C_TransferConfig>
 80040c6:	e00f      	b.n	80040e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	8979      	ldrh	r1, [r7, #10]
 80040da:	2300      	movs	r3, #0
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fbda 	bl	800489c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d19e      	bne.n	8004030 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 faac 	bl	8004654 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e01a      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2220      	movs	r2, #32
 800410c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_I2C_Mem_Write+0x224>)
 800411a:	400b      	ands	r3, r1
 800411c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	fe00e800 	.word	0xfe00e800

08004148 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4603      	mov	r3, r0
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	460b      	mov	r3, r1
 800415c:	813b      	strh	r3, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	f040 80fd 	bne.w	800436a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_I2C_Mem_Read+0x34>
 8004176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004178:	2b00      	cmp	r3, #0
 800417a:	d105      	bne.n	8004188 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004182:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0f1      	b.n	800436c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_I2C_Mem_Read+0x4e>
 8004192:	2302      	movs	r3, #2
 8004194:	e0ea      	b.n	800436c <HAL_I2C_Mem_Read+0x224>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800419e:	f7ff fa6d 	bl	800367c <HAL_GetTick>
 80041a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	2319      	movs	r3, #25
 80041aa:	2201      	movs	r2, #1
 80041ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f9af 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0d5      	b.n	800436c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2222      	movs	r2, #34	@ 0x22
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2240      	movs	r2, #64	@ 0x40
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a3a      	ldr	r2, [r7, #32]
 80041da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041e8:	88f8      	ldrh	r0, [r7, #6]
 80041ea:	893a      	ldrh	r2, [r7, #8]
 80041ec:	8979      	ldrh	r1, [r7, #10]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4603      	mov	r3, r0
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f913 	bl	8004424 <I2C_RequestMemoryRead>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0ad      	b.n	800436c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	2bff      	cmp	r3, #255	@ 0xff
 8004218:	d90e      	bls.n	8004238 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004224:	b2da      	uxtb	r2, r3
 8004226:	8979      	ldrh	r1, [r7, #10]
 8004228:	4b52      	ldr	r3, [pc, #328]	@ (8004374 <HAL_I2C_Mem_Read+0x22c>)
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fb33 	bl	800489c <I2C_TransferConfig>
 8004236:	e00f      	b.n	8004258 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004246:	b2da      	uxtb	r2, r3
 8004248:	8979      	ldrh	r1, [r7, #10]
 800424a:	4b4a      	ldr	r3, [pc, #296]	@ (8004374 <HAL_I2C_Mem_Read+0x22c>)
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fb22 	bl	800489c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425e:	2200      	movs	r2, #0
 8004260:	2104      	movs	r1, #4
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f956 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e07c      	b.n	800436c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d034      	beq.n	8004318 <HAL_I2C_Mem_Read+0x1d0>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d130      	bne.n	8004318 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042bc:	2200      	movs	r2, #0
 80042be:	2180      	movs	r1, #128	@ 0x80
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f927 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e04d      	b.n	800436c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2bff      	cmp	r3, #255	@ 0xff
 80042d8:	d90e      	bls.n	80042f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	8979      	ldrh	r1, [r7, #10]
 80042e8:	2300      	movs	r3, #0
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fad3 	bl	800489c <I2C_TransferConfig>
 80042f6:	e00f      	b.n	8004318 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	b2da      	uxtb	r2, r3
 8004308:	8979      	ldrh	r1, [r7, #10]
 800430a:	2300      	movs	r3, #0
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fac2 	bl	800489c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d19a      	bne.n	8004258 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 f994 	bl	8004654 <I2C_WaitOnSTOPFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e01a      	b.n	800436c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2220      	movs	r2, #32
 800433c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b0b      	ldr	r3, [pc, #44]	@ (8004378 <HAL_I2C_Mem_Read+0x230>)
 800434a:	400b      	ands	r3, r1
 800434c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800436a:	2302      	movs	r3, #2
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	80002400 	.word	0x80002400
 8004378:	fe00e800 	.word	0xfe00e800

0800437c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	461a      	mov	r2, r3
 800438a:	4603      	mov	r3, r0
 800438c:	817b      	strh	r3, [r7, #10]
 800438e:	460b      	mov	r3, r1
 8004390:	813b      	strh	r3, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	8979      	ldrh	r1, [r7, #10]
 800439c:	4b20      	ldr	r3, [pc, #128]	@ (8004420 <I2C_RequestMemoryWrite+0xa4>)
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fa79 	bl	800489c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	69b9      	ldr	r1, [r7, #24]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f909 	bl	80045c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e02c      	b.n	8004418 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d105      	bne.n	80043d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043c4:	893b      	ldrh	r3, [r7, #8]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80043ce:	e015      	b.n	80043fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043d0:	893b      	ldrh	r3, [r7, #8]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	69b9      	ldr	r1, [r7, #24]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f8ef 	bl	80045c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e012      	b.n	8004418 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043f2:	893b      	ldrh	r3, [r7, #8]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2200      	movs	r2, #0
 8004404:	2180      	movs	r1, #128	@ 0x80
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f884 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	80002000 	.word	0x80002000

08004424 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af02      	add	r7, sp, #8
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	4608      	mov	r0, r1
 800442e:	4611      	mov	r1, r2
 8004430:	461a      	mov	r2, r3
 8004432:	4603      	mov	r3, r0
 8004434:	817b      	strh	r3, [r7, #10]
 8004436:	460b      	mov	r3, r1
 8004438:	813b      	strh	r3, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	8979      	ldrh	r1, [r7, #10]
 8004444:	4b20      	ldr	r3, [pc, #128]	@ (80044c8 <I2C_RequestMemoryRead+0xa4>)
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	2300      	movs	r3, #0
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fa26 	bl	800489c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	69b9      	ldr	r1, [r7, #24]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f8b6 	bl	80045c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e02c      	b.n	80044be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004464:	88fb      	ldrh	r3, [r7, #6]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800446a:	893b      	ldrh	r3, [r7, #8]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	629a      	str	r2, [r3, #40]	@ 0x28
 8004474:	e015      	b.n	80044a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004476:	893b      	ldrh	r3, [r7, #8]
 8004478:	0a1b      	lsrs	r3, r3, #8
 800447a:	b29b      	uxth	r3, r3
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	69b9      	ldr	r1, [r7, #24]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f89c 	bl	80045c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e012      	b.n	80044be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004498:	893b      	ldrh	r3, [r7, #8]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2200      	movs	r2, #0
 80044aa:	2140      	movs	r1, #64	@ 0x40
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f831 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	80002000 	.word	0x80002000

080044cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d103      	bne.n	80044ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2200      	movs	r2, #0
 80044e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d007      	beq.n	8004508 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	619a      	str	r2, [r3, #24]
  }
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004524:	e03b      	b.n	800459e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	6839      	ldr	r1, [r7, #0]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f8d6 	bl	80046dc <I2C_IsErrorOccurred>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e041      	b.n	80045be <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d02d      	beq.n	800459e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004542:	f7ff f89b 	bl	800367c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d302      	bcc.n	8004558 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d122      	bne.n	800459e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	429a      	cmp	r2, r3
 8004574:	d113      	bne.n	800459e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	f043 0220 	orr.w	r2, r3, #32
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e00f      	b.n	80045be <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d0b4      	beq.n	8004526 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d2:	e033      	b.n	800463c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f87f 	bl	80046dc <I2C_IsErrorOccurred>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e031      	b.n	800464c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d025      	beq.n	800463c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f0:	f7ff f844 	bl	800367c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11a      	bne.n	800463c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d013      	beq.n	800463c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e007      	b.n	800464c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d1c4      	bne.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004660:	e02f      	b.n	80046c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f838 	bl	80046dc <I2C_IsErrorOccurred>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e02d      	b.n	80046d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7ff f801 	bl	800367c <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11a      	bne.n	80046c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b20      	cmp	r3, #32
 8004698:	d013      	beq.n	80046c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e007      	b.n	80046d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d1c8      	bne.n	8004662 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	@ 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	d068      	beq.n	80047da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2210      	movs	r2, #16
 800470e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004710:	e049      	b.n	80047a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d045      	beq.n	80047a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800471a:	f7fe ffaf 	bl	800367c <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	d302      	bcc.n	8004730 <I2C_IsErrorOccurred+0x54>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d13a      	bne.n	80047a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800473a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004742:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800474e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004752:	d121      	bne.n	8004798 <I2C_IsErrorOccurred+0xbc>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800475a:	d01d      	beq.n	8004798 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	2b20      	cmp	r3, #32
 8004760:	d01a      	beq.n	8004798 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004770:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004772:	f7fe ff83 	bl	800367c <HAL_GetTick>
 8004776:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004778:	e00e      	b.n	8004798 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800477a:	f7fe ff7f 	bl	800367c <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b19      	cmp	r3, #25
 8004786:	d907      	bls.n	8004798 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	f043 0320 	orr.w	r3, r3, #32
 800478e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004796:	e006      	b.n	80047a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d1e9      	bne.n	800477a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d003      	beq.n	80047bc <I2C_IsErrorOccurred+0xe0>
 80047b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0aa      	beq.n	8004712 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2220      	movs	r2, #32
 80047ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00b      	beq.n	8004804 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f043 0308 	orr.w	r3, r3, #8
 8004814:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800481e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	f043 0302 	orr.w	r3, r3, #2
 8004836:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004840:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01c      	beq.n	800488a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff fe3b 	bl	80044cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6859      	ldr	r1, [r3, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <I2C_IsErrorOccurred+0x1bc>)
 8004862:	400b      	ands	r3, r1
 8004864:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	431a      	orrs	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800488a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800488e:	4618      	mov	r0, r3
 8004890:	3728      	adds	r7, #40	@ 0x28
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	fe00e800 	.word	0xfe00e800

0800489c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	817b      	strh	r3, [r7, #10]
 80048aa:	4613      	mov	r3, r2
 80048ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ae:	897b      	ldrh	r3, [r7, #10]
 80048b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048b4:	7a7b      	ldrb	r3, [r7, #9]
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048bc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048ca:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	0d5b      	lsrs	r3, r3, #21
 80048d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80048da:	4b08      	ldr	r3, [pc, #32]	@ (80048fc <I2C_TransferConfig+0x60>)
 80048dc:	430b      	orrs	r3, r1
 80048de:	43db      	mvns	r3, r3
 80048e0:	ea02 0103 	and.w	r1, r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	03ff63ff 	.word	0x03ff63ff

08004900 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b20      	cmp	r3, #32
 8004914:	d138      	bne.n	8004988 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004920:	2302      	movs	r3, #2
 8004922:	e032      	b.n	800498a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	@ 0x24
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004952:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800499c:	4b04      	ldr	r3, [pc, #16]	@ (80049b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40007000 	.word	0x40007000

080049b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e3ca      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c6:	4b97      	ldr	r3, [pc, #604]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d0:	4b94      	ldr	r3, [pc, #592]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80e4 	beq.w	8004bb0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_RCC_OscConfig+0x4a>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b0c      	cmp	r3, #12
 80049f2:	f040 808b 	bne.w	8004b0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	f040 8087 	bne.w	8004b0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049fe:	4b89      	ldr	r3, [pc, #548]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <HAL_RCC_OscConfig+0x62>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e3a2      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1a      	ldr	r2, [r3, #32]
 8004a1a:	4b82      	ldr	r3, [pc, #520]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <HAL_RCC_OscConfig+0x7c>
 8004a26:	4b7f      	ldr	r3, [pc, #508]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a2e:	e005      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
 8004a30:	4b7c      	ldr	r3, [pc, #496]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a36:	091b      	lsrs	r3, r3, #4
 8004a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d223      	bcs.n	8004a88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fd55 	bl	80054f4 <RCC_SetFlashLatencyFromMSIRange>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e383      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a54:	4b73      	ldr	r3, [pc, #460]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a72      	ldr	r2, [pc, #456]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a5a:	f043 0308 	orr.w	r3, r3, #8
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	4b70      	ldr	r3, [pc, #448]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	496d      	ldr	r1, [pc, #436]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a72:	4b6c      	ldr	r3, [pc, #432]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	4968      	ldr	r1, [pc, #416]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	604b      	str	r3, [r1, #4]
 8004a86:	e025      	b.n	8004ad4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a88:	4b66      	ldr	r3, [pc, #408]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a65      	ldr	r2, [pc, #404]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a8e:	f043 0308 	orr.w	r3, r3, #8
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	4b63      	ldr	r3, [pc, #396]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	4960      	ldr	r1, [pc, #384]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	495b      	ldr	r1, [pc, #364]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fd15 	bl	80054f4 <RCC_SetFlashLatencyFromMSIRange>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e343      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ad4:	f000 fc4a 	bl	800536c <HAL_RCC_GetSysClockFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b52      	ldr	r3, [pc, #328]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	091b      	lsrs	r3, r3, #4
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	4950      	ldr	r1, [pc, #320]	@ (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
 8004af0:	4a4e      	ldr	r2, [pc, #312]	@ (8004c2c <HAL_RCC_OscConfig+0x278>)
 8004af2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004af4:	4b4e      	ldr	r3, [pc, #312]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe fd6f 	bl	80035dc <HAL_InitTick>
 8004afe:	4603      	mov	r3, r0
 8004b00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d052      	beq.n	8004bae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	e327      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d032      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b14:	4b43      	ldr	r3, [pc, #268]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a42      	ldr	r2, [pc, #264]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b20:	f7fe fdac 	bl	800367c <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b28:	f7fe fda8 	bl	800367c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e310      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b46:	4b37      	ldr	r3, [pc, #220]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a36      	ldr	r2, [pc, #216]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b4c:	f043 0308 	orr.w	r3, r3, #8
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b34      	ldr	r3, [pc, #208]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	4931      	ldr	r1, [pc, #196]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b64:	4b2f      	ldr	r3, [pc, #188]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	492c      	ldr	r1, [pc, #176]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	604b      	str	r3, [r1, #4]
 8004b78:	e01a      	b.n	8004bb0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a29      	ldr	r2, [pc, #164]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b86:	f7fe fd79 	bl	800367c <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b8e:	f7fe fd75 	bl	800367c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e2dd      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ba0:	4b20      	ldr	r3, [pc, #128]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f0      	bne.n	8004b8e <HAL_RCC_OscConfig+0x1da>
 8004bac:	e000      	b.n	8004bb0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d074      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d005      	beq.n	8004bce <HAL_RCC_OscConfig+0x21a>
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d10e      	bne.n	8004be6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d10b      	bne.n	8004be6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bce:	4b15      	ldr	r3, [pc, #84]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d064      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x2f0>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d160      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e2ba      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bee:	d106      	bne.n	8004bfe <HAL_RCC_OscConfig+0x24a>
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	e026      	b.n	8004c4c <HAL_RCC_OscConfig+0x298>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c06:	d115      	bne.n	8004c34 <HAL_RCC_OscConfig+0x280>
 8004c08:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a05      	ldr	r2, [pc, #20]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004c0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b03      	ldr	r3, [pc, #12]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a02      	ldr	r2, [pc, #8]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	e014      	b.n	8004c4c <HAL_RCC_OscConfig+0x298>
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000
 8004c28:	0800d2ac 	.word	0x0800d2ac
 8004c2c:	20000048 	.word	0x20000048
 8004c30:	2000004c 	.word	0x2000004c
 8004c34:	4ba0      	ldr	r3, [pc, #640]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a9f      	ldr	r2, [pc, #636]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	4b9d      	ldr	r3, [pc, #628]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a9c      	ldr	r2, [pc, #624]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d013      	beq.n	8004c7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fe fd12 	bl	800367c <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c5c:	f7fe fd0e 	bl	800367c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	@ 0x64
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e276      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c6e:	4b92      	ldr	r3, [pc, #584]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x2a8>
 8004c7a:	e014      	b.n	8004ca6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fe fcfe 	bl	800367c <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c84:	f7fe fcfa 	bl	800367c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	@ 0x64
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e262      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c96:	4b88      	ldr	r3, [pc, #544]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x2d0>
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d060      	beq.n	8004d74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d005      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x310>
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	2b0c      	cmp	r3, #12
 8004cbc:	d119      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d116      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc4:	4b7c      	ldr	r3, [pc, #496]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_RCC_OscConfig+0x328>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e23f      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cdc:	4b76      	ldr	r3, [pc, #472]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	061b      	lsls	r3, r3, #24
 8004cea:	4973      	ldr	r1, [pc, #460]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cf0:	e040      	b.n	8004d74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d023      	beq.n	8004d42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a6e      	ldr	r2, [pc, #440]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7fe fcb9 	bl	800367c <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0e:	f7fe fcb5 	bl	800367c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e21d      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d20:	4b65      	ldr	r3, [pc, #404]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2c:	4b62      	ldr	r3, [pc, #392]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	061b      	lsls	r3, r3, #24
 8004d3a:	495f      	ldr	r1, [pc, #380]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
 8004d40:	e018      	b.n	8004d74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d42:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a5c      	ldr	r2, [pc, #368]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4e:	f7fe fc95 	bl	800367c <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d56:	f7fe fc91 	bl	800367c <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e1f9      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d68:	4b53      	ldr	r3, [pc, #332]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f0      	bne.n	8004d56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d03c      	beq.n	8004dfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01c      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d88:	4b4b      	ldr	r3, [pc, #300]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d8e:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fe fc70 	bl	800367c <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da0:	f7fe fc6c 	bl	800367c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e1d4      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004db2:	4b41      	ldr	r3, [pc, #260]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0ef      	beq.n	8004da0 <HAL_RCC_OscConfig+0x3ec>
 8004dc0:	e01b      	b.n	8004dfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dc8:	4a3b      	ldr	r2, [pc, #236]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd2:	f7fe fc53 	bl	800367c <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dda:	f7fe fc4f 	bl	800367c <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e1b7      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dec:	4b32      	ldr	r3, [pc, #200]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1ef      	bne.n	8004dda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80a6 	beq.w	8004f54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10d      	bne.n	8004e34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e18:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1c:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e24:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e30:	2301      	movs	r3, #1
 8004e32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e34:	4b21      	ldr	r3, [pc, #132]	@ (8004ebc <HAL_RCC_OscConfig+0x508>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d118      	bne.n	8004e72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e40:	4b1e      	ldr	r3, [pc, #120]	@ (8004ebc <HAL_RCC_OscConfig+0x508>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1d      	ldr	r2, [pc, #116]	@ (8004ebc <HAL_RCC_OscConfig+0x508>)
 8004e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4c:	f7fe fc16 	bl	800367c <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e54:	f7fe fc12 	bl	800367c <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e17a      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e66:	4b15      	ldr	r3, [pc, #84]	@ (8004ebc <HAL_RCC_OscConfig+0x508>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d108      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4d8>
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e80:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e8a:	e029      	b.n	8004ee0 <HAL_RCC_OscConfig+0x52c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	d115      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x50c>
 8004e94:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	4a07      	ldr	r2, [pc, #28]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004e9c:	f043 0304 	orr.w	r3, r3, #4
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ea4:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eaa:	4a03      	ldr	r2, [pc, #12]	@ (8004eb8 <HAL_RCC_OscConfig+0x504>)
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eb4:	e014      	b.n	8004ee0 <HAL_RCC_OscConfig+0x52c>
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	4b9c      	ldr	r3, [pc, #624]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec6:	4a9b      	ldr	r2, [pc, #620]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ed0:	4b98      	ldr	r3, [pc, #608]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	4a97      	ldr	r2, [pc, #604]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004ed8:	f023 0304 	bic.w	r3, r3, #4
 8004edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d016      	beq.n	8004f16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fe fbc8 	bl	800367c <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f7fe fbc4 	bl	800367c <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e12a      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f06:	4b8b      	ldr	r3, [pc, #556]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0ed      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x53c>
 8004f14:	e015      	b.n	8004f42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f16:	f7fe fbb1 	bl	800367c <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7fe fbad 	bl	800367c <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e113      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f34:	4b7f      	ldr	r3, [pc, #508]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1ed      	bne.n	8004f1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f42:	7ffb      	ldrb	r3, [r7, #31]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d105      	bne.n	8004f54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f48:	4b7a      	ldr	r3, [pc, #488]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4c:	4a79      	ldr	r2, [pc, #484]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f52:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80fe 	beq.w	800515a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	f040 80d0 	bne.w	8005108 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f68:	4b72      	ldr	r3, [pc, #456]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f003 0203 	and.w	r2, r3, #3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d130      	bne.n	8004fde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f86:	3b01      	subs	r3, #1
 8004f88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d127      	bne.n	8004fde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d11f      	bne.n	8004fde <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fa8:	2a07      	cmp	r2, #7
 8004faa:	bf14      	ite	ne
 8004fac:	2201      	movne	r2, #1
 8004fae:	2200      	moveq	r2, #0
 8004fb0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d113      	bne.n	8004fde <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d06e      	beq.n	80050bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b0c      	cmp	r3, #12
 8004fe2:	d069      	beq.n	80050b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fe4:	4b53      	ldr	r3, [pc, #332]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d105      	bne.n	8004ffc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ff0:	4b50      	ldr	r3, [pc, #320]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0ad      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005000:	4b4c      	ldr	r3, [pc, #304]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a4b      	ldr	r2, [pc, #300]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8005006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800500a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800500c:	f7fe fb36 	bl	800367c <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005014:	f7fe fb32 	bl	800367c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e09a      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005026:	4b43      	ldr	r3, [pc, #268]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005032:	4b40      	ldr	r3, [pc, #256]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	4b40      	ldr	r3, [pc, #256]	@ (8005138 <HAL_RCC_OscConfig+0x784>)
 8005038:	4013      	ands	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005042:	3a01      	subs	r2, #1
 8005044:	0112      	lsls	r2, r2, #4
 8005046:	4311      	orrs	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800504c:	0212      	lsls	r2, r2, #8
 800504e:	4311      	orrs	r1, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005054:	0852      	lsrs	r2, r2, #1
 8005056:	3a01      	subs	r2, #1
 8005058:	0552      	lsls	r2, r2, #21
 800505a:	4311      	orrs	r1, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005060:	0852      	lsrs	r2, r2, #1
 8005062:	3a01      	subs	r2, #1
 8005064:	0652      	lsls	r2, r2, #25
 8005066:	4311      	orrs	r1, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800506c:	0912      	lsrs	r2, r2, #4
 800506e:	0452      	lsls	r2, r2, #17
 8005070:	430a      	orrs	r2, r1
 8005072:	4930      	ldr	r1, [pc, #192]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8005074:	4313      	orrs	r3, r2
 8005076:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005078:	4b2e      	ldr	r3, [pc, #184]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2d      	ldr	r2, [pc, #180]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 800507e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005082:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005084:	4b2b      	ldr	r3, [pc, #172]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4a2a      	ldr	r2, [pc, #168]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 800508a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800508e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005090:	f7fe faf4 	bl	800367c <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005098:	f7fe faf0 	bl	800367c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e058      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050aa:	4b22      	ldr	r3, [pc, #136]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050b6:	e050      	b.n	800515a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e04f      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d148      	bne.n	800515a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a19      	ldr	r2, [pc, #100]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 80050ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050d4:	4b17      	ldr	r3, [pc, #92]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a16      	ldr	r2, [pc, #88]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 80050da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050e0:	f7fe facc 	bl	800367c <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fe fac8 	bl	800367c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e030      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0x734>
 8005106:	e028      	b.n	800515a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b0c      	cmp	r3, #12
 800510c:	d023      	beq.n	8005156 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a08      	ldr	r2, [pc, #32]	@ (8005134 <HAL_RCC_OscConfig+0x780>)
 8005114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511a:	f7fe faaf 	bl	800367c <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005120:	e00c      	b.n	800513c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005122:	f7fe faab 	bl	800367c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d905      	bls.n	800513c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e013      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
 8005134:	40021000 	.word	0x40021000
 8005138:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800513c:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <HAL_RCC_OscConfig+0x7b0>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1ec      	bne.n	8005122 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005148:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <HAL_RCC_OscConfig+0x7b0>)
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	4905      	ldr	r1, [pc, #20]	@ (8005164 <HAL_RCC_OscConfig+0x7b0>)
 800514e:	4b06      	ldr	r3, [pc, #24]	@ (8005168 <HAL_RCC_OscConfig+0x7b4>)
 8005150:	4013      	ands	r3, r2
 8005152:	60cb      	str	r3, [r1, #12]
 8005154:	e001      	b.n	800515a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	feeefffc 	.word	0xfeeefffc

0800516c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0e7      	b.n	8005350 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005180:	4b75      	ldr	r3, [pc, #468]	@ (8005358 <HAL_RCC_ClockConfig+0x1ec>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d910      	bls.n	80051b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518e:	4b72      	ldr	r3, [pc, #456]	@ (8005358 <HAL_RCC_ClockConfig+0x1ec>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 0207 	bic.w	r2, r3, #7
 8005196:	4970      	ldr	r1, [pc, #448]	@ (8005358 <HAL_RCC_ClockConfig+0x1ec>)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519e:	4b6e      	ldr	r3, [pc, #440]	@ (8005358 <HAL_RCC_ClockConfig+0x1ec>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d001      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0cf      	b.n	8005350 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d010      	beq.n	80051de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	4b66      	ldr	r3, [pc, #408]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d908      	bls.n	80051de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051cc:	4b63      	ldr	r3, [pc, #396]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4960      	ldr	r1, [pc, #384]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04c      	beq.n	8005284 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d107      	bne.n	8005202 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f2:	4b5a      	ldr	r3, [pc, #360]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d121      	bne.n	8005242 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e0a6      	b.n	8005350 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d107      	bne.n	800521a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800520a:	4b54      	ldr	r3, [pc, #336]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d115      	bne.n	8005242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e09a      	b.n	8005350 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005222:	4b4e      	ldr	r3, [pc, #312]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d109      	bne.n	8005242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e08e      	b.n	8005350 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005232:	4b4a      	ldr	r3, [pc, #296]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e086      	b.n	8005350 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005242:	4b46      	ldr	r3, [pc, #280]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f023 0203 	bic.w	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4943      	ldr	r1, [pc, #268]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 8005250:	4313      	orrs	r3, r2
 8005252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005254:	f7fe fa12 	bl	800367c <HAL_GetTick>
 8005258:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525a:	e00a      	b.n	8005272 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800525c:	f7fe fa0e 	bl	800367c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526a:	4293      	cmp	r3, r2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e06e      	b.n	8005350 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	4b3a      	ldr	r3, [pc, #232]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 020c 	and.w	r2, r3, #12
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	429a      	cmp	r2, r3
 8005282:	d1eb      	bne.n	800525c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d010      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	4b31      	ldr	r3, [pc, #196]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800529c:	429a      	cmp	r2, r3
 800529e:	d208      	bcs.n	80052b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a0:	4b2e      	ldr	r3, [pc, #184]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	492b      	ldr	r1, [pc, #172]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052b2:	4b29      	ldr	r3, [pc, #164]	@ (8005358 <HAL_RCC_ClockConfig+0x1ec>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d210      	bcs.n	80052e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c0:	4b25      	ldr	r3, [pc, #148]	@ (8005358 <HAL_RCC_ClockConfig+0x1ec>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f023 0207 	bic.w	r2, r3, #7
 80052c8:	4923      	ldr	r1, [pc, #140]	@ (8005358 <HAL_RCC_ClockConfig+0x1ec>)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d0:	4b21      	ldr	r3, [pc, #132]	@ (8005358 <HAL_RCC_ClockConfig+0x1ec>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d001      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e036      	b.n	8005350 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d008      	beq.n	8005300 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ee:	4b1b      	ldr	r3, [pc, #108]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	4918      	ldr	r1, [pc, #96]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530c:	4b13      	ldr	r3, [pc, #76]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4910      	ldr	r1, [pc, #64]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005320:	f000 f824 	bl	800536c <HAL_RCC_GetSysClockFreq>
 8005324:	4602      	mov	r2, r0
 8005326:	4b0d      	ldr	r3, [pc, #52]	@ (800535c <HAL_RCC_ClockConfig+0x1f0>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	490b      	ldr	r1, [pc, #44]	@ (8005360 <HAL_RCC_ClockConfig+0x1f4>)
 8005332:	5ccb      	ldrb	r3, [r1, r3]
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
 800533c:	4a09      	ldr	r2, [pc, #36]	@ (8005364 <HAL_RCC_ClockConfig+0x1f8>)
 800533e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005340:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <HAL_RCC_ClockConfig+0x1fc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe f949 	bl	80035dc <HAL_InitTick>
 800534a:	4603      	mov	r3, r0
 800534c:	72fb      	strb	r3, [r7, #11]

  return status;
 800534e:	7afb      	ldrb	r3, [r7, #11]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40022000 	.word	0x40022000
 800535c:	40021000 	.word	0x40021000
 8005360:	0800d2ac 	.word	0x0800d2ac
 8005364:	20000048 	.word	0x20000048
 8005368:	2000004c 	.word	0x2000004c

0800536c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800536c:	b480      	push	{r7}
 800536e:	b089      	sub	sp, #36	@ 0x24
 8005370:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	2300      	movs	r3, #0
 8005378:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537a:	4b3e      	ldr	r3, [pc, #248]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005384:	4b3b      	ldr	r3, [pc, #236]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x34>
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d121      	bne.n	80053de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d11e      	bne.n	80053de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053a0:	4b34      	ldr	r3, [pc, #208]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d107      	bne.n	80053bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053ac:	4b31      	ldr	r3, [pc, #196]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e005      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x10c>)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10d      	bne.n	80053f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053dc:	e00a      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d102      	bne.n	80053ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053e4:	4b25      	ldr	r3, [pc, #148]	@ (800547c <HAL_RCC_GetSysClockFreq+0x110>)
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	e004      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d101      	bne.n	80053f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053f0:	4b23      	ldr	r3, [pc, #140]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x114>)
 80053f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d134      	bne.n	8005464 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d003      	beq.n	8005412 <HAL_RCC_GetSysClockFreq+0xa6>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d003      	beq.n	8005418 <HAL_RCC_GetSysClockFreq+0xac>
 8005410:	e005      	b.n	800541e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005412:	4b1a      	ldr	r3, [pc, #104]	@ (800547c <HAL_RCC_GetSysClockFreq+0x110>)
 8005414:	617b      	str	r3, [r7, #20]
      break;
 8005416:	e005      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005418:	4b19      	ldr	r3, [pc, #100]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x114>)
 800541a:	617b      	str	r3, [r7, #20]
      break;
 800541c:	e002      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	617b      	str	r3, [r7, #20]
      break;
 8005422:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005424:	4b13      	ldr	r3, [pc, #76]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	3301      	adds	r3, #1
 8005430:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005432:	4b10      	ldr	r3, [pc, #64]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	fb03 f202 	mul.w	r2, r3, r2
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800544a:	4b0a      	ldr	r3, [pc, #40]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	0e5b      	lsrs	r3, r3, #25
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	3301      	adds	r3, #1
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005464:	69bb      	ldr	r3, [r7, #24]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3724      	adds	r7, #36	@ 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40021000 	.word	0x40021000
 8005478:	0800d2c4 	.word	0x0800d2c4
 800547c:	00f42400 	.word	0x00f42400
 8005480:	007a1200 	.word	0x007a1200

08005484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005488:	4b03      	ldr	r3, [pc, #12]	@ (8005498 <HAL_RCC_GetHCLKFreq+0x14>)
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000048 	.word	0x20000048

0800549c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054a0:	f7ff fff0 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4904      	ldr	r1, [pc, #16]	@ (80054c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	0800d2bc 	.word	0x0800d2bc

080054c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054cc:	f7ff ffda 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	0adb      	lsrs	r3, r3, #11
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	4904      	ldr	r1, [pc, #16]	@ (80054f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054de:	5ccb      	ldrb	r3, [r1, r3]
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40021000 	.word	0x40021000
 80054f0:	0800d2bc 	.word	0x0800d2bc

080054f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054fc:	2300      	movs	r3, #0
 80054fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005500:	4b2a      	ldr	r3, [pc, #168]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800550c:	f7ff fa44 	bl	8004998 <HAL_PWREx_GetVoltageRange>
 8005510:	6178      	str	r0, [r7, #20]
 8005512:	e014      	b.n	800553e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005514:	4b25      	ldr	r3, [pc, #148]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005518:	4a24      	ldr	r2, [pc, #144]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800551e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005520:	4b22      	ldr	r3, [pc, #136]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800552c:	f7ff fa34 	bl	8004998 <HAL_PWREx_GetVoltageRange>
 8005530:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005532:	4b1e      	ldr	r3, [pc, #120]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005536:	4a1d      	ldr	r2, [pc, #116]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800553c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005544:	d10b      	bne.n	800555e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b80      	cmp	r3, #128	@ 0x80
 800554a:	d919      	bls.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005550:	d902      	bls.n	8005558 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005552:	2302      	movs	r3, #2
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	e013      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005558:	2301      	movs	r3, #1
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e010      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b80      	cmp	r3, #128	@ 0x80
 8005562:	d902      	bls.n	800556a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005564:	2303      	movs	r3, #3
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	e00a      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b80      	cmp	r3, #128	@ 0x80
 800556e:	d102      	bne.n	8005576 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005570:	2302      	movs	r3, #2
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	e004      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b70      	cmp	r3, #112	@ 0x70
 800557a:	d101      	bne.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800557c:	2301      	movs	r3, #1
 800557e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f023 0207 	bic.w	r2, r3, #7
 8005588:	4909      	ldr	r1, [pc, #36]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005590:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	429a      	cmp	r2, r3
 800559c:	d001      	beq.n	80055a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40022000 	.word	0x40022000

080055b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e0be      	b.n	8005744 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d108      	bne.n	80055e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055d6:	d009      	beq.n	80055ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	61da      	str	r2, [r3, #28]
 80055de:	e005      	b.n	80055ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f8cb 	bl	800579c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800561c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005626:	d902      	bls.n	800562e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e002      	b.n	8005634 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800562e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005632:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800563c:	d007      	beq.n	800564e <HAL_SPI_Init+0x9a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005646:	d002      	beq.n	800564e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005690:	ea42 0103 	orr.w	r1, r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ac:	d11b      	bne.n	80056e6 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056be:	d903      	bls.n	80056c8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80056c6:	e002      	b.n	80056ce <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d107      	bne.n	80056e6 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	f003 0204 	and.w	r2, r3, #4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800570c:	ea42 0103 	orr.w	r1, r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005726:	d105      	bne.n	8005734 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	b292      	uxth	r2, r2
 8005732:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e01a      	b.n	8005794 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2202      	movs	r2, #2
 8005762:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005774:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f81a 	bl	80057b0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	@ 0x28
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d001      	beq.n	80057ec <HAL_SPI_Receive+0x28>
  {
    return HAL_BUSY;
 80057e8:	2302      	movs	r3, #2
 80057ea:	e1e0      	b.n	8005bae <HAL_SPI_Receive+0x3ea>
  }

  if ((pData == NULL) || (Size == 0U))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <HAL_SPI_Receive+0x34>
 80057f2:	88fb      	ldrh	r3, [r7, #6]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_SPI_Receive+0x38>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e1d8      	b.n	8005bae <HAL_SPI_Receive+0x3ea>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005804:	d112      	bne.n	800582c <HAL_SPI_Receive+0x68>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10e      	bne.n	800582c <HAL_SPI_Receive+0x68>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2204      	movs	r2, #4
 8005812:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f9c7 	bl	8005bb6 <HAL_SPI_TransmitReceive>
 8005828:	4603      	mov	r3, r0
 800582a:	e1c0      	b.n	8005bae <HAL_SPI_Receive+0x3ea>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800582c:	f7fd ff26 	bl	800367c <HAL_GetTick>
 8005830:	61f8      	str	r0, [r7, #28]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_SPI_Receive+0x7c>
 800583c:	2302      	movs	r3, #2
 800583e:	e1b6      	b.n	8005bae <HAL_SPI_Receive+0x3ea>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2204      	movs	r2, #4
 800584c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005892:	d118      	bne.n	80058c6 <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058b2:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058ce:	d908      	bls.n	80058e2 <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	e007      	b.n	80058f2 <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058f0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058fa:	d10f      	bne.n	800591c <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800590a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800591a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b40      	cmp	r3, #64	@ 0x40
 8005928:	d007      	beq.n	800593a <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005938:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005942:	d875      	bhi.n	8005a30 <HAL_SPI_Receive+0x26c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005944:	e037      	b.n	80059b6 <HAL_SPI_Receive+0x1f2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d117      	bne.n	8005984 <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f103 020c 	add.w	r2, r3, #12
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	7812      	ldrb	r2, [r2, #0]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005982:	e018      	b.n	80059b6 <HAL_SPI_Receive+0x1f2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005984:	f7fd fe7a 	bl	800367c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d803      	bhi.n	800599c <HAL_SPI_Receive+0x1d8>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d102      	bne.n	80059a2 <HAL_SPI_Receive+0x1de>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <HAL_SPI_Receive+0x1f2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e0fb      	b.n	8005bae <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1c1      	bne.n	8005946 <HAL_SPI_Receive+0x182>
 80059c2:	e03b      	b.n	8005a3c <HAL_SPI_Receive+0x278>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d115      	bne.n	80059fe <HAL_SPI_Receive+0x23a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	b292      	uxth	r2, r2
 80059de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	1c9a      	adds	r2, r3, #2
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80059fc:	e018      	b.n	8005a30 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059fe:	f7fd fe3d 	bl	800367c <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d803      	bhi.n	8005a16 <HAL_SPI_Receive+0x252>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d102      	bne.n	8005a1c <HAL_SPI_Receive+0x258>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <HAL_SPI_Receive+0x26c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e0be      	b.n	8005bae <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1c3      	bne.n	80059c4 <HAL_SPI_Receive+0x200>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a44:	f040 8087 	bne.w	8005b56 <HAL_SPI_Receive+0x392>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a56:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	2101      	movs	r1, #1
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f001 fa18 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      __HAL_UNLOCK(hspi);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e099      	b.n	8005bae <HAL_SPI_Receive+0x3ea>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a82:	d907      	bls.n	8005a94 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8e:	b292      	uxth	r2, r2
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	e008      	b.n	8005aa6 <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f103 020c 	add.w	r2, r3, #12
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa0:	7812      	ldrb	r2, [r2, #0]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2201      	movs	r2, #1
 8005aae:	2101      	movs	r1, #1
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f001 f9f1 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00f      	beq.n	8005adc <HAL_SPI_Receive+0x318>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ac0:	f043 0202 	orr.w	r2, r3, #2
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e068      	b.n	8005bae <HAL_SPI_Receive+0x3ea>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005ae4:	d105      	bne.n	8005af2 <HAL_SPI_Receive+0x32e>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	e031      	b.n	8005b56 <HAL_SPI_Receive+0x392>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	330c      	adds	r3, #12
 8005af8:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b02:	7cfb      	ldrb	r3, [r7, #19]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b0c:	d123      	bne.n	8005b56 <HAL_SPI_Receive+0x392>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d11f      	bne.n	8005b56 <HAL_SPI_Receive+0x392>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	2101      	movs	r1, #1
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f001 f9b9 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00f      	beq.n	8005b4c <HAL_SPI_Receive+0x388>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b30:	f043 0202 	orr.w	r2, r3, #2
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e030      	b.n	8005bae <HAL_SPI_Receive+0x3ea>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005b54:	7cfb      	ldrb	r3, [r7, #19]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f001 faba 	bl	80070d4 <SPI_EndRxTransaction>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <HAL_SPI_Receive+0x3a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b10      	cmp	r3, #16
 8005b78:	d10a      	bne.n	8005b90 <HAL_SPI_Receive+0x3cc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7e:	f043 0202 	orr.w	r2, r3, #2
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005b8e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_SPI_Receive+0x3e8>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <HAL_SPI_Receive+0x3ea>
  }
  else
  {
    return HAL_OK;
 8005bac:	2300      	movs	r3, #0
  }
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b090      	sub	sp, #64	@ 0x40
 8005bba:	af02      	add	r7, sp, #8
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bd0:	f7fd fd54 	bl	800367c <HAL_GetTick>
 8005bd4:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tmp_mode            = hspi->Init.Mode;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  initial_TxXferCount = Size;
 8005be6:	887b      	ldrh	r3, [r7, #2]
 8005be8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	623b      	str	r3, [r7, #32]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	61fb      	str	r3, [r7, #28]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d00d      	beq.n	8005c22 <HAL_SPI_TransmitReceive+0x6c>
 8005c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c0c:	d107      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x68>
 8005c16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d001      	beq.n	8005c22 <HAL_SPI_TransmitReceive+0x6c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e30f      	b.n	8006242 <HAL_SPI_TransmitReceive+0x68c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x7e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x7e>
 8005c2e:	887b      	ldrh	r3, [r7, #2]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e304      	b.n	8006242 <HAL_SPI_TransmitReceive+0x68c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x90>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e2fd      	b.n	8006242 <HAL_SPI_TransmitReceive+0x68c>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d003      	beq.n	8005c62 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2205      	movs	r2, #5
 8005c5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	887a      	ldrh	r2, [r7, #2]
 8005c72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	887a      	ldrh	r2, [r7, #2]
 8005c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	887a      	ldrh	r2, [r7, #2]
 8005c88:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	887a      	ldrh	r2, [r7, #2]
 8005c8e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca4:	d10f      	bne.n	8005cc6 <HAL_SPI_TransmitReceive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cc4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cce:	d802      	bhi.n	8005cd6 <HAL_SPI_TransmitReceive+0x120>
 8005cd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d908      	bls.n	8005ce8 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	e007      	b.n	8005cf8 <HAL_SPI_TransmitReceive+0x142>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cf6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b40      	cmp	r3, #64	@ 0x40
 8005d04:	d007      	beq.n	8005d16 <HAL_SPI_TransmitReceive+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d1e:	f240 80d0 	bls.w	8005ec2 <HAL_SPI_TransmitReceive+0x30c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_SPI_TransmitReceive+0x17c>
 8005d2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	f040 80ba 	bne.w	8005ea6 <HAL_SPI_TransmitReceive+0x2f0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d36:	881a      	ldrh	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d42:	1c9a      	adds	r2, r3, #2
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f040 80a2 	bne.w	8005ea6 <HAL_SPI_TransmitReceive+0x2f0>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6a:	f040 809c 	bne.w	8005ea6 <HAL_SPI_TransmitReceive+0x2f0>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10c      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x1dc>
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d90:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005da0:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da2:	e080      	b.n	8005ea6 <HAL_SPI_TransmitReceive+0x2f0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d13f      	bne.n	8005e32 <HAL_SPI_TransmitReceive+0x27c>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d03a      	beq.n	8005e32 <HAL_SPI_TransmitReceive+0x27c>
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d137      	bne.n	8005e32 <HAL_SPI_TransmitReceive+0x27c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	881a      	ldrh	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd2:	1c9a      	adds	r2, r3, #2
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d11e      	bne.n	8005e32 <HAL_SPI_TransmitReceive+0x27c>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfc:	d119      	bne.n	8005e32 <HAL_SPI_TransmitReceive+0x27c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10c      	bne.n	8005e22 <HAL_SPI_TransmitReceive+0x26c>
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x26c>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e20:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e30:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d11c      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x2c4>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d016      	beq.n	8005e7a <HAL_SPI_TransmitReceive+0x2c4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e56:	b292      	uxth	r2, r2
 8005e58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	1c9a      	adds	r2, r3, #2
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e76:	2301      	movs	r3, #1
 8005e78:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e7a:	f7fd fbff 	bl	800367c <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d80d      	bhi.n	8005ea6 <HAL_SPI_TransmitReceive+0x2f0>
 8005e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d009      	beq.n	8005ea6 <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e1cd      	b.n	8006242 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f47f af79 	bne.w	8005da4 <HAL_SPI_TransmitReceive+0x1ee>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f47f af72 	bne.w	8005da4 <HAL_SPI_TransmitReceive+0x1ee>
 8005ec0:	e12f      	b.n	8006122 <HAL_SPI_TransmitReceive+0x56c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_SPI_TransmitReceive+0x31c>
 8005eca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	f040 811b 	bne.w	8006108 <HAL_SPI_TransmitReceive+0x552>
    {
      if (hspi->TxXferCount > 1U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d912      	bls.n	8005f02 <HAL_SPI_TransmitReceive+0x34c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee0:	881a      	ldrh	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	1c9a      	adds	r2, r3, #2
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b02      	subs	r3, #2
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f00:	e102      	b.n	8006108 <HAL_SPI_TransmitReceive+0x552>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	7812      	ldrb	r2, [r2, #0]
 8005f0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 80ea 	bne.w	8006108 <HAL_SPI_TransmitReceive+0x552>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f3c:	f040 80e4 	bne.w	8006108 <HAL_SPI_TransmitReceive+0x552>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10c      	bne.n	8005f64 <HAL_SPI_TransmitReceive+0x3ae>
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <HAL_SPI_TransmitReceive+0x3ae>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f62:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f72:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f74:	e0c8      	b.n	8006108 <HAL_SPI_TransmitReceive+0x552>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d158      	bne.n	8006036 <HAL_SPI_TransmitReceive+0x480>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d053      	beq.n	8006036 <HAL_SPI_TransmitReceive+0x480>
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d150      	bne.n	8006036 <HAL_SPI_TransmitReceive+0x480>
      {
        if (hspi->TxXferCount > 1U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d912      	bls.n	8005fc4 <HAL_SPI_TransmitReceive+0x40e>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa2:	881a      	ldrh	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fae:	1c9a      	adds	r2, r3, #2
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b02      	subs	r3, #2
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fc2:	e012      	b.n	8005fea <HAL_SPI_TransmitReceive+0x434>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	7812      	ldrb	r2, [r2, #0]
 8005fd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d11e      	bne.n	8006036 <HAL_SPI_TransmitReceive+0x480>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006000:	d119      	bne.n	8006036 <HAL_SPI_TransmitReceive+0x480>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10c      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x470>
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_SPI_TransmitReceive+0x470>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006024:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006034:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b01      	cmp	r3, #1
 8006042:	d148      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x520>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d042      	beq.n	80060d6 <HAL_SPI_TransmitReceive+0x520>
      {
        if (hspi->RxXferCount > 1U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d923      	bls.n	80060a4 <HAL_SPI_TransmitReceive+0x4ee>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006066:	b292      	uxth	r2, r2
 8006068:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	1c9a      	adds	r2, r3, #2
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b02      	subs	r3, #2
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	d81f      	bhi.n	80060d2 <HAL_SPI_TransmitReceive+0x51c>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	e016      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x51c>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f103 020c 	add.w	r2, r3, #12
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b0:	7812      	ldrb	r2, [r2, #0]
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060d2:	2301      	movs	r3, #1
 80060d4:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060d6:	f7fd fad1 	bl	800367c <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d803      	bhi.n	80060ee <HAL_SPI_TransmitReceive+0x538>
 80060e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d102      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x53e>
 80060ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x552>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e09c      	b.n	8006242 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	f47f af31 	bne.w	8005f76 <HAL_SPI_TransmitReceive+0x3c0>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	f47f af2a 	bne.w	8005f76 <HAL_SPI_TransmitReceive+0x3c0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800612a:	d152      	bne.n	80061d2 <HAL_SPI_TransmitReceive+0x61c>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006132:	2201      	movs	r2, #1
 8006134:	2101      	movs	r1, #1
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 feae 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00f      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x5ac>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006146:	f043 0202 	orr.w	r2, r3, #2
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e06f      	b.n	8006242 <HAL_SPI_TransmitReceive+0x68c>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800616a:	d105      	bne.n	8006178 <HAL_SPI_TransmitReceive+0x5c2>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	e02c      	b.n	80061d2 <HAL_SPI_TransmitReceive+0x61c>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006188:	7cfb      	ldrb	r3, [r7, #19]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618e:	2b02      	cmp	r3, #2
 8006190:	d11f      	bne.n	80061d2 <HAL_SPI_TransmitReceive+0x61c>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006198:	2201      	movs	r2, #1
 800619a:	2101      	movs	r1, #1
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fe7b 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00f      	beq.n	80061c8 <HAL_SPI_TransmitReceive+0x612>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ac:	f043 0202 	orr.w	r2, r3, #2
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e03c      	b.n	8006242 <HAL_SPI_TransmitReceive+0x68c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80061d0:	7cfb      	ldrb	r3, [r7, #19]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d110      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x64c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e4:	f043 0202 	orr.w	r2, r3, #2
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80061f4:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e01f      	b.n	8006242 <HAL_SPI_TransmitReceive+0x68c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006204:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 ffbc 	bl	8007184 <SPI_EndRxTxTransaction>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <HAL_SPI_TransmitReceive+0x66e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e00e      	b.n	8006242 <HAL_SPI_TransmitReceive+0x68c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <HAL_SPI_TransmitReceive+0x68a>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <HAL_SPI_TransmitReceive+0x68c>
  }
  else
  {
    return HAL_OK;
 8006240:	2300      	movs	r3, #0
  }
}
 8006242:	4618      	mov	r0, r3
 8006244:	3738      	adds	r7, #56	@ 0x38
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	4613      	mov	r3, r2
 8006258:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_SPI_Transmit_IT+0x1a>
 8006260:	88fb      	ldrh	r3, [r7, #6]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e082      	b.n	8006370 <HAL_SPI_Transmit_IT+0x124>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b01      	cmp	r3, #1
 8006274:	d001      	beq.n	800627a <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8006276:	2302      	movs	r3, #2
 8006278:	e07a      	b.n	8006370 <HAL_SPI_Transmit_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_SPI_Transmit_IT+0x3c>
 8006284:	2302      	movs	r3, #2
 8006286:	e073      	b.n	8006370 <HAL_SPI_Transmit_IT+0x124>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2203      	movs	r2, #3
 8006294:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	88fa      	ldrh	r2, [r7, #6]
 80062a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062d4:	d903      	bls.n	80062de <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4a28      	ldr	r2, [pc, #160]	@ (800637c <HAL_SPI_Transmit_IT+0x130>)
 80062da:	651a      	str	r2, [r3, #80]	@ 0x50
 80062dc:	e002      	b.n	80062e4 <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4a27      	ldr	r2, [pc, #156]	@ (8006380 <HAL_SPI_Transmit_IT+0x134>)
 80062e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ec:	d10f      	bne.n	800630e <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800630c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006316:	d10f      	bne.n	8006338 <HAL_SPI_Transmit_IT+0xec>
  {
    SPI_RESET_CRC(hspi);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006336:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006342:	2b40      	cmp	r3, #64	@ 0x40
 8006344:	d007      	beq.n	8006356 <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006354:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800636c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	08006e39 	.word	0x08006e39
 8006380:	08006dd9 	.word	0x08006dd9

08006384 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b01      	cmp	r3, #1
 800639c:	d001      	beq.n	80063a2 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800639e:	2302      	movs	r3, #2
 80063a0:	e0ba      	b.n	8006518 <HAL_SPI_Receive_IT+0x194>
  }

  if ((pData == NULL) || (Size == 0U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_SPI_Receive_IT+0x2a>
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e0b2      	b.n	8006518 <HAL_SPI_Receive_IT+0x194>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d110      	bne.n	80063dc <HAL_SPI_Receive_IT+0x58>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c2:	d10b      	bne.n	80063dc <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2204      	movs	r2, #4
 80063c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f8a8 	bl	8006528 <HAL_SPI_TransmitReceive_IT>
 80063d8:	4603      	mov	r3, r0
 80063da:	e09d      	b.n	8006518 <HAL_SPI_Receive_IT+0x194>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_SPI_Receive_IT+0x66>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e096      	b.n	8006518 <HAL_SPI_Receive_IT+0x194>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2204      	movs	r2, #4
 80063f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	88fa      	ldrh	r2, [r7, #6]
 800640a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	88fa      	ldrh	r2, [r7, #6]
 8006412:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006436:	d90b      	bls.n	8006450 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006446:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4a35      	ldr	r2, [pc, #212]	@ (8006520 <HAL_SPI_Receive_IT+0x19c>)
 800644c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800644e:	e00a      	b.n	8006466 <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800645e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4a30      	ldr	r2, [pc, #192]	@ (8006524 <HAL_SPI_Receive_IT+0x1a0>)
 8006464:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800646e:	d10f      	bne.n	8006490 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800647e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800648e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006498:	d11f      	bne.n	80064da <HAL_SPI_Receive_IT+0x156>
  {
    hspi->CRCSize = 1U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064a8:	d806      	bhi.n	80064b8 <HAL_SPI_Receive_IT+0x134>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d102      	bne.n	80064b8 <HAL_SPI_Receive_IT+0x134>
    {
      hspi->CRCSize = 2U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2202      	movs	r2, #2
 80064b6:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	e002      	b.n	80064e0 <HAL_SPI_Receive_IT+0x15c>
  }
  else
  {
    hspi->CRCSize = 0U;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ea:	2b40      	cmp	r3, #64	@ 0x40
 80064ec:	d007      	beq.n	80064fe <HAL_SPI_Receive_IT+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064fc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006514:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	08006d51 	.word	0x08006d51
 8006524:	08006c91 	.word	0x08006c91

08006528 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800653c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d00c      	beq.n	8006564 <HAL_SPI_TransmitReceive_IT+0x3c>
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006550:	d106      	bne.n	8006560 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <HAL_SPI_TransmitReceive_IT+0x38>
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b04      	cmp	r3, #4
 800655e:	d001      	beq.n	8006564 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006560:	2302      	movs	r3, #2
 8006562:	e0a5      	b.n	80066b0 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <HAL_SPI_TransmitReceive_IT+0x4e>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_SPI_TransmitReceive_IT+0x4e>
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e09a      	b.n	80066b0 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_SPI_TransmitReceive_IT+0x60>
 8006584:	2302      	movs	r3, #2
 8006586:	e093      	b.n	80066b0 <HAL_SPI_TransmitReceive_IT+0x188>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b04      	cmp	r3, #4
 800659a:	d003      	beq.n	80065a4 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2205      	movs	r2, #5
 80065a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	887a      	ldrh	r2, [r7, #2]
 80065b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	887a      	ldrh	r2, [r7, #2]
 80065ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	887a      	ldrh	r2, [r7, #2]
 80065c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	887a      	ldrh	r2, [r7, #2]
 80065ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065da:	d906      	bls.n	80065ea <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4a37      	ldr	r2, [pc, #220]	@ (80066bc <HAL_SPI_TransmitReceive_IT+0x194>)
 80065e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a36      	ldr	r2, [pc, #216]	@ (80066c0 <HAL_SPI_TransmitReceive_IT+0x198>)
 80065e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80065e8:	e005      	b.n	80065f6 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4a35      	ldr	r2, [pc, #212]	@ (80066c4 <HAL_SPI_TransmitReceive_IT+0x19c>)
 80065ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a35      	ldr	r2, [pc, #212]	@ (80066c8 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80065f4:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065fe:	d11f      	bne.n	8006640 <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800660e:	d806      	bhi.n	800661e <HAL_SPI_TransmitReceive_IT+0xf6>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006614:	2b02      	cmp	r3, #2
 8006616:	d102      	bne.n	800661e <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2202      	movs	r2, #2
 800661c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e002      	b.n	8006646 <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800664e:	d802      	bhi.n	8006656 <HAL_SPI_TransmitReceive_IT+0x12e>
 8006650:	887b      	ldrh	r3, [r7, #2]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d908      	bls.n	8006668 <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006664:	605a      	str	r2, [r3, #4]
 8006666:	e007      	b.n	8006678 <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006676:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006682:	2b40      	cmp	r3, #64	@ 0x40
 8006684:	d007      	beq.n	8006696 <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006694:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80066ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	371c      	adds	r7, #28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	08006b19 	.word	0x08006b19
 80066c0:	08006bc9 	.word	0x08006bc9
 80066c4:	08006921 	.word	0x08006921
 80066c8:	08006a5d 	.word	0x08006a5d

080066cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	099b      	lsrs	r3, r3, #6
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10f      	bne.n	8006710 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	099b      	lsrs	r3, r3, #6
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	4798      	blx	r3
    return;
 800670e:	e0d7      	b.n	80068c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <HAL_SPI_IRQHandler+0x66>
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	09db      	lsrs	r3, r3, #7
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d004      	beq.n	8006732 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
    return;
 8006730:	e0c6      	b.n	80068c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10c      	bne.n	8006758 <HAL_SPI_IRQHandler+0x8c>
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	099b      	lsrs	r3, r3, #6
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	0a1b      	lsrs	r3, r3, #8
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 80b4 	beq.w	80068c0 <HAL_SPI_IRQHandler+0x1f4>
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 80ad 	beq.w	80068c0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	099b      	lsrs	r3, r3, #6
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d023      	beq.n	80067ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b03      	cmp	r3, #3
 800677c:	d011      	beq.n	80067a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006782:	f043 0204 	orr.w	r2, r3, #4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	e00b      	b.n	80067ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	693b      	ldr	r3, [r7, #16]
        return;
 80067b8:	e082      	b.n	80068c0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d014      	beq.n	80067f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ca:	f043 0201 	orr.w	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00c      	beq.n	8006816 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006800:	f043 0208 	orr.w	r2, r3, #8
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006808:	2300      	movs	r3, #0
 800680a:	60bb      	str	r3, [r7, #8]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	60bb      	str	r3, [r7, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800681a:	2b00      	cmp	r3, #0
 800681c:	d04f      	beq.n	80068be <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800682c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d104      	bne.n	800684a <HAL_SPI_IRQHandler+0x17e>
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d034      	beq.n	80068b4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0203 	bic.w	r2, r2, #3
 8006858:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685e:	2b00      	cmp	r3, #0
 8006860:	d011      	beq.n	8006886 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006866:	4a18      	ldr	r2, [pc, #96]	@ (80068c8 <HAL_SPI_IRQHandler+0x1fc>)
 8006868:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686e:	4618      	mov	r0, r3
 8006870:	f7fd f845 	bl	80038fe <HAL_DMA_Abort_IT>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800687e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006892:	4a0d      	ldr	r2, [pc, #52]	@ (80068c8 <HAL_SPI_IRQHandler+0x1fc>)
 8006894:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689a:	4618      	mov	r0, r3
 800689c:	f7fd f82f 	bl	80038fe <HAL_DMA_Abort_IT>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80068b2:	e003      	b.n	80068bc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f813 	bl	80068e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80068ba:	e000      	b.n	80068be <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80068bc:	bf00      	nop
    return;
 80068be:	bf00      	nop
  }
}
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	080068f5 	.word	0x080068f5

080068cc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006900:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7ff ffe5 	bl	80068e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	d923      	bls.n	800697c <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	b292      	uxth	r2, r2
 8006940:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	1c9a      	adds	r2, r3, #2
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b02      	subs	r3, #2
 8006956:	b29a      	uxth	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	d11f      	bne.n	80069aa <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006978:	605a      	str	r2, [r3, #4]
 800697a:	e016      	b.n	80069aa <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f103 020c 	add.w	r2, r3, #12
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	7812      	ldrb	r2, [r2, #0]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d120      	bne.n	80069f8 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069be:	d10b      	bne.n	80069d8 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069ce:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006a00 <SPI_2linesRxISR_8BIT+0xe0>)
 80069d4:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 80069d6:	e00f      	b.n	80069f8 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80069e6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fc0c 	bl	8007210 <SPI_CloseRxTx_ISR>
    }
  }
}
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	08006a05 	.word	0x08006a05

08006a04 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	330c      	adds	r3, #12
 8006a16:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006a20:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a26:	1e5a      	subs	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10f      	bne.n	8006a54 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a42:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fbde 	bl	8007210 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d912      	bls.n	8006a94 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a72:	881a      	ldrh	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7e:	1c9a      	adds	r2, r3, #2
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b02      	subs	r3, #2
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a92:	e012      	b.n	8006aba <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	330c      	adds	r3, #12
 8006a9e:	7812      	ldrb	r2, [r2, #0]
 8006aa0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d126      	bne.n	8006b12 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006acc:	d110      	bne.n	8006af0 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006adc:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006aec:	605a      	str	r2, [r3, #4]
      return;
 8006aee:	e010      	b.n	8006b12 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006afe:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fb7f 	bl	8007210 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2a:	b292      	uxth	r2, r2
 8006b2c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	1c9a      	adds	r2, r3, #2
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d118      	bne.n	8006b88 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b5e:	d103      	bne.n	8006b68 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a0b      	ldr	r2, [pc, #44]	@ (8006b90 <SPI_2linesRxISR_16BIT+0x78>)
 8006b64:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006b66:	e00f      	b.n	8006b88 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b76:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fb44 	bl	8007210 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	08006b95 	.word	0x08006b95

08006b94 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006ba8:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bb8:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fb28 	bl	8007210 <SPI_CloseRxTx_ISR>
}
 8006bc0:	bf00      	nop
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d126      	bne.n	8006c4c <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c06:	d110      	bne.n	8006c2a <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c16:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c26:	605a      	str	r2, [r3, #4]
      return;
 8006c28:	e010      	b.n	8006c4c <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c38:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fae2 	bl	8007210 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006c6e:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c74:	1e5a      	subs	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fb20 	bl	80072c8 <SPI_CloseRx_ISR>
  }
}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f103 020c 	add.w	r2, r3, #12
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca4:	7812      	ldrb	r2, [r2, #0]
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d10c      	bne.n	8006cec <SPI_RxISR_8BIT+0x5c>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cda:	d107      	bne.n	8006cec <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006cea:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10b      	bne.n	8006d10 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d00:	d103      	bne.n	8006d0a <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a04      	ldr	r2, [pc, #16]	@ (8006d18 <SPI_RxISR_8BIT+0x88>)
 8006d06:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006d08:	e002      	b.n	8006d10 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fadc 	bl	80072c8 <SPI_CloseRx_ISR>
  }
}
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	08006c53 	.word	0x08006c53

08006d1c <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006d30:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d40:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fac0 	bl	80072c8 <SPI_CloseRx_ISR>
}
 8006d48:	bf00      	nop
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d62:	b292      	uxth	r2, r2
 8006d64:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	1c9a      	adds	r2, r3, #2
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d10c      	bne.n	8006da8 <SPI_RxISR_16BIT+0x58>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d96:	d107      	bne.n	8006da8 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006da6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10b      	bne.n	8006dcc <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dbc:	d103      	bne.n	8006dc6 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a04      	ldr	r2, [pc, #16]	@ (8006dd4 <SPI_RxISR_16BIT+0x84>)
 8006dc2:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006dc4:	e002      	b.n	8006dcc <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa7e 	bl	80072c8 <SPI_CloseRx_ISR>
  }
}
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	08006d1d 	.word	0x08006d1d

08006dd8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e18:	d107      	bne.n	8006e2a <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e28:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa92 	bl	8007354 <SPI_CloseTx_ISR>
  }
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e44:	881a      	ldrh	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	1c9a      	adds	r2, r3, #2
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10f      	bne.n	8006e8e <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e76:	d107      	bne.n	8006e88 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e86:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fa63 	bl	8007354 <SPI_CloseTx_ISR>
  }
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ea8:	f7fc fbe8 	bl	800367c <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006eb8:	f7fc fbe0 	bl	800367c <HAL_GetTick>
 8006ebc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ebe:	4b39      	ldr	r3, [pc, #228]	@ (8006fa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	015b      	lsls	r3, r3, #5
 8006ec4:	0d1b      	lsrs	r3, r3, #20
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ece:	e054      	b.n	8006f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d050      	beq.n	8006f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ed8:	f7fc fbd0 	bl	800367c <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d902      	bls.n	8006eee <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d13d      	bne.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f06:	d111      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f10:	d004      	beq.n	8006f1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1a:	d107      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f34:	d10f      	bne.n	8006f56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e017      	b.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4013      	ands	r3, r2
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	bf0c      	ite	eq
 8006f8a:	2301      	moveq	r3, #1
 8006f8c:	2300      	movne	r3, #0
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d19b      	bne.n	8006ed0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3720      	adds	r7, #32
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000048 	.word	0x20000048

08006fa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08a      	sub	sp, #40	@ 0x28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006fba:	f7fc fb5f 	bl	800367c <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	1a9b      	subs	r3, r3, r2
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006fca:	f7fc fb57 	bl	800367c <HAL_GetTick>
 8006fce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	330c      	adds	r3, #12
 8006fd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80070d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	00da      	lsls	r2, r3, #3
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	0d1b      	lsrs	r3, r3, #20
 8006fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ff0:	e060      	b.n	80070b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ff8:	d107      	bne.n	800700a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d104      	bne.n	800700a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007008:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007010:	d050      	beq.n	80070b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007012:	f7fc fb33 	bl	800367c <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800701e:	429a      	cmp	r2, r3
 8007020:	d902      	bls.n	8007028 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	2b00      	cmp	r3, #0
 8007026:	d13d      	bne.n	80070a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007036:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007040:	d111      	bne.n	8007066 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800704a:	d004      	beq.n	8007056 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007054:	d107      	bne.n	8007066 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007064:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706e:	d10f      	bne.n	8007090 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800708e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e010      	b.n	80070c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4013      	ands	r3, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d196      	bne.n	8006ff2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3728      	adds	r7, #40	@ 0x28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000048 	.word	0x20000048

080070d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af02      	add	r7, sp, #8
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e8:	d111      	bne.n	800710e <SPI_EndRxTransaction+0x3a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f2:	d004      	beq.n	80070fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070fc:	d107      	bne.n	800710e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800710c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2200      	movs	r2, #0
 8007116:	2180      	movs	r1, #128	@ 0x80
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff febd 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d007      	beq.n	8007134 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007128:	f043 0220 	orr.w	r2, r3, #32
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e023      	b.n	800717c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800713c:	d11d      	bne.n	800717a <SPI_EndRxTransaction+0xa6>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007146:	d004      	beq.n	8007152 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007150:	d113      	bne.n	800717a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7ff ff22 	bl	8006fa8 <SPI_WaitFifoStateUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800716e:	f043 0220 	orr.w	r2, r3, #32
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e000      	b.n	800717c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af02      	add	r7, sp, #8
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2200      	movs	r2, #0
 8007198:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff ff03 	bl	8006fa8 <SPI_WaitFifoStateUntilTimeout>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d007      	beq.n	80071b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ac:	f043 0220 	orr.w	r2, r3, #32
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e027      	b.n	8007208 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	2180      	movs	r1, #128	@ 0x80
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff fe68 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d2:	f043 0220 	orr.w	r2, r3, #32
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e014      	b.n	8007208 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f7ff fedc 	bl	8006fa8 <SPI_WaitFifoStateUntilTimeout>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071fa:	f043 0220 	orr.w	r2, r3, #32
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e000      	b.n	8007208 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007218:	f7fc fa30 	bl	800367c <HAL_GetTick>
 800721c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0220 	bic.w	r2, r2, #32
 800722c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	2164      	movs	r1, #100	@ 0x64
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff ffa6 	bl	8007184 <SPI_EndRxTxTransaction>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d005      	beq.n	800724a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007242:	f043 0220 	orr.w	r2, r3, #32
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	2b10      	cmp	r3, #16
 8007256:	d112      	bne.n	800727e <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007264:	f043 0202 	orr.w	r2, r3, #2
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007274:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff fb32 	bl	80068e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800727c:	e020      	b.n	80072c0 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007282:	2b00      	cmp	r3, #0
 8007284:	d115      	bne.n	80072b2 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b04      	cmp	r3, #4
 8007290:	d107      	bne.n	80072a2 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fb fc90 	bl	8002bc0 <HAL_SPI_RxCpltCallback>
}
 80072a0:	e00e      	b.n	80072c0 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff fb0e 	bl	80068cc <HAL_SPI_TxRxCpltCallback>
}
 80072b0:	e006      	b.n	80072c0 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fb10 	bl	80068e0 <HAL_SPI_ErrorCallback>
}
 80072c0:	bf00      	nop
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80072de:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80072e0:	f7fc f9cc 	bl	800367c <HAL_GetTick>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	2164      	movs	r1, #100	@ 0x64
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fef2 	bl	80070d4 <SPI_EndRxTransaction>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072fa:	f043 0220 	orr.w	r2, r3, #32
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 0310 	and.w	r3, r3, #16
 8007314:	2b10      	cmp	r3, #16
 8007316:	d10e      	bne.n	8007336 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800731c:	f043 0202 	orr.w	r2, r3, #2
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800732c:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fad6 	bl	80068e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007334:	e00a      	b.n	800734c <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800733a:	2b00      	cmp	r3, #0
 800733c:	d103      	bne.n	8007346 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fb fc3e 	bl	8002bc0 <HAL_SPI_RxCpltCallback>
}
 8007344:	e002      	b.n	800734c <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff faca 	bl	80068e0 <HAL_SPI_ErrorCallback>
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800735c:	f7fc f98e 	bl	800367c <HAL_GetTick>
 8007360:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007370:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	2164      	movs	r1, #100	@ 0x64
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff ff04 	bl	8007184 <SPI_EndRxTxTransaction>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d005      	beq.n	800738e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007386:	f043 0220 	orr.w	r2, r3, #32
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007396:	2300      	movs	r3, #0
 8007398:	60bb      	str	r3, [r7, #8]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	60bb      	str	r3, [r7, #8]
 80073aa:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff fa8f 	bl	80068e0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80073c2:	e002      	b.n	80073ca <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fb fc0f 	bl	8002be8 <HAL_SPI_TxCpltCallback>
}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e040      	b.n	8007466 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d106      	bne.n	80073fa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f83a 	bl	800746e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2224      	movs	r2, #36	@ 0x24
 80073fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0201 	bic.w	r2, r2, #1
 800740e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fb73 	bl	8007b04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f8b8 	bl	8007594 <UART_SetConfig>
 8007424:	4603      	mov	r3, r0
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e01b      	b.n	8007466 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800743c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800744c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0201 	orr.w	r2, r2, #1
 800745c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fbf2 	bl	8007c48 <UART_CheckIdleState>
 8007464:	4603      	mov	r3, r0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b08a      	sub	sp, #40	@ 0x28
 8007486:	af02      	add	r7, sp, #8
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007496:	2b20      	cmp	r3, #32
 8007498:	d177      	bne.n	800758a <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <HAL_UART_Transmit+0x24>
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e070      	b.n	800758c <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2221      	movs	r2, #33	@ 0x21
 80074b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074b8:	f7fc f8e0 	bl	800367c <HAL_GetTick>
 80074bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	88fa      	ldrh	r2, [r7, #6]
 80074c2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	88fa      	ldrh	r2, [r7, #6]
 80074ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074d6:	d108      	bne.n	80074ea <HAL_UART_Transmit+0x68>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	61bb      	str	r3, [r7, #24]
 80074e8:	e003      	b.n	80074f2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074f2:	e02f      	b.n	8007554 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2200      	movs	r2, #0
 80074fc:	2180      	movs	r1, #128	@ 0x80
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 fc4a 	bl	8007d98 <UART_WaitOnFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d004      	beq.n	8007514 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2220      	movs	r2, #32
 800750e:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e03b      	b.n	800758c <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	881a      	ldrh	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007526:	b292      	uxth	r2, r2
 8007528:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	3302      	adds	r3, #2
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	e007      	b.n	8007542 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	781a      	ldrb	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	3301      	adds	r3, #1
 8007540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1c9      	bne.n	80074f4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2200      	movs	r2, #0
 8007568:	2140      	movs	r1, #64	@ 0x40
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fc14 	bl	8007d98 <UART_WaitOnFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2220      	movs	r2, #32
 800757a:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e005      	b.n	800758c <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800758a:	2302      	movs	r3, #2
  }
}
 800758c:	4618      	mov	r0, r3
 800758e:	3720      	adds	r7, #32
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007598:	b08a      	sub	sp, #40	@ 0x28
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	431a      	orrs	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	4ba4      	ldr	r3, [pc, #656]	@ (8007854 <UART_SetConfig+0x2c0>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a99      	ldr	r2, [pc, #612]	@ (8007858 <UART_SetConfig+0x2c4>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075fc:	4313      	orrs	r3, r2
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007610:	430a      	orrs	r2, r1
 8007612:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a90      	ldr	r2, [pc, #576]	@ (800785c <UART_SetConfig+0x2c8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d126      	bne.n	800766c <UART_SetConfig+0xd8>
 800761e:	4b90      	ldr	r3, [pc, #576]	@ (8007860 <UART_SetConfig+0x2cc>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	2b03      	cmp	r3, #3
 800762a:	d81b      	bhi.n	8007664 <UART_SetConfig+0xd0>
 800762c:	a201      	add	r2, pc, #4	@ (adr r2, 8007634 <UART_SetConfig+0xa0>)
 800762e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007632:	bf00      	nop
 8007634:	08007645 	.word	0x08007645
 8007638:	08007655 	.word	0x08007655
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800765d 	.word	0x0800765d
 8007644:	2301      	movs	r3, #1
 8007646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800764a:	e116      	b.n	800787a <UART_SetConfig+0x2e6>
 800764c:	2302      	movs	r3, #2
 800764e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007652:	e112      	b.n	800787a <UART_SetConfig+0x2e6>
 8007654:	2304      	movs	r3, #4
 8007656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800765a:	e10e      	b.n	800787a <UART_SetConfig+0x2e6>
 800765c:	2308      	movs	r3, #8
 800765e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007662:	e10a      	b.n	800787a <UART_SetConfig+0x2e6>
 8007664:	2310      	movs	r3, #16
 8007666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800766a:	e106      	b.n	800787a <UART_SetConfig+0x2e6>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a7c      	ldr	r2, [pc, #496]	@ (8007864 <UART_SetConfig+0x2d0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d138      	bne.n	80076e8 <UART_SetConfig+0x154>
 8007676:	4b7a      	ldr	r3, [pc, #488]	@ (8007860 <UART_SetConfig+0x2cc>)
 8007678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767c:	f003 030c 	and.w	r3, r3, #12
 8007680:	2b0c      	cmp	r3, #12
 8007682:	d82d      	bhi.n	80076e0 <UART_SetConfig+0x14c>
 8007684:	a201      	add	r2, pc, #4	@ (adr r2, 800768c <UART_SetConfig+0xf8>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	080076c1 	.word	0x080076c1
 8007690:	080076e1 	.word	0x080076e1
 8007694:	080076e1 	.word	0x080076e1
 8007698:	080076e1 	.word	0x080076e1
 800769c:	080076d1 	.word	0x080076d1
 80076a0:	080076e1 	.word	0x080076e1
 80076a4:	080076e1 	.word	0x080076e1
 80076a8:	080076e1 	.word	0x080076e1
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076e1 	.word	0x080076e1
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	080076e1 	.word	0x080076e1
 80076bc:	080076d9 	.word	0x080076d9
 80076c0:	2300      	movs	r3, #0
 80076c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076c6:	e0d8      	b.n	800787a <UART_SetConfig+0x2e6>
 80076c8:	2302      	movs	r3, #2
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ce:	e0d4      	b.n	800787a <UART_SetConfig+0x2e6>
 80076d0:	2304      	movs	r3, #4
 80076d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076d6:	e0d0      	b.n	800787a <UART_SetConfig+0x2e6>
 80076d8:	2308      	movs	r3, #8
 80076da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076de:	e0cc      	b.n	800787a <UART_SetConfig+0x2e6>
 80076e0:	2310      	movs	r3, #16
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e6:	e0c8      	b.n	800787a <UART_SetConfig+0x2e6>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a5e      	ldr	r2, [pc, #376]	@ (8007868 <UART_SetConfig+0x2d4>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d125      	bne.n	800773e <UART_SetConfig+0x1aa>
 80076f2:	4b5b      	ldr	r3, [pc, #364]	@ (8007860 <UART_SetConfig+0x2cc>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076fc:	2b30      	cmp	r3, #48	@ 0x30
 80076fe:	d016      	beq.n	800772e <UART_SetConfig+0x19a>
 8007700:	2b30      	cmp	r3, #48	@ 0x30
 8007702:	d818      	bhi.n	8007736 <UART_SetConfig+0x1a2>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d00a      	beq.n	800771e <UART_SetConfig+0x18a>
 8007708:	2b20      	cmp	r3, #32
 800770a:	d814      	bhi.n	8007736 <UART_SetConfig+0x1a2>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <UART_SetConfig+0x182>
 8007710:	2b10      	cmp	r3, #16
 8007712:	d008      	beq.n	8007726 <UART_SetConfig+0x192>
 8007714:	e00f      	b.n	8007736 <UART_SetConfig+0x1a2>
 8007716:	2300      	movs	r3, #0
 8007718:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800771c:	e0ad      	b.n	800787a <UART_SetConfig+0x2e6>
 800771e:	2302      	movs	r3, #2
 8007720:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007724:	e0a9      	b.n	800787a <UART_SetConfig+0x2e6>
 8007726:	2304      	movs	r3, #4
 8007728:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800772c:	e0a5      	b.n	800787a <UART_SetConfig+0x2e6>
 800772e:	2308      	movs	r3, #8
 8007730:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007734:	e0a1      	b.n	800787a <UART_SetConfig+0x2e6>
 8007736:	2310      	movs	r3, #16
 8007738:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800773c:	e09d      	b.n	800787a <UART_SetConfig+0x2e6>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a4a      	ldr	r2, [pc, #296]	@ (800786c <UART_SetConfig+0x2d8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d125      	bne.n	8007794 <UART_SetConfig+0x200>
 8007748:	4b45      	ldr	r3, [pc, #276]	@ (8007860 <UART_SetConfig+0x2cc>)
 800774a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007752:	2bc0      	cmp	r3, #192	@ 0xc0
 8007754:	d016      	beq.n	8007784 <UART_SetConfig+0x1f0>
 8007756:	2bc0      	cmp	r3, #192	@ 0xc0
 8007758:	d818      	bhi.n	800778c <UART_SetConfig+0x1f8>
 800775a:	2b80      	cmp	r3, #128	@ 0x80
 800775c:	d00a      	beq.n	8007774 <UART_SetConfig+0x1e0>
 800775e:	2b80      	cmp	r3, #128	@ 0x80
 8007760:	d814      	bhi.n	800778c <UART_SetConfig+0x1f8>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <UART_SetConfig+0x1d8>
 8007766:	2b40      	cmp	r3, #64	@ 0x40
 8007768:	d008      	beq.n	800777c <UART_SetConfig+0x1e8>
 800776a:	e00f      	b.n	800778c <UART_SetConfig+0x1f8>
 800776c:	2300      	movs	r3, #0
 800776e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007772:	e082      	b.n	800787a <UART_SetConfig+0x2e6>
 8007774:	2302      	movs	r3, #2
 8007776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800777a:	e07e      	b.n	800787a <UART_SetConfig+0x2e6>
 800777c:	2304      	movs	r3, #4
 800777e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007782:	e07a      	b.n	800787a <UART_SetConfig+0x2e6>
 8007784:	2308      	movs	r3, #8
 8007786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800778a:	e076      	b.n	800787a <UART_SetConfig+0x2e6>
 800778c:	2310      	movs	r3, #16
 800778e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007792:	e072      	b.n	800787a <UART_SetConfig+0x2e6>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a35      	ldr	r2, [pc, #212]	@ (8007870 <UART_SetConfig+0x2dc>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d12a      	bne.n	80077f4 <UART_SetConfig+0x260>
 800779e:	4b30      	ldr	r3, [pc, #192]	@ (8007860 <UART_SetConfig+0x2cc>)
 80077a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077ac:	d01a      	beq.n	80077e4 <UART_SetConfig+0x250>
 80077ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b2:	d81b      	bhi.n	80077ec <UART_SetConfig+0x258>
 80077b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077b8:	d00c      	beq.n	80077d4 <UART_SetConfig+0x240>
 80077ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077be:	d815      	bhi.n	80077ec <UART_SetConfig+0x258>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <UART_SetConfig+0x238>
 80077c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077c8:	d008      	beq.n	80077dc <UART_SetConfig+0x248>
 80077ca:	e00f      	b.n	80077ec <UART_SetConfig+0x258>
 80077cc:	2300      	movs	r3, #0
 80077ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077d2:	e052      	b.n	800787a <UART_SetConfig+0x2e6>
 80077d4:	2302      	movs	r3, #2
 80077d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077da:	e04e      	b.n	800787a <UART_SetConfig+0x2e6>
 80077dc:	2304      	movs	r3, #4
 80077de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077e2:	e04a      	b.n	800787a <UART_SetConfig+0x2e6>
 80077e4:	2308      	movs	r3, #8
 80077e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ea:	e046      	b.n	800787a <UART_SetConfig+0x2e6>
 80077ec:	2310      	movs	r3, #16
 80077ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f2:	e042      	b.n	800787a <UART_SetConfig+0x2e6>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a17      	ldr	r2, [pc, #92]	@ (8007858 <UART_SetConfig+0x2c4>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d13a      	bne.n	8007874 <UART_SetConfig+0x2e0>
 80077fe:	4b18      	ldr	r3, [pc, #96]	@ (8007860 <UART_SetConfig+0x2cc>)
 8007800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007804:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007808:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800780c:	d01a      	beq.n	8007844 <UART_SetConfig+0x2b0>
 800780e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007812:	d81b      	bhi.n	800784c <UART_SetConfig+0x2b8>
 8007814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007818:	d00c      	beq.n	8007834 <UART_SetConfig+0x2a0>
 800781a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800781e:	d815      	bhi.n	800784c <UART_SetConfig+0x2b8>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <UART_SetConfig+0x298>
 8007824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007828:	d008      	beq.n	800783c <UART_SetConfig+0x2a8>
 800782a:	e00f      	b.n	800784c <UART_SetConfig+0x2b8>
 800782c:	2300      	movs	r3, #0
 800782e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007832:	e022      	b.n	800787a <UART_SetConfig+0x2e6>
 8007834:	2302      	movs	r3, #2
 8007836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800783a:	e01e      	b.n	800787a <UART_SetConfig+0x2e6>
 800783c:	2304      	movs	r3, #4
 800783e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007842:	e01a      	b.n	800787a <UART_SetConfig+0x2e6>
 8007844:	2308      	movs	r3, #8
 8007846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800784a:	e016      	b.n	800787a <UART_SetConfig+0x2e6>
 800784c:	2310      	movs	r3, #16
 800784e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007852:	e012      	b.n	800787a <UART_SetConfig+0x2e6>
 8007854:	efff69f3 	.word	0xefff69f3
 8007858:	40008000 	.word	0x40008000
 800785c:	40013800 	.word	0x40013800
 8007860:	40021000 	.word	0x40021000
 8007864:	40004400 	.word	0x40004400
 8007868:	40004800 	.word	0x40004800
 800786c:	40004c00 	.word	0x40004c00
 8007870:	40005000 	.word	0x40005000
 8007874:	2310      	movs	r3, #16
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a9f      	ldr	r2, [pc, #636]	@ (8007afc <UART_SetConfig+0x568>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d17a      	bne.n	800797a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007884:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007888:	2b08      	cmp	r3, #8
 800788a:	d824      	bhi.n	80078d6 <UART_SetConfig+0x342>
 800788c:	a201      	add	r2, pc, #4	@ (adr r2, 8007894 <UART_SetConfig+0x300>)
 800788e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007892:	bf00      	nop
 8007894:	080078b9 	.word	0x080078b9
 8007898:	080078d7 	.word	0x080078d7
 800789c:	080078c1 	.word	0x080078c1
 80078a0:	080078d7 	.word	0x080078d7
 80078a4:	080078c7 	.word	0x080078c7
 80078a8:	080078d7 	.word	0x080078d7
 80078ac:	080078d7 	.word	0x080078d7
 80078b0:	080078d7 	.word	0x080078d7
 80078b4:	080078cf 	.word	0x080078cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b8:	f7fd fdf0 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 80078bc:	61f8      	str	r0, [r7, #28]
        break;
 80078be:	e010      	b.n	80078e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c0:	4b8f      	ldr	r3, [pc, #572]	@ (8007b00 <UART_SetConfig+0x56c>)
 80078c2:	61fb      	str	r3, [r7, #28]
        break;
 80078c4:	e00d      	b.n	80078e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078c6:	f7fd fd51 	bl	800536c <HAL_RCC_GetSysClockFreq>
 80078ca:	61f8      	str	r0, [r7, #28]
        break;
 80078cc:	e009      	b.n	80078e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078d2:	61fb      	str	r3, [r7, #28]
        break;
 80078d4:	e005      	b.n	80078e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 80fb 	beq.w	8007ae0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4413      	add	r3, r2
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d305      	bcc.n	8007906 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	429a      	cmp	r2, r3
 8007904:	d903      	bls.n	800790e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800790c:	e0e8      	b.n	8007ae0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	2200      	movs	r2, #0
 8007912:	461c      	mov	r4, r3
 8007914:	4615      	mov	r5, r2
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	f04f 0300 	mov.w	r3, #0
 800791e:	022b      	lsls	r3, r5, #8
 8007920:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007924:	0222      	lsls	r2, r4, #8
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	6849      	ldr	r1, [r1, #4]
 800792a:	0849      	lsrs	r1, r1, #1
 800792c:	2000      	movs	r0, #0
 800792e:	4688      	mov	r8, r1
 8007930:	4681      	mov	r9, r0
 8007932:	eb12 0a08 	adds.w	sl, r2, r8
 8007936:	eb43 0b09 	adc.w	fp, r3, r9
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007948:	4650      	mov	r0, sl
 800794a:	4659      	mov	r1, fp
 800794c:	f7f9 f99c 	bl	8000c88 <__aeabi_uldivmod>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4613      	mov	r3, r2
 8007956:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800795e:	d308      	bcc.n	8007972 <UART_SetConfig+0x3de>
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007966:	d204      	bcs.n	8007972 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	60da      	str	r2, [r3, #12]
 8007970:	e0b6      	b.n	8007ae0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007978:	e0b2      	b.n	8007ae0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007982:	d15e      	bne.n	8007a42 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007984:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007988:	2b08      	cmp	r3, #8
 800798a:	d828      	bhi.n	80079de <UART_SetConfig+0x44a>
 800798c:	a201      	add	r2, pc, #4	@ (adr r2, 8007994 <UART_SetConfig+0x400>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079b9 	.word	0x080079b9
 8007998:	080079c1 	.word	0x080079c1
 800799c:	080079c9 	.word	0x080079c9
 80079a0:	080079df 	.word	0x080079df
 80079a4:	080079cf 	.word	0x080079cf
 80079a8:	080079df 	.word	0x080079df
 80079ac:	080079df 	.word	0x080079df
 80079b0:	080079df 	.word	0x080079df
 80079b4:	080079d7 	.word	0x080079d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b8:	f7fd fd70 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 80079bc:	61f8      	str	r0, [r7, #28]
        break;
 80079be:	e014      	b.n	80079ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079c0:	f7fd fd82 	bl	80054c8 <HAL_RCC_GetPCLK2Freq>
 80079c4:	61f8      	str	r0, [r7, #28]
        break;
 80079c6:	e010      	b.n	80079ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007b00 <UART_SetConfig+0x56c>)
 80079ca:	61fb      	str	r3, [r7, #28]
        break;
 80079cc:	e00d      	b.n	80079ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ce:	f7fd fccd 	bl	800536c <HAL_RCC_GetSysClockFreq>
 80079d2:	61f8      	str	r0, [r7, #28]
        break;
 80079d4:	e009      	b.n	80079ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079da:	61fb      	str	r3, [r7, #28]
        break;
 80079dc:	e005      	b.n	80079ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80079e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d077      	beq.n	8007ae0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	005a      	lsls	r2, r3, #1
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	441a      	add	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	2b0f      	cmp	r3, #15
 8007a0a:	d916      	bls.n	8007a3a <UART_SetConfig+0x4a6>
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a12:	d212      	bcs.n	8007a3a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	f023 030f 	bic.w	r3, r3, #15
 8007a1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	085b      	lsrs	r3, r3, #1
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	8afb      	ldrh	r3, [r7, #22]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	8afa      	ldrh	r2, [r7, #22]
 8007a36:	60da      	str	r2, [r3, #12]
 8007a38:	e052      	b.n	8007ae0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a40:	e04e      	b.n	8007ae0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a46:	2b08      	cmp	r3, #8
 8007a48:	d827      	bhi.n	8007a9a <UART_SetConfig+0x506>
 8007a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a50 <UART_SetConfig+0x4bc>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007a7d 	.word	0x08007a7d
 8007a58:	08007a85 	.word	0x08007a85
 8007a5c:	08007a9b 	.word	0x08007a9b
 8007a60:	08007a8b 	.word	0x08007a8b
 8007a64:	08007a9b 	.word	0x08007a9b
 8007a68:	08007a9b 	.word	0x08007a9b
 8007a6c:	08007a9b 	.word	0x08007a9b
 8007a70:	08007a93 	.word	0x08007a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a74:	f7fd fd12 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8007a78:	61f8      	str	r0, [r7, #28]
        break;
 8007a7a:	e014      	b.n	8007aa6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a7c:	f7fd fd24 	bl	80054c8 <HAL_RCC_GetPCLK2Freq>
 8007a80:	61f8      	str	r0, [r7, #28]
        break;
 8007a82:	e010      	b.n	8007aa6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a84:	4b1e      	ldr	r3, [pc, #120]	@ (8007b00 <UART_SetConfig+0x56c>)
 8007a86:	61fb      	str	r3, [r7, #28]
        break;
 8007a88:	e00d      	b.n	8007aa6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a8a:	f7fd fc6f 	bl	800536c <HAL_RCC_GetSysClockFreq>
 8007a8e:	61f8      	str	r0, [r7, #28]
        break;
 8007a90:	e009      	b.n	8007aa6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a96:	61fb      	str	r3, [r7, #28]
        break;
 8007a98:	e005      	b.n	8007aa6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007aa4:	bf00      	nop
    }

    if (pclk != 0U)
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d019      	beq.n	8007ae0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	085a      	lsrs	r2, r3, #1
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	441a      	add	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	2b0f      	cmp	r3, #15
 8007ac4:	d909      	bls.n	8007ada <UART_SetConfig+0x546>
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007acc:	d205      	bcs.n	8007ada <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60da      	str	r2, [r3, #12]
 8007ad8:	e002      	b.n	8007ae0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007aec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3728      	adds	r7, #40	@ 0x28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afa:	bf00      	nop
 8007afc:	40008000 	.word	0x40008000
 8007b00:	00f42400 	.word	0x00f42400

08007b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	f003 0308 	and.w	r3, r3, #8
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01a      	beq.n	8007c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c02:	d10a      	bne.n	8007c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b098      	sub	sp, #96	@ 0x60
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c58:	f7fb fd10 	bl	800367c <HAL_GetTick>
 8007c5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d12e      	bne.n	8007cca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c74:	2200      	movs	r2, #0
 8007c76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f88c 	bl	8007d98 <UART_WaitOnFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d021      	beq.n	8007cca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ca6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e6      	bne.n	8007c86 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e062      	b.n	8007d90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	d149      	bne.n	8007d6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f856 	bl	8007d98 <UART_WaitOnFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d03c      	beq.n	8007d6c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d18:	e841 2300 	strex	r3, r2, [r1]
 8007d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e6      	bne.n	8007cf2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3308      	adds	r3, #8
 8007d2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	e853 3f00 	ldrex	r3, [r3]
 8007d32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0301 	bic.w	r3, r3, #1
 8007d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3308      	adds	r3, #8
 8007d42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d44:	61fa      	str	r2, [r7, #28]
 8007d46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	69b9      	ldr	r1, [r7, #24]
 8007d4a:	69fa      	ldr	r2, [r7, #28]
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	617b      	str	r3, [r7, #20]
   return(result);
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e5      	bne.n	8007d24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e011      	b.n	8007d90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3758      	adds	r7, #88	@ 0x58
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	4613      	mov	r3, r2
 8007da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007da8:	e04f      	b.n	8007e4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d04b      	beq.n	8007e4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db2:	f7fb fc63 	bl	800367c <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d302      	bcc.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e04e      	b.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0304 	and.w	r3, r3, #4
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d037      	beq.n	8007e4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b80      	cmp	r3, #128	@ 0x80
 8007dde:	d034      	beq.n	8007e4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b40      	cmp	r3, #64	@ 0x40
 8007de4:	d031      	beq.n	8007e4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d110      	bne.n	8007e16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2208      	movs	r2, #8
 8007dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 f838 	bl	8007e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2208      	movs	r2, #8
 8007e06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e029      	b.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e24:	d111      	bne.n	8007e4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 f81e 	bl	8007e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e00f      	b.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69da      	ldr	r2, [r3, #28]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4013      	ands	r3, r2
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	bf0c      	ite	eq
 8007e5a:	2301      	moveq	r3, #1
 8007e5c:	2300      	movne	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d0a0      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b095      	sub	sp, #84	@ 0x54
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e6      	bne.n	8007e7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f023 0301 	bic.w	r3, r3, #1
 8007ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e5      	bne.n	8007eac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d118      	bne.n	8007f1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	e853 3f00 	ldrex	r3, [r3]
 8007ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f023 0310 	bic.w	r3, r3, #16
 8007efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f06:	61bb      	str	r3, [r7, #24]
 8007f08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	6979      	ldr	r1, [r7, #20]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	613b      	str	r3, [r7, #16]
   return(result);
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e6      	bne.n	8007ee8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f2e:	bf00      	nop
 8007f30:	3754      	adds	r7, #84	@ 0x54
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <__cvt>:
 8007f3a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3e:	ec57 6b10 	vmov	r6, r7, d0
 8007f42:	2f00      	cmp	r7, #0
 8007f44:	460c      	mov	r4, r1
 8007f46:	4619      	mov	r1, r3
 8007f48:	463b      	mov	r3, r7
 8007f4a:	bfbb      	ittet	lt
 8007f4c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007f50:	461f      	movlt	r7, r3
 8007f52:	2300      	movge	r3, #0
 8007f54:	232d      	movlt	r3, #45	@ 0x2d
 8007f56:	700b      	strb	r3, [r1, #0]
 8007f58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f5a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f5e:	4691      	mov	r9, r2
 8007f60:	f023 0820 	bic.w	r8, r3, #32
 8007f64:	bfbc      	itt	lt
 8007f66:	4632      	movlt	r2, r6
 8007f68:	4616      	movlt	r6, r2
 8007f6a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f6e:	d005      	beq.n	8007f7c <__cvt+0x42>
 8007f70:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007f74:	d100      	bne.n	8007f78 <__cvt+0x3e>
 8007f76:	3401      	adds	r4, #1
 8007f78:	2102      	movs	r1, #2
 8007f7a:	e000      	b.n	8007f7e <__cvt+0x44>
 8007f7c:	2103      	movs	r1, #3
 8007f7e:	ab03      	add	r3, sp, #12
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	ab02      	add	r3, sp, #8
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	ec47 6b10 	vmov	d0, r6, r7
 8007f8a:	4653      	mov	r3, sl
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	f001 fa6b 	bl	8009468 <_dtoa_r>
 8007f92:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007f96:	4605      	mov	r5, r0
 8007f98:	d119      	bne.n	8007fce <__cvt+0x94>
 8007f9a:	f019 0f01 	tst.w	r9, #1
 8007f9e:	d00e      	beq.n	8007fbe <__cvt+0x84>
 8007fa0:	eb00 0904 	add.w	r9, r0, r4
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fb0:	b108      	cbz	r0, 8007fb6 <__cvt+0x7c>
 8007fb2:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fb6:	2230      	movs	r2, #48	@ 0x30
 8007fb8:	9b03      	ldr	r3, [sp, #12]
 8007fba:	454b      	cmp	r3, r9
 8007fbc:	d31e      	bcc.n	8007ffc <__cvt+0xc2>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fc2:	1b5b      	subs	r3, r3, r5
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	b004      	add	sp, #16
 8007fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007fd2:	eb00 0904 	add.w	r9, r0, r4
 8007fd6:	d1e5      	bne.n	8007fa4 <__cvt+0x6a>
 8007fd8:	7803      	ldrb	r3, [r0, #0]
 8007fda:	2b30      	cmp	r3, #48	@ 0x30
 8007fdc:	d10a      	bne.n	8007ff4 <__cvt+0xba>
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7f8 fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fea:	b918      	cbnz	r0, 8007ff4 <__cvt+0xba>
 8007fec:	f1c4 0401 	rsb	r4, r4, #1
 8007ff0:	f8ca 4000 	str.w	r4, [sl]
 8007ff4:	f8da 3000 	ldr.w	r3, [sl]
 8007ff8:	4499      	add	r9, r3
 8007ffa:	e7d3      	b.n	8007fa4 <__cvt+0x6a>
 8007ffc:	1c59      	adds	r1, r3, #1
 8007ffe:	9103      	str	r1, [sp, #12]
 8008000:	701a      	strb	r2, [r3, #0]
 8008002:	e7d9      	b.n	8007fb8 <__cvt+0x7e>

08008004 <__exponent>:
 8008004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008006:	2900      	cmp	r1, #0
 8008008:	bfba      	itte	lt
 800800a:	4249      	neglt	r1, r1
 800800c:	232d      	movlt	r3, #45	@ 0x2d
 800800e:	232b      	movge	r3, #43	@ 0x2b
 8008010:	2909      	cmp	r1, #9
 8008012:	7002      	strb	r2, [r0, #0]
 8008014:	7043      	strb	r3, [r0, #1]
 8008016:	dd29      	ble.n	800806c <__exponent+0x68>
 8008018:	f10d 0307 	add.w	r3, sp, #7
 800801c:	461d      	mov	r5, r3
 800801e:	270a      	movs	r7, #10
 8008020:	461a      	mov	r2, r3
 8008022:	fbb1 f6f7 	udiv	r6, r1, r7
 8008026:	fb07 1416 	mls	r4, r7, r6, r1
 800802a:	3430      	adds	r4, #48	@ 0x30
 800802c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008030:	460c      	mov	r4, r1
 8008032:	2c63      	cmp	r4, #99	@ 0x63
 8008034:	f103 33ff 	add.w	r3, r3, #4294967295
 8008038:	4631      	mov	r1, r6
 800803a:	dcf1      	bgt.n	8008020 <__exponent+0x1c>
 800803c:	3130      	adds	r1, #48	@ 0x30
 800803e:	1e94      	subs	r4, r2, #2
 8008040:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008044:	1c41      	adds	r1, r0, #1
 8008046:	4623      	mov	r3, r4
 8008048:	42ab      	cmp	r3, r5
 800804a:	d30a      	bcc.n	8008062 <__exponent+0x5e>
 800804c:	f10d 0309 	add.w	r3, sp, #9
 8008050:	1a9b      	subs	r3, r3, r2
 8008052:	42ac      	cmp	r4, r5
 8008054:	bf88      	it	hi
 8008056:	2300      	movhi	r3, #0
 8008058:	3302      	adds	r3, #2
 800805a:	4403      	add	r3, r0
 800805c:	1a18      	subs	r0, r3, r0
 800805e:	b003      	add	sp, #12
 8008060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008062:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008066:	f801 6f01 	strb.w	r6, [r1, #1]!
 800806a:	e7ed      	b.n	8008048 <__exponent+0x44>
 800806c:	2330      	movs	r3, #48	@ 0x30
 800806e:	3130      	adds	r1, #48	@ 0x30
 8008070:	7083      	strb	r3, [r0, #2]
 8008072:	70c1      	strb	r1, [r0, #3]
 8008074:	1d03      	adds	r3, r0, #4
 8008076:	e7f1      	b.n	800805c <__exponent+0x58>

08008078 <_printf_float>:
 8008078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807c:	b08d      	sub	sp, #52	@ 0x34
 800807e:	460c      	mov	r4, r1
 8008080:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008084:	4616      	mov	r6, r2
 8008086:	461f      	mov	r7, r3
 8008088:	4605      	mov	r5, r0
 800808a:	f001 f8bb 	bl	8009204 <_localeconv_r>
 800808e:	6803      	ldr	r3, [r0, #0]
 8008090:	9304      	str	r3, [sp, #16]
 8008092:	4618      	mov	r0, r3
 8008094:	f7f8 f8ec 	bl	8000270 <strlen>
 8008098:	2300      	movs	r3, #0
 800809a:	930a      	str	r3, [sp, #40]	@ 0x28
 800809c:	f8d8 3000 	ldr.w	r3, [r8]
 80080a0:	9005      	str	r0, [sp, #20]
 80080a2:	3307      	adds	r3, #7
 80080a4:	f023 0307 	bic.w	r3, r3, #7
 80080a8:	f103 0208 	add.w	r2, r3, #8
 80080ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080b0:	f8d4 b000 	ldr.w	fp, [r4]
 80080b4:	f8c8 2000 	str.w	r2, [r8]
 80080b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80080c0:	9307      	str	r3, [sp, #28]
 80080c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80080c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80080ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ce:	4b9c      	ldr	r3, [pc, #624]	@ (8008340 <_printf_float+0x2c8>)
 80080d0:	f04f 32ff 	mov.w	r2, #4294967295
 80080d4:	f7f8 fd2a 	bl	8000b2c <__aeabi_dcmpun>
 80080d8:	bb70      	cbnz	r0, 8008138 <_printf_float+0xc0>
 80080da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080de:	4b98      	ldr	r3, [pc, #608]	@ (8008340 <_printf_float+0x2c8>)
 80080e0:	f04f 32ff 	mov.w	r2, #4294967295
 80080e4:	f7f8 fd04 	bl	8000af0 <__aeabi_dcmple>
 80080e8:	bb30      	cbnz	r0, 8008138 <_printf_float+0xc0>
 80080ea:	2200      	movs	r2, #0
 80080ec:	2300      	movs	r3, #0
 80080ee:	4640      	mov	r0, r8
 80080f0:	4649      	mov	r1, r9
 80080f2:	f7f8 fcf3 	bl	8000adc <__aeabi_dcmplt>
 80080f6:	b110      	cbz	r0, 80080fe <_printf_float+0x86>
 80080f8:	232d      	movs	r3, #45	@ 0x2d
 80080fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080fe:	4a91      	ldr	r2, [pc, #580]	@ (8008344 <_printf_float+0x2cc>)
 8008100:	4b91      	ldr	r3, [pc, #580]	@ (8008348 <_printf_float+0x2d0>)
 8008102:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008106:	bf8c      	ite	hi
 8008108:	4690      	movhi	r8, r2
 800810a:	4698      	movls	r8, r3
 800810c:	2303      	movs	r3, #3
 800810e:	6123      	str	r3, [r4, #16]
 8008110:	f02b 0304 	bic.w	r3, fp, #4
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	f04f 0900 	mov.w	r9, #0
 800811a:	9700      	str	r7, [sp, #0]
 800811c:	4633      	mov	r3, r6
 800811e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008120:	4621      	mov	r1, r4
 8008122:	4628      	mov	r0, r5
 8008124:	f000 f9d2 	bl	80084cc <_printf_common>
 8008128:	3001      	adds	r0, #1
 800812a:	f040 808d 	bne.w	8008248 <_printf_float+0x1d0>
 800812e:	f04f 30ff 	mov.w	r0, #4294967295
 8008132:	b00d      	add	sp, #52	@ 0x34
 8008134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	4642      	mov	r2, r8
 800813a:	464b      	mov	r3, r9
 800813c:	4640      	mov	r0, r8
 800813e:	4649      	mov	r1, r9
 8008140:	f7f8 fcf4 	bl	8000b2c <__aeabi_dcmpun>
 8008144:	b140      	cbz	r0, 8008158 <_printf_float+0xe0>
 8008146:	464b      	mov	r3, r9
 8008148:	2b00      	cmp	r3, #0
 800814a:	bfbc      	itt	lt
 800814c:	232d      	movlt	r3, #45	@ 0x2d
 800814e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008152:	4a7e      	ldr	r2, [pc, #504]	@ (800834c <_printf_float+0x2d4>)
 8008154:	4b7e      	ldr	r3, [pc, #504]	@ (8008350 <_printf_float+0x2d8>)
 8008156:	e7d4      	b.n	8008102 <_printf_float+0x8a>
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800815e:	9206      	str	r2, [sp, #24]
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	d13b      	bne.n	80081dc <_printf_float+0x164>
 8008164:	2306      	movs	r3, #6
 8008166:	6063      	str	r3, [r4, #4]
 8008168:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800816c:	2300      	movs	r3, #0
 800816e:	6022      	str	r2, [r4, #0]
 8008170:	9303      	str	r3, [sp, #12]
 8008172:	ab0a      	add	r3, sp, #40	@ 0x28
 8008174:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008178:	ab09      	add	r3, sp, #36	@ 0x24
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	6861      	ldr	r1, [r4, #4]
 800817e:	ec49 8b10 	vmov	d0, r8, r9
 8008182:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008186:	4628      	mov	r0, r5
 8008188:	f7ff fed7 	bl	8007f3a <__cvt>
 800818c:	9b06      	ldr	r3, [sp, #24]
 800818e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008190:	2b47      	cmp	r3, #71	@ 0x47
 8008192:	4680      	mov	r8, r0
 8008194:	d129      	bne.n	80081ea <_printf_float+0x172>
 8008196:	1cc8      	adds	r0, r1, #3
 8008198:	db02      	blt.n	80081a0 <_printf_float+0x128>
 800819a:	6863      	ldr	r3, [r4, #4]
 800819c:	4299      	cmp	r1, r3
 800819e:	dd41      	ble.n	8008224 <_printf_float+0x1ac>
 80081a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80081a4:	fa5f fa8a 	uxtb.w	sl, sl
 80081a8:	3901      	subs	r1, #1
 80081aa:	4652      	mov	r2, sl
 80081ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80081b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80081b2:	f7ff ff27 	bl	8008004 <__exponent>
 80081b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081b8:	1813      	adds	r3, r2, r0
 80081ba:	2a01      	cmp	r2, #1
 80081bc:	4681      	mov	r9, r0
 80081be:	6123      	str	r3, [r4, #16]
 80081c0:	dc02      	bgt.n	80081c8 <_printf_float+0x150>
 80081c2:	6822      	ldr	r2, [r4, #0]
 80081c4:	07d2      	lsls	r2, r2, #31
 80081c6:	d501      	bpl.n	80081cc <_printf_float+0x154>
 80081c8:	3301      	adds	r3, #1
 80081ca:	6123      	str	r3, [r4, #16]
 80081cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d0a2      	beq.n	800811a <_printf_float+0xa2>
 80081d4:	232d      	movs	r3, #45	@ 0x2d
 80081d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081da:	e79e      	b.n	800811a <_printf_float+0xa2>
 80081dc:	9a06      	ldr	r2, [sp, #24]
 80081de:	2a47      	cmp	r2, #71	@ 0x47
 80081e0:	d1c2      	bne.n	8008168 <_printf_float+0xf0>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1c0      	bne.n	8008168 <_printf_float+0xf0>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e7bd      	b.n	8008166 <_printf_float+0xee>
 80081ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081ee:	d9db      	bls.n	80081a8 <_printf_float+0x130>
 80081f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80081f4:	d118      	bne.n	8008228 <_printf_float+0x1b0>
 80081f6:	2900      	cmp	r1, #0
 80081f8:	6863      	ldr	r3, [r4, #4]
 80081fa:	dd0b      	ble.n	8008214 <_printf_float+0x19c>
 80081fc:	6121      	str	r1, [r4, #16]
 80081fe:	b913      	cbnz	r3, 8008206 <_printf_float+0x18e>
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	07d0      	lsls	r0, r2, #31
 8008204:	d502      	bpl.n	800820c <_printf_float+0x194>
 8008206:	3301      	adds	r3, #1
 8008208:	440b      	add	r3, r1
 800820a:	6123      	str	r3, [r4, #16]
 800820c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800820e:	f04f 0900 	mov.w	r9, #0
 8008212:	e7db      	b.n	80081cc <_printf_float+0x154>
 8008214:	b913      	cbnz	r3, 800821c <_printf_float+0x1a4>
 8008216:	6822      	ldr	r2, [r4, #0]
 8008218:	07d2      	lsls	r2, r2, #31
 800821a:	d501      	bpl.n	8008220 <_printf_float+0x1a8>
 800821c:	3302      	adds	r3, #2
 800821e:	e7f4      	b.n	800820a <_printf_float+0x192>
 8008220:	2301      	movs	r3, #1
 8008222:	e7f2      	b.n	800820a <_printf_float+0x192>
 8008224:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800822a:	4299      	cmp	r1, r3
 800822c:	db05      	blt.n	800823a <_printf_float+0x1c2>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	6121      	str	r1, [r4, #16]
 8008232:	07d8      	lsls	r0, r3, #31
 8008234:	d5ea      	bpl.n	800820c <_printf_float+0x194>
 8008236:	1c4b      	adds	r3, r1, #1
 8008238:	e7e7      	b.n	800820a <_printf_float+0x192>
 800823a:	2900      	cmp	r1, #0
 800823c:	bfd4      	ite	le
 800823e:	f1c1 0202 	rsble	r2, r1, #2
 8008242:	2201      	movgt	r2, #1
 8008244:	4413      	add	r3, r2
 8008246:	e7e0      	b.n	800820a <_printf_float+0x192>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	055a      	lsls	r2, r3, #21
 800824c:	d407      	bmi.n	800825e <_printf_float+0x1e6>
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	4642      	mov	r2, r8
 8008252:	4631      	mov	r1, r6
 8008254:	4628      	mov	r0, r5
 8008256:	47b8      	blx	r7
 8008258:	3001      	adds	r0, #1
 800825a:	d12b      	bne.n	80082b4 <_printf_float+0x23c>
 800825c:	e767      	b.n	800812e <_printf_float+0xb6>
 800825e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008262:	f240 80dd 	bls.w	8008420 <_printf_float+0x3a8>
 8008266:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800826a:	2200      	movs	r2, #0
 800826c:	2300      	movs	r3, #0
 800826e:	f7f8 fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008272:	2800      	cmp	r0, #0
 8008274:	d033      	beq.n	80082de <_printf_float+0x266>
 8008276:	4a37      	ldr	r2, [pc, #220]	@ (8008354 <_printf_float+0x2dc>)
 8008278:	2301      	movs	r3, #1
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	f43f af54 	beq.w	800812e <_printf_float+0xb6>
 8008286:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800828a:	4543      	cmp	r3, r8
 800828c:	db02      	blt.n	8008294 <_printf_float+0x21c>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	07d8      	lsls	r0, r3, #31
 8008292:	d50f      	bpl.n	80082b4 <_printf_float+0x23c>
 8008294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008298:	4631      	mov	r1, r6
 800829a:	4628      	mov	r0, r5
 800829c:	47b8      	blx	r7
 800829e:	3001      	adds	r0, #1
 80082a0:	f43f af45 	beq.w	800812e <_printf_float+0xb6>
 80082a4:	f04f 0900 	mov.w	r9, #0
 80082a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80082ac:	f104 0a1a 	add.w	sl, r4, #26
 80082b0:	45c8      	cmp	r8, r9
 80082b2:	dc09      	bgt.n	80082c8 <_printf_float+0x250>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	079b      	lsls	r3, r3, #30
 80082b8:	f100 8103 	bmi.w	80084c2 <_printf_float+0x44a>
 80082bc:	68e0      	ldr	r0, [r4, #12]
 80082be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082c0:	4298      	cmp	r0, r3
 80082c2:	bfb8      	it	lt
 80082c4:	4618      	movlt	r0, r3
 80082c6:	e734      	b.n	8008132 <_printf_float+0xba>
 80082c8:	2301      	movs	r3, #1
 80082ca:	4652      	mov	r2, sl
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	f43f af2b 	beq.w	800812e <_printf_float+0xb6>
 80082d8:	f109 0901 	add.w	r9, r9, #1
 80082dc:	e7e8      	b.n	80082b0 <_printf_float+0x238>
 80082de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	dc39      	bgt.n	8008358 <_printf_float+0x2e0>
 80082e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008354 <_printf_float+0x2dc>)
 80082e6:	2301      	movs	r3, #1
 80082e8:	4631      	mov	r1, r6
 80082ea:	4628      	mov	r0, r5
 80082ec:	47b8      	blx	r7
 80082ee:	3001      	adds	r0, #1
 80082f0:	f43f af1d 	beq.w	800812e <_printf_float+0xb6>
 80082f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80082f8:	ea59 0303 	orrs.w	r3, r9, r3
 80082fc:	d102      	bne.n	8008304 <_printf_float+0x28c>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	07d9      	lsls	r1, r3, #31
 8008302:	d5d7      	bpl.n	80082b4 <_printf_float+0x23c>
 8008304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008308:	4631      	mov	r1, r6
 800830a:	4628      	mov	r0, r5
 800830c:	47b8      	blx	r7
 800830e:	3001      	adds	r0, #1
 8008310:	f43f af0d 	beq.w	800812e <_printf_float+0xb6>
 8008314:	f04f 0a00 	mov.w	sl, #0
 8008318:	f104 0b1a 	add.w	fp, r4, #26
 800831c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831e:	425b      	negs	r3, r3
 8008320:	4553      	cmp	r3, sl
 8008322:	dc01      	bgt.n	8008328 <_printf_float+0x2b0>
 8008324:	464b      	mov	r3, r9
 8008326:	e793      	b.n	8008250 <_printf_float+0x1d8>
 8008328:	2301      	movs	r3, #1
 800832a:	465a      	mov	r2, fp
 800832c:	4631      	mov	r1, r6
 800832e:	4628      	mov	r0, r5
 8008330:	47b8      	blx	r7
 8008332:	3001      	adds	r0, #1
 8008334:	f43f aefb 	beq.w	800812e <_printf_float+0xb6>
 8008338:	f10a 0a01 	add.w	sl, sl, #1
 800833c:	e7ee      	b.n	800831c <_printf_float+0x2a4>
 800833e:	bf00      	nop
 8008340:	7fefffff 	.word	0x7fefffff
 8008344:	0800d2f8 	.word	0x0800d2f8
 8008348:	0800d2f4 	.word	0x0800d2f4
 800834c:	0800d300 	.word	0x0800d300
 8008350:	0800d2fc 	.word	0x0800d2fc
 8008354:	0800d304 	.word	0x0800d304
 8008358:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800835a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800835e:	4553      	cmp	r3, sl
 8008360:	bfa8      	it	ge
 8008362:	4653      	movge	r3, sl
 8008364:	2b00      	cmp	r3, #0
 8008366:	4699      	mov	r9, r3
 8008368:	dc36      	bgt.n	80083d8 <_printf_float+0x360>
 800836a:	f04f 0b00 	mov.w	fp, #0
 800836e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008372:	f104 021a 	add.w	r2, r4, #26
 8008376:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008378:	9306      	str	r3, [sp, #24]
 800837a:	eba3 0309 	sub.w	r3, r3, r9
 800837e:	455b      	cmp	r3, fp
 8008380:	dc31      	bgt.n	80083e6 <_printf_float+0x36e>
 8008382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008384:	459a      	cmp	sl, r3
 8008386:	dc3a      	bgt.n	80083fe <_printf_float+0x386>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	07da      	lsls	r2, r3, #31
 800838c:	d437      	bmi.n	80083fe <_printf_float+0x386>
 800838e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008390:	ebaa 0903 	sub.w	r9, sl, r3
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	ebaa 0303 	sub.w	r3, sl, r3
 800839a:	4599      	cmp	r9, r3
 800839c:	bfa8      	it	ge
 800839e:	4699      	movge	r9, r3
 80083a0:	f1b9 0f00 	cmp.w	r9, #0
 80083a4:	dc33      	bgt.n	800840e <_printf_float+0x396>
 80083a6:	f04f 0800 	mov.w	r8, #0
 80083aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083ae:	f104 0b1a 	add.w	fp, r4, #26
 80083b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b4:	ebaa 0303 	sub.w	r3, sl, r3
 80083b8:	eba3 0309 	sub.w	r3, r3, r9
 80083bc:	4543      	cmp	r3, r8
 80083be:	f77f af79 	ble.w	80082b4 <_printf_float+0x23c>
 80083c2:	2301      	movs	r3, #1
 80083c4:	465a      	mov	r2, fp
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b8      	blx	r7
 80083cc:	3001      	adds	r0, #1
 80083ce:	f43f aeae 	beq.w	800812e <_printf_float+0xb6>
 80083d2:	f108 0801 	add.w	r8, r8, #1
 80083d6:	e7ec      	b.n	80083b2 <_printf_float+0x33a>
 80083d8:	4642      	mov	r2, r8
 80083da:	4631      	mov	r1, r6
 80083dc:	4628      	mov	r0, r5
 80083de:	47b8      	blx	r7
 80083e0:	3001      	adds	r0, #1
 80083e2:	d1c2      	bne.n	800836a <_printf_float+0x2f2>
 80083e4:	e6a3      	b.n	800812e <_printf_float+0xb6>
 80083e6:	2301      	movs	r3, #1
 80083e8:	4631      	mov	r1, r6
 80083ea:	4628      	mov	r0, r5
 80083ec:	9206      	str	r2, [sp, #24]
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f ae9c 	beq.w	800812e <_printf_float+0xb6>
 80083f6:	9a06      	ldr	r2, [sp, #24]
 80083f8:	f10b 0b01 	add.w	fp, fp, #1
 80083fc:	e7bb      	b.n	8008376 <_printf_float+0x2fe>
 80083fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008402:	4631      	mov	r1, r6
 8008404:	4628      	mov	r0, r5
 8008406:	47b8      	blx	r7
 8008408:	3001      	adds	r0, #1
 800840a:	d1c0      	bne.n	800838e <_printf_float+0x316>
 800840c:	e68f      	b.n	800812e <_printf_float+0xb6>
 800840e:	9a06      	ldr	r2, [sp, #24]
 8008410:	464b      	mov	r3, r9
 8008412:	4442      	add	r2, r8
 8008414:	4631      	mov	r1, r6
 8008416:	4628      	mov	r0, r5
 8008418:	47b8      	blx	r7
 800841a:	3001      	adds	r0, #1
 800841c:	d1c3      	bne.n	80083a6 <_printf_float+0x32e>
 800841e:	e686      	b.n	800812e <_printf_float+0xb6>
 8008420:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008424:	f1ba 0f01 	cmp.w	sl, #1
 8008428:	dc01      	bgt.n	800842e <_printf_float+0x3b6>
 800842a:	07db      	lsls	r3, r3, #31
 800842c:	d536      	bpl.n	800849c <_printf_float+0x424>
 800842e:	2301      	movs	r3, #1
 8008430:	4642      	mov	r2, r8
 8008432:	4631      	mov	r1, r6
 8008434:	4628      	mov	r0, r5
 8008436:	47b8      	blx	r7
 8008438:	3001      	adds	r0, #1
 800843a:	f43f ae78 	beq.w	800812e <_printf_float+0xb6>
 800843e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	47b8      	blx	r7
 8008448:	3001      	adds	r0, #1
 800844a:	f43f ae70 	beq.w	800812e <_printf_float+0xb6>
 800844e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008452:	2200      	movs	r2, #0
 8008454:	2300      	movs	r3, #0
 8008456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800845a:	f7f8 fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800845e:	b9c0      	cbnz	r0, 8008492 <_printf_float+0x41a>
 8008460:	4653      	mov	r3, sl
 8008462:	f108 0201 	add.w	r2, r8, #1
 8008466:	4631      	mov	r1, r6
 8008468:	4628      	mov	r0, r5
 800846a:	47b8      	blx	r7
 800846c:	3001      	adds	r0, #1
 800846e:	d10c      	bne.n	800848a <_printf_float+0x412>
 8008470:	e65d      	b.n	800812e <_printf_float+0xb6>
 8008472:	2301      	movs	r3, #1
 8008474:	465a      	mov	r2, fp
 8008476:	4631      	mov	r1, r6
 8008478:	4628      	mov	r0, r5
 800847a:	47b8      	blx	r7
 800847c:	3001      	adds	r0, #1
 800847e:	f43f ae56 	beq.w	800812e <_printf_float+0xb6>
 8008482:	f108 0801 	add.w	r8, r8, #1
 8008486:	45d0      	cmp	r8, sl
 8008488:	dbf3      	blt.n	8008472 <_printf_float+0x3fa>
 800848a:	464b      	mov	r3, r9
 800848c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008490:	e6df      	b.n	8008252 <_printf_float+0x1da>
 8008492:	f04f 0800 	mov.w	r8, #0
 8008496:	f104 0b1a 	add.w	fp, r4, #26
 800849a:	e7f4      	b.n	8008486 <_printf_float+0x40e>
 800849c:	2301      	movs	r3, #1
 800849e:	4642      	mov	r2, r8
 80084a0:	e7e1      	b.n	8008466 <_printf_float+0x3ee>
 80084a2:	2301      	movs	r3, #1
 80084a4:	464a      	mov	r2, r9
 80084a6:	4631      	mov	r1, r6
 80084a8:	4628      	mov	r0, r5
 80084aa:	47b8      	blx	r7
 80084ac:	3001      	adds	r0, #1
 80084ae:	f43f ae3e 	beq.w	800812e <_printf_float+0xb6>
 80084b2:	f108 0801 	add.w	r8, r8, #1
 80084b6:	68e3      	ldr	r3, [r4, #12]
 80084b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084ba:	1a5b      	subs	r3, r3, r1
 80084bc:	4543      	cmp	r3, r8
 80084be:	dcf0      	bgt.n	80084a2 <_printf_float+0x42a>
 80084c0:	e6fc      	b.n	80082bc <_printf_float+0x244>
 80084c2:	f04f 0800 	mov.w	r8, #0
 80084c6:	f104 0919 	add.w	r9, r4, #25
 80084ca:	e7f4      	b.n	80084b6 <_printf_float+0x43e>

080084cc <_printf_common>:
 80084cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d0:	4616      	mov	r6, r2
 80084d2:	4698      	mov	r8, r3
 80084d4:	688a      	ldr	r2, [r1, #8]
 80084d6:	690b      	ldr	r3, [r1, #16]
 80084d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084dc:	4293      	cmp	r3, r2
 80084de:	bfb8      	it	lt
 80084e0:	4613      	movlt	r3, r2
 80084e2:	6033      	str	r3, [r6, #0]
 80084e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084e8:	4607      	mov	r7, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	b10a      	cbz	r2, 80084f2 <_printf_common+0x26>
 80084ee:	3301      	adds	r3, #1
 80084f0:	6033      	str	r3, [r6, #0]
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	0699      	lsls	r1, r3, #26
 80084f6:	bf42      	ittt	mi
 80084f8:	6833      	ldrmi	r3, [r6, #0]
 80084fa:	3302      	addmi	r3, #2
 80084fc:	6033      	strmi	r3, [r6, #0]
 80084fe:	6825      	ldr	r5, [r4, #0]
 8008500:	f015 0506 	ands.w	r5, r5, #6
 8008504:	d106      	bne.n	8008514 <_printf_common+0x48>
 8008506:	f104 0a19 	add.w	sl, r4, #25
 800850a:	68e3      	ldr	r3, [r4, #12]
 800850c:	6832      	ldr	r2, [r6, #0]
 800850e:	1a9b      	subs	r3, r3, r2
 8008510:	42ab      	cmp	r3, r5
 8008512:	dc26      	bgt.n	8008562 <_printf_common+0x96>
 8008514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008518:	6822      	ldr	r2, [r4, #0]
 800851a:	3b00      	subs	r3, #0
 800851c:	bf18      	it	ne
 800851e:	2301      	movne	r3, #1
 8008520:	0692      	lsls	r2, r2, #26
 8008522:	d42b      	bmi.n	800857c <_printf_common+0xb0>
 8008524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008528:	4641      	mov	r1, r8
 800852a:	4638      	mov	r0, r7
 800852c:	47c8      	blx	r9
 800852e:	3001      	adds	r0, #1
 8008530:	d01e      	beq.n	8008570 <_printf_common+0xa4>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	6922      	ldr	r2, [r4, #16]
 8008536:	f003 0306 	and.w	r3, r3, #6
 800853a:	2b04      	cmp	r3, #4
 800853c:	bf02      	ittt	eq
 800853e:	68e5      	ldreq	r5, [r4, #12]
 8008540:	6833      	ldreq	r3, [r6, #0]
 8008542:	1aed      	subeq	r5, r5, r3
 8008544:	68a3      	ldr	r3, [r4, #8]
 8008546:	bf0c      	ite	eq
 8008548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800854c:	2500      	movne	r5, #0
 800854e:	4293      	cmp	r3, r2
 8008550:	bfc4      	itt	gt
 8008552:	1a9b      	subgt	r3, r3, r2
 8008554:	18ed      	addgt	r5, r5, r3
 8008556:	2600      	movs	r6, #0
 8008558:	341a      	adds	r4, #26
 800855a:	42b5      	cmp	r5, r6
 800855c:	d11a      	bne.n	8008594 <_printf_common+0xc8>
 800855e:	2000      	movs	r0, #0
 8008560:	e008      	b.n	8008574 <_printf_common+0xa8>
 8008562:	2301      	movs	r3, #1
 8008564:	4652      	mov	r2, sl
 8008566:	4641      	mov	r1, r8
 8008568:	4638      	mov	r0, r7
 800856a:	47c8      	blx	r9
 800856c:	3001      	adds	r0, #1
 800856e:	d103      	bne.n	8008578 <_printf_common+0xac>
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008578:	3501      	adds	r5, #1
 800857a:	e7c6      	b.n	800850a <_printf_common+0x3e>
 800857c:	18e1      	adds	r1, r4, r3
 800857e:	1c5a      	adds	r2, r3, #1
 8008580:	2030      	movs	r0, #48	@ 0x30
 8008582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008586:	4422      	add	r2, r4
 8008588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800858c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008590:	3302      	adds	r3, #2
 8008592:	e7c7      	b.n	8008524 <_printf_common+0x58>
 8008594:	2301      	movs	r3, #1
 8008596:	4622      	mov	r2, r4
 8008598:	4641      	mov	r1, r8
 800859a:	4638      	mov	r0, r7
 800859c:	47c8      	blx	r9
 800859e:	3001      	adds	r0, #1
 80085a0:	d0e6      	beq.n	8008570 <_printf_common+0xa4>
 80085a2:	3601      	adds	r6, #1
 80085a4:	e7d9      	b.n	800855a <_printf_common+0x8e>
	...

080085a8 <_printf_i>:
 80085a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085ac:	7e0f      	ldrb	r7, [r1, #24]
 80085ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085b0:	2f78      	cmp	r7, #120	@ 0x78
 80085b2:	4691      	mov	r9, r2
 80085b4:	4680      	mov	r8, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	469a      	mov	sl, r3
 80085ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085be:	d807      	bhi.n	80085d0 <_printf_i+0x28>
 80085c0:	2f62      	cmp	r7, #98	@ 0x62
 80085c2:	d80a      	bhi.n	80085da <_printf_i+0x32>
 80085c4:	2f00      	cmp	r7, #0
 80085c6:	f000 80d1 	beq.w	800876c <_printf_i+0x1c4>
 80085ca:	2f58      	cmp	r7, #88	@ 0x58
 80085cc:	f000 80b8 	beq.w	8008740 <_printf_i+0x198>
 80085d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085d8:	e03a      	b.n	8008650 <_printf_i+0xa8>
 80085da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085de:	2b15      	cmp	r3, #21
 80085e0:	d8f6      	bhi.n	80085d0 <_printf_i+0x28>
 80085e2:	a101      	add	r1, pc, #4	@ (adr r1, 80085e8 <_printf_i+0x40>)
 80085e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085e8:	08008641 	.word	0x08008641
 80085ec:	08008655 	.word	0x08008655
 80085f0:	080085d1 	.word	0x080085d1
 80085f4:	080085d1 	.word	0x080085d1
 80085f8:	080085d1 	.word	0x080085d1
 80085fc:	080085d1 	.word	0x080085d1
 8008600:	08008655 	.word	0x08008655
 8008604:	080085d1 	.word	0x080085d1
 8008608:	080085d1 	.word	0x080085d1
 800860c:	080085d1 	.word	0x080085d1
 8008610:	080085d1 	.word	0x080085d1
 8008614:	08008753 	.word	0x08008753
 8008618:	0800867f 	.word	0x0800867f
 800861c:	0800870d 	.word	0x0800870d
 8008620:	080085d1 	.word	0x080085d1
 8008624:	080085d1 	.word	0x080085d1
 8008628:	08008775 	.word	0x08008775
 800862c:	080085d1 	.word	0x080085d1
 8008630:	0800867f 	.word	0x0800867f
 8008634:	080085d1 	.word	0x080085d1
 8008638:	080085d1 	.word	0x080085d1
 800863c:	08008715 	.word	0x08008715
 8008640:	6833      	ldr	r3, [r6, #0]
 8008642:	1d1a      	adds	r2, r3, #4
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6032      	str	r2, [r6, #0]
 8008648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800864c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008650:	2301      	movs	r3, #1
 8008652:	e09c      	b.n	800878e <_printf_i+0x1e6>
 8008654:	6833      	ldr	r3, [r6, #0]
 8008656:	6820      	ldr	r0, [r4, #0]
 8008658:	1d19      	adds	r1, r3, #4
 800865a:	6031      	str	r1, [r6, #0]
 800865c:	0606      	lsls	r6, r0, #24
 800865e:	d501      	bpl.n	8008664 <_printf_i+0xbc>
 8008660:	681d      	ldr	r5, [r3, #0]
 8008662:	e003      	b.n	800866c <_printf_i+0xc4>
 8008664:	0645      	lsls	r5, r0, #25
 8008666:	d5fb      	bpl.n	8008660 <_printf_i+0xb8>
 8008668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800866c:	2d00      	cmp	r5, #0
 800866e:	da03      	bge.n	8008678 <_printf_i+0xd0>
 8008670:	232d      	movs	r3, #45	@ 0x2d
 8008672:	426d      	negs	r5, r5
 8008674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008678:	4858      	ldr	r0, [pc, #352]	@ (80087dc <_printf_i+0x234>)
 800867a:	230a      	movs	r3, #10
 800867c:	e011      	b.n	80086a2 <_printf_i+0xfa>
 800867e:	6821      	ldr	r1, [r4, #0]
 8008680:	6833      	ldr	r3, [r6, #0]
 8008682:	0608      	lsls	r0, r1, #24
 8008684:	f853 5b04 	ldr.w	r5, [r3], #4
 8008688:	d402      	bmi.n	8008690 <_printf_i+0xe8>
 800868a:	0649      	lsls	r1, r1, #25
 800868c:	bf48      	it	mi
 800868e:	b2ad      	uxthmi	r5, r5
 8008690:	2f6f      	cmp	r7, #111	@ 0x6f
 8008692:	4852      	ldr	r0, [pc, #328]	@ (80087dc <_printf_i+0x234>)
 8008694:	6033      	str	r3, [r6, #0]
 8008696:	bf14      	ite	ne
 8008698:	230a      	movne	r3, #10
 800869a:	2308      	moveq	r3, #8
 800869c:	2100      	movs	r1, #0
 800869e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086a2:	6866      	ldr	r6, [r4, #4]
 80086a4:	60a6      	str	r6, [r4, #8]
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	db05      	blt.n	80086b6 <_printf_i+0x10e>
 80086aa:	6821      	ldr	r1, [r4, #0]
 80086ac:	432e      	orrs	r6, r5
 80086ae:	f021 0104 	bic.w	r1, r1, #4
 80086b2:	6021      	str	r1, [r4, #0]
 80086b4:	d04b      	beq.n	800874e <_printf_i+0x1a6>
 80086b6:	4616      	mov	r6, r2
 80086b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80086bc:	fb03 5711 	mls	r7, r3, r1, r5
 80086c0:	5dc7      	ldrb	r7, [r0, r7]
 80086c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086c6:	462f      	mov	r7, r5
 80086c8:	42bb      	cmp	r3, r7
 80086ca:	460d      	mov	r5, r1
 80086cc:	d9f4      	bls.n	80086b8 <_printf_i+0x110>
 80086ce:	2b08      	cmp	r3, #8
 80086d0:	d10b      	bne.n	80086ea <_printf_i+0x142>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	07df      	lsls	r7, r3, #31
 80086d6:	d508      	bpl.n	80086ea <_printf_i+0x142>
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	6861      	ldr	r1, [r4, #4]
 80086dc:	4299      	cmp	r1, r3
 80086de:	bfde      	ittt	le
 80086e0:	2330      	movle	r3, #48	@ 0x30
 80086e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086ea:	1b92      	subs	r2, r2, r6
 80086ec:	6122      	str	r2, [r4, #16]
 80086ee:	f8cd a000 	str.w	sl, [sp]
 80086f2:	464b      	mov	r3, r9
 80086f4:	aa03      	add	r2, sp, #12
 80086f6:	4621      	mov	r1, r4
 80086f8:	4640      	mov	r0, r8
 80086fa:	f7ff fee7 	bl	80084cc <_printf_common>
 80086fe:	3001      	adds	r0, #1
 8008700:	d14a      	bne.n	8008798 <_printf_i+0x1f0>
 8008702:	f04f 30ff 	mov.w	r0, #4294967295
 8008706:	b004      	add	sp, #16
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	f043 0320 	orr.w	r3, r3, #32
 8008712:	6023      	str	r3, [r4, #0]
 8008714:	4832      	ldr	r0, [pc, #200]	@ (80087e0 <_printf_i+0x238>)
 8008716:	2778      	movs	r7, #120	@ 0x78
 8008718:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	6831      	ldr	r1, [r6, #0]
 8008720:	061f      	lsls	r7, r3, #24
 8008722:	f851 5b04 	ldr.w	r5, [r1], #4
 8008726:	d402      	bmi.n	800872e <_printf_i+0x186>
 8008728:	065f      	lsls	r7, r3, #25
 800872a:	bf48      	it	mi
 800872c:	b2ad      	uxthmi	r5, r5
 800872e:	6031      	str	r1, [r6, #0]
 8008730:	07d9      	lsls	r1, r3, #31
 8008732:	bf44      	itt	mi
 8008734:	f043 0320 	orrmi.w	r3, r3, #32
 8008738:	6023      	strmi	r3, [r4, #0]
 800873a:	b11d      	cbz	r5, 8008744 <_printf_i+0x19c>
 800873c:	2310      	movs	r3, #16
 800873e:	e7ad      	b.n	800869c <_printf_i+0xf4>
 8008740:	4826      	ldr	r0, [pc, #152]	@ (80087dc <_printf_i+0x234>)
 8008742:	e7e9      	b.n	8008718 <_printf_i+0x170>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	f023 0320 	bic.w	r3, r3, #32
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	e7f6      	b.n	800873c <_printf_i+0x194>
 800874e:	4616      	mov	r6, r2
 8008750:	e7bd      	b.n	80086ce <_printf_i+0x126>
 8008752:	6833      	ldr	r3, [r6, #0]
 8008754:	6825      	ldr	r5, [r4, #0]
 8008756:	6961      	ldr	r1, [r4, #20]
 8008758:	1d18      	adds	r0, r3, #4
 800875a:	6030      	str	r0, [r6, #0]
 800875c:	062e      	lsls	r6, r5, #24
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	d501      	bpl.n	8008766 <_printf_i+0x1be>
 8008762:	6019      	str	r1, [r3, #0]
 8008764:	e002      	b.n	800876c <_printf_i+0x1c4>
 8008766:	0668      	lsls	r0, r5, #25
 8008768:	d5fb      	bpl.n	8008762 <_printf_i+0x1ba>
 800876a:	8019      	strh	r1, [r3, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	6123      	str	r3, [r4, #16]
 8008770:	4616      	mov	r6, r2
 8008772:	e7bc      	b.n	80086ee <_printf_i+0x146>
 8008774:	6833      	ldr	r3, [r6, #0]
 8008776:	1d1a      	adds	r2, r3, #4
 8008778:	6032      	str	r2, [r6, #0]
 800877a:	681e      	ldr	r6, [r3, #0]
 800877c:	6862      	ldr	r2, [r4, #4]
 800877e:	2100      	movs	r1, #0
 8008780:	4630      	mov	r0, r6
 8008782:	f7f7 fd25 	bl	80001d0 <memchr>
 8008786:	b108      	cbz	r0, 800878c <_printf_i+0x1e4>
 8008788:	1b80      	subs	r0, r0, r6
 800878a:	6060      	str	r0, [r4, #4]
 800878c:	6863      	ldr	r3, [r4, #4]
 800878e:	6123      	str	r3, [r4, #16]
 8008790:	2300      	movs	r3, #0
 8008792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008796:	e7aa      	b.n	80086ee <_printf_i+0x146>
 8008798:	6923      	ldr	r3, [r4, #16]
 800879a:	4632      	mov	r2, r6
 800879c:	4649      	mov	r1, r9
 800879e:	4640      	mov	r0, r8
 80087a0:	47d0      	blx	sl
 80087a2:	3001      	adds	r0, #1
 80087a4:	d0ad      	beq.n	8008702 <_printf_i+0x15a>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	079b      	lsls	r3, r3, #30
 80087aa:	d413      	bmi.n	80087d4 <_printf_i+0x22c>
 80087ac:	68e0      	ldr	r0, [r4, #12]
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	4298      	cmp	r0, r3
 80087b2:	bfb8      	it	lt
 80087b4:	4618      	movlt	r0, r3
 80087b6:	e7a6      	b.n	8008706 <_printf_i+0x15e>
 80087b8:	2301      	movs	r3, #1
 80087ba:	4632      	mov	r2, r6
 80087bc:	4649      	mov	r1, r9
 80087be:	4640      	mov	r0, r8
 80087c0:	47d0      	blx	sl
 80087c2:	3001      	adds	r0, #1
 80087c4:	d09d      	beq.n	8008702 <_printf_i+0x15a>
 80087c6:	3501      	adds	r5, #1
 80087c8:	68e3      	ldr	r3, [r4, #12]
 80087ca:	9903      	ldr	r1, [sp, #12]
 80087cc:	1a5b      	subs	r3, r3, r1
 80087ce:	42ab      	cmp	r3, r5
 80087d0:	dcf2      	bgt.n	80087b8 <_printf_i+0x210>
 80087d2:	e7eb      	b.n	80087ac <_printf_i+0x204>
 80087d4:	2500      	movs	r5, #0
 80087d6:	f104 0619 	add.w	r6, r4, #25
 80087da:	e7f5      	b.n	80087c8 <_printf_i+0x220>
 80087dc:	0800d306 	.word	0x0800d306
 80087e0:	0800d317 	.word	0x0800d317

080087e4 <_scanf_float>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	b087      	sub	sp, #28
 80087ea:	4691      	mov	r9, r2
 80087ec:	9303      	str	r3, [sp, #12]
 80087ee:	688b      	ldr	r3, [r1, #8]
 80087f0:	1e5a      	subs	r2, r3, #1
 80087f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80087f6:	bf81      	itttt	hi
 80087f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80087fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8008800:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008804:	608b      	strhi	r3, [r1, #8]
 8008806:	680b      	ldr	r3, [r1, #0]
 8008808:	460a      	mov	r2, r1
 800880a:	f04f 0500 	mov.w	r5, #0
 800880e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008812:	f842 3b1c 	str.w	r3, [r2], #28
 8008816:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800881a:	4680      	mov	r8, r0
 800881c:	460c      	mov	r4, r1
 800881e:	bf98      	it	ls
 8008820:	f04f 0b00 	movls.w	fp, #0
 8008824:	9201      	str	r2, [sp, #4]
 8008826:	4616      	mov	r6, r2
 8008828:	46aa      	mov	sl, r5
 800882a:	462f      	mov	r7, r5
 800882c:	9502      	str	r5, [sp, #8]
 800882e:	68a2      	ldr	r2, [r4, #8]
 8008830:	b15a      	cbz	r2, 800884a <_scanf_float+0x66>
 8008832:	f8d9 3000 	ldr.w	r3, [r9]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b4e      	cmp	r3, #78	@ 0x4e
 800883a:	d863      	bhi.n	8008904 <_scanf_float+0x120>
 800883c:	2b40      	cmp	r3, #64	@ 0x40
 800883e:	d83b      	bhi.n	80088b8 <_scanf_float+0xd4>
 8008840:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008844:	b2c8      	uxtb	r0, r1
 8008846:	280e      	cmp	r0, #14
 8008848:	d939      	bls.n	80088be <_scanf_float+0xda>
 800884a:	b11f      	cbz	r7, 8008854 <_scanf_float+0x70>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008858:	f1ba 0f01 	cmp.w	sl, #1
 800885c:	f200 8114 	bhi.w	8008a88 <_scanf_float+0x2a4>
 8008860:	9b01      	ldr	r3, [sp, #4]
 8008862:	429e      	cmp	r6, r3
 8008864:	f200 8105 	bhi.w	8008a72 <_scanf_float+0x28e>
 8008868:	2001      	movs	r0, #1
 800886a:	b007      	add	sp, #28
 800886c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008870:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008874:	2a0d      	cmp	r2, #13
 8008876:	d8e8      	bhi.n	800884a <_scanf_float+0x66>
 8008878:	a101      	add	r1, pc, #4	@ (adr r1, 8008880 <_scanf_float+0x9c>)
 800887a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800887e:	bf00      	nop
 8008880:	080089c9 	.word	0x080089c9
 8008884:	0800884b 	.word	0x0800884b
 8008888:	0800884b 	.word	0x0800884b
 800888c:	0800884b 	.word	0x0800884b
 8008890:	08008a25 	.word	0x08008a25
 8008894:	080089ff 	.word	0x080089ff
 8008898:	0800884b 	.word	0x0800884b
 800889c:	0800884b 	.word	0x0800884b
 80088a0:	080089d7 	.word	0x080089d7
 80088a4:	0800884b 	.word	0x0800884b
 80088a8:	0800884b 	.word	0x0800884b
 80088ac:	0800884b 	.word	0x0800884b
 80088b0:	0800884b 	.word	0x0800884b
 80088b4:	08008993 	.word	0x08008993
 80088b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80088bc:	e7da      	b.n	8008874 <_scanf_float+0x90>
 80088be:	290e      	cmp	r1, #14
 80088c0:	d8c3      	bhi.n	800884a <_scanf_float+0x66>
 80088c2:	a001      	add	r0, pc, #4	@ (adr r0, 80088c8 <_scanf_float+0xe4>)
 80088c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088c8:	08008983 	.word	0x08008983
 80088cc:	0800884b 	.word	0x0800884b
 80088d0:	08008983 	.word	0x08008983
 80088d4:	08008a13 	.word	0x08008a13
 80088d8:	0800884b 	.word	0x0800884b
 80088dc:	08008925 	.word	0x08008925
 80088e0:	08008969 	.word	0x08008969
 80088e4:	08008969 	.word	0x08008969
 80088e8:	08008969 	.word	0x08008969
 80088ec:	08008969 	.word	0x08008969
 80088f0:	08008969 	.word	0x08008969
 80088f4:	08008969 	.word	0x08008969
 80088f8:	08008969 	.word	0x08008969
 80088fc:	08008969 	.word	0x08008969
 8008900:	08008969 	.word	0x08008969
 8008904:	2b6e      	cmp	r3, #110	@ 0x6e
 8008906:	d809      	bhi.n	800891c <_scanf_float+0x138>
 8008908:	2b60      	cmp	r3, #96	@ 0x60
 800890a:	d8b1      	bhi.n	8008870 <_scanf_float+0x8c>
 800890c:	2b54      	cmp	r3, #84	@ 0x54
 800890e:	d07b      	beq.n	8008a08 <_scanf_float+0x224>
 8008910:	2b59      	cmp	r3, #89	@ 0x59
 8008912:	d19a      	bne.n	800884a <_scanf_float+0x66>
 8008914:	2d07      	cmp	r5, #7
 8008916:	d198      	bne.n	800884a <_scanf_float+0x66>
 8008918:	2508      	movs	r5, #8
 800891a:	e02f      	b.n	800897c <_scanf_float+0x198>
 800891c:	2b74      	cmp	r3, #116	@ 0x74
 800891e:	d073      	beq.n	8008a08 <_scanf_float+0x224>
 8008920:	2b79      	cmp	r3, #121	@ 0x79
 8008922:	e7f6      	b.n	8008912 <_scanf_float+0x12e>
 8008924:	6821      	ldr	r1, [r4, #0]
 8008926:	05c8      	lsls	r0, r1, #23
 8008928:	d51e      	bpl.n	8008968 <_scanf_float+0x184>
 800892a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800892e:	6021      	str	r1, [r4, #0]
 8008930:	3701      	adds	r7, #1
 8008932:	f1bb 0f00 	cmp.w	fp, #0
 8008936:	d003      	beq.n	8008940 <_scanf_float+0x15c>
 8008938:	3201      	adds	r2, #1
 800893a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800893e:	60a2      	str	r2, [r4, #8]
 8008940:	68a3      	ldr	r3, [r4, #8]
 8008942:	3b01      	subs	r3, #1
 8008944:	60a3      	str	r3, [r4, #8]
 8008946:	6923      	ldr	r3, [r4, #16]
 8008948:	3301      	adds	r3, #1
 800894a:	6123      	str	r3, [r4, #16]
 800894c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008950:	3b01      	subs	r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	f8c9 3004 	str.w	r3, [r9, #4]
 8008958:	f340 8082 	ble.w	8008a60 <_scanf_float+0x27c>
 800895c:	f8d9 3000 	ldr.w	r3, [r9]
 8008960:	3301      	adds	r3, #1
 8008962:	f8c9 3000 	str.w	r3, [r9]
 8008966:	e762      	b.n	800882e <_scanf_float+0x4a>
 8008968:	eb1a 0105 	adds.w	r1, sl, r5
 800896c:	f47f af6d 	bne.w	800884a <_scanf_float+0x66>
 8008970:	6822      	ldr	r2, [r4, #0]
 8008972:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008976:	6022      	str	r2, [r4, #0]
 8008978:	460d      	mov	r5, r1
 800897a:	468a      	mov	sl, r1
 800897c:	f806 3b01 	strb.w	r3, [r6], #1
 8008980:	e7de      	b.n	8008940 <_scanf_float+0x15c>
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	0610      	lsls	r0, r2, #24
 8008986:	f57f af60 	bpl.w	800884a <_scanf_float+0x66>
 800898a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800898e:	6022      	str	r2, [r4, #0]
 8008990:	e7f4      	b.n	800897c <_scanf_float+0x198>
 8008992:	f1ba 0f00 	cmp.w	sl, #0
 8008996:	d10c      	bne.n	80089b2 <_scanf_float+0x1ce>
 8008998:	b977      	cbnz	r7, 80089b8 <_scanf_float+0x1d4>
 800899a:	6822      	ldr	r2, [r4, #0]
 800899c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80089a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80089a4:	d108      	bne.n	80089b8 <_scanf_float+0x1d4>
 80089a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80089aa:	6022      	str	r2, [r4, #0]
 80089ac:	f04f 0a01 	mov.w	sl, #1
 80089b0:	e7e4      	b.n	800897c <_scanf_float+0x198>
 80089b2:	f1ba 0f02 	cmp.w	sl, #2
 80089b6:	d050      	beq.n	8008a5a <_scanf_float+0x276>
 80089b8:	2d01      	cmp	r5, #1
 80089ba:	d002      	beq.n	80089c2 <_scanf_float+0x1de>
 80089bc:	2d04      	cmp	r5, #4
 80089be:	f47f af44 	bne.w	800884a <_scanf_float+0x66>
 80089c2:	3501      	adds	r5, #1
 80089c4:	b2ed      	uxtb	r5, r5
 80089c6:	e7d9      	b.n	800897c <_scanf_float+0x198>
 80089c8:	f1ba 0f01 	cmp.w	sl, #1
 80089cc:	f47f af3d 	bne.w	800884a <_scanf_float+0x66>
 80089d0:	f04f 0a02 	mov.w	sl, #2
 80089d4:	e7d2      	b.n	800897c <_scanf_float+0x198>
 80089d6:	b975      	cbnz	r5, 80089f6 <_scanf_float+0x212>
 80089d8:	2f00      	cmp	r7, #0
 80089da:	f47f af37 	bne.w	800884c <_scanf_float+0x68>
 80089de:	6822      	ldr	r2, [r4, #0]
 80089e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80089e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80089e8:	f040 8103 	bne.w	8008bf2 <_scanf_float+0x40e>
 80089ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80089f0:	6022      	str	r2, [r4, #0]
 80089f2:	2501      	movs	r5, #1
 80089f4:	e7c2      	b.n	800897c <_scanf_float+0x198>
 80089f6:	2d03      	cmp	r5, #3
 80089f8:	d0e3      	beq.n	80089c2 <_scanf_float+0x1de>
 80089fa:	2d05      	cmp	r5, #5
 80089fc:	e7df      	b.n	80089be <_scanf_float+0x1da>
 80089fe:	2d02      	cmp	r5, #2
 8008a00:	f47f af23 	bne.w	800884a <_scanf_float+0x66>
 8008a04:	2503      	movs	r5, #3
 8008a06:	e7b9      	b.n	800897c <_scanf_float+0x198>
 8008a08:	2d06      	cmp	r5, #6
 8008a0a:	f47f af1e 	bne.w	800884a <_scanf_float+0x66>
 8008a0e:	2507      	movs	r5, #7
 8008a10:	e7b4      	b.n	800897c <_scanf_float+0x198>
 8008a12:	6822      	ldr	r2, [r4, #0]
 8008a14:	0591      	lsls	r1, r2, #22
 8008a16:	f57f af18 	bpl.w	800884a <_scanf_float+0x66>
 8008a1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008a1e:	6022      	str	r2, [r4, #0]
 8008a20:	9702      	str	r7, [sp, #8]
 8008a22:	e7ab      	b.n	800897c <_scanf_float+0x198>
 8008a24:	6822      	ldr	r2, [r4, #0]
 8008a26:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008a2a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008a2e:	d005      	beq.n	8008a3c <_scanf_float+0x258>
 8008a30:	0550      	lsls	r0, r2, #21
 8008a32:	f57f af0a 	bpl.w	800884a <_scanf_float+0x66>
 8008a36:	2f00      	cmp	r7, #0
 8008a38:	f000 80db 	beq.w	8008bf2 <_scanf_float+0x40e>
 8008a3c:	0591      	lsls	r1, r2, #22
 8008a3e:	bf58      	it	pl
 8008a40:	9902      	ldrpl	r1, [sp, #8]
 8008a42:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008a46:	bf58      	it	pl
 8008a48:	1a79      	subpl	r1, r7, r1
 8008a4a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008a4e:	bf58      	it	pl
 8008a50:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a54:	6022      	str	r2, [r4, #0]
 8008a56:	2700      	movs	r7, #0
 8008a58:	e790      	b.n	800897c <_scanf_float+0x198>
 8008a5a:	f04f 0a03 	mov.w	sl, #3
 8008a5e:	e78d      	b.n	800897c <_scanf_float+0x198>
 8008a60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008a64:	4649      	mov	r1, r9
 8008a66:	4640      	mov	r0, r8
 8008a68:	4798      	blx	r3
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	f43f aedf 	beq.w	800882e <_scanf_float+0x4a>
 8008a70:	e6eb      	b.n	800884a <_scanf_float+0x66>
 8008a72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a7a:	464a      	mov	r2, r9
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	4798      	blx	r3
 8008a80:	6923      	ldr	r3, [r4, #16]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	6123      	str	r3, [r4, #16]
 8008a86:	e6eb      	b.n	8008860 <_scanf_float+0x7c>
 8008a88:	1e6b      	subs	r3, r5, #1
 8008a8a:	2b06      	cmp	r3, #6
 8008a8c:	d824      	bhi.n	8008ad8 <_scanf_float+0x2f4>
 8008a8e:	2d02      	cmp	r5, #2
 8008a90:	d836      	bhi.n	8008b00 <_scanf_float+0x31c>
 8008a92:	9b01      	ldr	r3, [sp, #4]
 8008a94:	429e      	cmp	r6, r3
 8008a96:	f67f aee7 	bls.w	8008868 <_scanf_float+0x84>
 8008a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008aa2:	464a      	mov	r2, r9
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	4798      	blx	r3
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	6123      	str	r3, [r4, #16]
 8008aae:	e7f0      	b.n	8008a92 <_scanf_float+0x2ae>
 8008ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ab4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008ab8:	464a      	mov	r2, r9
 8008aba:	4640      	mov	r0, r8
 8008abc:	4798      	blx	r3
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	6123      	str	r3, [r4, #16]
 8008ac4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ac8:	fa5f fa8a 	uxtb.w	sl, sl
 8008acc:	f1ba 0f02 	cmp.w	sl, #2
 8008ad0:	d1ee      	bne.n	8008ab0 <_scanf_float+0x2cc>
 8008ad2:	3d03      	subs	r5, #3
 8008ad4:	b2ed      	uxtb	r5, r5
 8008ad6:	1b76      	subs	r6, r6, r5
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	05da      	lsls	r2, r3, #23
 8008adc:	d530      	bpl.n	8008b40 <_scanf_float+0x35c>
 8008ade:	055b      	lsls	r3, r3, #21
 8008ae0:	d511      	bpl.n	8008b06 <_scanf_float+0x322>
 8008ae2:	9b01      	ldr	r3, [sp, #4]
 8008ae4:	429e      	cmp	r6, r3
 8008ae6:	f67f aebf 	bls.w	8008868 <_scanf_float+0x84>
 8008aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008aee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008af2:	464a      	mov	r2, r9
 8008af4:	4640      	mov	r0, r8
 8008af6:	4798      	blx	r3
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	6123      	str	r3, [r4, #16]
 8008afe:	e7f0      	b.n	8008ae2 <_scanf_float+0x2fe>
 8008b00:	46aa      	mov	sl, r5
 8008b02:	46b3      	mov	fp, r6
 8008b04:	e7de      	b.n	8008ac4 <_scanf_float+0x2e0>
 8008b06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b0a:	6923      	ldr	r3, [r4, #16]
 8008b0c:	2965      	cmp	r1, #101	@ 0x65
 8008b0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b12:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	d00c      	beq.n	8008b34 <_scanf_float+0x350>
 8008b1a:	2945      	cmp	r1, #69	@ 0x45
 8008b1c:	d00a      	beq.n	8008b34 <_scanf_float+0x350>
 8008b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b22:	464a      	mov	r2, r9
 8008b24:	4640      	mov	r0, r8
 8008b26:	4798      	blx	r3
 8008b28:	6923      	ldr	r3, [r4, #16]
 8008b2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	1eb5      	subs	r5, r6, #2
 8008b32:	6123      	str	r3, [r4, #16]
 8008b34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b38:	464a      	mov	r2, r9
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4798      	blx	r3
 8008b3e:	462e      	mov	r6, r5
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	f012 0210 	ands.w	r2, r2, #16
 8008b46:	d001      	beq.n	8008b4c <_scanf_float+0x368>
 8008b48:	2000      	movs	r0, #0
 8008b4a:	e68e      	b.n	800886a <_scanf_float+0x86>
 8008b4c:	7032      	strb	r2, [r6, #0]
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b58:	d125      	bne.n	8008ba6 <_scanf_float+0x3c2>
 8008b5a:	9b02      	ldr	r3, [sp, #8]
 8008b5c:	429f      	cmp	r7, r3
 8008b5e:	d00a      	beq.n	8008b76 <_scanf_float+0x392>
 8008b60:	1bda      	subs	r2, r3, r7
 8008b62:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008b66:	429e      	cmp	r6, r3
 8008b68:	bf28      	it	cs
 8008b6a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008b6e:	4922      	ldr	r1, [pc, #136]	@ (8008bf8 <_scanf_float+0x414>)
 8008b70:	4630      	mov	r0, r6
 8008b72:	f000 f9ad 	bl	8008ed0 <siprintf>
 8008b76:	9901      	ldr	r1, [sp, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	f002 fdf0 	bl	800b760 <_strtod_r>
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	6821      	ldr	r1, [r4, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f011 0f02 	tst.w	r1, #2
 8008b8a:	ec57 6b10 	vmov	r6, r7, d0
 8008b8e:	f103 0204 	add.w	r2, r3, #4
 8008b92:	d015      	beq.n	8008bc0 <_scanf_float+0x3dc>
 8008b94:	9903      	ldr	r1, [sp, #12]
 8008b96:	600a      	str	r2, [r1, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	e9c3 6700 	strd	r6, r7, [r3]
 8008b9e:	68e3      	ldr	r3, [r4, #12]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	60e3      	str	r3, [r4, #12]
 8008ba4:	e7d0      	b.n	8008b48 <_scanf_float+0x364>
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d0e4      	beq.n	8008b76 <_scanf_float+0x392>
 8008bac:	9905      	ldr	r1, [sp, #20]
 8008bae:	230a      	movs	r3, #10
 8008bb0:	3101      	adds	r1, #1
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	f002 fe54 	bl	800b860 <_strtol_r>
 8008bb8:	9b04      	ldr	r3, [sp, #16]
 8008bba:	9e05      	ldr	r6, [sp, #20]
 8008bbc:	1ac2      	subs	r2, r0, r3
 8008bbe:	e7d0      	b.n	8008b62 <_scanf_float+0x37e>
 8008bc0:	f011 0f04 	tst.w	r1, #4
 8008bc4:	9903      	ldr	r1, [sp, #12]
 8008bc6:	600a      	str	r2, [r1, #0]
 8008bc8:	d1e6      	bne.n	8008b98 <_scanf_float+0x3b4>
 8008bca:	681d      	ldr	r5, [r3, #0]
 8008bcc:	4632      	mov	r2, r6
 8008bce:	463b      	mov	r3, r7
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	f7f7 ffaa 	bl	8000b2c <__aeabi_dcmpun>
 8008bd8:	b128      	cbz	r0, 8008be6 <_scanf_float+0x402>
 8008bda:	4808      	ldr	r0, [pc, #32]	@ (8008bfc <_scanf_float+0x418>)
 8008bdc:	f000 fb98 	bl	8009310 <nanf>
 8008be0:	ed85 0a00 	vstr	s0, [r5]
 8008be4:	e7db      	b.n	8008b9e <_scanf_float+0x3ba>
 8008be6:	4630      	mov	r0, r6
 8008be8:	4639      	mov	r1, r7
 8008bea:	f7f7 fffd 	bl	8000be8 <__aeabi_d2f>
 8008bee:	6028      	str	r0, [r5, #0]
 8008bf0:	e7d5      	b.n	8008b9e <_scanf_float+0x3ba>
 8008bf2:	2700      	movs	r7, #0
 8008bf4:	e62e      	b.n	8008854 <_scanf_float+0x70>
 8008bf6:	bf00      	nop
 8008bf8:	0800d328 	.word	0x0800d328
 8008bfc:	0800d3d9 	.word	0x0800d3d9

08008c00 <std>:
 8008c00:	2300      	movs	r3, #0
 8008c02:	b510      	push	{r4, lr}
 8008c04:	4604      	mov	r4, r0
 8008c06:	e9c0 3300 	strd	r3, r3, [r0]
 8008c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c0e:	6083      	str	r3, [r0, #8]
 8008c10:	8181      	strh	r1, [r0, #12]
 8008c12:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c14:	81c2      	strh	r2, [r0, #14]
 8008c16:	6183      	str	r3, [r0, #24]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	2208      	movs	r2, #8
 8008c1c:	305c      	adds	r0, #92	@ 0x5c
 8008c1e:	f000 fa51 	bl	80090c4 <memset>
 8008c22:	4b0d      	ldr	r3, [pc, #52]	@ (8008c58 <std+0x58>)
 8008c24:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c26:	4b0d      	ldr	r3, [pc, #52]	@ (8008c5c <std+0x5c>)
 8008c28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c60 <std+0x60>)
 8008c2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c64 <std+0x64>)
 8008c30:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c32:	4b0d      	ldr	r3, [pc, #52]	@ (8008c68 <std+0x68>)
 8008c34:	6224      	str	r4, [r4, #32]
 8008c36:	429c      	cmp	r4, r3
 8008c38:	d006      	beq.n	8008c48 <std+0x48>
 8008c3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c3e:	4294      	cmp	r4, r2
 8008c40:	d002      	beq.n	8008c48 <std+0x48>
 8008c42:	33d0      	adds	r3, #208	@ 0xd0
 8008c44:	429c      	cmp	r4, r3
 8008c46:	d105      	bne.n	8008c54 <std+0x54>
 8008c48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c50:	f000 bb4c 	b.w	80092ec <__retarget_lock_init_recursive>
 8008c54:	bd10      	pop	{r4, pc}
 8008c56:	bf00      	nop
 8008c58:	08008f15 	.word	0x08008f15
 8008c5c:	08008f37 	.word	0x08008f37
 8008c60:	08008f6f 	.word	0x08008f6f
 8008c64:	08008f93 	.word	0x08008f93
 8008c68:	20000d68 	.word	0x20000d68

08008c6c <stdio_exit_handler>:
 8008c6c:	4a02      	ldr	r2, [pc, #8]	@ (8008c78 <stdio_exit_handler+0xc>)
 8008c6e:	4903      	ldr	r1, [pc, #12]	@ (8008c7c <stdio_exit_handler+0x10>)
 8008c70:	4803      	ldr	r0, [pc, #12]	@ (8008c80 <stdio_exit_handler+0x14>)
 8008c72:	f000 b869 	b.w	8008d48 <_fwalk_sglue>
 8008c76:	bf00      	nop
 8008c78:	20000054 	.word	0x20000054
 8008c7c:	0800bea1 	.word	0x0800bea1
 8008c80:	20000064 	.word	0x20000064

08008c84 <cleanup_stdio>:
 8008c84:	6841      	ldr	r1, [r0, #4]
 8008c86:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb8 <cleanup_stdio+0x34>)
 8008c88:	4299      	cmp	r1, r3
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	d001      	beq.n	8008c94 <cleanup_stdio+0x10>
 8008c90:	f003 f906 	bl	800bea0 <_fflush_r>
 8008c94:	68a1      	ldr	r1, [r4, #8]
 8008c96:	4b09      	ldr	r3, [pc, #36]	@ (8008cbc <cleanup_stdio+0x38>)
 8008c98:	4299      	cmp	r1, r3
 8008c9a:	d002      	beq.n	8008ca2 <cleanup_stdio+0x1e>
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f003 f8ff 	bl	800bea0 <_fflush_r>
 8008ca2:	68e1      	ldr	r1, [r4, #12]
 8008ca4:	4b06      	ldr	r3, [pc, #24]	@ (8008cc0 <cleanup_stdio+0x3c>)
 8008ca6:	4299      	cmp	r1, r3
 8008ca8:	d004      	beq.n	8008cb4 <cleanup_stdio+0x30>
 8008caa:	4620      	mov	r0, r4
 8008cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cb0:	f003 b8f6 	b.w	800bea0 <_fflush_r>
 8008cb4:	bd10      	pop	{r4, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20000d68 	.word	0x20000d68
 8008cbc:	20000dd0 	.word	0x20000dd0
 8008cc0:	20000e38 	.word	0x20000e38

08008cc4 <global_stdio_init.part.0>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <global_stdio_init.part.0+0x30>)
 8008cc8:	4c0b      	ldr	r4, [pc, #44]	@ (8008cf8 <global_stdio_init.part.0+0x34>)
 8008cca:	4a0c      	ldr	r2, [pc, #48]	@ (8008cfc <global_stdio_init.part.0+0x38>)
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	4620      	mov	r0, r4
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2104      	movs	r1, #4
 8008cd4:	f7ff ff94 	bl	8008c00 <std>
 8008cd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008cdc:	2201      	movs	r2, #1
 8008cde:	2109      	movs	r1, #9
 8008ce0:	f7ff ff8e 	bl	8008c00 <std>
 8008ce4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ce8:	2202      	movs	r2, #2
 8008cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cee:	2112      	movs	r1, #18
 8008cf0:	f7ff bf86 	b.w	8008c00 <std>
 8008cf4:	20000ea0 	.word	0x20000ea0
 8008cf8:	20000d68 	.word	0x20000d68
 8008cfc:	08008c6d 	.word	0x08008c6d

08008d00 <__sfp_lock_acquire>:
 8008d00:	4801      	ldr	r0, [pc, #4]	@ (8008d08 <__sfp_lock_acquire+0x8>)
 8008d02:	f000 baf4 	b.w	80092ee <__retarget_lock_acquire_recursive>
 8008d06:	bf00      	nop
 8008d08:	20000ea9 	.word	0x20000ea9

08008d0c <__sfp_lock_release>:
 8008d0c:	4801      	ldr	r0, [pc, #4]	@ (8008d14 <__sfp_lock_release+0x8>)
 8008d0e:	f000 baef 	b.w	80092f0 <__retarget_lock_release_recursive>
 8008d12:	bf00      	nop
 8008d14:	20000ea9 	.word	0x20000ea9

08008d18 <__sinit>:
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	f7ff fff0 	bl	8008d00 <__sfp_lock_acquire>
 8008d20:	6a23      	ldr	r3, [r4, #32]
 8008d22:	b11b      	cbz	r3, 8008d2c <__sinit+0x14>
 8008d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d28:	f7ff bff0 	b.w	8008d0c <__sfp_lock_release>
 8008d2c:	4b04      	ldr	r3, [pc, #16]	@ (8008d40 <__sinit+0x28>)
 8008d2e:	6223      	str	r3, [r4, #32]
 8008d30:	4b04      	ldr	r3, [pc, #16]	@ (8008d44 <__sinit+0x2c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1f5      	bne.n	8008d24 <__sinit+0xc>
 8008d38:	f7ff ffc4 	bl	8008cc4 <global_stdio_init.part.0>
 8008d3c:	e7f2      	b.n	8008d24 <__sinit+0xc>
 8008d3e:	bf00      	nop
 8008d40:	08008c85 	.word	0x08008c85
 8008d44:	20000ea0 	.word	0x20000ea0

08008d48 <_fwalk_sglue>:
 8008d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	4688      	mov	r8, r1
 8008d50:	4614      	mov	r4, r2
 8008d52:	2600      	movs	r6, #0
 8008d54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d58:	f1b9 0901 	subs.w	r9, r9, #1
 8008d5c:	d505      	bpl.n	8008d6a <_fwalk_sglue+0x22>
 8008d5e:	6824      	ldr	r4, [r4, #0]
 8008d60:	2c00      	cmp	r4, #0
 8008d62:	d1f7      	bne.n	8008d54 <_fwalk_sglue+0xc>
 8008d64:	4630      	mov	r0, r6
 8008d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d6a:	89ab      	ldrh	r3, [r5, #12]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d907      	bls.n	8008d80 <_fwalk_sglue+0x38>
 8008d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d74:	3301      	adds	r3, #1
 8008d76:	d003      	beq.n	8008d80 <_fwalk_sglue+0x38>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	47c0      	blx	r8
 8008d7e:	4306      	orrs	r6, r0
 8008d80:	3568      	adds	r5, #104	@ 0x68
 8008d82:	e7e9      	b.n	8008d58 <_fwalk_sglue+0x10>

08008d84 <iprintf>:
 8008d84:	b40f      	push	{r0, r1, r2, r3}
 8008d86:	b507      	push	{r0, r1, r2, lr}
 8008d88:	4906      	ldr	r1, [pc, #24]	@ (8008da4 <iprintf+0x20>)
 8008d8a:	ab04      	add	r3, sp, #16
 8008d8c:	6808      	ldr	r0, [r1, #0]
 8008d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d92:	6881      	ldr	r1, [r0, #8]
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	f002 fee7 	bl	800bb68 <_vfiprintf_r>
 8008d9a:	b003      	add	sp, #12
 8008d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008da0:	b004      	add	sp, #16
 8008da2:	4770      	bx	lr
 8008da4:	20000060 	.word	0x20000060

08008da8 <_puts_r>:
 8008da8:	6a03      	ldr	r3, [r0, #32]
 8008daa:	b570      	push	{r4, r5, r6, lr}
 8008dac:	6884      	ldr	r4, [r0, #8]
 8008dae:	4605      	mov	r5, r0
 8008db0:	460e      	mov	r6, r1
 8008db2:	b90b      	cbnz	r3, 8008db8 <_puts_r+0x10>
 8008db4:	f7ff ffb0 	bl	8008d18 <__sinit>
 8008db8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dba:	07db      	lsls	r3, r3, #31
 8008dbc:	d405      	bmi.n	8008dca <_puts_r+0x22>
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	0598      	lsls	r0, r3, #22
 8008dc2:	d402      	bmi.n	8008dca <_puts_r+0x22>
 8008dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dc6:	f000 fa92 	bl	80092ee <__retarget_lock_acquire_recursive>
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	0719      	lsls	r1, r3, #28
 8008dce:	d502      	bpl.n	8008dd6 <_puts_r+0x2e>
 8008dd0:	6923      	ldr	r3, [r4, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d135      	bne.n	8008e42 <_puts_r+0x9a>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f000 f91d 	bl	8009018 <__swsetup_r>
 8008dde:	b380      	cbz	r0, 8008e42 <_puts_r+0x9a>
 8008de0:	f04f 35ff 	mov.w	r5, #4294967295
 8008de4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008de6:	07da      	lsls	r2, r3, #31
 8008de8:	d405      	bmi.n	8008df6 <_puts_r+0x4e>
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	059b      	lsls	r3, r3, #22
 8008dee:	d402      	bmi.n	8008df6 <_puts_r+0x4e>
 8008df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008df2:	f000 fa7d 	bl	80092f0 <__retarget_lock_release_recursive>
 8008df6:	4628      	mov	r0, r5
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	da04      	bge.n	8008e08 <_puts_r+0x60>
 8008dfe:	69a2      	ldr	r2, [r4, #24]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	dc17      	bgt.n	8008e34 <_puts_r+0x8c>
 8008e04:	290a      	cmp	r1, #10
 8008e06:	d015      	beq.n	8008e34 <_puts_r+0x8c>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	6022      	str	r2, [r4, #0]
 8008e0e:	7019      	strb	r1, [r3, #0]
 8008e10:	68a3      	ldr	r3, [r4, #8]
 8008e12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e16:	3b01      	subs	r3, #1
 8008e18:	60a3      	str	r3, [r4, #8]
 8008e1a:	2900      	cmp	r1, #0
 8008e1c:	d1ed      	bne.n	8008dfa <_puts_r+0x52>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	da11      	bge.n	8008e46 <_puts_r+0x9e>
 8008e22:	4622      	mov	r2, r4
 8008e24:	210a      	movs	r1, #10
 8008e26:	4628      	mov	r0, r5
 8008e28:	f000 f8b7 	bl	8008f9a <__swbuf_r>
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	d0d7      	beq.n	8008de0 <_puts_r+0x38>
 8008e30:	250a      	movs	r5, #10
 8008e32:	e7d7      	b.n	8008de4 <_puts_r+0x3c>
 8008e34:	4622      	mov	r2, r4
 8008e36:	4628      	mov	r0, r5
 8008e38:	f000 f8af 	bl	8008f9a <__swbuf_r>
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d1e7      	bne.n	8008e10 <_puts_r+0x68>
 8008e40:	e7ce      	b.n	8008de0 <_puts_r+0x38>
 8008e42:	3e01      	subs	r6, #1
 8008e44:	e7e4      	b.n	8008e10 <_puts_r+0x68>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	1c5a      	adds	r2, r3, #1
 8008e4a:	6022      	str	r2, [r4, #0]
 8008e4c:	220a      	movs	r2, #10
 8008e4e:	701a      	strb	r2, [r3, #0]
 8008e50:	e7ee      	b.n	8008e30 <_puts_r+0x88>
	...

08008e54 <puts>:
 8008e54:	4b02      	ldr	r3, [pc, #8]	@ (8008e60 <puts+0xc>)
 8008e56:	4601      	mov	r1, r0
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f7ff bfa5 	b.w	8008da8 <_puts_r>
 8008e5e:	bf00      	nop
 8008e60:	20000060 	.word	0x20000060

08008e64 <sniprintf>:
 8008e64:	b40c      	push	{r2, r3}
 8008e66:	b530      	push	{r4, r5, lr}
 8008e68:	4b18      	ldr	r3, [pc, #96]	@ (8008ecc <sniprintf+0x68>)
 8008e6a:	1e0c      	subs	r4, r1, #0
 8008e6c:	681d      	ldr	r5, [r3, #0]
 8008e6e:	b09d      	sub	sp, #116	@ 0x74
 8008e70:	da08      	bge.n	8008e84 <sniprintf+0x20>
 8008e72:	238b      	movs	r3, #139	@ 0x8b
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7a:	b01d      	add	sp, #116	@ 0x74
 8008e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e80:	b002      	add	sp, #8
 8008e82:	4770      	bx	lr
 8008e84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008e88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e8c:	f04f 0300 	mov.w	r3, #0
 8008e90:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008e92:	bf14      	ite	ne
 8008e94:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e98:	4623      	moveq	r3, r4
 8008e9a:	9304      	str	r3, [sp, #16]
 8008e9c:	9307      	str	r3, [sp, #28]
 8008e9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ea2:	9002      	str	r0, [sp, #8]
 8008ea4:	9006      	str	r0, [sp, #24]
 8008ea6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008eaa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008eac:	ab21      	add	r3, sp, #132	@ 0x84
 8008eae:	a902      	add	r1, sp, #8
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	f002 fd32 	bl	800b91c <_svfiprintf_r>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	bfbc      	itt	lt
 8008ebc:	238b      	movlt	r3, #139	@ 0x8b
 8008ebe:	602b      	strlt	r3, [r5, #0]
 8008ec0:	2c00      	cmp	r4, #0
 8008ec2:	d0da      	beq.n	8008e7a <sniprintf+0x16>
 8008ec4:	9b02      	ldr	r3, [sp, #8]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e7d6      	b.n	8008e7a <sniprintf+0x16>
 8008ecc:	20000060 	.word	0x20000060

08008ed0 <siprintf>:
 8008ed0:	b40e      	push	{r1, r2, r3}
 8008ed2:	b510      	push	{r4, lr}
 8008ed4:	b09d      	sub	sp, #116	@ 0x74
 8008ed6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008ed8:	9002      	str	r0, [sp, #8]
 8008eda:	9006      	str	r0, [sp, #24]
 8008edc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ee0:	480a      	ldr	r0, [pc, #40]	@ (8008f0c <siprintf+0x3c>)
 8008ee2:	9107      	str	r1, [sp, #28]
 8008ee4:	9104      	str	r1, [sp, #16]
 8008ee6:	490a      	ldr	r1, [pc, #40]	@ (8008f10 <siprintf+0x40>)
 8008ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eec:	9105      	str	r1, [sp, #20]
 8008eee:	2400      	movs	r4, #0
 8008ef0:	a902      	add	r1, sp, #8
 8008ef2:	6800      	ldr	r0, [r0, #0]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008ef8:	f002 fd10 	bl	800b91c <_svfiprintf_r>
 8008efc:	9b02      	ldr	r3, [sp, #8]
 8008efe:	701c      	strb	r4, [r3, #0]
 8008f00:	b01d      	add	sp, #116	@ 0x74
 8008f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f06:	b003      	add	sp, #12
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20000060 	.word	0x20000060
 8008f10:	ffff0208 	.word	0xffff0208

08008f14 <__sread>:
 8008f14:	b510      	push	{r4, lr}
 8008f16:	460c      	mov	r4, r1
 8008f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1c:	f000 f998 	bl	8009250 <_read_r>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	bfab      	itete	ge
 8008f24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f26:	89a3      	ldrhlt	r3, [r4, #12]
 8008f28:	181b      	addge	r3, r3, r0
 8008f2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f2e:	bfac      	ite	ge
 8008f30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f32:	81a3      	strhlt	r3, [r4, #12]
 8008f34:	bd10      	pop	{r4, pc}

08008f36 <__swrite>:
 8008f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3a:	461f      	mov	r7, r3
 8008f3c:	898b      	ldrh	r3, [r1, #12]
 8008f3e:	05db      	lsls	r3, r3, #23
 8008f40:	4605      	mov	r5, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	4616      	mov	r6, r2
 8008f46:	d505      	bpl.n	8008f54 <__swrite+0x1e>
 8008f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f000 f96c 	bl	800922c <_lseek_r>
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f5e:	81a3      	strh	r3, [r4, #12]
 8008f60:	4632      	mov	r2, r6
 8008f62:	463b      	mov	r3, r7
 8008f64:	4628      	mov	r0, r5
 8008f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6a:	f000 b983 	b.w	8009274 <_write_r>

08008f6e <__sseek>:
 8008f6e:	b510      	push	{r4, lr}
 8008f70:	460c      	mov	r4, r1
 8008f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f76:	f000 f959 	bl	800922c <_lseek_r>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	bf15      	itete	ne
 8008f80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f8a:	81a3      	strheq	r3, [r4, #12]
 8008f8c:	bf18      	it	ne
 8008f8e:	81a3      	strhne	r3, [r4, #12]
 8008f90:	bd10      	pop	{r4, pc}

08008f92 <__sclose>:
 8008f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f96:	f000 b939 	b.w	800920c <_close_r>

08008f9a <__swbuf_r>:
 8008f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9c:	460e      	mov	r6, r1
 8008f9e:	4614      	mov	r4, r2
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	b118      	cbz	r0, 8008fac <__swbuf_r+0x12>
 8008fa4:	6a03      	ldr	r3, [r0, #32]
 8008fa6:	b90b      	cbnz	r3, 8008fac <__swbuf_r+0x12>
 8008fa8:	f7ff feb6 	bl	8008d18 <__sinit>
 8008fac:	69a3      	ldr	r3, [r4, #24]
 8008fae:	60a3      	str	r3, [r4, #8]
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	071a      	lsls	r2, r3, #28
 8008fb4:	d501      	bpl.n	8008fba <__swbuf_r+0x20>
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	b943      	cbnz	r3, 8008fcc <__swbuf_r+0x32>
 8008fba:	4621      	mov	r1, r4
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f000 f82b 	bl	8009018 <__swsetup_r>
 8008fc2:	b118      	cbz	r0, 8008fcc <__swbuf_r+0x32>
 8008fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8008fc8:	4638      	mov	r0, r7
 8008fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	6922      	ldr	r2, [r4, #16]
 8008fd0:	1a98      	subs	r0, r3, r2
 8008fd2:	6963      	ldr	r3, [r4, #20]
 8008fd4:	b2f6      	uxtb	r6, r6
 8008fd6:	4283      	cmp	r3, r0
 8008fd8:	4637      	mov	r7, r6
 8008fda:	dc05      	bgt.n	8008fe8 <__swbuf_r+0x4e>
 8008fdc:	4621      	mov	r1, r4
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f002 ff5e 	bl	800bea0 <_fflush_r>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d1ed      	bne.n	8008fc4 <__swbuf_r+0x2a>
 8008fe8:	68a3      	ldr	r3, [r4, #8]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	60a3      	str	r3, [r4, #8]
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	6022      	str	r2, [r4, #0]
 8008ff4:	701e      	strb	r6, [r3, #0]
 8008ff6:	6962      	ldr	r2, [r4, #20]
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d004      	beq.n	8009008 <__swbuf_r+0x6e>
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	07db      	lsls	r3, r3, #31
 8009002:	d5e1      	bpl.n	8008fc8 <__swbuf_r+0x2e>
 8009004:	2e0a      	cmp	r6, #10
 8009006:	d1df      	bne.n	8008fc8 <__swbuf_r+0x2e>
 8009008:	4621      	mov	r1, r4
 800900a:	4628      	mov	r0, r5
 800900c:	f002 ff48 	bl	800bea0 <_fflush_r>
 8009010:	2800      	cmp	r0, #0
 8009012:	d0d9      	beq.n	8008fc8 <__swbuf_r+0x2e>
 8009014:	e7d6      	b.n	8008fc4 <__swbuf_r+0x2a>
	...

08009018 <__swsetup_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4b29      	ldr	r3, [pc, #164]	@ (80090c0 <__swsetup_r+0xa8>)
 800901c:	4605      	mov	r5, r0
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	460c      	mov	r4, r1
 8009022:	b118      	cbz	r0, 800902c <__swsetup_r+0x14>
 8009024:	6a03      	ldr	r3, [r0, #32]
 8009026:	b90b      	cbnz	r3, 800902c <__swsetup_r+0x14>
 8009028:	f7ff fe76 	bl	8008d18 <__sinit>
 800902c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009030:	0719      	lsls	r1, r3, #28
 8009032:	d422      	bmi.n	800907a <__swsetup_r+0x62>
 8009034:	06da      	lsls	r2, r3, #27
 8009036:	d407      	bmi.n	8009048 <__swsetup_r+0x30>
 8009038:	2209      	movs	r2, #9
 800903a:	602a      	str	r2, [r5, #0]
 800903c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	f04f 30ff 	mov.w	r0, #4294967295
 8009046:	e033      	b.n	80090b0 <__swsetup_r+0x98>
 8009048:	0758      	lsls	r0, r3, #29
 800904a:	d512      	bpl.n	8009072 <__swsetup_r+0x5a>
 800904c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800904e:	b141      	cbz	r1, 8009062 <__swsetup_r+0x4a>
 8009050:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009054:	4299      	cmp	r1, r3
 8009056:	d002      	beq.n	800905e <__swsetup_r+0x46>
 8009058:	4628      	mov	r0, r5
 800905a:	f000 ffd5 	bl	800a008 <_free_r>
 800905e:	2300      	movs	r3, #0
 8009060:	6363      	str	r3, [r4, #52]	@ 0x34
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	2300      	movs	r3, #0
 800906c:	6063      	str	r3, [r4, #4]
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	f043 0308 	orr.w	r3, r3, #8
 8009078:	81a3      	strh	r3, [r4, #12]
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	b94b      	cbnz	r3, 8009092 <__swsetup_r+0x7a>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009088:	d003      	beq.n	8009092 <__swsetup_r+0x7a>
 800908a:	4621      	mov	r1, r4
 800908c:	4628      	mov	r0, r5
 800908e:	f002 ff67 	bl	800bf60 <__smakebuf_r>
 8009092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009096:	f013 0201 	ands.w	r2, r3, #1
 800909a:	d00a      	beq.n	80090b2 <__swsetup_r+0x9a>
 800909c:	2200      	movs	r2, #0
 800909e:	60a2      	str	r2, [r4, #8]
 80090a0:	6962      	ldr	r2, [r4, #20]
 80090a2:	4252      	negs	r2, r2
 80090a4:	61a2      	str	r2, [r4, #24]
 80090a6:	6922      	ldr	r2, [r4, #16]
 80090a8:	b942      	cbnz	r2, 80090bc <__swsetup_r+0xa4>
 80090aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090ae:	d1c5      	bne.n	800903c <__swsetup_r+0x24>
 80090b0:	bd38      	pop	{r3, r4, r5, pc}
 80090b2:	0799      	lsls	r1, r3, #30
 80090b4:	bf58      	it	pl
 80090b6:	6962      	ldrpl	r2, [r4, #20]
 80090b8:	60a2      	str	r2, [r4, #8]
 80090ba:	e7f4      	b.n	80090a6 <__swsetup_r+0x8e>
 80090bc:	2000      	movs	r0, #0
 80090be:	e7f7      	b.n	80090b0 <__swsetup_r+0x98>
 80090c0:	20000060 	.word	0x20000060

080090c4 <memset>:
 80090c4:	4402      	add	r2, r0
 80090c6:	4603      	mov	r3, r0
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d100      	bne.n	80090ce <memset+0xa>
 80090cc:	4770      	bx	lr
 80090ce:	f803 1b01 	strb.w	r1, [r3], #1
 80090d2:	e7f9      	b.n	80090c8 <memset+0x4>

080090d4 <strncmp>:
 80090d4:	b510      	push	{r4, lr}
 80090d6:	b16a      	cbz	r2, 80090f4 <strncmp+0x20>
 80090d8:	3901      	subs	r1, #1
 80090da:	1884      	adds	r4, r0, r2
 80090dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d103      	bne.n	80090f0 <strncmp+0x1c>
 80090e8:	42a0      	cmp	r0, r4
 80090ea:	d001      	beq.n	80090f0 <strncmp+0x1c>
 80090ec:	2a00      	cmp	r2, #0
 80090ee:	d1f5      	bne.n	80090dc <strncmp+0x8>
 80090f0:	1ad0      	subs	r0, r2, r3
 80090f2:	bd10      	pop	{r4, pc}
 80090f4:	4610      	mov	r0, r2
 80090f6:	e7fc      	b.n	80090f2 <strncmp+0x1e>

080090f8 <strncpy>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	3901      	subs	r1, #1
 80090fc:	4603      	mov	r3, r0
 80090fe:	b132      	cbz	r2, 800910e <strncpy+0x16>
 8009100:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009104:	f803 4b01 	strb.w	r4, [r3], #1
 8009108:	3a01      	subs	r2, #1
 800910a:	2c00      	cmp	r4, #0
 800910c:	d1f7      	bne.n	80090fe <strncpy+0x6>
 800910e:	441a      	add	r2, r3
 8009110:	2100      	movs	r1, #0
 8009112:	4293      	cmp	r3, r2
 8009114:	d100      	bne.n	8009118 <strncpy+0x20>
 8009116:	bd10      	pop	{r4, pc}
 8009118:	f803 1b01 	strb.w	r1, [r3], #1
 800911c:	e7f9      	b.n	8009112 <strncpy+0x1a>
	...

08009120 <strtok>:
 8009120:	4b16      	ldr	r3, [pc, #88]	@ (800917c <strtok+0x5c>)
 8009122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009126:	681f      	ldr	r7, [r3, #0]
 8009128:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800912a:	4605      	mov	r5, r0
 800912c:	460e      	mov	r6, r1
 800912e:	b9ec      	cbnz	r4, 800916c <strtok+0x4c>
 8009130:	2050      	movs	r0, #80	@ 0x50
 8009132:	f000 ffb3 	bl	800a09c <malloc>
 8009136:	4602      	mov	r2, r0
 8009138:	6478      	str	r0, [r7, #68]	@ 0x44
 800913a:	b920      	cbnz	r0, 8009146 <strtok+0x26>
 800913c:	4b10      	ldr	r3, [pc, #64]	@ (8009180 <strtok+0x60>)
 800913e:	4811      	ldr	r0, [pc, #68]	@ (8009184 <strtok+0x64>)
 8009140:	215b      	movs	r1, #91	@ 0x5b
 8009142:	f000 f8eb 	bl	800931c <__assert_func>
 8009146:	e9c0 4400 	strd	r4, r4, [r0]
 800914a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800914e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009152:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009156:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800915a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800915e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009162:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009166:	6184      	str	r4, [r0, #24]
 8009168:	7704      	strb	r4, [r0, #28]
 800916a:	6244      	str	r4, [r0, #36]	@ 0x24
 800916c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800916e:	4631      	mov	r1, r6
 8009170:	4628      	mov	r0, r5
 8009172:	2301      	movs	r3, #1
 8009174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009178:	f000 b806 	b.w	8009188 <__strtok_r>
 800917c:	20000060 	.word	0x20000060
 8009180:	0800d32d 	.word	0x0800d32d
 8009184:	0800d344 	.word	0x0800d344

08009188 <__strtok_r>:
 8009188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800918a:	4604      	mov	r4, r0
 800918c:	b908      	cbnz	r0, 8009192 <__strtok_r+0xa>
 800918e:	6814      	ldr	r4, [r2, #0]
 8009190:	b144      	cbz	r4, 80091a4 <__strtok_r+0x1c>
 8009192:	4620      	mov	r0, r4
 8009194:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009198:	460f      	mov	r7, r1
 800919a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800919e:	b91e      	cbnz	r6, 80091a8 <__strtok_r+0x20>
 80091a0:	b965      	cbnz	r5, 80091bc <__strtok_r+0x34>
 80091a2:	6015      	str	r5, [r2, #0]
 80091a4:	2000      	movs	r0, #0
 80091a6:	e005      	b.n	80091b4 <__strtok_r+0x2c>
 80091a8:	42b5      	cmp	r5, r6
 80091aa:	d1f6      	bne.n	800919a <__strtok_r+0x12>
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1f0      	bne.n	8009192 <__strtok_r+0xa>
 80091b0:	6014      	str	r4, [r2, #0]
 80091b2:	7003      	strb	r3, [r0, #0]
 80091b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b6:	461c      	mov	r4, r3
 80091b8:	e00c      	b.n	80091d4 <__strtok_r+0x4c>
 80091ba:	b91d      	cbnz	r5, 80091c4 <__strtok_r+0x3c>
 80091bc:	4627      	mov	r7, r4
 80091be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091c2:	460e      	mov	r6, r1
 80091c4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80091c8:	42ab      	cmp	r3, r5
 80091ca:	d1f6      	bne.n	80091ba <__strtok_r+0x32>
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0f2      	beq.n	80091b6 <__strtok_r+0x2e>
 80091d0:	2300      	movs	r3, #0
 80091d2:	703b      	strb	r3, [r7, #0]
 80091d4:	6014      	str	r4, [r2, #0]
 80091d6:	e7ed      	b.n	80091b4 <__strtok_r+0x2c>

080091d8 <strstr>:
 80091d8:	780a      	ldrb	r2, [r1, #0]
 80091da:	b570      	push	{r4, r5, r6, lr}
 80091dc:	b96a      	cbnz	r2, 80091fa <strstr+0x22>
 80091de:	bd70      	pop	{r4, r5, r6, pc}
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d109      	bne.n	80091f8 <strstr+0x20>
 80091e4:	460c      	mov	r4, r1
 80091e6:	4605      	mov	r5, r0
 80091e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0f6      	beq.n	80091de <strstr+0x6>
 80091f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80091f4:	429e      	cmp	r6, r3
 80091f6:	d0f7      	beq.n	80091e8 <strstr+0x10>
 80091f8:	3001      	adds	r0, #1
 80091fa:	7803      	ldrb	r3, [r0, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1ef      	bne.n	80091e0 <strstr+0x8>
 8009200:	4618      	mov	r0, r3
 8009202:	e7ec      	b.n	80091de <strstr+0x6>

08009204 <_localeconv_r>:
 8009204:	4800      	ldr	r0, [pc, #0]	@ (8009208 <_localeconv_r+0x4>)
 8009206:	4770      	bx	lr
 8009208:	200001a0 	.word	0x200001a0

0800920c <_close_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4d06      	ldr	r5, [pc, #24]	@ (8009228 <_close_r+0x1c>)
 8009210:	2300      	movs	r3, #0
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	602b      	str	r3, [r5, #0]
 8009218:	f7f8 fa9f 	bl	800175a <_close>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_close_r+0x1a>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_close_r+0x1a>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	20000ea4 	.word	0x20000ea4

0800922c <_lseek_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4d07      	ldr	r5, [pc, #28]	@ (800924c <_lseek_r+0x20>)
 8009230:	4604      	mov	r4, r0
 8009232:	4608      	mov	r0, r1
 8009234:	4611      	mov	r1, r2
 8009236:	2200      	movs	r2, #0
 8009238:	602a      	str	r2, [r5, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	f7f8 fab4 	bl	80017a8 <_lseek>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_lseek_r+0x1e>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_lseek_r+0x1e>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20000ea4 	.word	0x20000ea4

08009250 <_read_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d07      	ldr	r5, [pc, #28]	@ (8009270 <_read_r+0x20>)
 8009254:	4604      	mov	r4, r0
 8009256:	4608      	mov	r0, r1
 8009258:	4611      	mov	r1, r2
 800925a:	2200      	movs	r2, #0
 800925c:	602a      	str	r2, [r5, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	f7f8 fa42 	bl	80016e8 <_read>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_read_r+0x1e>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_read_r+0x1e>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	20000ea4 	.word	0x20000ea4

08009274 <_write_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	@ (8009294 <_write_r+0x20>)
 8009278:	4604      	mov	r4, r0
 800927a:	4608      	mov	r0, r1
 800927c:	4611      	mov	r1, r2
 800927e:	2200      	movs	r2, #0
 8009280:	602a      	str	r2, [r5, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f7f8 fa4d 	bl	8001722 <_write>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_write_r+0x1e>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_write_r+0x1e>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20000ea4 	.word	0x20000ea4

08009298 <__errno>:
 8009298:	4b01      	ldr	r3, [pc, #4]	@ (80092a0 <__errno+0x8>)
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20000060 	.word	0x20000060

080092a4 <__libc_init_array>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	4d0d      	ldr	r5, [pc, #52]	@ (80092dc <__libc_init_array+0x38>)
 80092a8:	4c0d      	ldr	r4, [pc, #52]	@ (80092e0 <__libc_init_array+0x3c>)
 80092aa:	1b64      	subs	r4, r4, r5
 80092ac:	10a4      	asrs	r4, r4, #2
 80092ae:	2600      	movs	r6, #0
 80092b0:	42a6      	cmp	r6, r4
 80092b2:	d109      	bne.n	80092c8 <__libc_init_array+0x24>
 80092b4:	4d0b      	ldr	r5, [pc, #44]	@ (80092e4 <__libc_init_array+0x40>)
 80092b6:	4c0c      	ldr	r4, [pc, #48]	@ (80092e8 <__libc_init_array+0x44>)
 80092b8:	f003 face 	bl	800c858 <_init>
 80092bc:	1b64      	subs	r4, r4, r5
 80092be:	10a4      	asrs	r4, r4, #2
 80092c0:	2600      	movs	r6, #0
 80092c2:	42a6      	cmp	r6, r4
 80092c4:	d105      	bne.n	80092d2 <__libc_init_array+0x2e>
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092cc:	4798      	blx	r3
 80092ce:	3601      	adds	r6, #1
 80092d0:	e7ee      	b.n	80092b0 <__libc_init_array+0xc>
 80092d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d6:	4798      	blx	r3
 80092d8:	3601      	adds	r6, #1
 80092da:	e7f2      	b.n	80092c2 <__libc_init_array+0x1e>
 80092dc:	0800d77c 	.word	0x0800d77c
 80092e0:	0800d77c 	.word	0x0800d77c
 80092e4:	0800d77c 	.word	0x0800d77c
 80092e8:	0800d780 	.word	0x0800d780

080092ec <__retarget_lock_init_recursive>:
 80092ec:	4770      	bx	lr

080092ee <__retarget_lock_acquire_recursive>:
 80092ee:	4770      	bx	lr

080092f0 <__retarget_lock_release_recursive>:
 80092f0:	4770      	bx	lr

080092f2 <memcpy>:
 80092f2:	440a      	add	r2, r1
 80092f4:	4291      	cmp	r1, r2
 80092f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80092fa:	d100      	bne.n	80092fe <memcpy+0xc>
 80092fc:	4770      	bx	lr
 80092fe:	b510      	push	{r4, lr}
 8009300:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009308:	4291      	cmp	r1, r2
 800930a:	d1f9      	bne.n	8009300 <memcpy+0xe>
 800930c:	bd10      	pop	{r4, pc}
	...

08009310 <nanf>:
 8009310:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009318 <nanf+0x8>
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	7fc00000 	.word	0x7fc00000

0800931c <__assert_func>:
 800931c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800931e:	4614      	mov	r4, r2
 8009320:	461a      	mov	r2, r3
 8009322:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <__assert_func+0x2c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4605      	mov	r5, r0
 8009328:	68d8      	ldr	r0, [r3, #12]
 800932a:	b14c      	cbz	r4, 8009340 <__assert_func+0x24>
 800932c:	4b07      	ldr	r3, [pc, #28]	@ (800934c <__assert_func+0x30>)
 800932e:	9100      	str	r1, [sp, #0]
 8009330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009334:	4906      	ldr	r1, [pc, #24]	@ (8009350 <__assert_func+0x34>)
 8009336:	462b      	mov	r3, r5
 8009338:	f002 fdda 	bl	800bef0 <fiprintf>
 800933c:	f002 fea0 	bl	800c080 <abort>
 8009340:	4b04      	ldr	r3, [pc, #16]	@ (8009354 <__assert_func+0x38>)
 8009342:	461c      	mov	r4, r3
 8009344:	e7f3      	b.n	800932e <__assert_func+0x12>
 8009346:	bf00      	nop
 8009348:	20000060 	.word	0x20000060
 800934c:	0800d39e 	.word	0x0800d39e
 8009350:	0800d3ab 	.word	0x0800d3ab
 8009354:	0800d3d9 	.word	0x0800d3d9

08009358 <quorem>:
 8009358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	6903      	ldr	r3, [r0, #16]
 800935e:	690c      	ldr	r4, [r1, #16]
 8009360:	42a3      	cmp	r3, r4
 8009362:	4607      	mov	r7, r0
 8009364:	db7e      	blt.n	8009464 <quorem+0x10c>
 8009366:	3c01      	subs	r4, #1
 8009368:	f101 0814 	add.w	r8, r1, #20
 800936c:	00a3      	lsls	r3, r4, #2
 800936e:	f100 0514 	add.w	r5, r0, #20
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800937e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009382:	3301      	adds	r3, #1
 8009384:	429a      	cmp	r2, r3
 8009386:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800938a:	fbb2 f6f3 	udiv	r6, r2, r3
 800938e:	d32e      	bcc.n	80093ee <quorem+0x96>
 8009390:	f04f 0a00 	mov.w	sl, #0
 8009394:	46c4      	mov	ip, r8
 8009396:	46ae      	mov	lr, r5
 8009398:	46d3      	mov	fp, sl
 800939a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800939e:	b298      	uxth	r0, r3
 80093a0:	fb06 a000 	mla	r0, r6, r0, sl
 80093a4:	0c02      	lsrs	r2, r0, #16
 80093a6:	0c1b      	lsrs	r3, r3, #16
 80093a8:	fb06 2303 	mla	r3, r6, r3, r2
 80093ac:	f8de 2000 	ldr.w	r2, [lr]
 80093b0:	b280      	uxth	r0, r0
 80093b2:	b292      	uxth	r2, r2
 80093b4:	1a12      	subs	r2, r2, r0
 80093b6:	445a      	add	r2, fp
 80093b8:	f8de 0000 	ldr.w	r0, [lr]
 80093bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093ca:	b292      	uxth	r2, r2
 80093cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093d0:	45e1      	cmp	r9, ip
 80093d2:	f84e 2b04 	str.w	r2, [lr], #4
 80093d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093da:	d2de      	bcs.n	800939a <quorem+0x42>
 80093dc:	9b00      	ldr	r3, [sp, #0]
 80093de:	58eb      	ldr	r3, [r5, r3]
 80093e0:	b92b      	cbnz	r3, 80093ee <quorem+0x96>
 80093e2:	9b01      	ldr	r3, [sp, #4]
 80093e4:	3b04      	subs	r3, #4
 80093e6:	429d      	cmp	r5, r3
 80093e8:	461a      	mov	r2, r3
 80093ea:	d32f      	bcc.n	800944c <quorem+0xf4>
 80093ec:	613c      	str	r4, [r7, #16]
 80093ee:	4638      	mov	r0, r7
 80093f0:	f001 f9c6 	bl	800a780 <__mcmp>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	db25      	blt.n	8009444 <quorem+0xec>
 80093f8:	4629      	mov	r1, r5
 80093fa:	2000      	movs	r0, #0
 80093fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009400:	f8d1 c000 	ldr.w	ip, [r1]
 8009404:	fa1f fe82 	uxth.w	lr, r2
 8009408:	fa1f f38c 	uxth.w	r3, ip
 800940c:	eba3 030e 	sub.w	r3, r3, lr
 8009410:	4403      	add	r3, r0
 8009412:	0c12      	lsrs	r2, r2, #16
 8009414:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009418:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800941c:	b29b      	uxth	r3, r3
 800941e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009422:	45c1      	cmp	r9, r8
 8009424:	f841 3b04 	str.w	r3, [r1], #4
 8009428:	ea4f 4022 	mov.w	r0, r2, asr #16
 800942c:	d2e6      	bcs.n	80093fc <quorem+0xa4>
 800942e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009436:	b922      	cbnz	r2, 8009442 <quorem+0xea>
 8009438:	3b04      	subs	r3, #4
 800943a:	429d      	cmp	r5, r3
 800943c:	461a      	mov	r2, r3
 800943e:	d30b      	bcc.n	8009458 <quorem+0x100>
 8009440:	613c      	str	r4, [r7, #16]
 8009442:	3601      	adds	r6, #1
 8009444:	4630      	mov	r0, r6
 8009446:	b003      	add	sp, #12
 8009448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944c:	6812      	ldr	r2, [r2, #0]
 800944e:	3b04      	subs	r3, #4
 8009450:	2a00      	cmp	r2, #0
 8009452:	d1cb      	bne.n	80093ec <quorem+0x94>
 8009454:	3c01      	subs	r4, #1
 8009456:	e7c6      	b.n	80093e6 <quorem+0x8e>
 8009458:	6812      	ldr	r2, [r2, #0]
 800945a:	3b04      	subs	r3, #4
 800945c:	2a00      	cmp	r2, #0
 800945e:	d1ef      	bne.n	8009440 <quorem+0xe8>
 8009460:	3c01      	subs	r4, #1
 8009462:	e7ea      	b.n	800943a <quorem+0xe2>
 8009464:	2000      	movs	r0, #0
 8009466:	e7ee      	b.n	8009446 <quorem+0xee>

08009468 <_dtoa_r>:
 8009468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	69c7      	ldr	r7, [r0, #28]
 800946e:	b097      	sub	sp, #92	@ 0x5c
 8009470:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009474:	ec55 4b10 	vmov	r4, r5, d0
 8009478:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800947a:	9107      	str	r1, [sp, #28]
 800947c:	4681      	mov	r9, r0
 800947e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009480:	9311      	str	r3, [sp, #68]	@ 0x44
 8009482:	b97f      	cbnz	r7, 80094a4 <_dtoa_r+0x3c>
 8009484:	2010      	movs	r0, #16
 8009486:	f000 fe09 	bl	800a09c <malloc>
 800948a:	4602      	mov	r2, r0
 800948c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009490:	b920      	cbnz	r0, 800949c <_dtoa_r+0x34>
 8009492:	4ba9      	ldr	r3, [pc, #676]	@ (8009738 <_dtoa_r+0x2d0>)
 8009494:	21ef      	movs	r1, #239	@ 0xef
 8009496:	48a9      	ldr	r0, [pc, #676]	@ (800973c <_dtoa_r+0x2d4>)
 8009498:	f7ff ff40 	bl	800931c <__assert_func>
 800949c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80094a0:	6007      	str	r7, [r0, #0]
 80094a2:	60c7      	str	r7, [r0, #12]
 80094a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094a8:	6819      	ldr	r1, [r3, #0]
 80094aa:	b159      	cbz	r1, 80094c4 <_dtoa_r+0x5c>
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	604a      	str	r2, [r1, #4]
 80094b0:	2301      	movs	r3, #1
 80094b2:	4093      	lsls	r3, r2
 80094b4:	608b      	str	r3, [r1, #8]
 80094b6:	4648      	mov	r0, r9
 80094b8:	f000 fee6 	bl	800a288 <_Bfree>
 80094bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	1e2b      	subs	r3, r5, #0
 80094c6:	bfb9      	ittee	lt
 80094c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094cc:	9305      	strlt	r3, [sp, #20]
 80094ce:	2300      	movge	r3, #0
 80094d0:	6033      	strge	r3, [r6, #0]
 80094d2:	9f05      	ldr	r7, [sp, #20]
 80094d4:	4b9a      	ldr	r3, [pc, #616]	@ (8009740 <_dtoa_r+0x2d8>)
 80094d6:	bfbc      	itt	lt
 80094d8:	2201      	movlt	r2, #1
 80094da:	6032      	strlt	r2, [r6, #0]
 80094dc:	43bb      	bics	r3, r7
 80094de:	d112      	bne.n	8009506 <_dtoa_r+0x9e>
 80094e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094ec:	4323      	orrs	r3, r4
 80094ee:	f000 855a 	beq.w	8009fa6 <_dtoa_r+0xb3e>
 80094f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009754 <_dtoa_r+0x2ec>
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 855c 	beq.w	8009fb6 <_dtoa_r+0xb4e>
 80094fe:	f10a 0303 	add.w	r3, sl, #3
 8009502:	f000 bd56 	b.w	8009fb2 <_dtoa_r+0xb4a>
 8009506:	ed9d 7b04 	vldr	d7, [sp, #16]
 800950a:	2200      	movs	r2, #0
 800950c:	ec51 0b17 	vmov	r0, r1, d7
 8009510:	2300      	movs	r3, #0
 8009512:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009516:	f7f7 fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800951a:	4680      	mov	r8, r0
 800951c:	b158      	cbz	r0, 8009536 <_dtoa_r+0xce>
 800951e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009520:	2301      	movs	r3, #1
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009526:	b113      	cbz	r3, 800952e <_dtoa_r+0xc6>
 8009528:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800952a:	4b86      	ldr	r3, [pc, #536]	@ (8009744 <_dtoa_r+0x2dc>)
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009758 <_dtoa_r+0x2f0>
 8009532:	f000 bd40 	b.w	8009fb6 <_dtoa_r+0xb4e>
 8009536:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800953a:	aa14      	add	r2, sp, #80	@ 0x50
 800953c:	a915      	add	r1, sp, #84	@ 0x54
 800953e:	4648      	mov	r0, r9
 8009540:	f001 fa3e 	bl	800a9c0 <__d2b>
 8009544:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009548:	9002      	str	r0, [sp, #8]
 800954a:	2e00      	cmp	r6, #0
 800954c:	d078      	beq.n	8009640 <_dtoa_r+0x1d8>
 800954e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009550:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800955c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009560:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009564:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009568:	4619      	mov	r1, r3
 800956a:	2200      	movs	r2, #0
 800956c:	4b76      	ldr	r3, [pc, #472]	@ (8009748 <_dtoa_r+0x2e0>)
 800956e:	f7f6 fe8b 	bl	8000288 <__aeabi_dsub>
 8009572:	a36b      	add	r3, pc, #428	@ (adr r3, 8009720 <_dtoa_r+0x2b8>)
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f7f7 f83e 	bl	80005f8 <__aeabi_dmul>
 800957c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009728 <_dtoa_r+0x2c0>)
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	f7f6 fe83 	bl	800028c <__adddf3>
 8009586:	4604      	mov	r4, r0
 8009588:	4630      	mov	r0, r6
 800958a:	460d      	mov	r5, r1
 800958c:	f7f6 ffca 	bl	8000524 <__aeabi_i2d>
 8009590:	a367      	add	r3, pc, #412	@ (adr r3, 8009730 <_dtoa_r+0x2c8>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f7f7 f82f 	bl	80005f8 <__aeabi_dmul>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4620      	mov	r0, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	f7f6 fe73 	bl	800028c <__adddf3>
 80095a6:	4604      	mov	r4, r0
 80095a8:	460d      	mov	r5, r1
 80095aa:	f7f7 fad5 	bl	8000b58 <__aeabi_d2iz>
 80095ae:	2200      	movs	r2, #0
 80095b0:	4607      	mov	r7, r0
 80095b2:	2300      	movs	r3, #0
 80095b4:	4620      	mov	r0, r4
 80095b6:	4629      	mov	r1, r5
 80095b8:	f7f7 fa90 	bl	8000adc <__aeabi_dcmplt>
 80095bc:	b140      	cbz	r0, 80095d0 <_dtoa_r+0x168>
 80095be:	4638      	mov	r0, r7
 80095c0:	f7f6 ffb0 	bl	8000524 <__aeabi_i2d>
 80095c4:	4622      	mov	r2, r4
 80095c6:	462b      	mov	r3, r5
 80095c8:	f7f7 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80095cc:	b900      	cbnz	r0, 80095d0 <_dtoa_r+0x168>
 80095ce:	3f01      	subs	r7, #1
 80095d0:	2f16      	cmp	r7, #22
 80095d2:	d852      	bhi.n	800967a <_dtoa_r+0x212>
 80095d4:	4b5d      	ldr	r3, [pc, #372]	@ (800974c <_dtoa_r+0x2e4>)
 80095d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095e2:	f7f7 fa7b 	bl	8000adc <__aeabi_dcmplt>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d049      	beq.n	800967e <_dtoa_r+0x216>
 80095ea:	3f01      	subs	r7, #1
 80095ec:	2300      	movs	r3, #0
 80095ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80095f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095f2:	1b9b      	subs	r3, r3, r6
 80095f4:	1e5a      	subs	r2, r3, #1
 80095f6:	bf45      	ittet	mi
 80095f8:	f1c3 0301 	rsbmi	r3, r3, #1
 80095fc:	9300      	strmi	r3, [sp, #0]
 80095fe:	2300      	movpl	r3, #0
 8009600:	2300      	movmi	r3, #0
 8009602:	9206      	str	r2, [sp, #24]
 8009604:	bf54      	ite	pl
 8009606:	9300      	strpl	r3, [sp, #0]
 8009608:	9306      	strmi	r3, [sp, #24]
 800960a:	2f00      	cmp	r7, #0
 800960c:	db39      	blt.n	8009682 <_dtoa_r+0x21a>
 800960e:	9b06      	ldr	r3, [sp, #24]
 8009610:	970d      	str	r7, [sp, #52]	@ 0x34
 8009612:	443b      	add	r3, r7
 8009614:	9306      	str	r3, [sp, #24]
 8009616:	2300      	movs	r3, #0
 8009618:	9308      	str	r3, [sp, #32]
 800961a:	9b07      	ldr	r3, [sp, #28]
 800961c:	2b09      	cmp	r3, #9
 800961e:	d863      	bhi.n	80096e8 <_dtoa_r+0x280>
 8009620:	2b05      	cmp	r3, #5
 8009622:	bfc4      	itt	gt
 8009624:	3b04      	subgt	r3, #4
 8009626:	9307      	strgt	r3, [sp, #28]
 8009628:	9b07      	ldr	r3, [sp, #28]
 800962a:	f1a3 0302 	sub.w	r3, r3, #2
 800962e:	bfcc      	ite	gt
 8009630:	2400      	movgt	r4, #0
 8009632:	2401      	movle	r4, #1
 8009634:	2b03      	cmp	r3, #3
 8009636:	d863      	bhi.n	8009700 <_dtoa_r+0x298>
 8009638:	e8df f003 	tbb	[pc, r3]
 800963c:	2b375452 	.word	0x2b375452
 8009640:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009644:	441e      	add	r6, r3
 8009646:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800964a:	2b20      	cmp	r3, #32
 800964c:	bfc1      	itttt	gt
 800964e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009652:	409f      	lslgt	r7, r3
 8009654:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009658:	fa24 f303 	lsrgt.w	r3, r4, r3
 800965c:	bfd6      	itet	le
 800965e:	f1c3 0320 	rsble	r3, r3, #32
 8009662:	ea47 0003 	orrgt.w	r0, r7, r3
 8009666:	fa04 f003 	lslle.w	r0, r4, r3
 800966a:	f7f6 ff4b 	bl	8000504 <__aeabi_ui2d>
 800966e:	2201      	movs	r2, #1
 8009670:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009674:	3e01      	subs	r6, #1
 8009676:	9212      	str	r2, [sp, #72]	@ 0x48
 8009678:	e776      	b.n	8009568 <_dtoa_r+0x100>
 800967a:	2301      	movs	r3, #1
 800967c:	e7b7      	b.n	80095ee <_dtoa_r+0x186>
 800967e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009680:	e7b6      	b.n	80095f0 <_dtoa_r+0x188>
 8009682:	9b00      	ldr	r3, [sp, #0]
 8009684:	1bdb      	subs	r3, r3, r7
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	427b      	negs	r3, r7
 800968a:	9308      	str	r3, [sp, #32]
 800968c:	2300      	movs	r3, #0
 800968e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009690:	e7c3      	b.n	800961a <_dtoa_r+0x1b2>
 8009692:	2301      	movs	r3, #1
 8009694:	9309      	str	r3, [sp, #36]	@ 0x24
 8009696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009698:	eb07 0b03 	add.w	fp, r7, r3
 800969c:	f10b 0301 	add.w	r3, fp, #1
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	9303      	str	r3, [sp, #12]
 80096a4:	bfb8      	it	lt
 80096a6:	2301      	movlt	r3, #1
 80096a8:	e006      	b.n	80096b8 <_dtoa_r+0x250>
 80096aa:	2301      	movs	r3, #1
 80096ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	dd28      	ble.n	8009706 <_dtoa_r+0x29e>
 80096b4:	469b      	mov	fp, r3
 80096b6:	9303      	str	r3, [sp, #12]
 80096b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80096bc:	2100      	movs	r1, #0
 80096be:	2204      	movs	r2, #4
 80096c0:	f102 0514 	add.w	r5, r2, #20
 80096c4:	429d      	cmp	r5, r3
 80096c6:	d926      	bls.n	8009716 <_dtoa_r+0x2ae>
 80096c8:	6041      	str	r1, [r0, #4]
 80096ca:	4648      	mov	r0, r9
 80096cc:	f000 fd9c 	bl	800a208 <_Balloc>
 80096d0:	4682      	mov	sl, r0
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d142      	bne.n	800975c <_dtoa_r+0x2f4>
 80096d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009750 <_dtoa_r+0x2e8>)
 80096d8:	4602      	mov	r2, r0
 80096da:	f240 11af 	movw	r1, #431	@ 0x1af
 80096de:	e6da      	b.n	8009496 <_dtoa_r+0x2e>
 80096e0:	2300      	movs	r3, #0
 80096e2:	e7e3      	b.n	80096ac <_dtoa_r+0x244>
 80096e4:	2300      	movs	r3, #0
 80096e6:	e7d5      	b.n	8009694 <_dtoa_r+0x22c>
 80096e8:	2401      	movs	r4, #1
 80096ea:	2300      	movs	r3, #0
 80096ec:	9307      	str	r3, [sp, #28]
 80096ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80096f0:	f04f 3bff 	mov.w	fp, #4294967295
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80096fa:	2312      	movs	r3, #18
 80096fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80096fe:	e7db      	b.n	80096b8 <_dtoa_r+0x250>
 8009700:	2301      	movs	r3, #1
 8009702:	9309      	str	r3, [sp, #36]	@ 0x24
 8009704:	e7f4      	b.n	80096f0 <_dtoa_r+0x288>
 8009706:	f04f 0b01 	mov.w	fp, #1
 800970a:	f8cd b00c 	str.w	fp, [sp, #12]
 800970e:	465b      	mov	r3, fp
 8009710:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009714:	e7d0      	b.n	80096b8 <_dtoa_r+0x250>
 8009716:	3101      	adds	r1, #1
 8009718:	0052      	lsls	r2, r2, #1
 800971a:	e7d1      	b.n	80096c0 <_dtoa_r+0x258>
 800971c:	f3af 8000 	nop.w
 8009720:	636f4361 	.word	0x636f4361
 8009724:	3fd287a7 	.word	0x3fd287a7
 8009728:	8b60c8b3 	.word	0x8b60c8b3
 800972c:	3fc68a28 	.word	0x3fc68a28
 8009730:	509f79fb 	.word	0x509f79fb
 8009734:	3fd34413 	.word	0x3fd34413
 8009738:	0800d32d 	.word	0x0800d32d
 800973c:	0800d3e7 	.word	0x0800d3e7
 8009740:	7ff00000 	.word	0x7ff00000
 8009744:	0800d305 	.word	0x0800d305
 8009748:	3ff80000 	.word	0x3ff80000
 800974c:	0800d558 	.word	0x0800d558
 8009750:	0800d43f 	.word	0x0800d43f
 8009754:	0800d3e3 	.word	0x0800d3e3
 8009758:	0800d304 	.word	0x0800d304
 800975c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009760:	6018      	str	r0, [r3, #0]
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	2b0e      	cmp	r3, #14
 8009766:	f200 80a1 	bhi.w	80098ac <_dtoa_r+0x444>
 800976a:	2c00      	cmp	r4, #0
 800976c:	f000 809e 	beq.w	80098ac <_dtoa_r+0x444>
 8009770:	2f00      	cmp	r7, #0
 8009772:	dd33      	ble.n	80097dc <_dtoa_r+0x374>
 8009774:	4b9c      	ldr	r3, [pc, #624]	@ (80099e8 <_dtoa_r+0x580>)
 8009776:	f007 020f 	and.w	r2, r7, #15
 800977a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800977e:	ed93 7b00 	vldr	d7, [r3]
 8009782:	05f8      	lsls	r0, r7, #23
 8009784:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009788:	ea4f 1427 	mov.w	r4, r7, asr #4
 800978c:	d516      	bpl.n	80097bc <_dtoa_r+0x354>
 800978e:	4b97      	ldr	r3, [pc, #604]	@ (80099ec <_dtoa_r+0x584>)
 8009790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009798:	f7f7 f858 	bl	800084c <__aeabi_ddiv>
 800979c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097a0:	f004 040f 	and.w	r4, r4, #15
 80097a4:	2603      	movs	r6, #3
 80097a6:	4d91      	ldr	r5, [pc, #580]	@ (80099ec <_dtoa_r+0x584>)
 80097a8:	b954      	cbnz	r4, 80097c0 <_dtoa_r+0x358>
 80097aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097b2:	f7f7 f84b 	bl	800084c <__aeabi_ddiv>
 80097b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097ba:	e028      	b.n	800980e <_dtoa_r+0x3a6>
 80097bc:	2602      	movs	r6, #2
 80097be:	e7f2      	b.n	80097a6 <_dtoa_r+0x33e>
 80097c0:	07e1      	lsls	r1, r4, #31
 80097c2:	d508      	bpl.n	80097d6 <_dtoa_r+0x36e>
 80097c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80097c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097cc:	f7f6 ff14 	bl	80005f8 <__aeabi_dmul>
 80097d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097d4:	3601      	adds	r6, #1
 80097d6:	1064      	asrs	r4, r4, #1
 80097d8:	3508      	adds	r5, #8
 80097da:	e7e5      	b.n	80097a8 <_dtoa_r+0x340>
 80097dc:	f000 80af 	beq.w	800993e <_dtoa_r+0x4d6>
 80097e0:	427c      	negs	r4, r7
 80097e2:	4b81      	ldr	r3, [pc, #516]	@ (80099e8 <_dtoa_r+0x580>)
 80097e4:	4d81      	ldr	r5, [pc, #516]	@ (80099ec <_dtoa_r+0x584>)
 80097e6:	f004 020f 	and.w	r2, r4, #15
 80097ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097f6:	f7f6 feff 	bl	80005f8 <__aeabi_dmul>
 80097fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097fe:	1124      	asrs	r4, r4, #4
 8009800:	2300      	movs	r3, #0
 8009802:	2602      	movs	r6, #2
 8009804:	2c00      	cmp	r4, #0
 8009806:	f040 808f 	bne.w	8009928 <_dtoa_r+0x4c0>
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1d3      	bne.n	80097b6 <_dtoa_r+0x34e>
 800980e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009810:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 8094 	beq.w	8009942 <_dtoa_r+0x4da>
 800981a:	4b75      	ldr	r3, [pc, #468]	@ (80099f0 <_dtoa_r+0x588>)
 800981c:	2200      	movs	r2, #0
 800981e:	4620      	mov	r0, r4
 8009820:	4629      	mov	r1, r5
 8009822:	f7f7 f95b 	bl	8000adc <__aeabi_dcmplt>
 8009826:	2800      	cmp	r0, #0
 8009828:	f000 808b 	beq.w	8009942 <_dtoa_r+0x4da>
 800982c:	9b03      	ldr	r3, [sp, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 8087 	beq.w	8009942 <_dtoa_r+0x4da>
 8009834:	f1bb 0f00 	cmp.w	fp, #0
 8009838:	dd34      	ble.n	80098a4 <_dtoa_r+0x43c>
 800983a:	4620      	mov	r0, r4
 800983c:	4b6d      	ldr	r3, [pc, #436]	@ (80099f4 <_dtoa_r+0x58c>)
 800983e:	2200      	movs	r2, #0
 8009840:	4629      	mov	r1, r5
 8009842:	f7f6 fed9 	bl	80005f8 <__aeabi_dmul>
 8009846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800984a:	f107 38ff 	add.w	r8, r7, #4294967295
 800984e:	3601      	adds	r6, #1
 8009850:	465c      	mov	r4, fp
 8009852:	4630      	mov	r0, r6
 8009854:	f7f6 fe66 	bl	8000524 <__aeabi_i2d>
 8009858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800985c:	f7f6 fecc 	bl	80005f8 <__aeabi_dmul>
 8009860:	4b65      	ldr	r3, [pc, #404]	@ (80099f8 <_dtoa_r+0x590>)
 8009862:	2200      	movs	r2, #0
 8009864:	f7f6 fd12 	bl	800028c <__adddf3>
 8009868:	4605      	mov	r5, r0
 800986a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800986e:	2c00      	cmp	r4, #0
 8009870:	d16a      	bne.n	8009948 <_dtoa_r+0x4e0>
 8009872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009876:	4b61      	ldr	r3, [pc, #388]	@ (80099fc <_dtoa_r+0x594>)
 8009878:	2200      	movs	r2, #0
 800987a:	f7f6 fd05 	bl	8000288 <__aeabi_dsub>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009886:	462a      	mov	r2, r5
 8009888:	4633      	mov	r3, r6
 800988a:	f7f7 f945 	bl	8000b18 <__aeabi_dcmpgt>
 800988e:	2800      	cmp	r0, #0
 8009890:	f040 8298 	bne.w	8009dc4 <_dtoa_r+0x95c>
 8009894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009898:	462a      	mov	r2, r5
 800989a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800989e:	f7f7 f91d 	bl	8000adc <__aeabi_dcmplt>
 80098a2:	bb38      	cbnz	r0, 80098f4 <_dtoa_r+0x48c>
 80098a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80098a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80098ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f2c0 8157 	blt.w	8009b62 <_dtoa_r+0x6fa>
 80098b4:	2f0e      	cmp	r7, #14
 80098b6:	f300 8154 	bgt.w	8009b62 <_dtoa_r+0x6fa>
 80098ba:	4b4b      	ldr	r3, [pc, #300]	@ (80099e8 <_dtoa_r+0x580>)
 80098bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098c0:	ed93 7b00 	vldr	d7, [r3]
 80098c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	ed8d 7b00 	vstr	d7, [sp]
 80098cc:	f280 80e5 	bge.w	8009a9a <_dtoa_r+0x632>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f300 80e1 	bgt.w	8009a9a <_dtoa_r+0x632>
 80098d8:	d10c      	bne.n	80098f4 <_dtoa_r+0x48c>
 80098da:	4b48      	ldr	r3, [pc, #288]	@ (80099fc <_dtoa_r+0x594>)
 80098dc:	2200      	movs	r2, #0
 80098de:	ec51 0b17 	vmov	r0, r1, d7
 80098e2:	f7f6 fe89 	bl	80005f8 <__aeabi_dmul>
 80098e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098ea:	f7f7 f90b 	bl	8000b04 <__aeabi_dcmpge>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f000 8266 	beq.w	8009dc0 <_dtoa_r+0x958>
 80098f4:	2400      	movs	r4, #0
 80098f6:	4625      	mov	r5, r4
 80098f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098fa:	4656      	mov	r6, sl
 80098fc:	ea6f 0803 	mvn.w	r8, r3
 8009900:	2700      	movs	r7, #0
 8009902:	4621      	mov	r1, r4
 8009904:	4648      	mov	r0, r9
 8009906:	f000 fcbf 	bl	800a288 <_Bfree>
 800990a:	2d00      	cmp	r5, #0
 800990c:	f000 80bd 	beq.w	8009a8a <_dtoa_r+0x622>
 8009910:	b12f      	cbz	r7, 800991e <_dtoa_r+0x4b6>
 8009912:	42af      	cmp	r7, r5
 8009914:	d003      	beq.n	800991e <_dtoa_r+0x4b6>
 8009916:	4639      	mov	r1, r7
 8009918:	4648      	mov	r0, r9
 800991a:	f000 fcb5 	bl	800a288 <_Bfree>
 800991e:	4629      	mov	r1, r5
 8009920:	4648      	mov	r0, r9
 8009922:	f000 fcb1 	bl	800a288 <_Bfree>
 8009926:	e0b0      	b.n	8009a8a <_dtoa_r+0x622>
 8009928:	07e2      	lsls	r2, r4, #31
 800992a:	d505      	bpl.n	8009938 <_dtoa_r+0x4d0>
 800992c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009930:	f7f6 fe62 	bl	80005f8 <__aeabi_dmul>
 8009934:	3601      	adds	r6, #1
 8009936:	2301      	movs	r3, #1
 8009938:	1064      	asrs	r4, r4, #1
 800993a:	3508      	adds	r5, #8
 800993c:	e762      	b.n	8009804 <_dtoa_r+0x39c>
 800993e:	2602      	movs	r6, #2
 8009940:	e765      	b.n	800980e <_dtoa_r+0x3a6>
 8009942:	9c03      	ldr	r4, [sp, #12]
 8009944:	46b8      	mov	r8, r7
 8009946:	e784      	b.n	8009852 <_dtoa_r+0x3ea>
 8009948:	4b27      	ldr	r3, [pc, #156]	@ (80099e8 <_dtoa_r+0x580>)
 800994a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800994c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009950:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009954:	4454      	add	r4, sl
 8009956:	2900      	cmp	r1, #0
 8009958:	d054      	beq.n	8009a04 <_dtoa_r+0x59c>
 800995a:	4929      	ldr	r1, [pc, #164]	@ (8009a00 <_dtoa_r+0x598>)
 800995c:	2000      	movs	r0, #0
 800995e:	f7f6 ff75 	bl	800084c <__aeabi_ddiv>
 8009962:	4633      	mov	r3, r6
 8009964:	462a      	mov	r2, r5
 8009966:	f7f6 fc8f 	bl	8000288 <__aeabi_dsub>
 800996a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800996e:	4656      	mov	r6, sl
 8009970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009974:	f7f7 f8f0 	bl	8000b58 <__aeabi_d2iz>
 8009978:	4605      	mov	r5, r0
 800997a:	f7f6 fdd3 	bl	8000524 <__aeabi_i2d>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009986:	f7f6 fc7f 	bl	8000288 <__aeabi_dsub>
 800998a:	3530      	adds	r5, #48	@ 0x30
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009994:	f806 5b01 	strb.w	r5, [r6], #1
 8009998:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800999c:	f7f7 f89e 	bl	8000adc <__aeabi_dcmplt>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d172      	bne.n	8009a8a <_dtoa_r+0x622>
 80099a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099a8:	4911      	ldr	r1, [pc, #68]	@ (80099f0 <_dtoa_r+0x588>)
 80099aa:	2000      	movs	r0, #0
 80099ac:	f7f6 fc6c 	bl	8000288 <__aeabi_dsub>
 80099b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099b4:	f7f7 f892 	bl	8000adc <__aeabi_dcmplt>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	f040 80b4 	bne.w	8009b26 <_dtoa_r+0x6be>
 80099be:	42a6      	cmp	r6, r4
 80099c0:	f43f af70 	beq.w	80098a4 <_dtoa_r+0x43c>
 80099c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80099c8:	4b0a      	ldr	r3, [pc, #40]	@ (80099f4 <_dtoa_r+0x58c>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	f7f6 fe14 	bl	80005f8 <__aeabi_dmul>
 80099d0:	4b08      	ldr	r3, [pc, #32]	@ (80099f4 <_dtoa_r+0x58c>)
 80099d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099d6:	2200      	movs	r2, #0
 80099d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099dc:	f7f6 fe0c 	bl	80005f8 <__aeabi_dmul>
 80099e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099e4:	e7c4      	b.n	8009970 <_dtoa_r+0x508>
 80099e6:	bf00      	nop
 80099e8:	0800d558 	.word	0x0800d558
 80099ec:	0800d530 	.word	0x0800d530
 80099f0:	3ff00000 	.word	0x3ff00000
 80099f4:	40240000 	.word	0x40240000
 80099f8:	401c0000 	.word	0x401c0000
 80099fc:	40140000 	.word	0x40140000
 8009a00:	3fe00000 	.word	0x3fe00000
 8009a04:	4631      	mov	r1, r6
 8009a06:	4628      	mov	r0, r5
 8009a08:	f7f6 fdf6 	bl	80005f8 <__aeabi_dmul>
 8009a0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a10:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a12:	4656      	mov	r6, sl
 8009a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a18:	f7f7 f89e 	bl	8000b58 <__aeabi_d2iz>
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	f7f6 fd81 	bl	8000524 <__aeabi_i2d>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a2a:	f7f6 fc2d 	bl	8000288 <__aeabi_dsub>
 8009a2e:	3530      	adds	r5, #48	@ 0x30
 8009a30:	f806 5b01 	strb.w	r5, [r6], #1
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	42a6      	cmp	r6, r4
 8009a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a3e:	f04f 0200 	mov.w	r2, #0
 8009a42:	d124      	bne.n	8009a8e <_dtoa_r+0x626>
 8009a44:	4baf      	ldr	r3, [pc, #700]	@ (8009d04 <_dtoa_r+0x89c>)
 8009a46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a4a:	f7f6 fc1f 	bl	800028c <__adddf3>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a56:	f7f7 f85f 	bl	8000b18 <__aeabi_dcmpgt>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d163      	bne.n	8009b26 <_dtoa_r+0x6be>
 8009a5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a62:	49a8      	ldr	r1, [pc, #672]	@ (8009d04 <_dtoa_r+0x89c>)
 8009a64:	2000      	movs	r0, #0
 8009a66:	f7f6 fc0f 	bl	8000288 <__aeabi_dsub>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a72:	f7f7 f833 	bl	8000adc <__aeabi_dcmplt>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	f43f af14 	beq.w	80098a4 <_dtoa_r+0x43c>
 8009a7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a7e:	1e73      	subs	r3, r6, #1
 8009a80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a86:	2b30      	cmp	r3, #48	@ 0x30
 8009a88:	d0f8      	beq.n	8009a7c <_dtoa_r+0x614>
 8009a8a:	4647      	mov	r7, r8
 8009a8c:	e03b      	b.n	8009b06 <_dtoa_r+0x69e>
 8009a8e:	4b9e      	ldr	r3, [pc, #632]	@ (8009d08 <_dtoa_r+0x8a0>)
 8009a90:	f7f6 fdb2 	bl	80005f8 <__aeabi_dmul>
 8009a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a98:	e7bc      	b.n	8009a14 <_dtoa_r+0x5ac>
 8009a9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a9e:	4656      	mov	r6, sl
 8009aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f7f6 fed0 	bl	800084c <__aeabi_ddiv>
 8009aac:	f7f7 f854 	bl	8000b58 <__aeabi_d2iz>
 8009ab0:	4680      	mov	r8, r0
 8009ab2:	f7f6 fd37 	bl	8000524 <__aeabi_i2d>
 8009ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aba:	f7f6 fd9d 	bl	80005f8 <__aeabi_dmul>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009aca:	f7f6 fbdd 	bl	8000288 <__aeabi_dsub>
 8009ace:	f806 4b01 	strb.w	r4, [r6], #1
 8009ad2:	9d03      	ldr	r5, [sp, #12]
 8009ad4:	eba6 040a 	sub.w	r4, r6, sl
 8009ad8:	42a5      	cmp	r5, r4
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	d133      	bne.n	8009b48 <_dtoa_r+0x6e0>
 8009ae0:	f7f6 fbd4 	bl	800028c <__adddf3>
 8009ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ae8:	4604      	mov	r4, r0
 8009aea:	460d      	mov	r5, r1
 8009aec:	f7f7 f814 	bl	8000b18 <__aeabi_dcmpgt>
 8009af0:	b9c0      	cbnz	r0, 8009b24 <_dtoa_r+0x6bc>
 8009af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009af6:	4620      	mov	r0, r4
 8009af8:	4629      	mov	r1, r5
 8009afa:	f7f6 ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009afe:	b110      	cbz	r0, 8009b06 <_dtoa_r+0x69e>
 8009b00:	f018 0f01 	tst.w	r8, #1
 8009b04:	d10e      	bne.n	8009b24 <_dtoa_r+0x6bc>
 8009b06:	9902      	ldr	r1, [sp, #8]
 8009b08:	4648      	mov	r0, r9
 8009b0a:	f000 fbbd 	bl	800a288 <_Bfree>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	7033      	strb	r3, [r6, #0]
 8009b12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b14:	3701      	adds	r7, #1
 8009b16:	601f      	str	r7, [r3, #0]
 8009b18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 824b 	beq.w	8009fb6 <_dtoa_r+0xb4e>
 8009b20:	601e      	str	r6, [r3, #0]
 8009b22:	e248      	b.n	8009fb6 <_dtoa_r+0xb4e>
 8009b24:	46b8      	mov	r8, r7
 8009b26:	4633      	mov	r3, r6
 8009b28:	461e      	mov	r6, r3
 8009b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b2e:	2a39      	cmp	r2, #57	@ 0x39
 8009b30:	d106      	bne.n	8009b40 <_dtoa_r+0x6d8>
 8009b32:	459a      	cmp	sl, r3
 8009b34:	d1f8      	bne.n	8009b28 <_dtoa_r+0x6c0>
 8009b36:	2230      	movs	r2, #48	@ 0x30
 8009b38:	f108 0801 	add.w	r8, r8, #1
 8009b3c:	f88a 2000 	strb.w	r2, [sl]
 8009b40:	781a      	ldrb	r2, [r3, #0]
 8009b42:	3201      	adds	r2, #1
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	e7a0      	b.n	8009a8a <_dtoa_r+0x622>
 8009b48:	4b6f      	ldr	r3, [pc, #444]	@ (8009d08 <_dtoa_r+0x8a0>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f7f6 fd54 	bl	80005f8 <__aeabi_dmul>
 8009b50:	2200      	movs	r2, #0
 8009b52:	2300      	movs	r3, #0
 8009b54:	4604      	mov	r4, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	f7f6 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d09f      	beq.n	8009aa0 <_dtoa_r+0x638>
 8009b60:	e7d1      	b.n	8009b06 <_dtoa_r+0x69e>
 8009b62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b64:	2a00      	cmp	r2, #0
 8009b66:	f000 80ea 	beq.w	8009d3e <_dtoa_r+0x8d6>
 8009b6a:	9a07      	ldr	r2, [sp, #28]
 8009b6c:	2a01      	cmp	r2, #1
 8009b6e:	f300 80cd 	bgt.w	8009d0c <_dtoa_r+0x8a4>
 8009b72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b74:	2a00      	cmp	r2, #0
 8009b76:	f000 80c1 	beq.w	8009cfc <_dtoa_r+0x894>
 8009b7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b7e:	9c08      	ldr	r4, [sp, #32]
 8009b80:	9e00      	ldr	r6, [sp, #0]
 8009b82:	9a00      	ldr	r2, [sp, #0]
 8009b84:	441a      	add	r2, r3
 8009b86:	9200      	str	r2, [sp, #0]
 8009b88:	9a06      	ldr	r2, [sp, #24]
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	441a      	add	r2, r3
 8009b8e:	4648      	mov	r0, r9
 8009b90:	9206      	str	r2, [sp, #24]
 8009b92:	f000 fc77 	bl	800a484 <__i2b>
 8009b96:	4605      	mov	r5, r0
 8009b98:	b166      	cbz	r6, 8009bb4 <_dtoa_r+0x74c>
 8009b9a:	9b06      	ldr	r3, [sp, #24]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	dd09      	ble.n	8009bb4 <_dtoa_r+0x74c>
 8009ba0:	42b3      	cmp	r3, r6
 8009ba2:	9a00      	ldr	r2, [sp, #0]
 8009ba4:	bfa8      	it	ge
 8009ba6:	4633      	movge	r3, r6
 8009ba8:	1ad2      	subs	r2, r2, r3
 8009baa:	9200      	str	r2, [sp, #0]
 8009bac:	9a06      	ldr	r2, [sp, #24]
 8009bae:	1af6      	subs	r6, r6, r3
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	9306      	str	r3, [sp, #24]
 8009bb4:	9b08      	ldr	r3, [sp, #32]
 8009bb6:	b30b      	cbz	r3, 8009bfc <_dtoa_r+0x794>
 8009bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 80c6 	beq.w	8009d4c <_dtoa_r+0x8e4>
 8009bc0:	2c00      	cmp	r4, #0
 8009bc2:	f000 80c0 	beq.w	8009d46 <_dtoa_r+0x8de>
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	4622      	mov	r2, r4
 8009bca:	4648      	mov	r0, r9
 8009bcc:	f000 fd12 	bl	800a5f4 <__pow5mult>
 8009bd0:	9a02      	ldr	r2, [sp, #8]
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	4648      	mov	r0, r9
 8009bd8:	f000 fc6a 	bl	800a4b0 <__multiply>
 8009bdc:	9902      	ldr	r1, [sp, #8]
 8009bde:	4680      	mov	r8, r0
 8009be0:	4648      	mov	r0, r9
 8009be2:	f000 fb51 	bl	800a288 <_Bfree>
 8009be6:	9b08      	ldr	r3, [sp, #32]
 8009be8:	1b1b      	subs	r3, r3, r4
 8009bea:	9308      	str	r3, [sp, #32]
 8009bec:	f000 80b1 	beq.w	8009d52 <_dtoa_r+0x8ea>
 8009bf0:	9a08      	ldr	r2, [sp, #32]
 8009bf2:	4641      	mov	r1, r8
 8009bf4:	4648      	mov	r0, r9
 8009bf6:	f000 fcfd 	bl	800a5f4 <__pow5mult>
 8009bfa:	9002      	str	r0, [sp, #8]
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	4648      	mov	r0, r9
 8009c00:	f000 fc40 	bl	800a484 <__i2b>
 8009c04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c06:	4604      	mov	r4, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 81d8 	beq.w	8009fbe <_dtoa_r+0xb56>
 8009c0e:	461a      	mov	r2, r3
 8009c10:	4601      	mov	r1, r0
 8009c12:	4648      	mov	r0, r9
 8009c14:	f000 fcee 	bl	800a5f4 <__pow5mult>
 8009c18:	9b07      	ldr	r3, [sp, #28]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	f300 809f 	bgt.w	8009d60 <_dtoa_r+0x8f8>
 8009c22:	9b04      	ldr	r3, [sp, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f040 8097 	bne.w	8009d58 <_dtoa_r+0x8f0>
 8009c2a:	9b05      	ldr	r3, [sp, #20]
 8009c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f040 8093 	bne.w	8009d5c <_dtoa_r+0x8f4>
 8009c36:	9b05      	ldr	r3, [sp, #20]
 8009c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c3c:	0d1b      	lsrs	r3, r3, #20
 8009c3e:	051b      	lsls	r3, r3, #20
 8009c40:	b133      	cbz	r3, 8009c50 <_dtoa_r+0x7e8>
 8009c42:	9b00      	ldr	r3, [sp, #0]
 8009c44:	3301      	adds	r3, #1
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	9b06      	ldr	r3, [sp, #24]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	9306      	str	r3, [sp, #24]
 8009c4e:	2301      	movs	r3, #1
 8009c50:	9308      	str	r3, [sp, #32]
 8009c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 81b8 	beq.w	8009fca <_dtoa_r+0xb62>
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c60:	6918      	ldr	r0, [r3, #16]
 8009c62:	f000 fbc3 	bl	800a3ec <__hi0bits>
 8009c66:	f1c0 0020 	rsb	r0, r0, #32
 8009c6a:	9b06      	ldr	r3, [sp, #24]
 8009c6c:	4418      	add	r0, r3
 8009c6e:	f010 001f 	ands.w	r0, r0, #31
 8009c72:	f000 8082 	beq.w	8009d7a <_dtoa_r+0x912>
 8009c76:	f1c0 0320 	rsb	r3, r0, #32
 8009c7a:	2b04      	cmp	r3, #4
 8009c7c:	dd73      	ble.n	8009d66 <_dtoa_r+0x8fe>
 8009c7e:	9b00      	ldr	r3, [sp, #0]
 8009c80:	f1c0 001c 	rsb	r0, r0, #28
 8009c84:	4403      	add	r3, r0
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	9b06      	ldr	r3, [sp, #24]
 8009c8a:	4403      	add	r3, r0
 8009c8c:	4406      	add	r6, r0
 8009c8e:	9306      	str	r3, [sp, #24]
 8009c90:	9b00      	ldr	r3, [sp, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dd05      	ble.n	8009ca2 <_dtoa_r+0x83a>
 8009c96:	9902      	ldr	r1, [sp, #8]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4648      	mov	r0, r9
 8009c9c:	f000 fd04 	bl	800a6a8 <__lshift>
 8009ca0:	9002      	str	r0, [sp, #8]
 8009ca2:	9b06      	ldr	r3, [sp, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	dd05      	ble.n	8009cb4 <_dtoa_r+0x84c>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	461a      	mov	r2, r3
 8009cac:	4648      	mov	r0, r9
 8009cae:	f000 fcfb 	bl	800a6a8 <__lshift>
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d061      	beq.n	8009d7e <_dtoa_r+0x916>
 8009cba:	9802      	ldr	r0, [sp, #8]
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	f000 fd5f 	bl	800a780 <__mcmp>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	da5b      	bge.n	8009d7e <_dtoa_r+0x916>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9902      	ldr	r1, [sp, #8]
 8009cca:	220a      	movs	r2, #10
 8009ccc:	4648      	mov	r0, r9
 8009cce:	f000 fafd 	bl	800a2cc <__multadd>
 8009cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd4:	9002      	str	r0, [sp, #8]
 8009cd6:	f107 38ff 	add.w	r8, r7, #4294967295
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 8177 	beq.w	8009fce <_dtoa_r+0xb66>
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	4648      	mov	r0, r9
 8009ce8:	f000 faf0 	bl	800a2cc <__multadd>
 8009cec:	f1bb 0f00 	cmp.w	fp, #0
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	dc6f      	bgt.n	8009dd4 <_dtoa_r+0x96c>
 8009cf4:	9b07      	ldr	r3, [sp, #28]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	dc49      	bgt.n	8009d8e <_dtoa_r+0x926>
 8009cfa:	e06b      	b.n	8009dd4 <_dtoa_r+0x96c>
 8009cfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d02:	e73c      	b.n	8009b7e <_dtoa_r+0x716>
 8009d04:	3fe00000 	.word	0x3fe00000
 8009d08:	40240000 	.word	0x40240000
 8009d0c:	9b03      	ldr	r3, [sp, #12]
 8009d0e:	1e5c      	subs	r4, r3, #1
 8009d10:	9b08      	ldr	r3, [sp, #32]
 8009d12:	42a3      	cmp	r3, r4
 8009d14:	db09      	blt.n	8009d2a <_dtoa_r+0x8c2>
 8009d16:	1b1c      	subs	r4, r3, r4
 8009d18:	9b03      	ldr	r3, [sp, #12]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f6bf af30 	bge.w	8009b80 <_dtoa_r+0x718>
 8009d20:	9b00      	ldr	r3, [sp, #0]
 8009d22:	9a03      	ldr	r2, [sp, #12]
 8009d24:	1a9e      	subs	r6, r3, r2
 8009d26:	2300      	movs	r3, #0
 8009d28:	e72b      	b.n	8009b82 <_dtoa_r+0x71a>
 8009d2a:	9b08      	ldr	r3, [sp, #32]
 8009d2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d2e:	9408      	str	r4, [sp, #32]
 8009d30:	1ae3      	subs	r3, r4, r3
 8009d32:	441a      	add	r2, r3
 8009d34:	9e00      	ldr	r6, [sp, #0]
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	920d      	str	r2, [sp, #52]	@ 0x34
 8009d3a:	2400      	movs	r4, #0
 8009d3c:	e721      	b.n	8009b82 <_dtoa_r+0x71a>
 8009d3e:	9c08      	ldr	r4, [sp, #32]
 8009d40:	9e00      	ldr	r6, [sp, #0]
 8009d42:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009d44:	e728      	b.n	8009b98 <_dtoa_r+0x730>
 8009d46:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d4a:	e751      	b.n	8009bf0 <_dtoa_r+0x788>
 8009d4c:	9a08      	ldr	r2, [sp, #32]
 8009d4e:	9902      	ldr	r1, [sp, #8]
 8009d50:	e750      	b.n	8009bf4 <_dtoa_r+0x78c>
 8009d52:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d56:	e751      	b.n	8009bfc <_dtoa_r+0x794>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e779      	b.n	8009c50 <_dtoa_r+0x7e8>
 8009d5c:	9b04      	ldr	r3, [sp, #16]
 8009d5e:	e777      	b.n	8009c50 <_dtoa_r+0x7e8>
 8009d60:	2300      	movs	r3, #0
 8009d62:	9308      	str	r3, [sp, #32]
 8009d64:	e779      	b.n	8009c5a <_dtoa_r+0x7f2>
 8009d66:	d093      	beq.n	8009c90 <_dtoa_r+0x828>
 8009d68:	9a00      	ldr	r2, [sp, #0]
 8009d6a:	331c      	adds	r3, #28
 8009d6c:	441a      	add	r2, r3
 8009d6e:	9200      	str	r2, [sp, #0]
 8009d70:	9a06      	ldr	r2, [sp, #24]
 8009d72:	441a      	add	r2, r3
 8009d74:	441e      	add	r6, r3
 8009d76:	9206      	str	r2, [sp, #24]
 8009d78:	e78a      	b.n	8009c90 <_dtoa_r+0x828>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	e7f4      	b.n	8009d68 <_dtoa_r+0x900>
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	46b8      	mov	r8, r7
 8009d84:	dc20      	bgt.n	8009dc8 <_dtoa_r+0x960>
 8009d86:	469b      	mov	fp, r3
 8009d88:	9b07      	ldr	r3, [sp, #28]
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	dd1e      	ble.n	8009dcc <_dtoa_r+0x964>
 8009d8e:	f1bb 0f00 	cmp.w	fp, #0
 8009d92:	f47f adb1 	bne.w	80098f8 <_dtoa_r+0x490>
 8009d96:	4621      	mov	r1, r4
 8009d98:	465b      	mov	r3, fp
 8009d9a:	2205      	movs	r2, #5
 8009d9c:	4648      	mov	r0, r9
 8009d9e:	f000 fa95 	bl	800a2cc <__multadd>
 8009da2:	4601      	mov	r1, r0
 8009da4:	4604      	mov	r4, r0
 8009da6:	9802      	ldr	r0, [sp, #8]
 8009da8:	f000 fcea 	bl	800a780 <__mcmp>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	f77f ada3 	ble.w	80098f8 <_dtoa_r+0x490>
 8009db2:	4656      	mov	r6, sl
 8009db4:	2331      	movs	r3, #49	@ 0x31
 8009db6:	f806 3b01 	strb.w	r3, [r6], #1
 8009dba:	f108 0801 	add.w	r8, r8, #1
 8009dbe:	e59f      	b.n	8009900 <_dtoa_r+0x498>
 8009dc0:	9c03      	ldr	r4, [sp, #12]
 8009dc2:	46b8      	mov	r8, r7
 8009dc4:	4625      	mov	r5, r4
 8009dc6:	e7f4      	b.n	8009db2 <_dtoa_r+0x94a>
 8009dc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 8101 	beq.w	8009fd6 <_dtoa_r+0xb6e>
 8009dd4:	2e00      	cmp	r6, #0
 8009dd6:	dd05      	ble.n	8009de4 <_dtoa_r+0x97c>
 8009dd8:	4629      	mov	r1, r5
 8009dda:	4632      	mov	r2, r6
 8009ddc:	4648      	mov	r0, r9
 8009dde:	f000 fc63 	bl	800a6a8 <__lshift>
 8009de2:	4605      	mov	r5, r0
 8009de4:	9b08      	ldr	r3, [sp, #32]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d05c      	beq.n	8009ea4 <_dtoa_r+0xa3c>
 8009dea:	6869      	ldr	r1, [r5, #4]
 8009dec:	4648      	mov	r0, r9
 8009dee:	f000 fa0b 	bl	800a208 <_Balloc>
 8009df2:	4606      	mov	r6, r0
 8009df4:	b928      	cbnz	r0, 8009e02 <_dtoa_r+0x99a>
 8009df6:	4b82      	ldr	r3, [pc, #520]	@ (800a000 <_dtoa_r+0xb98>)
 8009df8:	4602      	mov	r2, r0
 8009dfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009dfe:	f7ff bb4a 	b.w	8009496 <_dtoa_r+0x2e>
 8009e02:	692a      	ldr	r2, [r5, #16]
 8009e04:	3202      	adds	r2, #2
 8009e06:	0092      	lsls	r2, r2, #2
 8009e08:	f105 010c 	add.w	r1, r5, #12
 8009e0c:	300c      	adds	r0, #12
 8009e0e:	f7ff fa70 	bl	80092f2 <memcpy>
 8009e12:	2201      	movs	r2, #1
 8009e14:	4631      	mov	r1, r6
 8009e16:	4648      	mov	r0, r9
 8009e18:	f000 fc46 	bl	800a6a8 <__lshift>
 8009e1c:	f10a 0301 	add.w	r3, sl, #1
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	eb0a 030b 	add.w	r3, sl, fp
 8009e26:	9308      	str	r3, [sp, #32]
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	462f      	mov	r7, r5
 8009e30:	9306      	str	r3, [sp, #24]
 8009e32:	4605      	mov	r5, r0
 8009e34:	9b00      	ldr	r3, [sp, #0]
 8009e36:	9802      	ldr	r0, [sp, #8]
 8009e38:	4621      	mov	r1, r4
 8009e3a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009e3e:	f7ff fa8b 	bl	8009358 <quorem>
 8009e42:	4603      	mov	r3, r0
 8009e44:	3330      	adds	r3, #48	@ 0x30
 8009e46:	9003      	str	r0, [sp, #12]
 8009e48:	4639      	mov	r1, r7
 8009e4a:	9802      	ldr	r0, [sp, #8]
 8009e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e4e:	f000 fc97 	bl	800a780 <__mcmp>
 8009e52:	462a      	mov	r2, r5
 8009e54:	9004      	str	r0, [sp, #16]
 8009e56:	4621      	mov	r1, r4
 8009e58:	4648      	mov	r0, r9
 8009e5a:	f000 fcad 	bl	800a7b8 <__mdiff>
 8009e5e:	68c2      	ldr	r2, [r0, #12]
 8009e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e62:	4606      	mov	r6, r0
 8009e64:	bb02      	cbnz	r2, 8009ea8 <_dtoa_r+0xa40>
 8009e66:	4601      	mov	r1, r0
 8009e68:	9802      	ldr	r0, [sp, #8]
 8009e6a:	f000 fc89 	bl	800a780 <__mcmp>
 8009e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e70:	4602      	mov	r2, r0
 8009e72:	4631      	mov	r1, r6
 8009e74:	4648      	mov	r0, r9
 8009e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e7a:	f000 fa05 	bl	800a288 <_Bfree>
 8009e7e:	9b07      	ldr	r3, [sp, #28]
 8009e80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e82:	9e00      	ldr	r6, [sp, #0]
 8009e84:	ea42 0103 	orr.w	r1, r2, r3
 8009e88:	9b06      	ldr	r3, [sp, #24]
 8009e8a:	4319      	orrs	r1, r3
 8009e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e8e:	d10d      	bne.n	8009eac <_dtoa_r+0xa44>
 8009e90:	2b39      	cmp	r3, #57	@ 0x39
 8009e92:	d027      	beq.n	8009ee4 <_dtoa_r+0xa7c>
 8009e94:	9a04      	ldr	r2, [sp, #16]
 8009e96:	2a00      	cmp	r2, #0
 8009e98:	dd01      	ble.n	8009e9e <_dtoa_r+0xa36>
 8009e9a:	9b03      	ldr	r3, [sp, #12]
 8009e9c:	3331      	adds	r3, #49	@ 0x31
 8009e9e:	f88b 3000 	strb.w	r3, [fp]
 8009ea2:	e52e      	b.n	8009902 <_dtoa_r+0x49a>
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	e7b9      	b.n	8009e1c <_dtoa_r+0x9b4>
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	e7e2      	b.n	8009e72 <_dtoa_r+0xa0a>
 8009eac:	9904      	ldr	r1, [sp, #16]
 8009eae:	2900      	cmp	r1, #0
 8009eb0:	db04      	blt.n	8009ebc <_dtoa_r+0xa54>
 8009eb2:	9807      	ldr	r0, [sp, #28]
 8009eb4:	4301      	orrs	r1, r0
 8009eb6:	9806      	ldr	r0, [sp, #24]
 8009eb8:	4301      	orrs	r1, r0
 8009eba:	d120      	bne.n	8009efe <_dtoa_r+0xa96>
 8009ebc:	2a00      	cmp	r2, #0
 8009ebe:	ddee      	ble.n	8009e9e <_dtoa_r+0xa36>
 8009ec0:	9902      	ldr	r1, [sp, #8]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	f000 fbee 	bl	800a6a8 <__lshift>
 8009ecc:	4621      	mov	r1, r4
 8009ece:	9002      	str	r0, [sp, #8]
 8009ed0:	f000 fc56 	bl	800a780 <__mcmp>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	9b00      	ldr	r3, [sp, #0]
 8009ed8:	dc02      	bgt.n	8009ee0 <_dtoa_r+0xa78>
 8009eda:	d1e0      	bne.n	8009e9e <_dtoa_r+0xa36>
 8009edc:	07da      	lsls	r2, r3, #31
 8009ede:	d5de      	bpl.n	8009e9e <_dtoa_r+0xa36>
 8009ee0:	2b39      	cmp	r3, #57	@ 0x39
 8009ee2:	d1da      	bne.n	8009e9a <_dtoa_r+0xa32>
 8009ee4:	2339      	movs	r3, #57	@ 0x39
 8009ee6:	f88b 3000 	strb.w	r3, [fp]
 8009eea:	4633      	mov	r3, r6
 8009eec:	461e      	mov	r6, r3
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ef4:	2a39      	cmp	r2, #57	@ 0x39
 8009ef6:	d04e      	beq.n	8009f96 <_dtoa_r+0xb2e>
 8009ef8:	3201      	adds	r2, #1
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	e501      	b.n	8009902 <_dtoa_r+0x49a>
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	dd03      	ble.n	8009f0a <_dtoa_r+0xaa2>
 8009f02:	2b39      	cmp	r3, #57	@ 0x39
 8009f04:	d0ee      	beq.n	8009ee4 <_dtoa_r+0xa7c>
 8009f06:	3301      	adds	r3, #1
 8009f08:	e7c9      	b.n	8009e9e <_dtoa_r+0xa36>
 8009f0a:	9a00      	ldr	r2, [sp, #0]
 8009f0c:	9908      	ldr	r1, [sp, #32]
 8009f0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009f12:	428a      	cmp	r2, r1
 8009f14:	d028      	beq.n	8009f68 <_dtoa_r+0xb00>
 8009f16:	9902      	ldr	r1, [sp, #8]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	220a      	movs	r2, #10
 8009f1c:	4648      	mov	r0, r9
 8009f1e:	f000 f9d5 	bl	800a2cc <__multadd>
 8009f22:	42af      	cmp	r7, r5
 8009f24:	9002      	str	r0, [sp, #8]
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	f04f 020a 	mov.w	r2, #10
 8009f2e:	4639      	mov	r1, r7
 8009f30:	4648      	mov	r0, r9
 8009f32:	d107      	bne.n	8009f44 <_dtoa_r+0xadc>
 8009f34:	f000 f9ca 	bl	800a2cc <__multadd>
 8009f38:	4607      	mov	r7, r0
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	9b00      	ldr	r3, [sp, #0]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	e777      	b.n	8009e34 <_dtoa_r+0x9cc>
 8009f44:	f000 f9c2 	bl	800a2cc <__multadd>
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4607      	mov	r7, r0
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	220a      	movs	r2, #10
 8009f50:	4648      	mov	r0, r9
 8009f52:	f000 f9bb 	bl	800a2cc <__multadd>
 8009f56:	4605      	mov	r5, r0
 8009f58:	e7f0      	b.n	8009f3c <_dtoa_r+0xad4>
 8009f5a:	f1bb 0f00 	cmp.w	fp, #0
 8009f5e:	bfcc      	ite	gt
 8009f60:	465e      	movgt	r6, fp
 8009f62:	2601      	movle	r6, #1
 8009f64:	4456      	add	r6, sl
 8009f66:	2700      	movs	r7, #0
 8009f68:	9902      	ldr	r1, [sp, #8]
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	4648      	mov	r0, r9
 8009f70:	f000 fb9a 	bl	800a6a8 <__lshift>
 8009f74:	4621      	mov	r1, r4
 8009f76:	9002      	str	r0, [sp, #8]
 8009f78:	f000 fc02 	bl	800a780 <__mcmp>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	dcb4      	bgt.n	8009eea <_dtoa_r+0xa82>
 8009f80:	d102      	bne.n	8009f88 <_dtoa_r+0xb20>
 8009f82:	9b00      	ldr	r3, [sp, #0]
 8009f84:	07db      	lsls	r3, r3, #31
 8009f86:	d4b0      	bmi.n	8009eea <_dtoa_r+0xa82>
 8009f88:	4633      	mov	r3, r6
 8009f8a:	461e      	mov	r6, r3
 8009f8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f90:	2a30      	cmp	r2, #48	@ 0x30
 8009f92:	d0fa      	beq.n	8009f8a <_dtoa_r+0xb22>
 8009f94:	e4b5      	b.n	8009902 <_dtoa_r+0x49a>
 8009f96:	459a      	cmp	sl, r3
 8009f98:	d1a8      	bne.n	8009eec <_dtoa_r+0xa84>
 8009f9a:	2331      	movs	r3, #49	@ 0x31
 8009f9c:	f108 0801 	add.w	r8, r8, #1
 8009fa0:	f88a 3000 	strb.w	r3, [sl]
 8009fa4:	e4ad      	b.n	8009902 <_dtoa_r+0x49a>
 8009fa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fa8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a004 <_dtoa_r+0xb9c>
 8009fac:	b11b      	cbz	r3, 8009fb6 <_dtoa_r+0xb4e>
 8009fae:	f10a 0308 	add.w	r3, sl, #8
 8009fb2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	4650      	mov	r0, sl
 8009fb8:	b017      	add	sp, #92	@ 0x5c
 8009fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbe:	9b07      	ldr	r3, [sp, #28]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	f77f ae2e 	ble.w	8009c22 <_dtoa_r+0x7ba>
 8009fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fc8:	9308      	str	r3, [sp, #32]
 8009fca:	2001      	movs	r0, #1
 8009fcc:	e64d      	b.n	8009c6a <_dtoa_r+0x802>
 8009fce:	f1bb 0f00 	cmp.w	fp, #0
 8009fd2:	f77f aed9 	ble.w	8009d88 <_dtoa_r+0x920>
 8009fd6:	4656      	mov	r6, sl
 8009fd8:	9802      	ldr	r0, [sp, #8]
 8009fda:	4621      	mov	r1, r4
 8009fdc:	f7ff f9bc 	bl	8009358 <quorem>
 8009fe0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009fe4:	f806 3b01 	strb.w	r3, [r6], #1
 8009fe8:	eba6 020a 	sub.w	r2, r6, sl
 8009fec:	4593      	cmp	fp, r2
 8009fee:	ddb4      	ble.n	8009f5a <_dtoa_r+0xaf2>
 8009ff0:	9902      	ldr	r1, [sp, #8]
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	220a      	movs	r2, #10
 8009ff6:	4648      	mov	r0, r9
 8009ff8:	f000 f968 	bl	800a2cc <__multadd>
 8009ffc:	9002      	str	r0, [sp, #8]
 8009ffe:	e7eb      	b.n	8009fd8 <_dtoa_r+0xb70>
 800a000:	0800d43f 	.word	0x0800d43f
 800a004:	0800d3da 	.word	0x0800d3da

0800a008 <_free_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4605      	mov	r5, r0
 800a00c:	2900      	cmp	r1, #0
 800a00e:	d041      	beq.n	800a094 <_free_r+0x8c>
 800a010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a014:	1f0c      	subs	r4, r1, #4
 800a016:	2b00      	cmp	r3, #0
 800a018:	bfb8      	it	lt
 800a01a:	18e4      	addlt	r4, r4, r3
 800a01c:	f000 f8e8 	bl	800a1f0 <__malloc_lock>
 800a020:	4a1d      	ldr	r2, [pc, #116]	@ (800a098 <_free_r+0x90>)
 800a022:	6813      	ldr	r3, [r2, #0]
 800a024:	b933      	cbnz	r3, 800a034 <_free_r+0x2c>
 800a026:	6063      	str	r3, [r4, #4]
 800a028:	6014      	str	r4, [r2, #0]
 800a02a:	4628      	mov	r0, r5
 800a02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a030:	f000 b8e4 	b.w	800a1fc <__malloc_unlock>
 800a034:	42a3      	cmp	r3, r4
 800a036:	d908      	bls.n	800a04a <_free_r+0x42>
 800a038:	6820      	ldr	r0, [r4, #0]
 800a03a:	1821      	adds	r1, r4, r0
 800a03c:	428b      	cmp	r3, r1
 800a03e:	bf01      	itttt	eq
 800a040:	6819      	ldreq	r1, [r3, #0]
 800a042:	685b      	ldreq	r3, [r3, #4]
 800a044:	1809      	addeq	r1, r1, r0
 800a046:	6021      	streq	r1, [r4, #0]
 800a048:	e7ed      	b.n	800a026 <_free_r+0x1e>
 800a04a:	461a      	mov	r2, r3
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	b10b      	cbz	r3, 800a054 <_free_r+0x4c>
 800a050:	42a3      	cmp	r3, r4
 800a052:	d9fa      	bls.n	800a04a <_free_r+0x42>
 800a054:	6811      	ldr	r1, [r2, #0]
 800a056:	1850      	adds	r0, r2, r1
 800a058:	42a0      	cmp	r0, r4
 800a05a:	d10b      	bne.n	800a074 <_free_r+0x6c>
 800a05c:	6820      	ldr	r0, [r4, #0]
 800a05e:	4401      	add	r1, r0
 800a060:	1850      	adds	r0, r2, r1
 800a062:	4283      	cmp	r3, r0
 800a064:	6011      	str	r1, [r2, #0]
 800a066:	d1e0      	bne.n	800a02a <_free_r+0x22>
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	6053      	str	r3, [r2, #4]
 800a06e:	4408      	add	r0, r1
 800a070:	6010      	str	r0, [r2, #0]
 800a072:	e7da      	b.n	800a02a <_free_r+0x22>
 800a074:	d902      	bls.n	800a07c <_free_r+0x74>
 800a076:	230c      	movs	r3, #12
 800a078:	602b      	str	r3, [r5, #0]
 800a07a:	e7d6      	b.n	800a02a <_free_r+0x22>
 800a07c:	6820      	ldr	r0, [r4, #0]
 800a07e:	1821      	adds	r1, r4, r0
 800a080:	428b      	cmp	r3, r1
 800a082:	bf04      	itt	eq
 800a084:	6819      	ldreq	r1, [r3, #0]
 800a086:	685b      	ldreq	r3, [r3, #4]
 800a088:	6063      	str	r3, [r4, #4]
 800a08a:	bf04      	itt	eq
 800a08c:	1809      	addeq	r1, r1, r0
 800a08e:	6021      	streq	r1, [r4, #0]
 800a090:	6054      	str	r4, [r2, #4]
 800a092:	e7ca      	b.n	800a02a <_free_r+0x22>
 800a094:	bd38      	pop	{r3, r4, r5, pc}
 800a096:	bf00      	nop
 800a098:	20000eb0 	.word	0x20000eb0

0800a09c <malloc>:
 800a09c:	4b02      	ldr	r3, [pc, #8]	@ (800a0a8 <malloc+0xc>)
 800a09e:	4601      	mov	r1, r0
 800a0a0:	6818      	ldr	r0, [r3, #0]
 800a0a2:	f000 b825 	b.w	800a0f0 <_malloc_r>
 800a0a6:	bf00      	nop
 800a0a8:	20000060 	.word	0x20000060

0800a0ac <sbrk_aligned>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	4e0f      	ldr	r6, [pc, #60]	@ (800a0ec <sbrk_aligned+0x40>)
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	6831      	ldr	r1, [r6, #0]
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	b911      	cbnz	r1, 800a0be <sbrk_aligned+0x12>
 800a0b8:	f001 ffca 	bl	800c050 <_sbrk_r>
 800a0bc:	6030      	str	r0, [r6, #0]
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f001 ffc5 	bl	800c050 <_sbrk_r>
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	d103      	bne.n	800a0d2 <sbrk_aligned+0x26>
 800a0ca:	f04f 34ff 	mov.w	r4, #4294967295
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	bd70      	pop	{r4, r5, r6, pc}
 800a0d2:	1cc4      	adds	r4, r0, #3
 800a0d4:	f024 0403 	bic.w	r4, r4, #3
 800a0d8:	42a0      	cmp	r0, r4
 800a0da:	d0f8      	beq.n	800a0ce <sbrk_aligned+0x22>
 800a0dc:	1a21      	subs	r1, r4, r0
 800a0de:	4628      	mov	r0, r5
 800a0e0:	f001 ffb6 	bl	800c050 <_sbrk_r>
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d1f2      	bne.n	800a0ce <sbrk_aligned+0x22>
 800a0e8:	e7ef      	b.n	800a0ca <sbrk_aligned+0x1e>
 800a0ea:	bf00      	nop
 800a0ec:	20000eac 	.word	0x20000eac

0800a0f0 <_malloc_r>:
 800a0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0f4:	1ccd      	adds	r5, r1, #3
 800a0f6:	f025 0503 	bic.w	r5, r5, #3
 800a0fa:	3508      	adds	r5, #8
 800a0fc:	2d0c      	cmp	r5, #12
 800a0fe:	bf38      	it	cc
 800a100:	250c      	movcc	r5, #12
 800a102:	2d00      	cmp	r5, #0
 800a104:	4606      	mov	r6, r0
 800a106:	db01      	blt.n	800a10c <_malloc_r+0x1c>
 800a108:	42a9      	cmp	r1, r5
 800a10a:	d904      	bls.n	800a116 <_malloc_r+0x26>
 800a10c:	230c      	movs	r3, #12
 800a10e:	6033      	str	r3, [r6, #0]
 800a110:	2000      	movs	r0, #0
 800a112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1ec <_malloc_r+0xfc>
 800a11a:	f000 f869 	bl	800a1f0 <__malloc_lock>
 800a11e:	f8d8 3000 	ldr.w	r3, [r8]
 800a122:	461c      	mov	r4, r3
 800a124:	bb44      	cbnz	r4, 800a178 <_malloc_r+0x88>
 800a126:	4629      	mov	r1, r5
 800a128:	4630      	mov	r0, r6
 800a12a:	f7ff ffbf 	bl	800a0ac <sbrk_aligned>
 800a12e:	1c43      	adds	r3, r0, #1
 800a130:	4604      	mov	r4, r0
 800a132:	d158      	bne.n	800a1e6 <_malloc_r+0xf6>
 800a134:	f8d8 4000 	ldr.w	r4, [r8]
 800a138:	4627      	mov	r7, r4
 800a13a:	2f00      	cmp	r7, #0
 800a13c:	d143      	bne.n	800a1c6 <_malloc_r+0xd6>
 800a13e:	2c00      	cmp	r4, #0
 800a140:	d04b      	beq.n	800a1da <_malloc_r+0xea>
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	4639      	mov	r1, r7
 800a146:	4630      	mov	r0, r6
 800a148:	eb04 0903 	add.w	r9, r4, r3
 800a14c:	f001 ff80 	bl	800c050 <_sbrk_r>
 800a150:	4581      	cmp	r9, r0
 800a152:	d142      	bne.n	800a1da <_malloc_r+0xea>
 800a154:	6821      	ldr	r1, [r4, #0]
 800a156:	1a6d      	subs	r5, r5, r1
 800a158:	4629      	mov	r1, r5
 800a15a:	4630      	mov	r0, r6
 800a15c:	f7ff ffa6 	bl	800a0ac <sbrk_aligned>
 800a160:	3001      	adds	r0, #1
 800a162:	d03a      	beq.n	800a1da <_malloc_r+0xea>
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	442b      	add	r3, r5
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	f8d8 3000 	ldr.w	r3, [r8]
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	bb62      	cbnz	r2, 800a1cc <_malloc_r+0xdc>
 800a172:	f8c8 7000 	str.w	r7, [r8]
 800a176:	e00f      	b.n	800a198 <_malloc_r+0xa8>
 800a178:	6822      	ldr	r2, [r4, #0]
 800a17a:	1b52      	subs	r2, r2, r5
 800a17c:	d420      	bmi.n	800a1c0 <_malloc_r+0xd0>
 800a17e:	2a0b      	cmp	r2, #11
 800a180:	d917      	bls.n	800a1b2 <_malloc_r+0xc2>
 800a182:	1961      	adds	r1, r4, r5
 800a184:	42a3      	cmp	r3, r4
 800a186:	6025      	str	r5, [r4, #0]
 800a188:	bf18      	it	ne
 800a18a:	6059      	strne	r1, [r3, #4]
 800a18c:	6863      	ldr	r3, [r4, #4]
 800a18e:	bf08      	it	eq
 800a190:	f8c8 1000 	streq.w	r1, [r8]
 800a194:	5162      	str	r2, [r4, r5]
 800a196:	604b      	str	r3, [r1, #4]
 800a198:	4630      	mov	r0, r6
 800a19a:	f000 f82f 	bl	800a1fc <__malloc_unlock>
 800a19e:	f104 000b 	add.w	r0, r4, #11
 800a1a2:	1d23      	adds	r3, r4, #4
 800a1a4:	f020 0007 	bic.w	r0, r0, #7
 800a1a8:	1ac2      	subs	r2, r0, r3
 800a1aa:	bf1c      	itt	ne
 800a1ac:	1a1b      	subne	r3, r3, r0
 800a1ae:	50a3      	strne	r3, [r4, r2]
 800a1b0:	e7af      	b.n	800a112 <_malloc_r+0x22>
 800a1b2:	6862      	ldr	r2, [r4, #4]
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	bf0c      	ite	eq
 800a1b8:	f8c8 2000 	streq.w	r2, [r8]
 800a1bc:	605a      	strne	r2, [r3, #4]
 800a1be:	e7eb      	b.n	800a198 <_malloc_r+0xa8>
 800a1c0:	4623      	mov	r3, r4
 800a1c2:	6864      	ldr	r4, [r4, #4]
 800a1c4:	e7ae      	b.n	800a124 <_malloc_r+0x34>
 800a1c6:	463c      	mov	r4, r7
 800a1c8:	687f      	ldr	r7, [r7, #4]
 800a1ca:	e7b6      	b.n	800a13a <_malloc_r+0x4a>
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	42a3      	cmp	r3, r4
 800a1d2:	d1fb      	bne.n	800a1cc <_malloc_r+0xdc>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	6053      	str	r3, [r2, #4]
 800a1d8:	e7de      	b.n	800a198 <_malloc_r+0xa8>
 800a1da:	230c      	movs	r3, #12
 800a1dc:	6033      	str	r3, [r6, #0]
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f000 f80c 	bl	800a1fc <__malloc_unlock>
 800a1e4:	e794      	b.n	800a110 <_malloc_r+0x20>
 800a1e6:	6005      	str	r5, [r0, #0]
 800a1e8:	e7d6      	b.n	800a198 <_malloc_r+0xa8>
 800a1ea:	bf00      	nop
 800a1ec:	20000eb0 	.word	0x20000eb0

0800a1f0 <__malloc_lock>:
 800a1f0:	4801      	ldr	r0, [pc, #4]	@ (800a1f8 <__malloc_lock+0x8>)
 800a1f2:	f7ff b87c 	b.w	80092ee <__retarget_lock_acquire_recursive>
 800a1f6:	bf00      	nop
 800a1f8:	20000ea8 	.word	0x20000ea8

0800a1fc <__malloc_unlock>:
 800a1fc:	4801      	ldr	r0, [pc, #4]	@ (800a204 <__malloc_unlock+0x8>)
 800a1fe:	f7ff b877 	b.w	80092f0 <__retarget_lock_release_recursive>
 800a202:	bf00      	nop
 800a204:	20000ea8 	.word	0x20000ea8

0800a208 <_Balloc>:
 800a208:	b570      	push	{r4, r5, r6, lr}
 800a20a:	69c6      	ldr	r6, [r0, #28]
 800a20c:	4604      	mov	r4, r0
 800a20e:	460d      	mov	r5, r1
 800a210:	b976      	cbnz	r6, 800a230 <_Balloc+0x28>
 800a212:	2010      	movs	r0, #16
 800a214:	f7ff ff42 	bl	800a09c <malloc>
 800a218:	4602      	mov	r2, r0
 800a21a:	61e0      	str	r0, [r4, #28]
 800a21c:	b920      	cbnz	r0, 800a228 <_Balloc+0x20>
 800a21e:	4b18      	ldr	r3, [pc, #96]	@ (800a280 <_Balloc+0x78>)
 800a220:	4818      	ldr	r0, [pc, #96]	@ (800a284 <_Balloc+0x7c>)
 800a222:	216b      	movs	r1, #107	@ 0x6b
 800a224:	f7ff f87a 	bl	800931c <__assert_func>
 800a228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a22c:	6006      	str	r6, [r0, #0]
 800a22e:	60c6      	str	r6, [r0, #12]
 800a230:	69e6      	ldr	r6, [r4, #28]
 800a232:	68f3      	ldr	r3, [r6, #12]
 800a234:	b183      	cbz	r3, 800a258 <_Balloc+0x50>
 800a236:	69e3      	ldr	r3, [r4, #28]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a23e:	b9b8      	cbnz	r0, 800a270 <_Balloc+0x68>
 800a240:	2101      	movs	r1, #1
 800a242:	fa01 f605 	lsl.w	r6, r1, r5
 800a246:	1d72      	adds	r2, r6, #5
 800a248:	0092      	lsls	r2, r2, #2
 800a24a:	4620      	mov	r0, r4
 800a24c:	f001 ff1f 	bl	800c08e <_calloc_r>
 800a250:	b160      	cbz	r0, 800a26c <_Balloc+0x64>
 800a252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a256:	e00e      	b.n	800a276 <_Balloc+0x6e>
 800a258:	2221      	movs	r2, #33	@ 0x21
 800a25a:	2104      	movs	r1, #4
 800a25c:	4620      	mov	r0, r4
 800a25e:	f001 ff16 	bl	800c08e <_calloc_r>
 800a262:	69e3      	ldr	r3, [r4, #28]
 800a264:	60f0      	str	r0, [r6, #12]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e4      	bne.n	800a236 <_Balloc+0x2e>
 800a26c:	2000      	movs	r0, #0
 800a26e:	bd70      	pop	{r4, r5, r6, pc}
 800a270:	6802      	ldr	r2, [r0, #0]
 800a272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a276:	2300      	movs	r3, #0
 800a278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a27c:	e7f7      	b.n	800a26e <_Balloc+0x66>
 800a27e:	bf00      	nop
 800a280:	0800d32d 	.word	0x0800d32d
 800a284:	0800d450 	.word	0x0800d450

0800a288 <_Bfree>:
 800a288:	b570      	push	{r4, r5, r6, lr}
 800a28a:	69c6      	ldr	r6, [r0, #28]
 800a28c:	4605      	mov	r5, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	b976      	cbnz	r6, 800a2b0 <_Bfree+0x28>
 800a292:	2010      	movs	r0, #16
 800a294:	f7ff ff02 	bl	800a09c <malloc>
 800a298:	4602      	mov	r2, r0
 800a29a:	61e8      	str	r0, [r5, #28]
 800a29c:	b920      	cbnz	r0, 800a2a8 <_Bfree+0x20>
 800a29e:	4b09      	ldr	r3, [pc, #36]	@ (800a2c4 <_Bfree+0x3c>)
 800a2a0:	4809      	ldr	r0, [pc, #36]	@ (800a2c8 <_Bfree+0x40>)
 800a2a2:	218f      	movs	r1, #143	@ 0x8f
 800a2a4:	f7ff f83a 	bl	800931c <__assert_func>
 800a2a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2ac:	6006      	str	r6, [r0, #0]
 800a2ae:	60c6      	str	r6, [r0, #12]
 800a2b0:	b13c      	cbz	r4, 800a2c2 <_Bfree+0x3a>
 800a2b2:	69eb      	ldr	r3, [r5, #28]
 800a2b4:	6862      	ldr	r2, [r4, #4]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2bc:	6021      	str	r1, [r4, #0]
 800a2be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2c2:	bd70      	pop	{r4, r5, r6, pc}
 800a2c4:	0800d32d 	.word	0x0800d32d
 800a2c8:	0800d450 	.word	0x0800d450

0800a2cc <__multadd>:
 800a2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d0:	690d      	ldr	r5, [r1, #16]
 800a2d2:	4607      	mov	r7, r0
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	461e      	mov	r6, r3
 800a2d8:	f101 0c14 	add.w	ip, r1, #20
 800a2dc:	2000      	movs	r0, #0
 800a2de:	f8dc 3000 	ldr.w	r3, [ip]
 800a2e2:	b299      	uxth	r1, r3
 800a2e4:	fb02 6101 	mla	r1, r2, r1, r6
 800a2e8:	0c1e      	lsrs	r6, r3, #16
 800a2ea:	0c0b      	lsrs	r3, r1, #16
 800a2ec:	fb02 3306 	mla	r3, r2, r6, r3
 800a2f0:	b289      	uxth	r1, r1
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2f8:	4285      	cmp	r5, r0
 800a2fa:	f84c 1b04 	str.w	r1, [ip], #4
 800a2fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a302:	dcec      	bgt.n	800a2de <__multadd+0x12>
 800a304:	b30e      	cbz	r6, 800a34a <__multadd+0x7e>
 800a306:	68a3      	ldr	r3, [r4, #8]
 800a308:	42ab      	cmp	r3, r5
 800a30a:	dc19      	bgt.n	800a340 <__multadd+0x74>
 800a30c:	6861      	ldr	r1, [r4, #4]
 800a30e:	4638      	mov	r0, r7
 800a310:	3101      	adds	r1, #1
 800a312:	f7ff ff79 	bl	800a208 <_Balloc>
 800a316:	4680      	mov	r8, r0
 800a318:	b928      	cbnz	r0, 800a326 <__multadd+0x5a>
 800a31a:	4602      	mov	r2, r0
 800a31c:	4b0c      	ldr	r3, [pc, #48]	@ (800a350 <__multadd+0x84>)
 800a31e:	480d      	ldr	r0, [pc, #52]	@ (800a354 <__multadd+0x88>)
 800a320:	21ba      	movs	r1, #186	@ 0xba
 800a322:	f7fe fffb 	bl	800931c <__assert_func>
 800a326:	6922      	ldr	r2, [r4, #16]
 800a328:	3202      	adds	r2, #2
 800a32a:	f104 010c 	add.w	r1, r4, #12
 800a32e:	0092      	lsls	r2, r2, #2
 800a330:	300c      	adds	r0, #12
 800a332:	f7fe ffde 	bl	80092f2 <memcpy>
 800a336:	4621      	mov	r1, r4
 800a338:	4638      	mov	r0, r7
 800a33a:	f7ff ffa5 	bl	800a288 <_Bfree>
 800a33e:	4644      	mov	r4, r8
 800a340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a344:	3501      	adds	r5, #1
 800a346:	615e      	str	r6, [r3, #20]
 800a348:	6125      	str	r5, [r4, #16]
 800a34a:	4620      	mov	r0, r4
 800a34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a350:	0800d43f 	.word	0x0800d43f
 800a354:	0800d450 	.word	0x0800d450

0800a358 <__s2b>:
 800a358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a35c:	460c      	mov	r4, r1
 800a35e:	4615      	mov	r5, r2
 800a360:	461f      	mov	r7, r3
 800a362:	2209      	movs	r2, #9
 800a364:	3308      	adds	r3, #8
 800a366:	4606      	mov	r6, r0
 800a368:	fb93 f3f2 	sdiv	r3, r3, r2
 800a36c:	2100      	movs	r1, #0
 800a36e:	2201      	movs	r2, #1
 800a370:	429a      	cmp	r2, r3
 800a372:	db09      	blt.n	800a388 <__s2b+0x30>
 800a374:	4630      	mov	r0, r6
 800a376:	f7ff ff47 	bl	800a208 <_Balloc>
 800a37a:	b940      	cbnz	r0, 800a38e <__s2b+0x36>
 800a37c:	4602      	mov	r2, r0
 800a37e:	4b19      	ldr	r3, [pc, #100]	@ (800a3e4 <__s2b+0x8c>)
 800a380:	4819      	ldr	r0, [pc, #100]	@ (800a3e8 <__s2b+0x90>)
 800a382:	21d3      	movs	r1, #211	@ 0xd3
 800a384:	f7fe ffca 	bl	800931c <__assert_func>
 800a388:	0052      	lsls	r2, r2, #1
 800a38a:	3101      	adds	r1, #1
 800a38c:	e7f0      	b.n	800a370 <__s2b+0x18>
 800a38e:	9b08      	ldr	r3, [sp, #32]
 800a390:	6143      	str	r3, [r0, #20]
 800a392:	2d09      	cmp	r5, #9
 800a394:	f04f 0301 	mov.w	r3, #1
 800a398:	6103      	str	r3, [r0, #16]
 800a39a:	dd16      	ble.n	800a3ca <__s2b+0x72>
 800a39c:	f104 0909 	add.w	r9, r4, #9
 800a3a0:	46c8      	mov	r8, r9
 800a3a2:	442c      	add	r4, r5
 800a3a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3a8:	4601      	mov	r1, r0
 800a3aa:	3b30      	subs	r3, #48	@ 0x30
 800a3ac:	220a      	movs	r2, #10
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f7ff ff8c 	bl	800a2cc <__multadd>
 800a3b4:	45a0      	cmp	r8, r4
 800a3b6:	d1f5      	bne.n	800a3a4 <__s2b+0x4c>
 800a3b8:	f1a5 0408 	sub.w	r4, r5, #8
 800a3bc:	444c      	add	r4, r9
 800a3be:	1b2d      	subs	r5, r5, r4
 800a3c0:	1963      	adds	r3, r4, r5
 800a3c2:	42bb      	cmp	r3, r7
 800a3c4:	db04      	blt.n	800a3d0 <__s2b+0x78>
 800a3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ca:	340a      	adds	r4, #10
 800a3cc:	2509      	movs	r5, #9
 800a3ce:	e7f6      	b.n	800a3be <__s2b+0x66>
 800a3d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3d4:	4601      	mov	r1, r0
 800a3d6:	3b30      	subs	r3, #48	@ 0x30
 800a3d8:	220a      	movs	r2, #10
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7ff ff76 	bl	800a2cc <__multadd>
 800a3e0:	e7ee      	b.n	800a3c0 <__s2b+0x68>
 800a3e2:	bf00      	nop
 800a3e4:	0800d43f 	.word	0x0800d43f
 800a3e8:	0800d450 	.word	0x0800d450

0800a3ec <__hi0bits>:
 800a3ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	bf36      	itet	cc
 800a3f4:	0403      	lslcc	r3, r0, #16
 800a3f6:	2000      	movcs	r0, #0
 800a3f8:	2010      	movcc	r0, #16
 800a3fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3fe:	bf3c      	itt	cc
 800a400:	021b      	lslcc	r3, r3, #8
 800a402:	3008      	addcc	r0, #8
 800a404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a408:	bf3c      	itt	cc
 800a40a:	011b      	lslcc	r3, r3, #4
 800a40c:	3004      	addcc	r0, #4
 800a40e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a412:	bf3c      	itt	cc
 800a414:	009b      	lslcc	r3, r3, #2
 800a416:	3002      	addcc	r0, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	db05      	blt.n	800a428 <__hi0bits+0x3c>
 800a41c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a420:	f100 0001 	add.w	r0, r0, #1
 800a424:	bf08      	it	eq
 800a426:	2020      	moveq	r0, #32
 800a428:	4770      	bx	lr

0800a42a <__lo0bits>:
 800a42a:	6803      	ldr	r3, [r0, #0]
 800a42c:	4602      	mov	r2, r0
 800a42e:	f013 0007 	ands.w	r0, r3, #7
 800a432:	d00b      	beq.n	800a44c <__lo0bits+0x22>
 800a434:	07d9      	lsls	r1, r3, #31
 800a436:	d421      	bmi.n	800a47c <__lo0bits+0x52>
 800a438:	0798      	lsls	r0, r3, #30
 800a43a:	bf49      	itett	mi
 800a43c:	085b      	lsrmi	r3, r3, #1
 800a43e:	089b      	lsrpl	r3, r3, #2
 800a440:	2001      	movmi	r0, #1
 800a442:	6013      	strmi	r3, [r2, #0]
 800a444:	bf5c      	itt	pl
 800a446:	6013      	strpl	r3, [r2, #0]
 800a448:	2002      	movpl	r0, #2
 800a44a:	4770      	bx	lr
 800a44c:	b299      	uxth	r1, r3
 800a44e:	b909      	cbnz	r1, 800a454 <__lo0bits+0x2a>
 800a450:	0c1b      	lsrs	r3, r3, #16
 800a452:	2010      	movs	r0, #16
 800a454:	b2d9      	uxtb	r1, r3
 800a456:	b909      	cbnz	r1, 800a45c <__lo0bits+0x32>
 800a458:	3008      	adds	r0, #8
 800a45a:	0a1b      	lsrs	r3, r3, #8
 800a45c:	0719      	lsls	r1, r3, #28
 800a45e:	bf04      	itt	eq
 800a460:	091b      	lsreq	r3, r3, #4
 800a462:	3004      	addeq	r0, #4
 800a464:	0799      	lsls	r1, r3, #30
 800a466:	bf04      	itt	eq
 800a468:	089b      	lsreq	r3, r3, #2
 800a46a:	3002      	addeq	r0, #2
 800a46c:	07d9      	lsls	r1, r3, #31
 800a46e:	d403      	bmi.n	800a478 <__lo0bits+0x4e>
 800a470:	085b      	lsrs	r3, r3, #1
 800a472:	f100 0001 	add.w	r0, r0, #1
 800a476:	d003      	beq.n	800a480 <__lo0bits+0x56>
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	4770      	bx	lr
 800a47c:	2000      	movs	r0, #0
 800a47e:	4770      	bx	lr
 800a480:	2020      	movs	r0, #32
 800a482:	4770      	bx	lr

0800a484 <__i2b>:
 800a484:	b510      	push	{r4, lr}
 800a486:	460c      	mov	r4, r1
 800a488:	2101      	movs	r1, #1
 800a48a:	f7ff febd 	bl	800a208 <_Balloc>
 800a48e:	4602      	mov	r2, r0
 800a490:	b928      	cbnz	r0, 800a49e <__i2b+0x1a>
 800a492:	4b05      	ldr	r3, [pc, #20]	@ (800a4a8 <__i2b+0x24>)
 800a494:	4805      	ldr	r0, [pc, #20]	@ (800a4ac <__i2b+0x28>)
 800a496:	f240 1145 	movw	r1, #325	@ 0x145
 800a49a:	f7fe ff3f 	bl	800931c <__assert_func>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	6144      	str	r4, [r0, #20]
 800a4a2:	6103      	str	r3, [r0, #16]
 800a4a4:	bd10      	pop	{r4, pc}
 800a4a6:	bf00      	nop
 800a4a8:	0800d43f 	.word	0x0800d43f
 800a4ac:	0800d450 	.word	0x0800d450

0800a4b0 <__multiply>:
 800a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	4617      	mov	r7, r2
 800a4b6:	690a      	ldr	r2, [r1, #16]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	bfa8      	it	ge
 800a4be:	463b      	movge	r3, r7
 800a4c0:	4689      	mov	r9, r1
 800a4c2:	bfa4      	itt	ge
 800a4c4:	460f      	movge	r7, r1
 800a4c6:	4699      	movge	r9, r3
 800a4c8:	693d      	ldr	r5, [r7, #16]
 800a4ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	6879      	ldr	r1, [r7, #4]
 800a4d2:	eb05 060a 	add.w	r6, r5, sl
 800a4d6:	42b3      	cmp	r3, r6
 800a4d8:	b085      	sub	sp, #20
 800a4da:	bfb8      	it	lt
 800a4dc:	3101      	addlt	r1, #1
 800a4de:	f7ff fe93 	bl	800a208 <_Balloc>
 800a4e2:	b930      	cbnz	r0, 800a4f2 <__multiply+0x42>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	4b41      	ldr	r3, [pc, #260]	@ (800a5ec <__multiply+0x13c>)
 800a4e8:	4841      	ldr	r0, [pc, #260]	@ (800a5f0 <__multiply+0x140>)
 800a4ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4ee:	f7fe ff15 	bl	800931c <__assert_func>
 800a4f2:	f100 0414 	add.w	r4, r0, #20
 800a4f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a4fa:	4623      	mov	r3, r4
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4573      	cmp	r3, lr
 800a500:	d320      	bcc.n	800a544 <__multiply+0x94>
 800a502:	f107 0814 	add.w	r8, r7, #20
 800a506:	f109 0114 	add.w	r1, r9, #20
 800a50a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a50e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a512:	9302      	str	r3, [sp, #8]
 800a514:	1beb      	subs	r3, r5, r7
 800a516:	3b15      	subs	r3, #21
 800a518:	f023 0303 	bic.w	r3, r3, #3
 800a51c:	3304      	adds	r3, #4
 800a51e:	3715      	adds	r7, #21
 800a520:	42bd      	cmp	r5, r7
 800a522:	bf38      	it	cc
 800a524:	2304      	movcc	r3, #4
 800a526:	9301      	str	r3, [sp, #4]
 800a528:	9b02      	ldr	r3, [sp, #8]
 800a52a:	9103      	str	r1, [sp, #12]
 800a52c:	428b      	cmp	r3, r1
 800a52e:	d80c      	bhi.n	800a54a <__multiply+0x9a>
 800a530:	2e00      	cmp	r6, #0
 800a532:	dd03      	ble.n	800a53c <__multiply+0x8c>
 800a534:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d055      	beq.n	800a5e8 <__multiply+0x138>
 800a53c:	6106      	str	r6, [r0, #16]
 800a53e:	b005      	add	sp, #20
 800a540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a544:	f843 2b04 	str.w	r2, [r3], #4
 800a548:	e7d9      	b.n	800a4fe <__multiply+0x4e>
 800a54a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a54e:	f1ba 0f00 	cmp.w	sl, #0
 800a552:	d01f      	beq.n	800a594 <__multiply+0xe4>
 800a554:	46c4      	mov	ip, r8
 800a556:	46a1      	mov	r9, r4
 800a558:	2700      	movs	r7, #0
 800a55a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a55e:	f8d9 3000 	ldr.w	r3, [r9]
 800a562:	fa1f fb82 	uxth.w	fp, r2
 800a566:	b29b      	uxth	r3, r3
 800a568:	fb0a 330b 	mla	r3, sl, fp, r3
 800a56c:	443b      	add	r3, r7
 800a56e:	f8d9 7000 	ldr.w	r7, [r9]
 800a572:	0c12      	lsrs	r2, r2, #16
 800a574:	0c3f      	lsrs	r7, r7, #16
 800a576:	fb0a 7202 	mla	r2, sl, r2, r7
 800a57a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a57e:	b29b      	uxth	r3, r3
 800a580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a584:	4565      	cmp	r5, ip
 800a586:	f849 3b04 	str.w	r3, [r9], #4
 800a58a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a58e:	d8e4      	bhi.n	800a55a <__multiply+0xaa>
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	50e7      	str	r7, [r4, r3]
 800a594:	9b03      	ldr	r3, [sp, #12]
 800a596:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a59a:	3104      	adds	r1, #4
 800a59c:	f1b9 0f00 	cmp.w	r9, #0
 800a5a0:	d020      	beq.n	800a5e4 <__multiply+0x134>
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	4647      	mov	r7, r8
 800a5a6:	46a4      	mov	ip, r4
 800a5a8:	f04f 0a00 	mov.w	sl, #0
 800a5ac:	f8b7 b000 	ldrh.w	fp, [r7]
 800a5b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a5b4:	fb09 220b 	mla	r2, r9, fp, r2
 800a5b8:	4452      	add	r2, sl
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5c0:	f84c 3b04 	str.w	r3, [ip], #4
 800a5c4:	f857 3b04 	ldr.w	r3, [r7], #4
 800a5c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5cc:	f8bc 3000 	ldrh.w	r3, [ip]
 800a5d0:	fb09 330a 	mla	r3, r9, sl, r3
 800a5d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a5d8:	42bd      	cmp	r5, r7
 800a5da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5de:	d8e5      	bhi.n	800a5ac <__multiply+0xfc>
 800a5e0:	9a01      	ldr	r2, [sp, #4]
 800a5e2:	50a3      	str	r3, [r4, r2]
 800a5e4:	3404      	adds	r4, #4
 800a5e6:	e79f      	b.n	800a528 <__multiply+0x78>
 800a5e8:	3e01      	subs	r6, #1
 800a5ea:	e7a1      	b.n	800a530 <__multiply+0x80>
 800a5ec:	0800d43f 	.word	0x0800d43f
 800a5f0:	0800d450 	.word	0x0800d450

0800a5f4 <__pow5mult>:
 800a5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f8:	4615      	mov	r5, r2
 800a5fa:	f012 0203 	ands.w	r2, r2, #3
 800a5fe:	4607      	mov	r7, r0
 800a600:	460e      	mov	r6, r1
 800a602:	d007      	beq.n	800a614 <__pow5mult+0x20>
 800a604:	4c25      	ldr	r4, [pc, #148]	@ (800a69c <__pow5mult+0xa8>)
 800a606:	3a01      	subs	r2, #1
 800a608:	2300      	movs	r3, #0
 800a60a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a60e:	f7ff fe5d 	bl	800a2cc <__multadd>
 800a612:	4606      	mov	r6, r0
 800a614:	10ad      	asrs	r5, r5, #2
 800a616:	d03d      	beq.n	800a694 <__pow5mult+0xa0>
 800a618:	69fc      	ldr	r4, [r7, #28]
 800a61a:	b97c      	cbnz	r4, 800a63c <__pow5mult+0x48>
 800a61c:	2010      	movs	r0, #16
 800a61e:	f7ff fd3d 	bl	800a09c <malloc>
 800a622:	4602      	mov	r2, r0
 800a624:	61f8      	str	r0, [r7, #28]
 800a626:	b928      	cbnz	r0, 800a634 <__pow5mult+0x40>
 800a628:	4b1d      	ldr	r3, [pc, #116]	@ (800a6a0 <__pow5mult+0xac>)
 800a62a:	481e      	ldr	r0, [pc, #120]	@ (800a6a4 <__pow5mult+0xb0>)
 800a62c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a630:	f7fe fe74 	bl	800931c <__assert_func>
 800a634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a638:	6004      	str	r4, [r0, #0]
 800a63a:	60c4      	str	r4, [r0, #12]
 800a63c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a644:	b94c      	cbnz	r4, 800a65a <__pow5mult+0x66>
 800a646:	f240 2171 	movw	r1, #625	@ 0x271
 800a64a:	4638      	mov	r0, r7
 800a64c:	f7ff ff1a 	bl	800a484 <__i2b>
 800a650:	2300      	movs	r3, #0
 800a652:	f8c8 0008 	str.w	r0, [r8, #8]
 800a656:	4604      	mov	r4, r0
 800a658:	6003      	str	r3, [r0, #0]
 800a65a:	f04f 0900 	mov.w	r9, #0
 800a65e:	07eb      	lsls	r3, r5, #31
 800a660:	d50a      	bpl.n	800a678 <__pow5mult+0x84>
 800a662:	4631      	mov	r1, r6
 800a664:	4622      	mov	r2, r4
 800a666:	4638      	mov	r0, r7
 800a668:	f7ff ff22 	bl	800a4b0 <__multiply>
 800a66c:	4631      	mov	r1, r6
 800a66e:	4680      	mov	r8, r0
 800a670:	4638      	mov	r0, r7
 800a672:	f7ff fe09 	bl	800a288 <_Bfree>
 800a676:	4646      	mov	r6, r8
 800a678:	106d      	asrs	r5, r5, #1
 800a67a:	d00b      	beq.n	800a694 <__pow5mult+0xa0>
 800a67c:	6820      	ldr	r0, [r4, #0]
 800a67e:	b938      	cbnz	r0, 800a690 <__pow5mult+0x9c>
 800a680:	4622      	mov	r2, r4
 800a682:	4621      	mov	r1, r4
 800a684:	4638      	mov	r0, r7
 800a686:	f7ff ff13 	bl	800a4b0 <__multiply>
 800a68a:	6020      	str	r0, [r4, #0]
 800a68c:	f8c0 9000 	str.w	r9, [r0]
 800a690:	4604      	mov	r4, r0
 800a692:	e7e4      	b.n	800a65e <__pow5mult+0x6a>
 800a694:	4630      	mov	r0, r6
 800a696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a69a:	bf00      	nop
 800a69c:	0800d524 	.word	0x0800d524
 800a6a0:	0800d32d 	.word	0x0800d32d
 800a6a4:	0800d450 	.word	0x0800d450

0800a6a8 <__lshift>:
 800a6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	6849      	ldr	r1, [r1, #4]
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6b6:	68a3      	ldr	r3, [r4, #8]
 800a6b8:	4607      	mov	r7, r0
 800a6ba:	4691      	mov	r9, r2
 800a6bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6c0:	f108 0601 	add.w	r6, r8, #1
 800a6c4:	42b3      	cmp	r3, r6
 800a6c6:	db0b      	blt.n	800a6e0 <__lshift+0x38>
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	f7ff fd9d 	bl	800a208 <_Balloc>
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	b948      	cbnz	r0, 800a6e6 <__lshift+0x3e>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	4b28      	ldr	r3, [pc, #160]	@ (800a778 <__lshift+0xd0>)
 800a6d6:	4829      	ldr	r0, [pc, #164]	@ (800a77c <__lshift+0xd4>)
 800a6d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6dc:	f7fe fe1e 	bl	800931c <__assert_func>
 800a6e0:	3101      	adds	r1, #1
 800a6e2:	005b      	lsls	r3, r3, #1
 800a6e4:	e7ee      	b.n	800a6c4 <__lshift+0x1c>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f100 0114 	add.w	r1, r0, #20
 800a6ec:	f100 0210 	add.w	r2, r0, #16
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	4553      	cmp	r3, sl
 800a6f4:	db33      	blt.n	800a75e <__lshift+0xb6>
 800a6f6:	6920      	ldr	r0, [r4, #16]
 800a6f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6fc:	f104 0314 	add.w	r3, r4, #20
 800a700:	f019 091f 	ands.w	r9, r9, #31
 800a704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a708:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a70c:	d02b      	beq.n	800a766 <__lshift+0xbe>
 800a70e:	f1c9 0e20 	rsb	lr, r9, #32
 800a712:	468a      	mov	sl, r1
 800a714:	2200      	movs	r2, #0
 800a716:	6818      	ldr	r0, [r3, #0]
 800a718:	fa00 f009 	lsl.w	r0, r0, r9
 800a71c:	4310      	orrs	r0, r2
 800a71e:	f84a 0b04 	str.w	r0, [sl], #4
 800a722:	f853 2b04 	ldr.w	r2, [r3], #4
 800a726:	459c      	cmp	ip, r3
 800a728:	fa22 f20e 	lsr.w	r2, r2, lr
 800a72c:	d8f3      	bhi.n	800a716 <__lshift+0x6e>
 800a72e:	ebac 0304 	sub.w	r3, ip, r4
 800a732:	3b15      	subs	r3, #21
 800a734:	f023 0303 	bic.w	r3, r3, #3
 800a738:	3304      	adds	r3, #4
 800a73a:	f104 0015 	add.w	r0, r4, #21
 800a73e:	4560      	cmp	r0, ip
 800a740:	bf88      	it	hi
 800a742:	2304      	movhi	r3, #4
 800a744:	50ca      	str	r2, [r1, r3]
 800a746:	b10a      	cbz	r2, 800a74c <__lshift+0xa4>
 800a748:	f108 0602 	add.w	r6, r8, #2
 800a74c:	3e01      	subs	r6, #1
 800a74e:	4638      	mov	r0, r7
 800a750:	612e      	str	r6, [r5, #16]
 800a752:	4621      	mov	r1, r4
 800a754:	f7ff fd98 	bl	800a288 <_Bfree>
 800a758:	4628      	mov	r0, r5
 800a75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a762:	3301      	adds	r3, #1
 800a764:	e7c5      	b.n	800a6f2 <__lshift+0x4a>
 800a766:	3904      	subs	r1, #4
 800a768:	f853 2b04 	ldr.w	r2, [r3], #4
 800a76c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a770:	459c      	cmp	ip, r3
 800a772:	d8f9      	bhi.n	800a768 <__lshift+0xc0>
 800a774:	e7ea      	b.n	800a74c <__lshift+0xa4>
 800a776:	bf00      	nop
 800a778:	0800d43f 	.word	0x0800d43f
 800a77c:	0800d450 	.word	0x0800d450

0800a780 <__mcmp>:
 800a780:	690a      	ldr	r2, [r1, #16]
 800a782:	4603      	mov	r3, r0
 800a784:	6900      	ldr	r0, [r0, #16]
 800a786:	1a80      	subs	r0, r0, r2
 800a788:	b530      	push	{r4, r5, lr}
 800a78a:	d10e      	bne.n	800a7aa <__mcmp+0x2a>
 800a78c:	3314      	adds	r3, #20
 800a78e:	3114      	adds	r1, #20
 800a790:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a794:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a798:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a79c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7a0:	4295      	cmp	r5, r2
 800a7a2:	d003      	beq.n	800a7ac <__mcmp+0x2c>
 800a7a4:	d205      	bcs.n	800a7b2 <__mcmp+0x32>
 800a7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7aa:	bd30      	pop	{r4, r5, pc}
 800a7ac:	42a3      	cmp	r3, r4
 800a7ae:	d3f3      	bcc.n	800a798 <__mcmp+0x18>
 800a7b0:	e7fb      	b.n	800a7aa <__mcmp+0x2a>
 800a7b2:	2001      	movs	r0, #1
 800a7b4:	e7f9      	b.n	800a7aa <__mcmp+0x2a>
	...

0800a7b8 <__mdiff>:
 800a7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	4689      	mov	r9, r1
 800a7be:	4606      	mov	r6, r0
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	4648      	mov	r0, r9
 800a7c4:	4614      	mov	r4, r2
 800a7c6:	f7ff ffdb 	bl	800a780 <__mcmp>
 800a7ca:	1e05      	subs	r5, r0, #0
 800a7cc:	d112      	bne.n	800a7f4 <__mdiff+0x3c>
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f7ff fd19 	bl	800a208 <_Balloc>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	b928      	cbnz	r0, 800a7e6 <__mdiff+0x2e>
 800a7da:	4b3f      	ldr	r3, [pc, #252]	@ (800a8d8 <__mdiff+0x120>)
 800a7dc:	f240 2137 	movw	r1, #567	@ 0x237
 800a7e0:	483e      	ldr	r0, [pc, #248]	@ (800a8dc <__mdiff+0x124>)
 800a7e2:	f7fe fd9b 	bl	800931c <__assert_func>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	b003      	add	sp, #12
 800a7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f4:	bfbc      	itt	lt
 800a7f6:	464b      	movlt	r3, r9
 800a7f8:	46a1      	movlt	r9, r4
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a800:	bfba      	itte	lt
 800a802:	461c      	movlt	r4, r3
 800a804:	2501      	movlt	r5, #1
 800a806:	2500      	movge	r5, #0
 800a808:	f7ff fcfe 	bl	800a208 <_Balloc>
 800a80c:	4602      	mov	r2, r0
 800a80e:	b918      	cbnz	r0, 800a818 <__mdiff+0x60>
 800a810:	4b31      	ldr	r3, [pc, #196]	@ (800a8d8 <__mdiff+0x120>)
 800a812:	f240 2145 	movw	r1, #581	@ 0x245
 800a816:	e7e3      	b.n	800a7e0 <__mdiff+0x28>
 800a818:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a81c:	6926      	ldr	r6, [r4, #16]
 800a81e:	60c5      	str	r5, [r0, #12]
 800a820:	f109 0310 	add.w	r3, r9, #16
 800a824:	f109 0514 	add.w	r5, r9, #20
 800a828:	f104 0e14 	add.w	lr, r4, #20
 800a82c:	f100 0b14 	add.w	fp, r0, #20
 800a830:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a834:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	46d9      	mov	r9, fp
 800a83c:	f04f 0c00 	mov.w	ip, #0
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a846:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a84a:	9301      	str	r3, [sp, #4]
 800a84c:	fa1f f38a 	uxth.w	r3, sl
 800a850:	4619      	mov	r1, r3
 800a852:	b283      	uxth	r3, r0
 800a854:	1acb      	subs	r3, r1, r3
 800a856:	0c00      	lsrs	r0, r0, #16
 800a858:	4463      	add	r3, ip
 800a85a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a85e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a862:	b29b      	uxth	r3, r3
 800a864:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a868:	4576      	cmp	r6, lr
 800a86a:	f849 3b04 	str.w	r3, [r9], #4
 800a86e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a872:	d8e5      	bhi.n	800a840 <__mdiff+0x88>
 800a874:	1b33      	subs	r3, r6, r4
 800a876:	3b15      	subs	r3, #21
 800a878:	f023 0303 	bic.w	r3, r3, #3
 800a87c:	3415      	adds	r4, #21
 800a87e:	3304      	adds	r3, #4
 800a880:	42a6      	cmp	r6, r4
 800a882:	bf38      	it	cc
 800a884:	2304      	movcc	r3, #4
 800a886:	441d      	add	r5, r3
 800a888:	445b      	add	r3, fp
 800a88a:	461e      	mov	r6, r3
 800a88c:	462c      	mov	r4, r5
 800a88e:	4544      	cmp	r4, r8
 800a890:	d30e      	bcc.n	800a8b0 <__mdiff+0xf8>
 800a892:	f108 0103 	add.w	r1, r8, #3
 800a896:	1b49      	subs	r1, r1, r5
 800a898:	f021 0103 	bic.w	r1, r1, #3
 800a89c:	3d03      	subs	r5, #3
 800a89e:	45a8      	cmp	r8, r5
 800a8a0:	bf38      	it	cc
 800a8a2:	2100      	movcc	r1, #0
 800a8a4:	440b      	add	r3, r1
 800a8a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8aa:	b191      	cbz	r1, 800a8d2 <__mdiff+0x11a>
 800a8ac:	6117      	str	r7, [r2, #16]
 800a8ae:	e79d      	b.n	800a7ec <__mdiff+0x34>
 800a8b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a8b4:	46e6      	mov	lr, ip
 800a8b6:	0c08      	lsrs	r0, r1, #16
 800a8b8:	fa1c fc81 	uxtah	ip, ip, r1
 800a8bc:	4471      	add	r1, lr
 800a8be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a8c2:	b289      	uxth	r1, r1
 800a8c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8c8:	f846 1b04 	str.w	r1, [r6], #4
 800a8cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8d0:	e7dd      	b.n	800a88e <__mdiff+0xd6>
 800a8d2:	3f01      	subs	r7, #1
 800a8d4:	e7e7      	b.n	800a8a6 <__mdiff+0xee>
 800a8d6:	bf00      	nop
 800a8d8:	0800d43f 	.word	0x0800d43f
 800a8dc:	0800d450 	.word	0x0800d450

0800a8e0 <__ulp>:
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	ed8d 0b00 	vstr	d0, [sp]
 800a8e6:	9a01      	ldr	r2, [sp, #4]
 800a8e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a928 <__ulp+0x48>)
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	dc08      	bgt.n	800a906 <__ulp+0x26>
 800a8f4:	425b      	negs	r3, r3
 800a8f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a8fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8fe:	da04      	bge.n	800a90a <__ulp+0x2a>
 800a900:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a904:	4113      	asrs	r3, r2
 800a906:	2200      	movs	r2, #0
 800a908:	e008      	b.n	800a91c <__ulp+0x3c>
 800a90a:	f1a2 0314 	sub.w	r3, r2, #20
 800a90e:	2b1e      	cmp	r3, #30
 800a910:	bfda      	itte	le
 800a912:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a916:	40da      	lsrle	r2, r3
 800a918:	2201      	movgt	r2, #1
 800a91a:	2300      	movs	r3, #0
 800a91c:	4619      	mov	r1, r3
 800a91e:	4610      	mov	r0, r2
 800a920:	ec41 0b10 	vmov	d0, r0, r1
 800a924:	b002      	add	sp, #8
 800a926:	4770      	bx	lr
 800a928:	7ff00000 	.word	0x7ff00000

0800a92c <__b2d>:
 800a92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a930:	6906      	ldr	r6, [r0, #16]
 800a932:	f100 0814 	add.w	r8, r0, #20
 800a936:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a93a:	1f37      	subs	r7, r6, #4
 800a93c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a940:	4610      	mov	r0, r2
 800a942:	f7ff fd53 	bl	800a3ec <__hi0bits>
 800a946:	f1c0 0320 	rsb	r3, r0, #32
 800a94a:	280a      	cmp	r0, #10
 800a94c:	600b      	str	r3, [r1, #0]
 800a94e:	491b      	ldr	r1, [pc, #108]	@ (800a9bc <__b2d+0x90>)
 800a950:	dc15      	bgt.n	800a97e <__b2d+0x52>
 800a952:	f1c0 0c0b 	rsb	ip, r0, #11
 800a956:	fa22 f30c 	lsr.w	r3, r2, ip
 800a95a:	45b8      	cmp	r8, r7
 800a95c:	ea43 0501 	orr.w	r5, r3, r1
 800a960:	bf34      	ite	cc
 800a962:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a966:	2300      	movcs	r3, #0
 800a968:	3015      	adds	r0, #21
 800a96a:	fa02 f000 	lsl.w	r0, r2, r0
 800a96e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a972:	4303      	orrs	r3, r0
 800a974:	461c      	mov	r4, r3
 800a976:	ec45 4b10 	vmov	d0, r4, r5
 800a97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a97e:	45b8      	cmp	r8, r7
 800a980:	bf3a      	itte	cc
 800a982:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a986:	f1a6 0708 	subcc.w	r7, r6, #8
 800a98a:	2300      	movcs	r3, #0
 800a98c:	380b      	subs	r0, #11
 800a98e:	d012      	beq.n	800a9b6 <__b2d+0x8a>
 800a990:	f1c0 0120 	rsb	r1, r0, #32
 800a994:	fa23 f401 	lsr.w	r4, r3, r1
 800a998:	4082      	lsls	r2, r0
 800a99a:	4322      	orrs	r2, r4
 800a99c:	4547      	cmp	r7, r8
 800a99e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a9a2:	bf8c      	ite	hi
 800a9a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a9a8:	2200      	movls	r2, #0
 800a9aa:	4083      	lsls	r3, r0
 800a9ac:	40ca      	lsrs	r2, r1
 800a9ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	e7de      	b.n	800a974 <__b2d+0x48>
 800a9b6:	ea42 0501 	orr.w	r5, r2, r1
 800a9ba:	e7db      	b.n	800a974 <__b2d+0x48>
 800a9bc:	3ff00000 	.word	0x3ff00000

0800a9c0 <__d2b>:
 800a9c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9c4:	460f      	mov	r7, r1
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	ec59 8b10 	vmov	r8, r9, d0
 800a9cc:	4616      	mov	r6, r2
 800a9ce:	f7ff fc1b 	bl	800a208 <_Balloc>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	b930      	cbnz	r0, 800a9e4 <__d2b+0x24>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	4b23      	ldr	r3, [pc, #140]	@ (800aa68 <__d2b+0xa8>)
 800a9da:	4824      	ldr	r0, [pc, #144]	@ (800aa6c <__d2b+0xac>)
 800a9dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a9e0:	f7fe fc9c 	bl	800931c <__assert_func>
 800a9e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9ec:	b10d      	cbz	r5, 800a9f2 <__d2b+0x32>
 800a9ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9f2:	9301      	str	r3, [sp, #4]
 800a9f4:	f1b8 0300 	subs.w	r3, r8, #0
 800a9f8:	d023      	beq.n	800aa42 <__d2b+0x82>
 800a9fa:	4668      	mov	r0, sp
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	f7ff fd14 	bl	800a42a <__lo0bits>
 800aa02:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa06:	b1d0      	cbz	r0, 800aa3e <__d2b+0x7e>
 800aa08:	f1c0 0320 	rsb	r3, r0, #32
 800aa0c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa10:	430b      	orrs	r3, r1
 800aa12:	40c2      	lsrs	r2, r0
 800aa14:	6163      	str	r3, [r4, #20]
 800aa16:	9201      	str	r2, [sp, #4]
 800aa18:	9b01      	ldr	r3, [sp, #4]
 800aa1a:	61a3      	str	r3, [r4, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	bf0c      	ite	eq
 800aa20:	2201      	moveq	r2, #1
 800aa22:	2202      	movne	r2, #2
 800aa24:	6122      	str	r2, [r4, #16]
 800aa26:	b1a5      	cbz	r5, 800aa52 <__d2b+0x92>
 800aa28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa2c:	4405      	add	r5, r0
 800aa2e:	603d      	str	r5, [r7, #0]
 800aa30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa34:	6030      	str	r0, [r6, #0]
 800aa36:	4620      	mov	r0, r4
 800aa38:	b003      	add	sp, #12
 800aa3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa3e:	6161      	str	r1, [r4, #20]
 800aa40:	e7ea      	b.n	800aa18 <__d2b+0x58>
 800aa42:	a801      	add	r0, sp, #4
 800aa44:	f7ff fcf1 	bl	800a42a <__lo0bits>
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	6163      	str	r3, [r4, #20]
 800aa4c:	3020      	adds	r0, #32
 800aa4e:	2201      	movs	r2, #1
 800aa50:	e7e8      	b.n	800aa24 <__d2b+0x64>
 800aa52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa5a:	6038      	str	r0, [r7, #0]
 800aa5c:	6918      	ldr	r0, [r3, #16]
 800aa5e:	f7ff fcc5 	bl	800a3ec <__hi0bits>
 800aa62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa66:	e7e5      	b.n	800aa34 <__d2b+0x74>
 800aa68:	0800d43f 	.word	0x0800d43f
 800aa6c:	0800d450 	.word	0x0800d450

0800aa70 <__ratio>:
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	b085      	sub	sp, #20
 800aa76:	e9cd 1000 	strd	r1, r0, [sp]
 800aa7a:	a902      	add	r1, sp, #8
 800aa7c:	f7ff ff56 	bl	800a92c <__b2d>
 800aa80:	9800      	ldr	r0, [sp, #0]
 800aa82:	a903      	add	r1, sp, #12
 800aa84:	ec55 4b10 	vmov	r4, r5, d0
 800aa88:	f7ff ff50 	bl	800a92c <__b2d>
 800aa8c:	9b01      	ldr	r3, [sp, #4]
 800aa8e:	6919      	ldr	r1, [r3, #16]
 800aa90:	9b00      	ldr	r3, [sp, #0]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	1ac9      	subs	r1, r1, r3
 800aa96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa9a:	1a9b      	subs	r3, r3, r2
 800aa9c:	ec5b ab10 	vmov	sl, fp, d0
 800aaa0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	bfce      	itee	gt
 800aaa8:	462a      	movgt	r2, r5
 800aaaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aaae:	465a      	movle	r2, fp
 800aab0:	462f      	mov	r7, r5
 800aab2:	46d9      	mov	r9, fp
 800aab4:	bfcc      	ite	gt
 800aab6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aaba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aabe:	464b      	mov	r3, r9
 800aac0:	4652      	mov	r2, sl
 800aac2:	4620      	mov	r0, r4
 800aac4:	4639      	mov	r1, r7
 800aac6:	f7f5 fec1 	bl	800084c <__aeabi_ddiv>
 800aaca:	ec41 0b10 	vmov	d0, r0, r1
 800aace:	b005      	add	sp, #20
 800aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aad4 <__copybits>:
 800aad4:	3901      	subs	r1, #1
 800aad6:	b570      	push	{r4, r5, r6, lr}
 800aad8:	1149      	asrs	r1, r1, #5
 800aada:	6914      	ldr	r4, [r2, #16]
 800aadc:	3101      	adds	r1, #1
 800aade:	f102 0314 	add.w	r3, r2, #20
 800aae2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aae6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aaea:	1f05      	subs	r5, r0, #4
 800aaec:	42a3      	cmp	r3, r4
 800aaee:	d30c      	bcc.n	800ab0a <__copybits+0x36>
 800aaf0:	1aa3      	subs	r3, r4, r2
 800aaf2:	3b11      	subs	r3, #17
 800aaf4:	f023 0303 	bic.w	r3, r3, #3
 800aaf8:	3211      	adds	r2, #17
 800aafa:	42a2      	cmp	r2, r4
 800aafc:	bf88      	it	hi
 800aafe:	2300      	movhi	r3, #0
 800ab00:	4418      	add	r0, r3
 800ab02:	2300      	movs	r3, #0
 800ab04:	4288      	cmp	r0, r1
 800ab06:	d305      	bcc.n	800ab14 <__copybits+0x40>
 800ab08:	bd70      	pop	{r4, r5, r6, pc}
 800ab0a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab0e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab12:	e7eb      	b.n	800aaec <__copybits+0x18>
 800ab14:	f840 3b04 	str.w	r3, [r0], #4
 800ab18:	e7f4      	b.n	800ab04 <__copybits+0x30>

0800ab1a <__any_on>:
 800ab1a:	f100 0214 	add.w	r2, r0, #20
 800ab1e:	6900      	ldr	r0, [r0, #16]
 800ab20:	114b      	asrs	r3, r1, #5
 800ab22:	4298      	cmp	r0, r3
 800ab24:	b510      	push	{r4, lr}
 800ab26:	db11      	blt.n	800ab4c <__any_on+0x32>
 800ab28:	dd0a      	ble.n	800ab40 <__any_on+0x26>
 800ab2a:	f011 011f 	ands.w	r1, r1, #31
 800ab2e:	d007      	beq.n	800ab40 <__any_on+0x26>
 800ab30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab34:	fa24 f001 	lsr.w	r0, r4, r1
 800ab38:	fa00 f101 	lsl.w	r1, r0, r1
 800ab3c:	428c      	cmp	r4, r1
 800ab3e:	d10b      	bne.n	800ab58 <__any_on+0x3e>
 800ab40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d803      	bhi.n	800ab50 <__any_on+0x36>
 800ab48:	2000      	movs	r0, #0
 800ab4a:	bd10      	pop	{r4, pc}
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	e7f7      	b.n	800ab40 <__any_on+0x26>
 800ab50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d0f5      	beq.n	800ab44 <__any_on+0x2a>
 800ab58:	2001      	movs	r0, #1
 800ab5a:	e7f6      	b.n	800ab4a <__any_on+0x30>

0800ab5c <sulp>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	4604      	mov	r4, r0
 800ab60:	460d      	mov	r5, r1
 800ab62:	ec45 4b10 	vmov	d0, r4, r5
 800ab66:	4616      	mov	r6, r2
 800ab68:	f7ff feba 	bl	800a8e0 <__ulp>
 800ab6c:	ec51 0b10 	vmov	r0, r1, d0
 800ab70:	b17e      	cbz	r6, 800ab92 <sulp+0x36>
 800ab72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ab76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	dd09      	ble.n	800ab92 <sulp+0x36>
 800ab7e:	051b      	lsls	r3, r3, #20
 800ab80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab84:	2400      	movs	r4, #0
 800ab86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	462b      	mov	r3, r5
 800ab8e:	f7f5 fd33 	bl	80005f8 <__aeabi_dmul>
 800ab92:	ec41 0b10 	vmov	d0, r0, r1
 800ab96:	bd70      	pop	{r4, r5, r6, pc}

0800ab98 <_strtod_l>:
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	b09f      	sub	sp, #124	@ 0x7c
 800ab9e:	460c      	mov	r4, r1
 800aba0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aba2:	2200      	movs	r2, #0
 800aba4:	921a      	str	r2, [sp, #104]	@ 0x68
 800aba6:	9005      	str	r0, [sp, #20]
 800aba8:	f04f 0a00 	mov.w	sl, #0
 800abac:	f04f 0b00 	mov.w	fp, #0
 800abb0:	460a      	mov	r2, r1
 800abb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800abb4:	7811      	ldrb	r1, [r2, #0]
 800abb6:	292b      	cmp	r1, #43	@ 0x2b
 800abb8:	d04a      	beq.n	800ac50 <_strtod_l+0xb8>
 800abba:	d838      	bhi.n	800ac2e <_strtod_l+0x96>
 800abbc:	290d      	cmp	r1, #13
 800abbe:	d832      	bhi.n	800ac26 <_strtod_l+0x8e>
 800abc0:	2908      	cmp	r1, #8
 800abc2:	d832      	bhi.n	800ac2a <_strtod_l+0x92>
 800abc4:	2900      	cmp	r1, #0
 800abc6:	d03b      	beq.n	800ac40 <_strtod_l+0xa8>
 800abc8:	2200      	movs	r2, #0
 800abca:	920e      	str	r2, [sp, #56]	@ 0x38
 800abcc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800abce:	782a      	ldrb	r2, [r5, #0]
 800abd0:	2a30      	cmp	r2, #48	@ 0x30
 800abd2:	f040 80b2 	bne.w	800ad3a <_strtod_l+0x1a2>
 800abd6:	786a      	ldrb	r2, [r5, #1]
 800abd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abdc:	2a58      	cmp	r2, #88	@ 0x58
 800abde:	d16e      	bne.n	800acbe <_strtod_l+0x126>
 800abe0:	9302      	str	r3, [sp, #8]
 800abe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abe4:	9301      	str	r3, [sp, #4]
 800abe6:	ab1a      	add	r3, sp, #104	@ 0x68
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	4a8f      	ldr	r2, [pc, #572]	@ (800ae28 <_strtod_l+0x290>)
 800abec:	9805      	ldr	r0, [sp, #20]
 800abee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800abf0:	a919      	add	r1, sp, #100	@ 0x64
 800abf2:	f001 fac7 	bl	800c184 <__gethex>
 800abf6:	f010 060f 	ands.w	r6, r0, #15
 800abfa:	4604      	mov	r4, r0
 800abfc:	d005      	beq.n	800ac0a <_strtod_l+0x72>
 800abfe:	2e06      	cmp	r6, #6
 800ac00:	d128      	bne.n	800ac54 <_strtod_l+0xbc>
 800ac02:	3501      	adds	r5, #1
 800ac04:	2300      	movs	r3, #0
 800ac06:	9519      	str	r5, [sp, #100]	@ 0x64
 800ac08:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f040 858e 	bne.w	800b72e <_strtod_l+0xb96>
 800ac12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac14:	b1cb      	cbz	r3, 800ac4a <_strtod_l+0xb2>
 800ac16:	4652      	mov	r2, sl
 800ac18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ac1c:	ec43 2b10 	vmov	d0, r2, r3
 800ac20:	b01f      	add	sp, #124	@ 0x7c
 800ac22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac26:	2920      	cmp	r1, #32
 800ac28:	d1ce      	bne.n	800abc8 <_strtod_l+0x30>
 800ac2a:	3201      	adds	r2, #1
 800ac2c:	e7c1      	b.n	800abb2 <_strtod_l+0x1a>
 800ac2e:	292d      	cmp	r1, #45	@ 0x2d
 800ac30:	d1ca      	bne.n	800abc8 <_strtod_l+0x30>
 800ac32:	2101      	movs	r1, #1
 800ac34:	910e      	str	r1, [sp, #56]	@ 0x38
 800ac36:	1c51      	adds	r1, r2, #1
 800ac38:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac3a:	7852      	ldrb	r2, [r2, #1]
 800ac3c:	2a00      	cmp	r2, #0
 800ac3e:	d1c5      	bne.n	800abcc <_strtod_l+0x34>
 800ac40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac42:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f040 8570 	bne.w	800b72a <_strtod_l+0xb92>
 800ac4a:	4652      	mov	r2, sl
 800ac4c:	465b      	mov	r3, fp
 800ac4e:	e7e5      	b.n	800ac1c <_strtod_l+0x84>
 800ac50:	2100      	movs	r1, #0
 800ac52:	e7ef      	b.n	800ac34 <_strtod_l+0x9c>
 800ac54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac56:	b13a      	cbz	r2, 800ac68 <_strtod_l+0xd0>
 800ac58:	2135      	movs	r1, #53	@ 0x35
 800ac5a:	a81c      	add	r0, sp, #112	@ 0x70
 800ac5c:	f7ff ff3a 	bl	800aad4 <__copybits>
 800ac60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac62:	9805      	ldr	r0, [sp, #20]
 800ac64:	f7ff fb10 	bl	800a288 <_Bfree>
 800ac68:	3e01      	subs	r6, #1
 800ac6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac6c:	2e04      	cmp	r6, #4
 800ac6e:	d806      	bhi.n	800ac7e <_strtod_l+0xe6>
 800ac70:	e8df f006 	tbb	[pc, r6]
 800ac74:	201d0314 	.word	0x201d0314
 800ac78:	14          	.byte	0x14
 800ac79:	00          	.byte	0x00
 800ac7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac7e:	05e1      	lsls	r1, r4, #23
 800ac80:	bf48      	it	mi
 800ac82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac8a:	0d1b      	lsrs	r3, r3, #20
 800ac8c:	051b      	lsls	r3, r3, #20
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1bb      	bne.n	800ac0a <_strtod_l+0x72>
 800ac92:	f7fe fb01 	bl	8009298 <__errno>
 800ac96:	2322      	movs	r3, #34	@ 0x22
 800ac98:	6003      	str	r3, [r0, #0]
 800ac9a:	e7b6      	b.n	800ac0a <_strtod_l+0x72>
 800ac9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aca0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aca4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aca8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800acac:	e7e7      	b.n	800ac7e <_strtod_l+0xe6>
 800acae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ae30 <_strtod_l+0x298>
 800acb2:	e7e4      	b.n	800ac7e <_strtod_l+0xe6>
 800acb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800acb8:	f04f 3aff 	mov.w	sl, #4294967295
 800acbc:	e7df      	b.n	800ac7e <_strtod_l+0xe6>
 800acbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	9219      	str	r2, [sp, #100]	@ 0x64
 800acc4:	785b      	ldrb	r3, [r3, #1]
 800acc6:	2b30      	cmp	r3, #48	@ 0x30
 800acc8:	d0f9      	beq.n	800acbe <_strtod_l+0x126>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d09d      	beq.n	800ac0a <_strtod_l+0x72>
 800acce:	2301      	movs	r3, #1
 800acd0:	2700      	movs	r7, #0
 800acd2:	9308      	str	r3, [sp, #32]
 800acd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acd6:	930c      	str	r3, [sp, #48]	@ 0x30
 800acd8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800acda:	46b9      	mov	r9, r7
 800acdc:	220a      	movs	r2, #10
 800acde:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ace0:	7805      	ldrb	r5, [r0, #0]
 800ace2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ace6:	b2d9      	uxtb	r1, r3
 800ace8:	2909      	cmp	r1, #9
 800acea:	d928      	bls.n	800ad3e <_strtod_l+0x1a6>
 800acec:	494f      	ldr	r1, [pc, #316]	@ (800ae2c <_strtod_l+0x294>)
 800acee:	2201      	movs	r2, #1
 800acf0:	f7fe f9f0 	bl	80090d4 <strncmp>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d032      	beq.n	800ad5e <_strtod_l+0x1c6>
 800acf8:	2000      	movs	r0, #0
 800acfa:	462a      	mov	r2, r5
 800acfc:	900a      	str	r0, [sp, #40]	@ 0x28
 800acfe:	464d      	mov	r5, r9
 800ad00:	4603      	mov	r3, r0
 800ad02:	2a65      	cmp	r2, #101	@ 0x65
 800ad04:	d001      	beq.n	800ad0a <_strtod_l+0x172>
 800ad06:	2a45      	cmp	r2, #69	@ 0x45
 800ad08:	d114      	bne.n	800ad34 <_strtod_l+0x19c>
 800ad0a:	b91d      	cbnz	r5, 800ad14 <_strtod_l+0x17c>
 800ad0c:	9a08      	ldr	r2, [sp, #32]
 800ad0e:	4302      	orrs	r2, r0
 800ad10:	d096      	beq.n	800ac40 <_strtod_l+0xa8>
 800ad12:	2500      	movs	r5, #0
 800ad14:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ad16:	1c62      	adds	r2, r4, #1
 800ad18:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad1a:	7862      	ldrb	r2, [r4, #1]
 800ad1c:	2a2b      	cmp	r2, #43	@ 0x2b
 800ad1e:	d07a      	beq.n	800ae16 <_strtod_l+0x27e>
 800ad20:	2a2d      	cmp	r2, #45	@ 0x2d
 800ad22:	d07e      	beq.n	800ae22 <_strtod_l+0x28a>
 800ad24:	f04f 0c00 	mov.w	ip, #0
 800ad28:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad2c:	2909      	cmp	r1, #9
 800ad2e:	f240 8085 	bls.w	800ae3c <_strtod_l+0x2a4>
 800ad32:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad34:	f04f 0800 	mov.w	r8, #0
 800ad38:	e0a5      	b.n	800ae86 <_strtod_l+0x2ee>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	e7c8      	b.n	800acd0 <_strtod_l+0x138>
 800ad3e:	f1b9 0f08 	cmp.w	r9, #8
 800ad42:	bfd8      	it	le
 800ad44:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ad46:	f100 0001 	add.w	r0, r0, #1
 800ad4a:	bfda      	itte	le
 800ad4c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad50:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ad52:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ad56:	f109 0901 	add.w	r9, r9, #1
 800ad5a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad5c:	e7bf      	b.n	800acde <_strtod_l+0x146>
 800ad5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad60:	1c5a      	adds	r2, r3, #1
 800ad62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad64:	785a      	ldrb	r2, [r3, #1]
 800ad66:	f1b9 0f00 	cmp.w	r9, #0
 800ad6a:	d03b      	beq.n	800ade4 <_strtod_l+0x24c>
 800ad6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad6e:	464d      	mov	r5, r9
 800ad70:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad74:	2b09      	cmp	r3, #9
 800ad76:	d912      	bls.n	800ad9e <_strtod_l+0x206>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e7c2      	b.n	800ad02 <_strtod_l+0x16a>
 800ad7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad7e:	1c5a      	adds	r2, r3, #1
 800ad80:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad82:	785a      	ldrb	r2, [r3, #1]
 800ad84:	3001      	adds	r0, #1
 800ad86:	2a30      	cmp	r2, #48	@ 0x30
 800ad88:	d0f8      	beq.n	800ad7c <_strtod_l+0x1e4>
 800ad8a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad8e:	2b08      	cmp	r3, #8
 800ad90:	f200 84d2 	bhi.w	800b738 <_strtod_l+0xba0>
 800ad94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad96:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad98:	2000      	movs	r0, #0
 800ad9a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	3a30      	subs	r2, #48	@ 0x30
 800ada0:	f100 0301 	add.w	r3, r0, #1
 800ada4:	d018      	beq.n	800add8 <_strtod_l+0x240>
 800ada6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ada8:	4419      	add	r1, r3
 800adaa:	910a      	str	r1, [sp, #40]	@ 0x28
 800adac:	462e      	mov	r6, r5
 800adae:	f04f 0e0a 	mov.w	lr, #10
 800adb2:	1c71      	adds	r1, r6, #1
 800adb4:	eba1 0c05 	sub.w	ip, r1, r5
 800adb8:	4563      	cmp	r3, ip
 800adba:	dc15      	bgt.n	800ade8 <_strtod_l+0x250>
 800adbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800adc0:	182b      	adds	r3, r5, r0
 800adc2:	2b08      	cmp	r3, #8
 800adc4:	f105 0501 	add.w	r5, r5, #1
 800adc8:	4405      	add	r5, r0
 800adca:	dc1a      	bgt.n	800ae02 <_strtod_l+0x26a>
 800adcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adce:	230a      	movs	r3, #10
 800add0:	fb03 2301 	mla	r3, r3, r1, r2
 800add4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800add6:	2300      	movs	r3, #0
 800add8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adda:	1c51      	adds	r1, r2, #1
 800addc:	9119      	str	r1, [sp, #100]	@ 0x64
 800adde:	7852      	ldrb	r2, [r2, #1]
 800ade0:	4618      	mov	r0, r3
 800ade2:	e7c5      	b.n	800ad70 <_strtod_l+0x1d8>
 800ade4:	4648      	mov	r0, r9
 800ade6:	e7ce      	b.n	800ad86 <_strtod_l+0x1ee>
 800ade8:	2e08      	cmp	r6, #8
 800adea:	dc05      	bgt.n	800adf8 <_strtod_l+0x260>
 800adec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800adee:	fb0e f606 	mul.w	r6, lr, r6
 800adf2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800adf4:	460e      	mov	r6, r1
 800adf6:	e7dc      	b.n	800adb2 <_strtod_l+0x21a>
 800adf8:	2910      	cmp	r1, #16
 800adfa:	bfd8      	it	le
 800adfc:	fb0e f707 	mulle.w	r7, lr, r7
 800ae00:	e7f8      	b.n	800adf4 <_strtod_l+0x25c>
 800ae02:	2b0f      	cmp	r3, #15
 800ae04:	bfdc      	itt	le
 800ae06:	230a      	movle	r3, #10
 800ae08:	fb03 2707 	mlale	r7, r3, r7, r2
 800ae0c:	e7e3      	b.n	800add6 <_strtod_l+0x23e>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae12:	2301      	movs	r3, #1
 800ae14:	e77a      	b.n	800ad0c <_strtod_l+0x174>
 800ae16:	f04f 0c00 	mov.w	ip, #0
 800ae1a:	1ca2      	adds	r2, r4, #2
 800ae1c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae1e:	78a2      	ldrb	r2, [r4, #2]
 800ae20:	e782      	b.n	800ad28 <_strtod_l+0x190>
 800ae22:	f04f 0c01 	mov.w	ip, #1
 800ae26:	e7f8      	b.n	800ae1a <_strtod_l+0x282>
 800ae28:	0800d634 	.word	0x0800d634
 800ae2c:	0800d4a9 	.word	0x0800d4a9
 800ae30:	7ff00000 	.word	0x7ff00000
 800ae34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae36:	1c51      	adds	r1, r2, #1
 800ae38:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae3a:	7852      	ldrb	r2, [r2, #1]
 800ae3c:	2a30      	cmp	r2, #48	@ 0x30
 800ae3e:	d0f9      	beq.n	800ae34 <_strtod_l+0x29c>
 800ae40:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae44:	2908      	cmp	r1, #8
 800ae46:	f63f af75 	bhi.w	800ad34 <_strtod_l+0x19c>
 800ae4a:	3a30      	subs	r2, #48	@ 0x30
 800ae4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae50:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae52:	f04f 080a 	mov.w	r8, #10
 800ae56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae58:	1c56      	adds	r6, r2, #1
 800ae5a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae5c:	7852      	ldrb	r2, [r2, #1]
 800ae5e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae62:	f1be 0f09 	cmp.w	lr, #9
 800ae66:	d939      	bls.n	800aedc <_strtod_l+0x344>
 800ae68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae6a:	1a76      	subs	r6, r6, r1
 800ae6c:	2e08      	cmp	r6, #8
 800ae6e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae72:	dc03      	bgt.n	800ae7c <_strtod_l+0x2e4>
 800ae74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae76:	4588      	cmp	r8, r1
 800ae78:	bfa8      	it	ge
 800ae7a:	4688      	movge	r8, r1
 800ae7c:	f1bc 0f00 	cmp.w	ip, #0
 800ae80:	d001      	beq.n	800ae86 <_strtod_l+0x2ee>
 800ae82:	f1c8 0800 	rsb	r8, r8, #0
 800ae86:	2d00      	cmp	r5, #0
 800ae88:	d14e      	bne.n	800af28 <_strtod_l+0x390>
 800ae8a:	9908      	ldr	r1, [sp, #32]
 800ae8c:	4308      	orrs	r0, r1
 800ae8e:	f47f aebc 	bne.w	800ac0a <_strtod_l+0x72>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f47f aed4 	bne.w	800ac40 <_strtod_l+0xa8>
 800ae98:	2a69      	cmp	r2, #105	@ 0x69
 800ae9a:	d028      	beq.n	800aeee <_strtod_l+0x356>
 800ae9c:	dc25      	bgt.n	800aeea <_strtod_l+0x352>
 800ae9e:	2a49      	cmp	r2, #73	@ 0x49
 800aea0:	d025      	beq.n	800aeee <_strtod_l+0x356>
 800aea2:	2a4e      	cmp	r2, #78	@ 0x4e
 800aea4:	f47f aecc 	bne.w	800ac40 <_strtod_l+0xa8>
 800aea8:	499a      	ldr	r1, [pc, #616]	@ (800b114 <_strtod_l+0x57c>)
 800aeaa:	a819      	add	r0, sp, #100	@ 0x64
 800aeac:	f001 fb8c 	bl	800c5c8 <__match>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	f43f aec5 	beq.w	800ac40 <_strtod_l+0xa8>
 800aeb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	2b28      	cmp	r3, #40	@ 0x28
 800aebc:	d12e      	bne.n	800af1c <_strtod_l+0x384>
 800aebe:	4996      	ldr	r1, [pc, #600]	@ (800b118 <_strtod_l+0x580>)
 800aec0:	aa1c      	add	r2, sp, #112	@ 0x70
 800aec2:	a819      	add	r0, sp, #100	@ 0x64
 800aec4:	f001 fb94 	bl	800c5f0 <__hexnan>
 800aec8:	2805      	cmp	r0, #5
 800aeca:	d127      	bne.n	800af1c <_strtod_l+0x384>
 800aecc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aece:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aed2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aed6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aeda:	e696      	b.n	800ac0a <_strtod_l+0x72>
 800aedc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aede:	fb08 2101 	mla	r1, r8, r1, r2
 800aee2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aee6:	9209      	str	r2, [sp, #36]	@ 0x24
 800aee8:	e7b5      	b.n	800ae56 <_strtod_l+0x2be>
 800aeea:	2a6e      	cmp	r2, #110	@ 0x6e
 800aeec:	e7da      	b.n	800aea4 <_strtod_l+0x30c>
 800aeee:	498b      	ldr	r1, [pc, #556]	@ (800b11c <_strtod_l+0x584>)
 800aef0:	a819      	add	r0, sp, #100	@ 0x64
 800aef2:	f001 fb69 	bl	800c5c8 <__match>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	f43f aea2 	beq.w	800ac40 <_strtod_l+0xa8>
 800aefc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aefe:	4988      	ldr	r1, [pc, #544]	@ (800b120 <_strtod_l+0x588>)
 800af00:	3b01      	subs	r3, #1
 800af02:	a819      	add	r0, sp, #100	@ 0x64
 800af04:	9319      	str	r3, [sp, #100]	@ 0x64
 800af06:	f001 fb5f 	bl	800c5c8 <__match>
 800af0a:	b910      	cbnz	r0, 800af12 <_strtod_l+0x37a>
 800af0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af0e:	3301      	adds	r3, #1
 800af10:	9319      	str	r3, [sp, #100]	@ 0x64
 800af12:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b130 <_strtod_l+0x598>
 800af16:	f04f 0a00 	mov.w	sl, #0
 800af1a:	e676      	b.n	800ac0a <_strtod_l+0x72>
 800af1c:	4881      	ldr	r0, [pc, #516]	@ (800b124 <_strtod_l+0x58c>)
 800af1e:	f001 f8a7 	bl	800c070 <nan>
 800af22:	ec5b ab10 	vmov	sl, fp, d0
 800af26:	e670      	b.n	800ac0a <_strtod_l+0x72>
 800af28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800af2c:	eba8 0303 	sub.w	r3, r8, r3
 800af30:	f1b9 0f00 	cmp.w	r9, #0
 800af34:	bf08      	it	eq
 800af36:	46a9      	moveq	r9, r5
 800af38:	2d10      	cmp	r5, #16
 800af3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af3c:	462c      	mov	r4, r5
 800af3e:	bfa8      	it	ge
 800af40:	2410      	movge	r4, #16
 800af42:	f7f5 fadf 	bl	8000504 <__aeabi_ui2d>
 800af46:	2d09      	cmp	r5, #9
 800af48:	4682      	mov	sl, r0
 800af4a:	468b      	mov	fp, r1
 800af4c:	dc13      	bgt.n	800af76 <_strtod_l+0x3de>
 800af4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af50:	2b00      	cmp	r3, #0
 800af52:	f43f ae5a 	beq.w	800ac0a <_strtod_l+0x72>
 800af56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af58:	dd78      	ble.n	800b04c <_strtod_l+0x4b4>
 800af5a:	2b16      	cmp	r3, #22
 800af5c:	dc5f      	bgt.n	800b01e <_strtod_l+0x486>
 800af5e:	4972      	ldr	r1, [pc, #456]	@ (800b128 <_strtod_l+0x590>)
 800af60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af68:	4652      	mov	r2, sl
 800af6a:	465b      	mov	r3, fp
 800af6c:	f7f5 fb44 	bl	80005f8 <__aeabi_dmul>
 800af70:	4682      	mov	sl, r0
 800af72:	468b      	mov	fp, r1
 800af74:	e649      	b.n	800ac0a <_strtod_l+0x72>
 800af76:	4b6c      	ldr	r3, [pc, #432]	@ (800b128 <_strtod_l+0x590>)
 800af78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af80:	f7f5 fb3a 	bl	80005f8 <__aeabi_dmul>
 800af84:	4682      	mov	sl, r0
 800af86:	4638      	mov	r0, r7
 800af88:	468b      	mov	fp, r1
 800af8a:	f7f5 fabb 	bl	8000504 <__aeabi_ui2d>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	4650      	mov	r0, sl
 800af94:	4659      	mov	r1, fp
 800af96:	f7f5 f979 	bl	800028c <__adddf3>
 800af9a:	2d0f      	cmp	r5, #15
 800af9c:	4682      	mov	sl, r0
 800af9e:	468b      	mov	fp, r1
 800afa0:	ddd5      	ble.n	800af4e <_strtod_l+0x3b6>
 800afa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa4:	1b2c      	subs	r4, r5, r4
 800afa6:	441c      	add	r4, r3
 800afa8:	2c00      	cmp	r4, #0
 800afaa:	f340 8093 	ble.w	800b0d4 <_strtod_l+0x53c>
 800afae:	f014 030f 	ands.w	r3, r4, #15
 800afb2:	d00a      	beq.n	800afca <_strtod_l+0x432>
 800afb4:	495c      	ldr	r1, [pc, #368]	@ (800b128 <_strtod_l+0x590>)
 800afb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afba:	4652      	mov	r2, sl
 800afbc:	465b      	mov	r3, fp
 800afbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afc2:	f7f5 fb19 	bl	80005f8 <__aeabi_dmul>
 800afc6:	4682      	mov	sl, r0
 800afc8:	468b      	mov	fp, r1
 800afca:	f034 040f 	bics.w	r4, r4, #15
 800afce:	d073      	beq.n	800b0b8 <_strtod_l+0x520>
 800afd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800afd4:	dd49      	ble.n	800b06a <_strtod_l+0x4d2>
 800afd6:	2400      	movs	r4, #0
 800afd8:	46a0      	mov	r8, r4
 800afda:	940b      	str	r4, [sp, #44]	@ 0x2c
 800afdc:	46a1      	mov	r9, r4
 800afde:	9a05      	ldr	r2, [sp, #20]
 800afe0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b130 <_strtod_l+0x598>
 800afe4:	2322      	movs	r3, #34	@ 0x22
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	f04f 0a00 	mov.w	sl, #0
 800afec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f43f ae0b 	beq.w	800ac0a <_strtod_l+0x72>
 800aff4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aff6:	9805      	ldr	r0, [sp, #20]
 800aff8:	f7ff f946 	bl	800a288 <_Bfree>
 800affc:	9805      	ldr	r0, [sp, #20]
 800affe:	4649      	mov	r1, r9
 800b000:	f7ff f942 	bl	800a288 <_Bfree>
 800b004:	9805      	ldr	r0, [sp, #20]
 800b006:	4641      	mov	r1, r8
 800b008:	f7ff f93e 	bl	800a288 <_Bfree>
 800b00c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b00e:	9805      	ldr	r0, [sp, #20]
 800b010:	f7ff f93a 	bl	800a288 <_Bfree>
 800b014:	9805      	ldr	r0, [sp, #20]
 800b016:	4621      	mov	r1, r4
 800b018:	f7ff f936 	bl	800a288 <_Bfree>
 800b01c:	e5f5      	b.n	800ac0a <_strtod_l+0x72>
 800b01e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b020:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b024:	4293      	cmp	r3, r2
 800b026:	dbbc      	blt.n	800afa2 <_strtod_l+0x40a>
 800b028:	4c3f      	ldr	r4, [pc, #252]	@ (800b128 <_strtod_l+0x590>)
 800b02a:	f1c5 050f 	rsb	r5, r5, #15
 800b02e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b032:	4652      	mov	r2, sl
 800b034:	465b      	mov	r3, fp
 800b036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b03a:	f7f5 fadd 	bl	80005f8 <__aeabi_dmul>
 800b03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b040:	1b5d      	subs	r5, r3, r5
 800b042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b046:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b04a:	e78f      	b.n	800af6c <_strtod_l+0x3d4>
 800b04c:	3316      	adds	r3, #22
 800b04e:	dba8      	blt.n	800afa2 <_strtod_l+0x40a>
 800b050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b052:	eba3 0808 	sub.w	r8, r3, r8
 800b056:	4b34      	ldr	r3, [pc, #208]	@ (800b128 <_strtod_l+0x590>)
 800b058:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b05c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b060:	4650      	mov	r0, sl
 800b062:	4659      	mov	r1, fp
 800b064:	f7f5 fbf2 	bl	800084c <__aeabi_ddiv>
 800b068:	e782      	b.n	800af70 <_strtod_l+0x3d8>
 800b06a:	2300      	movs	r3, #0
 800b06c:	4f2f      	ldr	r7, [pc, #188]	@ (800b12c <_strtod_l+0x594>)
 800b06e:	1124      	asrs	r4, r4, #4
 800b070:	4650      	mov	r0, sl
 800b072:	4659      	mov	r1, fp
 800b074:	461e      	mov	r6, r3
 800b076:	2c01      	cmp	r4, #1
 800b078:	dc21      	bgt.n	800b0be <_strtod_l+0x526>
 800b07a:	b10b      	cbz	r3, 800b080 <_strtod_l+0x4e8>
 800b07c:	4682      	mov	sl, r0
 800b07e:	468b      	mov	fp, r1
 800b080:	492a      	ldr	r1, [pc, #168]	@ (800b12c <_strtod_l+0x594>)
 800b082:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b086:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b08a:	4652      	mov	r2, sl
 800b08c:	465b      	mov	r3, fp
 800b08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b092:	f7f5 fab1 	bl	80005f8 <__aeabi_dmul>
 800b096:	4b26      	ldr	r3, [pc, #152]	@ (800b130 <_strtod_l+0x598>)
 800b098:	460a      	mov	r2, r1
 800b09a:	400b      	ands	r3, r1
 800b09c:	4925      	ldr	r1, [pc, #148]	@ (800b134 <_strtod_l+0x59c>)
 800b09e:	428b      	cmp	r3, r1
 800b0a0:	4682      	mov	sl, r0
 800b0a2:	d898      	bhi.n	800afd6 <_strtod_l+0x43e>
 800b0a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b0a8:	428b      	cmp	r3, r1
 800b0aa:	bf86      	itte	hi
 800b0ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b138 <_strtod_l+0x5a0>
 800b0b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b0b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	9308      	str	r3, [sp, #32]
 800b0bc:	e076      	b.n	800b1ac <_strtod_l+0x614>
 800b0be:	07e2      	lsls	r2, r4, #31
 800b0c0:	d504      	bpl.n	800b0cc <_strtod_l+0x534>
 800b0c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0c6:	f7f5 fa97 	bl	80005f8 <__aeabi_dmul>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	3601      	adds	r6, #1
 800b0ce:	1064      	asrs	r4, r4, #1
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	e7d0      	b.n	800b076 <_strtod_l+0x4de>
 800b0d4:	d0f0      	beq.n	800b0b8 <_strtod_l+0x520>
 800b0d6:	4264      	negs	r4, r4
 800b0d8:	f014 020f 	ands.w	r2, r4, #15
 800b0dc:	d00a      	beq.n	800b0f4 <_strtod_l+0x55c>
 800b0de:	4b12      	ldr	r3, [pc, #72]	@ (800b128 <_strtod_l+0x590>)
 800b0e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0e4:	4650      	mov	r0, sl
 800b0e6:	4659      	mov	r1, fp
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	f7f5 fbae 	bl	800084c <__aeabi_ddiv>
 800b0f0:	4682      	mov	sl, r0
 800b0f2:	468b      	mov	fp, r1
 800b0f4:	1124      	asrs	r4, r4, #4
 800b0f6:	d0df      	beq.n	800b0b8 <_strtod_l+0x520>
 800b0f8:	2c1f      	cmp	r4, #31
 800b0fa:	dd1f      	ble.n	800b13c <_strtod_l+0x5a4>
 800b0fc:	2400      	movs	r4, #0
 800b0fe:	46a0      	mov	r8, r4
 800b100:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b102:	46a1      	mov	r9, r4
 800b104:	9a05      	ldr	r2, [sp, #20]
 800b106:	2322      	movs	r3, #34	@ 0x22
 800b108:	f04f 0a00 	mov.w	sl, #0
 800b10c:	f04f 0b00 	mov.w	fp, #0
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	e76b      	b.n	800afec <_strtod_l+0x454>
 800b114:	0800d301 	.word	0x0800d301
 800b118:	0800d620 	.word	0x0800d620
 800b11c:	0800d2f9 	.word	0x0800d2f9
 800b120:	0800d3dd 	.word	0x0800d3dd
 800b124:	0800d3d9 	.word	0x0800d3d9
 800b128:	0800d558 	.word	0x0800d558
 800b12c:	0800d530 	.word	0x0800d530
 800b130:	7ff00000 	.word	0x7ff00000
 800b134:	7ca00000 	.word	0x7ca00000
 800b138:	7fefffff 	.word	0x7fefffff
 800b13c:	f014 0310 	ands.w	r3, r4, #16
 800b140:	bf18      	it	ne
 800b142:	236a      	movne	r3, #106	@ 0x6a
 800b144:	4ea9      	ldr	r6, [pc, #676]	@ (800b3ec <_strtod_l+0x854>)
 800b146:	9308      	str	r3, [sp, #32]
 800b148:	4650      	mov	r0, sl
 800b14a:	4659      	mov	r1, fp
 800b14c:	2300      	movs	r3, #0
 800b14e:	07e7      	lsls	r7, r4, #31
 800b150:	d504      	bpl.n	800b15c <_strtod_l+0x5c4>
 800b152:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b156:	f7f5 fa4f 	bl	80005f8 <__aeabi_dmul>
 800b15a:	2301      	movs	r3, #1
 800b15c:	1064      	asrs	r4, r4, #1
 800b15e:	f106 0608 	add.w	r6, r6, #8
 800b162:	d1f4      	bne.n	800b14e <_strtod_l+0x5b6>
 800b164:	b10b      	cbz	r3, 800b16a <_strtod_l+0x5d2>
 800b166:	4682      	mov	sl, r0
 800b168:	468b      	mov	fp, r1
 800b16a:	9b08      	ldr	r3, [sp, #32]
 800b16c:	b1b3      	cbz	r3, 800b19c <_strtod_l+0x604>
 800b16e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b172:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b176:	2b00      	cmp	r3, #0
 800b178:	4659      	mov	r1, fp
 800b17a:	dd0f      	ble.n	800b19c <_strtod_l+0x604>
 800b17c:	2b1f      	cmp	r3, #31
 800b17e:	dd56      	ble.n	800b22e <_strtod_l+0x696>
 800b180:	2b34      	cmp	r3, #52	@ 0x34
 800b182:	bfde      	ittt	le
 800b184:	f04f 33ff 	movle.w	r3, #4294967295
 800b188:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b18c:	4093      	lslle	r3, r2
 800b18e:	f04f 0a00 	mov.w	sl, #0
 800b192:	bfcc      	ite	gt
 800b194:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b198:	ea03 0b01 	andle.w	fp, r3, r1
 800b19c:	2200      	movs	r2, #0
 800b19e:	2300      	movs	r3, #0
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	4659      	mov	r1, fp
 800b1a4:	f7f5 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d1a7      	bne.n	800b0fc <_strtod_l+0x564>
 800b1ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b1b2:	9805      	ldr	r0, [sp, #20]
 800b1b4:	462b      	mov	r3, r5
 800b1b6:	464a      	mov	r2, r9
 800b1b8:	f7ff f8ce 	bl	800a358 <__s2b>
 800b1bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f43f af09 	beq.w	800afd6 <_strtod_l+0x43e>
 800b1c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	eba3 0308 	sub.w	r3, r3, r8
 800b1ce:	bfa8      	it	ge
 800b1d0:	2300      	movge	r3, #0
 800b1d2:	9312      	str	r3, [sp, #72]	@ 0x48
 800b1d4:	2400      	movs	r4, #0
 800b1d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b1da:	9316      	str	r3, [sp, #88]	@ 0x58
 800b1dc:	46a0      	mov	r8, r4
 800b1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1e0:	9805      	ldr	r0, [sp, #20]
 800b1e2:	6859      	ldr	r1, [r3, #4]
 800b1e4:	f7ff f810 	bl	800a208 <_Balloc>
 800b1e8:	4681      	mov	r9, r0
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	f43f aef7 	beq.w	800afde <_strtod_l+0x446>
 800b1f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1f2:	691a      	ldr	r2, [r3, #16]
 800b1f4:	3202      	adds	r2, #2
 800b1f6:	f103 010c 	add.w	r1, r3, #12
 800b1fa:	0092      	lsls	r2, r2, #2
 800b1fc:	300c      	adds	r0, #12
 800b1fe:	f7fe f878 	bl	80092f2 <memcpy>
 800b202:	ec4b ab10 	vmov	d0, sl, fp
 800b206:	9805      	ldr	r0, [sp, #20]
 800b208:	aa1c      	add	r2, sp, #112	@ 0x70
 800b20a:	a91b      	add	r1, sp, #108	@ 0x6c
 800b20c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b210:	f7ff fbd6 	bl	800a9c0 <__d2b>
 800b214:	901a      	str	r0, [sp, #104]	@ 0x68
 800b216:	2800      	cmp	r0, #0
 800b218:	f43f aee1 	beq.w	800afde <_strtod_l+0x446>
 800b21c:	9805      	ldr	r0, [sp, #20]
 800b21e:	2101      	movs	r1, #1
 800b220:	f7ff f930 	bl	800a484 <__i2b>
 800b224:	4680      	mov	r8, r0
 800b226:	b948      	cbnz	r0, 800b23c <_strtod_l+0x6a4>
 800b228:	f04f 0800 	mov.w	r8, #0
 800b22c:	e6d7      	b.n	800afde <_strtod_l+0x446>
 800b22e:	f04f 32ff 	mov.w	r2, #4294967295
 800b232:	fa02 f303 	lsl.w	r3, r2, r3
 800b236:	ea03 0a0a 	and.w	sl, r3, sl
 800b23a:	e7af      	b.n	800b19c <_strtod_l+0x604>
 800b23c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b23e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b240:	2d00      	cmp	r5, #0
 800b242:	bfab      	itete	ge
 800b244:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b246:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b248:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b24a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b24c:	bfac      	ite	ge
 800b24e:	18ef      	addge	r7, r5, r3
 800b250:	1b5e      	sublt	r6, r3, r5
 800b252:	9b08      	ldr	r3, [sp, #32]
 800b254:	1aed      	subs	r5, r5, r3
 800b256:	4415      	add	r5, r2
 800b258:	4b65      	ldr	r3, [pc, #404]	@ (800b3f0 <_strtod_l+0x858>)
 800b25a:	3d01      	subs	r5, #1
 800b25c:	429d      	cmp	r5, r3
 800b25e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b262:	da50      	bge.n	800b306 <_strtod_l+0x76e>
 800b264:	1b5b      	subs	r3, r3, r5
 800b266:	2b1f      	cmp	r3, #31
 800b268:	eba2 0203 	sub.w	r2, r2, r3
 800b26c:	f04f 0101 	mov.w	r1, #1
 800b270:	dc3d      	bgt.n	800b2ee <_strtod_l+0x756>
 800b272:	fa01 f303 	lsl.w	r3, r1, r3
 800b276:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b278:	2300      	movs	r3, #0
 800b27a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b27c:	18bd      	adds	r5, r7, r2
 800b27e:	9b08      	ldr	r3, [sp, #32]
 800b280:	42af      	cmp	r7, r5
 800b282:	4416      	add	r6, r2
 800b284:	441e      	add	r6, r3
 800b286:	463b      	mov	r3, r7
 800b288:	bfa8      	it	ge
 800b28a:	462b      	movge	r3, r5
 800b28c:	42b3      	cmp	r3, r6
 800b28e:	bfa8      	it	ge
 800b290:	4633      	movge	r3, r6
 800b292:	2b00      	cmp	r3, #0
 800b294:	bfc2      	ittt	gt
 800b296:	1aed      	subgt	r5, r5, r3
 800b298:	1af6      	subgt	r6, r6, r3
 800b29a:	1aff      	subgt	r7, r7, r3
 800b29c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	dd16      	ble.n	800b2d0 <_strtod_l+0x738>
 800b2a2:	4641      	mov	r1, r8
 800b2a4:	9805      	ldr	r0, [sp, #20]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	f7ff f9a4 	bl	800a5f4 <__pow5mult>
 800b2ac:	4680      	mov	r8, r0
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d0ba      	beq.n	800b228 <_strtod_l+0x690>
 800b2b2:	4601      	mov	r1, r0
 800b2b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b2b6:	9805      	ldr	r0, [sp, #20]
 800b2b8:	f7ff f8fa 	bl	800a4b0 <__multiply>
 800b2bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	f43f ae8d 	beq.w	800afde <_strtod_l+0x446>
 800b2c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2c6:	9805      	ldr	r0, [sp, #20]
 800b2c8:	f7fe ffde 	bl	800a288 <_Bfree>
 800b2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2d0:	2d00      	cmp	r5, #0
 800b2d2:	dc1d      	bgt.n	800b310 <_strtod_l+0x778>
 800b2d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	dd23      	ble.n	800b322 <_strtod_l+0x78a>
 800b2da:	4649      	mov	r1, r9
 800b2dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b2de:	9805      	ldr	r0, [sp, #20]
 800b2e0:	f7ff f988 	bl	800a5f4 <__pow5mult>
 800b2e4:	4681      	mov	r9, r0
 800b2e6:	b9e0      	cbnz	r0, 800b322 <_strtod_l+0x78a>
 800b2e8:	f04f 0900 	mov.w	r9, #0
 800b2ec:	e677      	b.n	800afde <_strtod_l+0x446>
 800b2ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b2f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b2f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b2fa:	35e2      	adds	r5, #226	@ 0xe2
 800b2fc:	fa01 f305 	lsl.w	r3, r1, r5
 800b300:	9310      	str	r3, [sp, #64]	@ 0x40
 800b302:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b304:	e7ba      	b.n	800b27c <_strtod_l+0x6e4>
 800b306:	2300      	movs	r3, #0
 800b308:	9310      	str	r3, [sp, #64]	@ 0x40
 800b30a:	2301      	movs	r3, #1
 800b30c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b30e:	e7b5      	b.n	800b27c <_strtod_l+0x6e4>
 800b310:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b312:	9805      	ldr	r0, [sp, #20]
 800b314:	462a      	mov	r2, r5
 800b316:	f7ff f9c7 	bl	800a6a8 <__lshift>
 800b31a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d1d9      	bne.n	800b2d4 <_strtod_l+0x73c>
 800b320:	e65d      	b.n	800afde <_strtod_l+0x446>
 800b322:	2e00      	cmp	r6, #0
 800b324:	dd07      	ble.n	800b336 <_strtod_l+0x79e>
 800b326:	4649      	mov	r1, r9
 800b328:	9805      	ldr	r0, [sp, #20]
 800b32a:	4632      	mov	r2, r6
 800b32c:	f7ff f9bc 	bl	800a6a8 <__lshift>
 800b330:	4681      	mov	r9, r0
 800b332:	2800      	cmp	r0, #0
 800b334:	d0d8      	beq.n	800b2e8 <_strtod_l+0x750>
 800b336:	2f00      	cmp	r7, #0
 800b338:	dd08      	ble.n	800b34c <_strtod_l+0x7b4>
 800b33a:	4641      	mov	r1, r8
 800b33c:	9805      	ldr	r0, [sp, #20]
 800b33e:	463a      	mov	r2, r7
 800b340:	f7ff f9b2 	bl	800a6a8 <__lshift>
 800b344:	4680      	mov	r8, r0
 800b346:	2800      	cmp	r0, #0
 800b348:	f43f ae49 	beq.w	800afde <_strtod_l+0x446>
 800b34c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b34e:	9805      	ldr	r0, [sp, #20]
 800b350:	464a      	mov	r2, r9
 800b352:	f7ff fa31 	bl	800a7b8 <__mdiff>
 800b356:	4604      	mov	r4, r0
 800b358:	2800      	cmp	r0, #0
 800b35a:	f43f ae40 	beq.w	800afde <_strtod_l+0x446>
 800b35e:	68c3      	ldr	r3, [r0, #12]
 800b360:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b362:	2300      	movs	r3, #0
 800b364:	60c3      	str	r3, [r0, #12]
 800b366:	4641      	mov	r1, r8
 800b368:	f7ff fa0a 	bl	800a780 <__mcmp>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	da45      	bge.n	800b3fc <_strtod_l+0x864>
 800b370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b372:	ea53 030a 	orrs.w	r3, r3, sl
 800b376:	d16b      	bne.n	800b450 <_strtod_l+0x8b8>
 800b378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d167      	bne.n	800b450 <_strtod_l+0x8b8>
 800b380:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b384:	0d1b      	lsrs	r3, r3, #20
 800b386:	051b      	lsls	r3, r3, #20
 800b388:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b38c:	d960      	bls.n	800b450 <_strtod_l+0x8b8>
 800b38e:	6963      	ldr	r3, [r4, #20]
 800b390:	b913      	cbnz	r3, 800b398 <_strtod_l+0x800>
 800b392:	6923      	ldr	r3, [r4, #16]
 800b394:	2b01      	cmp	r3, #1
 800b396:	dd5b      	ble.n	800b450 <_strtod_l+0x8b8>
 800b398:	4621      	mov	r1, r4
 800b39a:	2201      	movs	r2, #1
 800b39c:	9805      	ldr	r0, [sp, #20]
 800b39e:	f7ff f983 	bl	800a6a8 <__lshift>
 800b3a2:	4641      	mov	r1, r8
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	f7ff f9eb 	bl	800a780 <__mcmp>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	dd50      	ble.n	800b450 <_strtod_l+0x8b8>
 800b3ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3b2:	9a08      	ldr	r2, [sp, #32]
 800b3b4:	0d1b      	lsrs	r3, r3, #20
 800b3b6:	051b      	lsls	r3, r3, #20
 800b3b8:	2a00      	cmp	r2, #0
 800b3ba:	d06a      	beq.n	800b492 <_strtod_l+0x8fa>
 800b3bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3c0:	d867      	bhi.n	800b492 <_strtod_l+0x8fa>
 800b3c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b3c6:	f67f ae9d 	bls.w	800b104 <_strtod_l+0x56c>
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f4 <_strtod_l+0x85c>)
 800b3cc:	4650      	mov	r0, sl
 800b3ce:	4659      	mov	r1, fp
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f7f5 f911 	bl	80005f8 <__aeabi_dmul>
 800b3d6:	4b08      	ldr	r3, [pc, #32]	@ (800b3f8 <_strtod_l+0x860>)
 800b3d8:	400b      	ands	r3, r1
 800b3da:	4682      	mov	sl, r0
 800b3dc:	468b      	mov	fp, r1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f47f ae08 	bne.w	800aff4 <_strtod_l+0x45c>
 800b3e4:	9a05      	ldr	r2, [sp, #20]
 800b3e6:	2322      	movs	r3, #34	@ 0x22
 800b3e8:	6013      	str	r3, [r2, #0]
 800b3ea:	e603      	b.n	800aff4 <_strtod_l+0x45c>
 800b3ec:	0800d648 	.word	0x0800d648
 800b3f0:	fffffc02 	.word	0xfffffc02
 800b3f4:	39500000 	.word	0x39500000
 800b3f8:	7ff00000 	.word	0x7ff00000
 800b3fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b400:	d165      	bne.n	800b4ce <_strtod_l+0x936>
 800b402:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b408:	b35a      	cbz	r2, 800b462 <_strtod_l+0x8ca>
 800b40a:	4a9f      	ldr	r2, [pc, #636]	@ (800b688 <_strtod_l+0xaf0>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d12b      	bne.n	800b468 <_strtod_l+0x8d0>
 800b410:	9b08      	ldr	r3, [sp, #32]
 800b412:	4651      	mov	r1, sl
 800b414:	b303      	cbz	r3, 800b458 <_strtod_l+0x8c0>
 800b416:	4b9d      	ldr	r3, [pc, #628]	@ (800b68c <_strtod_l+0xaf4>)
 800b418:	465a      	mov	r2, fp
 800b41a:	4013      	ands	r3, r2
 800b41c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b420:	f04f 32ff 	mov.w	r2, #4294967295
 800b424:	d81b      	bhi.n	800b45e <_strtod_l+0x8c6>
 800b426:	0d1b      	lsrs	r3, r3, #20
 800b428:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b42c:	fa02 f303 	lsl.w	r3, r2, r3
 800b430:	4299      	cmp	r1, r3
 800b432:	d119      	bne.n	800b468 <_strtod_l+0x8d0>
 800b434:	4b96      	ldr	r3, [pc, #600]	@ (800b690 <_strtod_l+0xaf8>)
 800b436:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b438:	429a      	cmp	r2, r3
 800b43a:	d102      	bne.n	800b442 <_strtod_l+0x8aa>
 800b43c:	3101      	adds	r1, #1
 800b43e:	f43f adce 	beq.w	800afde <_strtod_l+0x446>
 800b442:	4b92      	ldr	r3, [pc, #584]	@ (800b68c <_strtod_l+0xaf4>)
 800b444:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b446:	401a      	ands	r2, r3
 800b448:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b44c:	f04f 0a00 	mov.w	sl, #0
 800b450:	9b08      	ldr	r3, [sp, #32]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1b9      	bne.n	800b3ca <_strtod_l+0x832>
 800b456:	e5cd      	b.n	800aff4 <_strtod_l+0x45c>
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	e7e8      	b.n	800b430 <_strtod_l+0x898>
 800b45e:	4613      	mov	r3, r2
 800b460:	e7e6      	b.n	800b430 <_strtod_l+0x898>
 800b462:	ea53 030a 	orrs.w	r3, r3, sl
 800b466:	d0a2      	beq.n	800b3ae <_strtod_l+0x816>
 800b468:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b46a:	b1db      	cbz	r3, 800b4a4 <_strtod_l+0x90c>
 800b46c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b46e:	4213      	tst	r3, r2
 800b470:	d0ee      	beq.n	800b450 <_strtod_l+0x8b8>
 800b472:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b474:	9a08      	ldr	r2, [sp, #32]
 800b476:	4650      	mov	r0, sl
 800b478:	4659      	mov	r1, fp
 800b47a:	b1bb      	cbz	r3, 800b4ac <_strtod_l+0x914>
 800b47c:	f7ff fb6e 	bl	800ab5c <sulp>
 800b480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b484:	ec53 2b10 	vmov	r2, r3, d0
 800b488:	f7f4 ff00 	bl	800028c <__adddf3>
 800b48c:	4682      	mov	sl, r0
 800b48e:	468b      	mov	fp, r1
 800b490:	e7de      	b.n	800b450 <_strtod_l+0x8b8>
 800b492:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b496:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b49a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b49e:	f04f 3aff 	mov.w	sl, #4294967295
 800b4a2:	e7d5      	b.n	800b450 <_strtod_l+0x8b8>
 800b4a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4a6:	ea13 0f0a 	tst.w	r3, sl
 800b4aa:	e7e1      	b.n	800b470 <_strtod_l+0x8d8>
 800b4ac:	f7ff fb56 	bl	800ab5c <sulp>
 800b4b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4b4:	ec53 2b10 	vmov	r2, r3, d0
 800b4b8:	f7f4 fee6 	bl	8000288 <__aeabi_dsub>
 800b4bc:	2200      	movs	r2, #0
 800b4be:	2300      	movs	r3, #0
 800b4c0:	4682      	mov	sl, r0
 800b4c2:	468b      	mov	fp, r1
 800b4c4:	f7f5 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d0c1      	beq.n	800b450 <_strtod_l+0x8b8>
 800b4cc:	e61a      	b.n	800b104 <_strtod_l+0x56c>
 800b4ce:	4641      	mov	r1, r8
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f7ff facd 	bl	800aa70 <__ratio>
 800b4d6:	ec57 6b10 	vmov	r6, r7, d0
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	f7f5 fb04 	bl	8000af0 <__aeabi_dcmple>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d06f      	beq.n	800b5cc <_strtod_l+0xa34>
 800b4ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d17a      	bne.n	800b5e8 <_strtod_l+0xa50>
 800b4f2:	f1ba 0f00 	cmp.w	sl, #0
 800b4f6:	d158      	bne.n	800b5aa <_strtod_l+0xa12>
 800b4f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d15a      	bne.n	800b5b8 <_strtod_l+0xa20>
 800b502:	4b64      	ldr	r3, [pc, #400]	@ (800b694 <_strtod_l+0xafc>)
 800b504:	2200      	movs	r2, #0
 800b506:	4630      	mov	r0, r6
 800b508:	4639      	mov	r1, r7
 800b50a:	f7f5 fae7 	bl	8000adc <__aeabi_dcmplt>
 800b50e:	2800      	cmp	r0, #0
 800b510:	d159      	bne.n	800b5c6 <_strtod_l+0xa2e>
 800b512:	4630      	mov	r0, r6
 800b514:	4639      	mov	r1, r7
 800b516:	4b60      	ldr	r3, [pc, #384]	@ (800b698 <_strtod_l+0xb00>)
 800b518:	2200      	movs	r2, #0
 800b51a:	f7f5 f86d 	bl	80005f8 <__aeabi_dmul>
 800b51e:	4606      	mov	r6, r0
 800b520:	460f      	mov	r7, r1
 800b522:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b526:	9606      	str	r6, [sp, #24]
 800b528:	9307      	str	r3, [sp, #28]
 800b52a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b52e:	4d57      	ldr	r5, [pc, #348]	@ (800b68c <_strtod_l+0xaf4>)
 800b530:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b536:	401d      	ands	r5, r3
 800b538:	4b58      	ldr	r3, [pc, #352]	@ (800b69c <_strtod_l+0xb04>)
 800b53a:	429d      	cmp	r5, r3
 800b53c:	f040 80b2 	bne.w	800b6a4 <_strtod_l+0xb0c>
 800b540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b542:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b546:	ec4b ab10 	vmov	d0, sl, fp
 800b54a:	f7ff f9c9 	bl	800a8e0 <__ulp>
 800b54e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b552:	ec51 0b10 	vmov	r0, r1, d0
 800b556:	f7f5 f84f 	bl	80005f8 <__aeabi_dmul>
 800b55a:	4652      	mov	r2, sl
 800b55c:	465b      	mov	r3, fp
 800b55e:	f7f4 fe95 	bl	800028c <__adddf3>
 800b562:	460b      	mov	r3, r1
 800b564:	4949      	ldr	r1, [pc, #292]	@ (800b68c <_strtod_l+0xaf4>)
 800b566:	4a4e      	ldr	r2, [pc, #312]	@ (800b6a0 <_strtod_l+0xb08>)
 800b568:	4019      	ands	r1, r3
 800b56a:	4291      	cmp	r1, r2
 800b56c:	4682      	mov	sl, r0
 800b56e:	d942      	bls.n	800b5f6 <_strtod_l+0xa5e>
 800b570:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b572:	4b47      	ldr	r3, [pc, #284]	@ (800b690 <_strtod_l+0xaf8>)
 800b574:	429a      	cmp	r2, r3
 800b576:	d103      	bne.n	800b580 <_strtod_l+0x9e8>
 800b578:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b57a:	3301      	adds	r3, #1
 800b57c:	f43f ad2f 	beq.w	800afde <_strtod_l+0x446>
 800b580:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b690 <_strtod_l+0xaf8>
 800b584:	f04f 3aff 	mov.w	sl, #4294967295
 800b588:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b58a:	9805      	ldr	r0, [sp, #20]
 800b58c:	f7fe fe7c 	bl	800a288 <_Bfree>
 800b590:	9805      	ldr	r0, [sp, #20]
 800b592:	4649      	mov	r1, r9
 800b594:	f7fe fe78 	bl	800a288 <_Bfree>
 800b598:	9805      	ldr	r0, [sp, #20]
 800b59a:	4641      	mov	r1, r8
 800b59c:	f7fe fe74 	bl	800a288 <_Bfree>
 800b5a0:	9805      	ldr	r0, [sp, #20]
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	f7fe fe70 	bl	800a288 <_Bfree>
 800b5a8:	e619      	b.n	800b1de <_strtod_l+0x646>
 800b5aa:	f1ba 0f01 	cmp.w	sl, #1
 800b5ae:	d103      	bne.n	800b5b8 <_strtod_l+0xa20>
 800b5b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f43f ada6 	beq.w	800b104 <_strtod_l+0x56c>
 800b5b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b668 <_strtod_l+0xad0>
 800b5bc:	4f35      	ldr	r7, [pc, #212]	@ (800b694 <_strtod_l+0xafc>)
 800b5be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5c2:	2600      	movs	r6, #0
 800b5c4:	e7b1      	b.n	800b52a <_strtod_l+0x992>
 800b5c6:	4f34      	ldr	r7, [pc, #208]	@ (800b698 <_strtod_l+0xb00>)
 800b5c8:	2600      	movs	r6, #0
 800b5ca:	e7aa      	b.n	800b522 <_strtod_l+0x98a>
 800b5cc:	4b32      	ldr	r3, [pc, #200]	@ (800b698 <_strtod_l+0xb00>)
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	4639      	mov	r1, r7
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f7f5 f810 	bl	80005f8 <__aeabi_dmul>
 800b5d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5da:	4606      	mov	r6, r0
 800b5dc:	460f      	mov	r7, r1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d09f      	beq.n	800b522 <_strtod_l+0x98a>
 800b5e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b5e6:	e7a0      	b.n	800b52a <_strtod_l+0x992>
 800b5e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b670 <_strtod_l+0xad8>
 800b5ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5f0:	ec57 6b17 	vmov	r6, r7, d7
 800b5f4:	e799      	b.n	800b52a <_strtod_l+0x992>
 800b5f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b5fa:	9b08      	ldr	r3, [sp, #32]
 800b5fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1c1      	bne.n	800b588 <_strtod_l+0x9f0>
 800b604:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b608:	0d1b      	lsrs	r3, r3, #20
 800b60a:	051b      	lsls	r3, r3, #20
 800b60c:	429d      	cmp	r5, r3
 800b60e:	d1bb      	bne.n	800b588 <_strtod_l+0x9f0>
 800b610:	4630      	mov	r0, r6
 800b612:	4639      	mov	r1, r7
 800b614:	f7f5 fb50 	bl	8000cb8 <__aeabi_d2lz>
 800b618:	f7f4 ffc0 	bl	800059c <__aeabi_l2d>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	4630      	mov	r0, r6
 800b622:	4639      	mov	r1, r7
 800b624:	f7f4 fe30 	bl	8000288 <__aeabi_dsub>
 800b628:	460b      	mov	r3, r1
 800b62a:	4602      	mov	r2, r0
 800b62c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b630:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b636:	ea46 060a 	orr.w	r6, r6, sl
 800b63a:	431e      	orrs	r6, r3
 800b63c:	d06f      	beq.n	800b71e <_strtod_l+0xb86>
 800b63e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b678 <_strtod_l+0xae0>)
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	f7f5 fa4a 	bl	8000adc <__aeabi_dcmplt>
 800b648:	2800      	cmp	r0, #0
 800b64a:	f47f acd3 	bne.w	800aff4 <_strtod_l+0x45c>
 800b64e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b680 <_strtod_l+0xae8>)
 800b650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b658:	f7f5 fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d093      	beq.n	800b588 <_strtod_l+0x9f0>
 800b660:	e4c8      	b.n	800aff4 <_strtod_l+0x45c>
 800b662:	bf00      	nop
 800b664:	f3af 8000 	nop.w
 800b668:	00000000 	.word	0x00000000
 800b66c:	bff00000 	.word	0xbff00000
 800b670:	00000000 	.word	0x00000000
 800b674:	3ff00000 	.word	0x3ff00000
 800b678:	94a03595 	.word	0x94a03595
 800b67c:	3fdfffff 	.word	0x3fdfffff
 800b680:	35afe535 	.word	0x35afe535
 800b684:	3fe00000 	.word	0x3fe00000
 800b688:	000fffff 	.word	0x000fffff
 800b68c:	7ff00000 	.word	0x7ff00000
 800b690:	7fefffff 	.word	0x7fefffff
 800b694:	3ff00000 	.word	0x3ff00000
 800b698:	3fe00000 	.word	0x3fe00000
 800b69c:	7fe00000 	.word	0x7fe00000
 800b6a0:	7c9fffff 	.word	0x7c9fffff
 800b6a4:	9b08      	ldr	r3, [sp, #32]
 800b6a6:	b323      	cbz	r3, 800b6f2 <_strtod_l+0xb5a>
 800b6a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b6ac:	d821      	bhi.n	800b6f2 <_strtod_l+0xb5a>
 800b6ae:	a328      	add	r3, pc, #160	@ (adr r3, 800b750 <_strtod_l+0xbb8>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	f7f5 fa1a 	bl	8000af0 <__aeabi_dcmple>
 800b6bc:	b1a0      	cbz	r0, 800b6e8 <_strtod_l+0xb50>
 800b6be:	4639      	mov	r1, r7
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7f5 fa71 	bl	8000ba8 <__aeabi_d2uiz>
 800b6c6:	2801      	cmp	r0, #1
 800b6c8:	bf38      	it	cc
 800b6ca:	2001      	movcc	r0, #1
 800b6cc:	f7f4 ff1a 	bl	8000504 <__aeabi_ui2d>
 800b6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	460f      	mov	r7, r1
 800b6d6:	b9fb      	cbnz	r3, 800b718 <_strtod_l+0xb80>
 800b6d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b6de:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b6e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b6ee:	1b5b      	subs	r3, r3, r5
 800b6f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b6f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b6f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b6fa:	f7ff f8f1 	bl	800a8e0 <__ulp>
 800b6fe:	4650      	mov	r0, sl
 800b700:	ec53 2b10 	vmov	r2, r3, d0
 800b704:	4659      	mov	r1, fp
 800b706:	f7f4 ff77 	bl	80005f8 <__aeabi_dmul>
 800b70a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b70e:	f7f4 fdbd 	bl	800028c <__adddf3>
 800b712:	4682      	mov	sl, r0
 800b714:	468b      	mov	fp, r1
 800b716:	e770      	b.n	800b5fa <_strtod_l+0xa62>
 800b718:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b71c:	e7e0      	b.n	800b6e0 <_strtod_l+0xb48>
 800b71e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b758 <_strtod_l+0xbc0>)
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f7f5 f9da 	bl	8000adc <__aeabi_dcmplt>
 800b728:	e798      	b.n	800b65c <_strtod_l+0xac4>
 800b72a:	2300      	movs	r3, #0
 800b72c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b72e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b730:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	f7ff ba6d 	b.w	800ac12 <_strtod_l+0x7a>
 800b738:	2a65      	cmp	r2, #101	@ 0x65
 800b73a:	f43f ab68 	beq.w	800ae0e <_strtod_l+0x276>
 800b73e:	2a45      	cmp	r2, #69	@ 0x45
 800b740:	f43f ab65 	beq.w	800ae0e <_strtod_l+0x276>
 800b744:	2301      	movs	r3, #1
 800b746:	f7ff bba0 	b.w	800ae8a <_strtod_l+0x2f2>
 800b74a:	bf00      	nop
 800b74c:	f3af 8000 	nop.w
 800b750:	ffc00000 	.word	0xffc00000
 800b754:	41dfffff 	.word	0x41dfffff
 800b758:	94a03595 	.word	0x94a03595
 800b75c:	3fcfffff 	.word	0x3fcfffff

0800b760 <_strtod_r>:
 800b760:	4b01      	ldr	r3, [pc, #4]	@ (800b768 <_strtod_r+0x8>)
 800b762:	f7ff ba19 	b.w	800ab98 <_strtod_l>
 800b766:	bf00      	nop
 800b768:	200000b0 	.word	0x200000b0

0800b76c <_strtol_l.isra.0>:
 800b76c:	2b24      	cmp	r3, #36	@ 0x24
 800b76e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b772:	4686      	mov	lr, r0
 800b774:	4690      	mov	r8, r2
 800b776:	d801      	bhi.n	800b77c <_strtol_l.isra.0+0x10>
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d106      	bne.n	800b78a <_strtol_l.isra.0+0x1e>
 800b77c:	f7fd fd8c 	bl	8009298 <__errno>
 800b780:	2316      	movs	r3, #22
 800b782:	6003      	str	r3, [r0, #0]
 800b784:	2000      	movs	r0, #0
 800b786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b78a:	4834      	ldr	r0, [pc, #208]	@ (800b85c <_strtol_l.isra.0+0xf0>)
 800b78c:	460d      	mov	r5, r1
 800b78e:	462a      	mov	r2, r5
 800b790:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b794:	5d06      	ldrb	r6, [r0, r4]
 800b796:	f016 0608 	ands.w	r6, r6, #8
 800b79a:	d1f8      	bne.n	800b78e <_strtol_l.isra.0+0x22>
 800b79c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b79e:	d110      	bne.n	800b7c2 <_strtol_l.isra.0+0x56>
 800b7a0:	782c      	ldrb	r4, [r5, #0]
 800b7a2:	2601      	movs	r6, #1
 800b7a4:	1c95      	adds	r5, r2, #2
 800b7a6:	f033 0210 	bics.w	r2, r3, #16
 800b7aa:	d115      	bne.n	800b7d8 <_strtol_l.isra.0+0x6c>
 800b7ac:	2c30      	cmp	r4, #48	@ 0x30
 800b7ae:	d10d      	bne.n	800b7cc <_strtol_l.isra.0+0x60>
 800b7b0:	782a      	ldrb	r2, [r5, #0]
 800b7b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b7b6:	2a58      	cmp	r2, #88	@ 0x58
 800b7b8:	d108      	bne.n	800b7cc <_strtol_l.isra.0+0x60>
 800b7ba:	786c      	ldrb	r4, [r5, #1]
 800b7bc:	3502      	adds	r5, #2
 800b7be:	2310      	movs	r3, #16
 800b7c0:	e00a      	b.n	800b7d8 <_strtol_l.isra.0+0x6c>
 800b7c2:	2c2b      	cmp	r4, #43	@ 0x2b
 800b7c4:	bf04      	itt	eq
 800b7c6:	782c      	ldrbeq	r4, [r5, #0]
 800b7c8:	1c95      	addeq	r5, r2, #2
 800b7ca:	e7ec      	b.n	800b7a6 <_strtol_l.isra.0+0x3a>
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1f6      	bne.n	800b7be <_strtol_l.isra.0+0x52>
 800b7d0:	2c30      	cmp	r4, #48	@ 0x30
 800b7d2:	bf14      	ite	ne
 800b7d4:	230a      	movne	r3, #10
 800b7d6:	2308      	moveq	r3, #8
 800b7d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b7dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	fbbc f9f3 	udiv	r9, ip, r3
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b7ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b7f0:	2f09      	cmp	r7, #9
 800b7f2:	d80f      	bhi.n	800b814 <_strtol_l.isra.0+0xa8>
 800b7f4:	463c      	mov	r4, r7
 800b7f6:	42a3      	cmp	r3, r4
 800b7f8:	dd1b      	ble.n	800b832 <_strtol_l.isra.0+0xc6>
 800b7fa:	1c57      	adds	r7, r2, #1
 800b7fc:	d007      	beq.n	800b80e <_strtol_l.isra.0+0xa2>
 800b7fe:	4581      	cmp	r9, r0
 800b800:	d314      	bcc.n	800b82c <_strtol_l.isra.0+0xc0>
 800b802:	d101      	bne.n	800b808 <_strtol_l.isra.0+0x9c>
 800b804:	45a2      	cmp	sl, r4
 800b806:	db11      	blt.n	800b82c <_strtol_l.isra.0+0xc0>
 800b808:	fb00 4003 	mla	r0, r0, r3, r4
 800b80c:	2201      	movs	r2, #1
 800b80e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b812:	e7eb      	b.n	800b7ec <_strtol_l.isra.0+0x80>
 800b814:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b818:	2f19      	cmp	r7, #25
 800b81a:	d801      	bhi.n	800b820 <_strtol_l.isra.0+0xb4>
 800b81c:	3c37      	subs	r4, #55	@ 0x37
 800b81e:	e7ea      	b.n	800b7f6 <_strtol_l.isra.0+0x8a>
 800b820:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b824:	2f19      	cmp	r7, #25
 800b826:	d804      	bhi.n	800b832 <_strtol_l.isra.0+0xc6>
 800b828:	3c57      	subs	r4, #87	@ 0x57
 800b82a:	e7e4      	b.n	800b7f6 <_strtol_l.isra.0+0x8a>
 800b82c:	f04f 32ff 	mov.w	r2, #4294967295
 800b830:	e7ed      	b.n	800b80e <_strtol_l.isra.0+0xa2>
 800b832:	1c53      	adds	r3, r2, #1
 800b834:	d108      	bne.n	800b848 <_strtol_l.isra.0+0xdc>
 800b836:	2322      	movs	r3, #34	@ 0x22
 800b838:	f8ce 3000 	str.w	r3, [lr]
 800b83c:	4660      	mov	r0, ip
 800b83e:	f1b8 0f00 	cmp.w	r8, #0
 800b842:	d0a0      	beq.n	800b786 <_strtol_l.isra.0+0x1a>
 800b844:	1e69      	subs	r1, r5, #1
 800b846:	e006      	b.n	800b856 <_strtol_l.isra.0+0xea>
 800b848:	b106      	cbz	r6, 800b84c <_strtol_l.isra.0+0xe0>
 800b84a:	4240      	negs	r0, r0
 800b84c:	f1b8 0f00 	cmp.w	r8, #0
 800b850:	d099      	beq.n	800b786 <_strtol_l.isra.0+0x1a>
 800b852:	2a00      	cmp	r2, #0
 800b854:	d1f6      	bne.n	800b844 <_strtol_l.isra.0+0xd8>
 800b856:	f8c8 1000 	str.w	r1, [r8]
 800b85a:	e794      	b.n	800b786 <_strtol_l.isra.0+0x1a>
 800b85c:	0800d671 	.word	0x0800d671

0800b860 <_strtol_r>:
 800b860:	f7ff bf84 	b.w	800b76c <_strtol_l.isra.0>

0800b864 <__ssputs_r>:
 800b864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b868:	688e      	ldr	r6, [r1, #8]
 800b86a:	461f      	mov	r7, r3
 800b86c:	42be      	cmp	r6, r7
 800b86e:	680b      	ldr	r3, [r1, #0]
 800b870:	4682      	mov	sl, r0
 800b872:	460c      	mov	r4, r1
 800b874:	4690      	mov	r8, r2
 800b876:	d82d      	bhi.n	800b8d4 <__ssputs_r+0x70>
 800b878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b87c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b880:	d026      	beq.n	800b8d0 <__ssputs_r+0x6c>
 800b882:	6965      	ldr	r5, [r4, #20]
 800b884:	6909      	ldr	r1, [r1, #16]
 800b886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b88a:	eba3 0901 	sub.w	r9, r3, r1
 800b88e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b892:	1c7b      	adds	r3, r7, #1
 800b894:	444b      	add	r3, r9
 800b896:	106d      	asrs	r5, r5, #1
 800b898:	429d      	cmp	r5, r3
 800b89a:	bf38      	it	cc
 800b89c:	461d      	movcc	r5, r3
 800b89e:	0553      	lsls	r3, r2, #21
 800b8a0:	d527      	bpl.n	800b8f2 <__ssputs_r+0x8e>
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	f7fe fc24 	bl	800a0f0 <_malloc_r>
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	b360      	cbz	r0, 800b906 <__ssputs_r+0xa2>
 800b8ac:	6921      	ldr	r1, [r4, #16]
 800b8ae:	464a      	mov	r2, r9
 800b8b0:	f7fd fd1f 	bl	80092f2 <memcpy>
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8be:	81a3      	strh	r3, [r4, #12]
 800b8c0:	6126      	str	r6, [r4, #16]
 800b8c2:	6165      	str	r5, [r4, #20]
 800b8c4:	444e      	add	r6, r9
 800b8c6:	eba5 0509 	sub.w	r5, r5, r9
 800b8ca:	6026      	str	r6, [r4, #0]
 800b8cc:	60a5      	str	r5, [r4, #8]
 800b8ce:	463e      	mov	r6, r7
 800b8d0:	42be      	cmp	r6, r7
 800b8d2:	d900      	bls.n	800b8d6 <__ssputs_r+0x72>
 800b8d4:	463e      	mov	r6, r7
 800b8d6:	6820      	ldr	r0, [r4, #0]
 800b8d8:	4632      	mov	r2, r6
 800b8da:	4641      	mov	r1, r8
 800b8dc:	f000 fb7c 	bl	800bfd8 <memmove>
 800b8e0:	68a3      	ldr	r3, [r4, #8]
 800b8e2:	1b9b      	subs	r3, r3, r6
 800b8e4:	60a3      	str	r3, [r4, #8]
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	4433      	add	r3, r6
 800b8ea:	6023      	str	r3, [r4, #0]
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f2:	462a      	mov	r2, r5
 800b8f4:	f000 ff29 	bl	800c74a <_realloc_r>
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	d1e0      	bne.n	800b8c0 <__ssputs_r+0x5c>
 800b8fe:	6921      	ldr	r1, [r4, #16]
 800b900:	4650      	mov	r0, sl
 800b902:	f7fe fb81 	bl	800a008 <_free_r>
 800b906:	230c      	movs	r3, #12
 800b908:	f8ca 3000 	str.w	r3, [sl]
 800b90c:	89a3      	ldrh	r3, [r4, #12]
 800b90e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b912:	81a3      	strh	r3, [r4, #12]
 800b914:	f04f 30ff 	mov.w	r0, #4294967295
 800b918:	e7e9      	b.n	800b8ee <__ssputs_r+0x8a>
	...

0800b91c <_svfiprintf_r>:
 800b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b920:	4698      	mov	r8, r3
 800b922:	898b      	ldrh	r3, [r1, #12]
 800b924:	061b      	lsls	r3, r3, #24
 800b926:	b09d      	sub	sp, #116	@ 0x74
 800b928:	4607      	mov	r7, r0
 800b92a:	460d      	mov	r5, r1
 800b92c:	4614      	mov	r4, r2
 800b92e:	d510      	bpl.n	800b952 <_svfiprintf_r+0x36>
 800b930:	690b      	ldr	r3, [r1, #16]
 800b932:	b973      	cbnz	r3, 800b952 <_svfiprintf_r+0x36>
 800b934:	2140      	movs	r1, #64	@ 0x40
 800b936:	f7fe fbdb 	bl	800a0f0 <_malloc_r>
 800b93a:	6028      	str	r0, [r5, #0]
 800b93c:	6128      	str	r0, [r5, #16]
 800b93e:	b930      	cbnz	r0, 800b94e <_svfiprintf_r+0x32>
 800b940:	230c      	movs	r3, #12
 800b942:	603b      	str	r3, [r7, #0]
 800b944:	f04f 30ff 	mov.w	r0, #4294967295
 800b948:	b01d      	add	sp, #116	@ 0x74
 800b94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94e:	2340      	movs	r3, #64	@ 0x40
 800b950:	616b      	str	r3, [r5, #20]
 800b952:	2300      	movs	r3, #0
 800b954:	9309      	str	r3, [sp, #36]	@ 0x24
 800b956:	2320      	movs	r3, #32
 800b958:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b95c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b960:	2330      	movs	r3, #48	@ 0x30
 800b962:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb00 <_svfiprintf_r+0x1e4>
 800b966:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b96a:	f04f 0901 	mov.w	r9, #1
 800b96e:	4623      	mov	r3, r4
 800b970:	469a      	mov	sl, r3
 800b972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b976:	b10a      	cbz	r2, 800b97c <_svfiprintf_r+0x60>
 800b978:	2a25      	cmp	r2, #37	@ 0x25
 800b97a:	d1f9      	bne.n	800b970 <_svfiprintf_r+0x54>
 800b97c:	ebba 0b04 	subs.w	fp, sl, r4
 800b980:	d00b      	beq.n	800b99a <_svfiprintf_r+0x7e>
 800b982:	465b      	mov	r3, fp
 800b984:	4622      	mov	r2, r4
 800b986:	4629      	mov	r1, r5
 800b988:	4638      	mov	r0, r7
 800b98a:	f7ff ff6b 	bl	800b864 <__ssputs_r>
 800b98e:	3001      	adds	r0, #1
 800b990:	f000 80a7 	beq.w	800bae2 <_svfiprintf_r+0x1c6>
 800b994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b996:	445a      	add	r2, fp
 800b998:	9209      	str	r2, [sp, #36]	@ 0x24
 800b99a:	f89a 3000 	ldrb.w	r3, [sl]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 809f 	beq.w	800bae2 <_svfiprintf_r+0x1c6>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9ae:	f10a 0a01 	add.w	sl, sl, #1
 800b9b2:	9304      	str	r3, [sp, #16]
 800b9b4:	9307      	str	r3, [sp, #28]
 800b9b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9bc:	4654      	mov	r4, sl
 800b9be:	2205      	movs	r2, #5
 800b9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c4:	484e      	ldr	r0, [pc, #312]	@ (800bb00 <_svfiprintf_r+0x1e4>)
 800b9c6:	f7f4 fc03 	bl	80001d0 <memchr>
 800b9ca:	9a04      	ldr	r2, [sp, #16]
 800b9cc:	b9d8      	cbnz	r0, 800ba06 <_svfiprintf_r+0xea>
 800b9ce:	06d0      	lsls	r0, r2, #27
 800b9d0:	bf44      	itt	mi
 800b9d2:	2320      	movmi	r3, #32
 800b9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9d8:	0711      	lsls	r1, r2, #28
 800b9da:	bf44      	itt	mi
 800b9dc:	232b      	movmi	r3, #43	@ 0x2b
 800b9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9e8:	d015      	beq.n	800ba16 <_svfiprintf_r+0xfa>
 800b9ea:	9a07      	ldr	r2, [sp, #28]
 800b9ec:	4654      	mov	r4, sl
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	f04f 0c0a 	mov.w	ip, #10
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9fa:	3b30      	subs	r3, #48	@ 0x30
 800b9fc:	2b09      	cmp	r3, #9
 800b9fe:	d94b      	bls.n	800ba98 <_svfiprintf_r+0x17c>
 800ba00:	b1b0      	cbz	r0, 800ba30 <_svfiprintf_r+0x114>
 800ba02:	9207      	str	r2, [sp, #28]
 800ba04:	e014      	b.n	800ba30 <_svfiprintf_r+0x114>
 800ba06:	eba0 0308 	sub.w	r3, r0, r8
 800ba0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	46a2      	mov	sl, r4
 800ba14:	e7d2      	b.n	800b9bc <_svfiprintf_r+0xa0>
 800ba16:	9b03      	ldr	r3, [sp, #12]
 800ba18:	1d19      	adds	r1, r3, #4
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	9103      	str	r1, [sp, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	bfbb      	ittet	lt
 800ba22:	425b      	neglt	r3, r3
 800ba24:	f042 0202 	orrlt.w	r2, r2, #2
 800ba28:	9307      	strge	r3, [sp, #28]
 800ba2a:	9307      	strlt	r3, [sp, #28]
 800ba2c:	bfb8      	it	lt
 800ba2e:	9204      	strlt	r2, [sp, #16]
 800ba30:	7823      	ldrb	r3, [r4, #0]
 800ba32:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba34:	d10a      	bne.n	800ba4c <_svfiprintf_r+0x130>
 800ba36:	7863      	ldrb	r3, [r4, #1]
 800ba38:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba3a:	d132      	bne.n	800baa2 <_svfiprintf_r+0x186>
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	1d1a      	adds	r2, r3, #4
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	9203      	str	r2, [sp, #12]
 800ba44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba48:	3402      	adds	r4, #2
 800ba4a:	9305      	str	r3, [sp, #20]
 800ba4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb10 <_svfiprintf_r+0x1f4>
 800ba50:	7821      	ldrb	r1, [r4, #0]
 800ba52:	2203      	movs	r2, #3
 800ba54:	4650      	mov	r0, sl
 800ba56:	f7f4 fbbb 	bl	80001d0 <memchr>
 800ba5a:	b138      	cbz	r0, 800ba6c <_svfiprintf_r+0x150>
 800ba5c:	9b04      	ldr	r3, [sp, #16]
 800ba5e:	eba0 000a 	sub.w	r0, r0, sl
 800ba62:	2240      	movs	r2, #64	@ 0x40
 800ba64:	4082      	lsls	r2, r0
 800ba66:	4313      	orrs	r3, r2
 800ba68:	3401      	adds	r4, #1
 800ba6a:	9304      	str	r3, [sp, #16]
 800ba6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba70:	4824      	ldr	r0, [pc, #144]	@ (800bb04 <_svfiprintf_r+0x1e8>)
 800ba72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba76:	2206      	movs	r2, #6
 800ba78:	f7f4 fbaa 	bl	80001d0 <memchr>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d036      	beq.n	800baee <_svfiprintf_r+0x1d2>
 800ba80:	4b21      	ldr	r3, [pc, #132]	@ (800bb08 <_svfiprintf_r+0x1ec>)
 800ba82:	bb1b      	cbnz	r3, 800bacc <_svfiprintf_r+0x1b0>
 800ba84:	9b03      	ldr	r3, [sp, #12]
 800ba86:	3307      	adds	r3, #7
 800ba88:	f023 0307 	bic.w	r3, r3, #7
 800ba8c:	3308      	adds	r3, #8
 800ba8e:	9303      	str	r3, [sp, #12]
 800ba90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba92:	4433      	add	r3, r6
 800ba94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba96:	e76a      	b.n	800b96e <_svfiprintf_r+0x52>
 800ba98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	2001      	movs	r0, #1
 800baa0:	e7a8      	b.n	800b9f4 <_svfiprintf_r+0xd8>
 800baa2:	2300      	movs	r3, #0
 800baa4:	3401      	adds	r4, #1
 800baa6:	9305      	str	r3, [sp, #20]
 800baa8:	4619      	mov	r1, r3
 800baaa:	f04f 0c0a 	mov.w	ip, #10
 800baae:	4620      	mov	r0, r4
 800bab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bab4:	3a30      	subs	r2, #48	@ 0x30
 800bab6:	2a09      	cmp	r2, #9
 800bab8:	d903      	bls.n	800bac2 <_svfiprintf_r+0x1a6>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0c6      	beq.n	800ba4c <_svfiprintf_r+0x130>
 800babe:	9105      	str	r1, [sp, #20]
 800bac0:	e7c4      	b.n	800ba4c <_svfiprintf_r+0x130>
 800bac2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bac6:	4604      	mov	r4, r0
 800bac8:	2301      	movs	r3, #1
 800baca:	e7f0      	b.n	800baae <_svfiprintf_r+0x192>
 800bacc:	ab03      	add	r3, sp, #12
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	462a      	mov	r2, r5
 800bad2:	4b0e      	ldr	r3, [pc, #56]	@ (800bb0c <_svfiprintf_r+0x1f0>)
 800bad4:	a904      	add	r1, sp, #16
 800bad6:	4638      	mov	r0, r7
 800bad8:	f7fc face 	bl	8008078 <_printf_float>
 800badc:	1c42      	adds	r2, r0, #1
 800bade:	4606      	mov	r6, r0
 800bae0:	d1d6      	bne.n	800ba90 <_svfiprintf_r+0x174>
 800bae2:	89ab      	ldrh	r3, [r5, #12]
 800bae4:	065b      	lsls	r3, r3, #25
 800bae6:	f53f af2d 	bmi.w	800b944 <_svfiprintf_r+0x28>
 800baea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800baec:	e72c      	b.n	800b948 <_svfiprintf_r+0x2c>
 800baee:	ab03      	add	r3, sp, #12
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	462a      	mov	r2, r5
 800baf4:	4b05      	ldr	r3, [pc, #20]	@ (800bb0c <_svfiprintf_r+0x1f0>)
 800baf6:	a904      	add	r1, sp, #16
 800baf8:	4638      	mov	r0, r7
 800bafa:	f7fc fd55 	bl	80085a8 <_printf_i>
 800bafe:	e7ed      	b.n	800badc <_svfiprintf_r+0x1c0>
 800bb00:	0800d4ab 	.word	0x0800d4ab
 800bb04:	0800d4b5 	.word	0x0800d4b5
 800bb08:	08008079 	.word	0x08008079
 800bb0c:	0800b865 	.word	0x0800b865
 800bb10:	0800d4b1 	.word	0x0800d4b1

0800bb14 <__sfputc_r>:
 800bb14:	6893      	ldr	r3, [r2, #8]
 800bb16:	3b01      	subs	r3, #1
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	b410      	push	{r4}
 800bb1c:	6093      	str	r3, [r2, #8]
 800bb1e:	da08      	bge.n	800bb32 <__sfputc_r+0x1e>
 800bb20:	6994      	ldr	r4, [r2, #24]
 800bb22:	42a3      	cmp	r3, r4
 800bb24:	db01      	blt.n	800bb2a <__sfputc_r+0x16>
 800bb26:	290a      	cmp	r1, #10
 800bb28:	d103      	bne.n	800bb32 <__sfputc_r+0x1e>
 800bb2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb2e:	f7fd ba34 	b.w	8008f9a <__swbuf_r>
 800bb32:	6813      	ldr	r3, [r2, #0]
 800bb34:	1c58      	adds	r0, r3, #1
 800bb36:	6010      	str	r0, [r2, #0]
 800bb38:	7019      	strb	r1, [r3, #0]
 800bb3a:	4608      	mov	r0, r1
 800bb3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <__sfputs_r>:
 800bb42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb44:	4606      	mov	r6, r0
 800bb46:	460f      	mov	r7, r1
 800bb48:	4614      	mov	r4, r2
 800bb4a:	18d5      	adds	r5, r2, r3
 800bb4c:	42ac      	cmp	r4, r5
 800bb4e:	d101      	bne.n	800bb54 <__sfputs_r+0x12>
 800bb50:	2000      	movs	r0, #0
 800bb52:	e007      	b.n	800bb64 <__sfputs_r+0x22>
 800bb54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb58:	463a      	mov	r2, r7
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7ff ffda 	bl	800bb14 <__sfputc_r>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d1f3      	bne.n	800bb4c <__sfputs_r+0xa>
 800bb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb68 <_vfiprintf_r>:
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	460d      	mov	r5, r1
 800bb6e:	b09d      	sub	sp, #116	@ 0x74
 800bb70:	4614      	mov	r4, r2
 800bb72:	4698      	mov	r8, r3
 800bb74:	4606      	mov	r6, r0
 800bb76:	b118      	cbz	r0, 800bb80 <_vfiprintf_r+0x18>
 800bb78:	6a03      	ldr	r3, [r0, #32]
 800bb7a:	b90b      	cbnz	r3, 800bb80 <_vfiprintf_r+0x18>
 800bb7c:	f7fd f8cc 	bl	8008d18 <__sinit>
 800bb80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb82:	07d9      	lsls	r1, r3, #31
 800bb84:	d405      	bmi.n	800bb92 <_vfiprintf_r+0x2a>
 800bb86:	89ab      	ldrh	r3, [r5, #12]
 800bb88:	059a      	lsls	r2, r3, #22
 800bb8a:	d402      	bmi.n	800bb92 <_vfiprintf_r+0x2a>
 800bb8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb8e:	f7fd fbae 	bl	80092ee <__retarget_lock_acquire_recursive>
 800bb92:	89ab      	ldrh	r3, [r5, #12]
 800bb94:	071b      	lsls	r3, r3, #28
 800bb96:	d501      	bpl.n	800bb9c <_vfiprintf_r+0x34>
 800bb98:	692b      	ldr	r3, [r5, #16]
 800bb9a:	b99b      	cbnz	r3, 800bbc4 <_vfiprintf_r+0x5c>
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f7fd fa3a 	bl	8009018 <__swsetup_r>
 800bba4:	b170      	cbz	r0, 800bbc4 <_vfiprintf_r+0x5c>
 800bba6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bba8:	07dc      	lsls	r4, r3, #31
 800bbaa:	d504      	bpl.n	800bbb6 <_vfiprintf_r+0x4e>
 800bbac:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb0:	b01d      	add	sp, #116	@ 0x74
 800bbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	0598      	lsls	r0, r3, #22
 800bbba:	d4f7      	bmi.n	800bbac <_vfiprintf_r+0x44>
 800bbbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbbe:	f7fd fb97 	bl	80092f0 <__retarget_lock_release_recursive>
 800bbc2:	e7f3      	b.n	800bbac <_vfiprintf_r+0x44>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbc8:	2320      	movs	r3, #32
 800bbca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbce:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbd2:	2330      	movs	r3, #48	@ 0x30
 800bbd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd84 <_vfiprintf_r+0x21c>
 800bbd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbdc:	f04f 0901 	mov.w	r9, #1
 800bbe0:	4623      	mov	r3, r4
 800bbe2:	469a      	mov	sl, r3
 800bbe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe8:	b10a      	cbz	r2, 800bbee <_vfiprintf_r+0x86>
 800bbea:	2a25      	cmp	r2, #37	@ 0x25
 800bbec:	d1f9      	bne.n	800bbe2 <_vfiprintf_r+0x7a>
 800bbee:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf2:	d00b      	beq.n	800bc0c <_vfiprintf_r+0xa4>
 800bbf4:	465b      	mov	r3, fp
 800bbf6:	4622      	mov	r2, r4
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f7ff ffa1 	bl	800bb42 <__sfputs_r>
 800bc00:	3001      	adds	r0, #1
 800bc02:	f000 80a7 	beq.w	800bd54 <_vfiprintf_r+0x1ec>
 800bc06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc08:	445a      	add	r2, fp
 800bc0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 809f 	beq.w	800bd54 <_vfiprintf_r+0x1ec>
 800bc16:	2300      	movs	r3, #0
 800bc18:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc20:	f10a 0a01 	add.w	sl, sl, #1
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	9307      	str	r3, [sp, #28]
 800bc28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc2e:	4654      	mov	r4, sl
 800bc30:	2205      	movs	r2, #5
 800bc32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc36:	4853      	ldr	r0, [pc, #332]	@ (800bd84 <_vfiprintf_r+0x21c>)
 800bc38:	f7f4 faca 	bl	80001d0 <memchr>
 800bc3c:	9a04      	ldr	r2, [sp, #16]
 800bc3e:	b9d8      	cbnz	r0, 800bc78 <_vfiprintf_r+0x110>
 800bc40:	06d1      	lsls	r1, r2, #27
 800bc42:	bf44      	itt	mi
 800bc44:	2320      	movmi	r3, #32
 800bc46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc4a:	0713      	lsls	r3, r2, #28
 800bc4c:	bf44      	itt	mi
 800bc4e:	232b      	movmi	r3, #43	@ 0x2b
 800bc50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc54:	f89a 3000 	ldrb.w	r3, [sl]
 800bc58:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc5a:	d015      	beq.n	800bc88 <_vfiprintf_r+0x120>
 800bc5c:	9a07      	ldr	r2, [sp, #28]
 800bc5e:	4654      	mov	r4, sl
 800bc60:	2000      	movs	r0, #0
 800bc62:	f04f 0c0a 	mov.w	ip, #10
 800bc66:	4621      	mov	r1, r4
 800bc68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc6c:	3b30      	subs	r3, #48	@ 0x30
 800bc6e:	2b09      	cmp	r3, #9
 800bc70:	d94b      	bls.n	800bd0a <_vfiprintf_r+0x1a2>
 800bc72:	b1b0      	cbz	r0, 800bca2 <_vfiprintf_r+0x13a>
 800bc74:	9207      	str	r2, [sp, #28]
 800bc76:	e014      	b.n	800bca2 <_vfiprintf_r+0x13a>
 800bc78:	eba0 0308 	sub.w	r3, r0, r8
 800bc7c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc80:	4313      	orrs	r3, r2
 800bc82:	9304      	str	r3, [sp, #16]
 800bc84:	46a2      	mov	sl, r4
 800bc86:	e7d2      	b.n	800bc2e <_vfiprintf_r+0xc6>
 800bc88:	9b03      	ldr	r3, [sp, #12]
 800bc8a:	1d19      	adds	r1, r3, #4
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	9103      	str	r1, [sp, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	bfbb      	ittet	lt
 800bc94:	425b      	neglt	r3, r3
 800bc96:	f042 0202 	orrlt.w	r2, r2, #2
 800bc9a:	9307      	strge	r3, [sp, #28]
 800bc9c:	9307      	strlt	r3, [sp, #28]
 800bc9e:	bfb8      	it	lt
 800bca0:	9204      	strlt	r2, [sp, #16]
 800bca2:	7823      	ldrb	r3, [r4, #0]
 800bca4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bca6:	d10a      	bne.n	800bcbe <_vfiprintf_r+0x156>
 800bca8:	7863      	ldrb	r3, [r4, #1]
 800bcaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcac:	d132      	bne.n	800bd14 <_vfiprintf_r+0x1ac>
 800bcae:	9b03      	ldr	r3, [sp, #12]
 800bcb0:	1d1a      	adds	r2, r3, #4
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	9203      	str	r2, [sp, #12]
 800bcb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcba:	3402      	adds	r4, #2
 800bcbc:	9305      	str	r3, [sp, #20]
 800bcbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd94 <_vfiprintf_r+0x22c>
 800bcc2:	7821      	ldrb	r1, [r4, #0]
 800bcc4:	2203      	movs	r2, #3
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	f7f4 fa82 	bl	80001d0 <memchr>
 800bccc:	b138      	cbz	r0, 800bcde <_vfiprintf_r+0x176>
 800bcce:	9b04      	ldr	r3, [sp, #16]
 800bcd0:	eba0 000a 	sub.w	r0, r0, sl
 800bcd4:	2240      	movs	r2, #64	@ 0x40
 800bcd6:	4082      	lsls	r2, r0
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	3401      	adds	r4, #1
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce2:	4829      	ldr	r0, [pc, #164]	@ (800bd88 <_vfiprintf_r+0x220>)
 800bce4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bce8:	2206      	movs	r2, #6
 800bcea:	f7f4 fa71 	bl	80001d0 <memchr>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d03f      	beq.n	800bd72 <_vfiprintf_r+0x20a>
 800bcf2:	4b26      	ldr	r3, [pc, #152]	@ (800bd8c <_vfiprintf_r+0x224>)
 800bcf4:	bb1b      	cbnz	r3, 800bd3e <_vfiprintf_r+0x1d6>
 800bcf6:	9b03      	ldr	r3, [sp, #12]
 800bcf8:	3307      	adds	r3, #7
 800bcfa:	f023 0307 	bic.w	r3, r3, #7
 800bcfe:	3308      	adds	r3, #8
 800bd00:	9303      	str	r3, [sp, #12]
 800bd02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd04:	443b      	add	r3, r7
 800bd06:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd08:	e76a      	b.n	800bbe0 <_vfiprintf_r+0x78>
 800bd0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd0e:	460c      	mov	r4, r1
 800bd10:	2001      	movs	r0, #1
 800bd12:	e7a8      	b.n	800bc66 <_vfiprintf_r+0xfe>
 800bd14:	2300      	movs	r3, #0
 800bd16:	3401      	adds	r4, #1
 800bd18:	9305      	str	r3, [sp, #20]
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	f04f 0c0a 	mov.w	ip, #10
 800bd20:	4620      	mov	r0, r4
 800bd22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd26:	3a30      	subs	r2, #48	@ 0x30
 800bd28:	2a09      	cmp	r2, #9
 800bd2a:	d903      	bls.n	800bd34 <_vfiprintf_r+0x1cc>
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d0c6      	beq.n	800bcbe <_vfiprintf_r+0x156>
 800bd30:	9105      	str	r1, [sp, #20]
 800bd32:	e7c4      	b.n	800bcbe <_vfiprintf_r+0x156>
 800bd34:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd38:	4604      	mov	r4, r0
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e7f0      	b.n	800bd20 <_vfiprintf_r+0x1b8>
 800bd3e:	ab03      	add	r3, sp, #12
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	462a      	mov	r2, r5
 800bd44:	4b12      	ldr	r3, [pc, #72]	@ (800bd90 <_vfiprintf_r+0x228>)
 800bd46:	a904      	add	r1, sp, #16
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f7fc f995 	bl	8008078 <_printf_float>
 800bd4e:	4607      	mov	r7, r0
 800bd50:	1c78      	adds	r0, r7, #1
 800bd52:	d1d6      	bne.n	800bd02 <_vfiprintf_r+0x19a>
 800bd54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd56:	07d9      	lsls	r1, r3, #31
 800bd58:	d405      	bmi.n	800bd66 <_vfiprintf_r+0x1fe>
 800bd5a:	89ab      	ldrh	r3, [r5, #12]
 800bd5c:	059a      	lsls	r2, r3, #22
 800bd5e:	d402      	bmi.n	800bd66 <_vfiprintf_r+0x1fe>
 800bd60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd62:	f7fd fac5 	bl	80092f0 <__retarget_lock_release_recursive>
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	065b      	lsls	r3, r3, #25
 800bd6a:	f53f af1f 	bmi.w	800bbac <_vfiprintf_r+0x44>
 800bd6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd70:	e71e      	b.n	800bbb0 <_vfiprintf_r+0x48>
 800bd72:	ab03      	add	r3, sp, #12
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	462a      	mov	r2, r5
 800bd78:	4b05      	ldr	r3, [pc, #20]	@ (800bd90 <_vfiprintf_r+0x228>)
 800bd7a:	a904      	add	r1, sp, #16
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f7fc fc13 	bl	80085a8 <_printf_i>
 800bd82:	e7e4      	b.n	800bd4e <_vfiprintf_r+0x1e6>
 800bd84:	0800d4ab 	.word	0x0800d4ab
 800bd88:	0800d4b5 	.word	0x0800d4b5
 800bd8c:	08008079 	.word	0x08008079
 800bd90:	0800bb43 	.word	0x0800bb43
 800bd94:	0800d4b1 	.word	0x0800d4b1

0800bd98 <__sflush_r>:
 800bd98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda0:	0716      	lsls	r6, r2, #28
 800bda2:	4605      	mov	r5, r0
 800bda4:	460c      	mov	r4, r1
 800bda6:	d454      	bmi.n	800be52 <__sflush_r+0xba>
 800bda8:	684b      	ldr	r3, [r1, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	dc02      	bgt.n	800bdb4 <__sflush_r+0x1c>
 800bdae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	dd48      	ble.n	800be46 <__sflush_r+0xae>
 800bdb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdb6:	2e00      	cmp	r6, #0
 800bdb8:	d045      	beq.n	800be46 <__sflush_r+0xae>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bdc0:	682f      	ldr	r7, [r5, #0]
 800bdc2:	6a21      	ldr	r1, [r4, #32]
 800bdc4:	602b      	str	r3, [r5, #0]
 800bdc6:	d030      	beq.n	800be2a <__sflush_r+0x92>
 800bdc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	0759      	lsls	r1, r3, #29
 800bdce:	d505      	bpl.n	800bddc <__sflush_r+0x44>
 800bdd0:	6863      	ldr	r3, [r4, #4]
 800bdd2:	1ad2      	subs	r2, r2, r3
 800bdd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bdd6:	b10b      	cbz	r3, 800bddc <__sflush_r+0x44>
 800bdd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bdda:	1ad2      	subs	r2, r2, r3
 800bddc:	2300      	movs	r3, #0
 800bdde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bde0:	6a21      	ldr	r1, [r4, #32]
 800bde2:	4628      	mov	r0, r5
 800bde4:	47b0      	blx	r6
 800bde6:	1c43      	adds	r3, r0, #1
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	d106      	bne.n	800bdfa <__sflush_r+0x62>
 800bdec:	6829      	ldr	r1, [r5, #0]
 800bdee:	291d      	cmp	r1, #29
 800bdf0:	d82b      	bhi.n	800be4a <__sflush_r+0xb2>
 800bdf2:	4a2a      	ldr	r2, [pc, #168]	@ (800be9c <__sflush_r+0x104>)
 800bdf4:	40ca      	lsrs	r2, r1
 800bdf6:	07d6      	lsls	r6, r2, #31
 800bdf8:	d527      	bpl.n	800be4a <__sflush_r+0xb2>
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	6062      	str	r2, [r4, #4]
 800bdfe:	04d9      	lsls	r1, r3, #19
 800be00:	6922      	ldr	r2, [r4, #16]
 800be02:	6022      	str	r2, [r4, #0]
 800be04:	d504      	bpl.n	800be10 <__sflush_r+0x78>
 800be06:	1c42      	adds	r2, r0, #1
 800be08:	d101      	bne.n	800be0e <__sflush_r+0x76>
 800be0a:	682b      	ldr	r3, [r5, #0]
 800be0c:	b903      	cbnz	r3, 800be10 <__sflush_r+0x78>
 800be0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800be10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be12:	602f      	str	r7, [r5, #0]
 800be14:	b1b9      	cbz	r1, 800be46 <__sflush_r+0xae>
 800be16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be1a:	4299      	cmp	r1, r3
 800be1c:	d002      	beq.n	800be24 <__sflush_r+0x8c>
 800be1e:	4628      	mov	r0, r5
 800be20:	f7fe f8f2 	bl	800a008 <_free_r>
 800be24:	2300      	movs	r3, #0
 800be26:	6363      	str	r3, [r4, #52]	@ 0x34
 800be28:	e00d      	b.n	800be46 <__sflush_r+0xae>
 800be2a:	2301      	movs	r3, #1
 800be2c:	4628      	mov	r0, r5
 800be2e:	47b0      	blx	r6
 800be30:	4602      	mov	r2, r0
 800be32:	1c50      	adds	r0, r2, #1
 800be34:	d1c9      	bne.n	800bdca <__sflush_r+0x32>
 800be36:	682b      	ldr	r3, [r5, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d0c6      	beq.n	800bdca <__sflush_r+0x32>
 800be3c:	2b1d      	cmp	r3, #29
 800be3e:	d001      	beq.n	800be44 <__sflush_r+0xac>
 800be40:	2b16      	cmp	r3, #22
 800be42:	d11e      	bne.n	800be82 <__sflush_r+0xea>
 800be44:	602f      	str	r7, [r5, #0]
 800be46:	2000      	movs	r0, #0
 800be48:	e022      	b.n	800be90 <__sflush_r+0xf8>
 800be4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be4e:	b21b      	sxth	r3, r3
 800be50:	e01b      	b.n	800be8a <__sflush_r+0xf2>
 800be52:	690f      	ldr	r7, [r1, #16]
 800be54:	2f00      	cmp	r7, #0
 800be56:	d0f6      	beq.n	800be46 <__sflush_r+0xae>
 800be58:	0793      	lsls	r3, r2, #30
 800be5a:	680e      	ldr	r6, [r1, #0]
 800be5c:	bf08      	it	eq
 800be5e:	694b      	ldreq	r3, [r1, #20]
 800be60:	600f      	str	r7, [r1, #0]
 800be62:	bf18      	it	ne
 800be64:	2300      	movne	r3, #0
 800be66:	eba6 0807 	sub.w	r8, r6, r7
 800be6a:	608b      	str	r3, [r1, #8]
 800be6c:	f1b8 0f00 	cmp.w	r8, #0
 800be70:	dde9      	ble.n	800be46 <__sflush_r+0xae>
 800be72:	6a21      	ldr	r1, [r4, #32]
 800be74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be76:	4643      	mov	r3, r8
 800be78:	463a      	mov	r2, r7
 800be7a:	4628      	mov	r0, r5
 800be7c:	47b0      	blx	r6
 800be7e:	2800      	cmp	r0, #0
 800be80:	dc08      	bgt.n	800be94 <__sflush_r+0xfc>
 800be82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be8a:	81a3      	strh	r3, [r4, #12]
 800be8c:	f04f 30ff 	mov.w	r0, #4294967295
 800be90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be94:	4407      	add	r7, r0
 800be96:	eba8 0800 	sub.w	r8, r8, r0
 800be9a:	e7e7      	b.n	800be6c <__sflush_r+0xd4>
 800be9c:	20400001 	.word	0x20400001

0800bea0 <_fflush_r>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	690b      	ldr	r3, [r1, #16]
 800bea4:	4605      	mov	r5, r0
 800bea6:	460c      	mov	r4, r1
 800bea8:	b913      	cbnz	r3, 800beb0 <_fflush_r+0x10>
 800beaa:	2500      	movs	r5, #0
 800beac:	4628      	mov	r0, r5
 800beae:	bd38      	pop	{r3, r4, r5, pc}
 800beb0:	b118      	cbz	r0, 800beba <_fflush_r+0x1a>
 800beb2:	6a03      	ldr	r3, [r0, #32]
 800beb4:	b90b      	cbnz	r3, 800beba <_fflush_r+0x1a>
 800beb6:	f7fc ff2f 	bl	8008d18 <__sinit>
 800beba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0f3      	beq.n	800beaa <_fflush_r+0xa>
 800bec2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bec4:	07d0      	lsls	r0, r2, #31
 800bec6:	d404      	bmi.n	800bed2 <_fflush_r+0x32>
 800bec8:	0599      	lsls	r1, r3, #22
 800beca:	d402      	bmi.n	800bed2 <_fflush_r+0x32>
 800becc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bece:	f7fd fa0e 	bl	80092ee <__retarget_lock_acquire_recursive>
 800bed2:	4628      	mov	r0, r5
 800bed4:	4621      	mov	r1, r4
 800bed6:	f7ff ff5f 	bl	800bd98 <__sflush_r>
 800beda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bedc:	07da      	lsls	r2, r3, #31
 800bede:	4605      	mov	r5, r0
 800bee0:	d4e4      	bmi.n	800beac <_fflush_r+0xc>
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	059b      	lsls	r3, r3, #22
 800bee6:	d4e1      	bmi.n	800beac <_fflush_r+0xc>
 800bee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800beea:	f7fd fa01 	bl	80092f0 <__retarget_lock_release_recursive>
 800beee:	e7dd      	b.n	800beac <_fflush_r+0xc>

0800bef0 <fiprintf>:
 800bef0:	b40e      	push	{r1, r2, r3}
 800bef2:	b503      	push	{r0, r1, lr}
 800bef4:	4601      	mov	r1, r0
 800bef6:	ab03      	add	r3, sp, #12
 800bef8:	4805      	ldr	r0, [pc, #20]	@ (800bf10 <fiprintf+0x20>)
 800befa:	f853 2b04 	ldr.w	r2, [r3], #4
 800befe:	6800      	ldr	r0, [r0, #0]
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	f7ff fe31 	bl	800bb68 <_vfiprintf_r>
 800bf06:	b002      	add	sp, #8
 800bf08:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf0c:	b003      	add	sp, #12
 800bf0e:	4770      	bx	lr
 800bf10:	20000060 	.word	0x20000060

0800bf14 <__swhatbuf_r>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	460c      	mov	r4, r1
 800bf18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf1c:	2900      	cmp	r1, #0
 800bf1e:	b096      	sub	sp, #88	@ 0x58
 800bf20:	4615      	mov	r5, r2
 800bf22:	461e      	mov	r6, r3
 800bf24:	da0d      	bge.n	800bf42 <__swhatbuf_r+0x2e>
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf2c:	f04f 0100 	mov.w	r1, #0
 800bf30:	bf14      	ite	ne
 800bf32:	2340      	movne	r3, #64	@ 0x40
 800bf34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf38:	2000      	movs	r0, #0
 800bf3a:	6031      	str	r1, [r6, #0]
 800bf3c:	602b      	str	r3, [r5, #0]
 800bf3e:	b016      	add	sp, #88	@ 0x58
 800bf40:	bd70      	pop	{r4, r5, r6, pc}
 800bf42:	466a      	mov	r2, sp
 800bf44:	f000 f862 	bl	800c00c <_fstat_r>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	dbec      	blt.n	800bf26 <__swhatbuf_r+0x12>
 800bf4c:	9901      	ldr	r1, [sp, #4]
 800bf4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf56:	4259      	negs	r1, r3
 800bf58:	4159      	adcs	r1, r3
 800bf5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf5e:	e7eb      	b.n	800bf38 <__swhatbuf_r+0x24>

0800bf60 <__smakebuf_r>:
 800bf60:	898b      	ldrh	r3, [r1, #12]
 800bf62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf64:	079d      	lsls	r5, r3, #30
 800bf66:	4606      	mov	r6, r0
 800bf68:	460c      	mov	r4, r1
 800bf6a:	d507      	bpl.n	800bf7c <__smakebuf_r+0x1c>
 800bf6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	6123      	str	r3, [r4, #16]
 800bf74:	2301      	movs	r3, #1
 800bf76:	6163      	str	r3, [r4, #20]
 800bf78:	b003      	add	sp, #12
 800bf7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf7c:	ab01      	add	r3, sp, #4
 800bf7e:	466a      	mov	r2, sp
 800bf80:	f7ff ffc8 	bl	800bf14 <__swhatbuf_r>
 800bf84:	9f00      	ldr	r7, [sp, #0]
 800bf86:	4605      	mov	r5, r0
 800bf88:	4639      	mov	r1, r7
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7fe f8b0 	bl	800a0f0 <_malloc_r>
 800bf90:	b948      	cbnz	r0, 800bfa6 <__smakebuf_r+0x46>
 800bf92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf96:	059a      	lsls	r2, r3, #22
 800bf98:	d4ee      	bmi.n	800bf78 <__smakebuf_r+0x18>
 800bf9a:	f023 0303 	bic.w	r3, r3, #3
 800bf9e:	f043 0302 	orr.w	r3, r3, #2
 800bfa2:	81a3      	strh	r3, [r4, #12]
 800bfa4:	e7e2      	b.n	800bf6c <__smakebuf_r+0xc>
 800bfa6:	89a3      	ldrh	r3, [r4, #12]
 800bfa8:	6020      	str	r0, [r4, #0]
 800bfaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfae:	81a3      	strh	r3, [r4, #12]
 800bfb0:	9b01      	ldr	r3, [sp, #4]
 800bfb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bfb6:	b15b      	cbz	r3, 800bfd0 <__smakebuf_r+0x70>
 800bfb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f000 f837 	bl	800c030 <_isatty_r>
 800bfc2:	b128      	cbz	r0, 800bfd0 <__smakebuf_r+0x70>
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	f023 0303 	bic.w	r3, r3, #3
 800bfca:	f043 0301 	orr.w	r3, r3, #1
 800bfce:	81a3      	strh	r3, [r4, #12]
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	431d      	orrs	r5, r3
 800bfd4:	81a5      	strh	r5, [r4, #12]
 800bfd6:	e7cf      	b.n	800bf78 <__smakebuf_r+0x18>

0800bfd8 <memmove>:
 800bfd8:	4288      	cmp	r0, r1
 800bfda:	b510      	push	{r4, lr}
 800bfdc:	eb01 0402 	add.w	r4, r1, r2
 800bfe0:	d902      	bls.n	800bfe8 <memmove+0x10>
 800bfe2:	4284      	cmp	r4, r0
 800bfe4:	4623      	mov	r3, r4
 800bfe6:	d807      	bhi.n	800bff8 <memmove+0x20>
 800bfe8:	1e43      	subs	r3, r0, #1
 800bfea:	42a1      	cmp	r1, r4
 800bfec:	d008      	beq.n	800c000 <memmove+0x28>
 800bfee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bff6:	e7f8      	b.n	800bfea <memmove+0x12>
 800bff8:	4402      	add	r2, r0
 800bffa:	4601      	mov	r1, r0
 800bffc:	428a      	cmp	r2, r1
 800bffe:	d100      	bne.n	800c002 <memmove+0x2a>
 800c000:	bd10      	pop	{r4, pc}
 800c002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c00a:	e7f7      	b.n	800bffc <memmove+0x24>

0800c00c <_fstat_r>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4d07      	ldr	r5, [pc, #28]	@ (800c02c <_fstat_r+0x20>)
 800c010:	2300      	movs	r3, #0
 800c012:	4604      	mov	r4, r0
 800c014:	4608      	mov	r0, r1
 800c016:	4611      	mov	r1, r2
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	f7f5 fbaa 	bl	8001772 <_fstat>
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	d102      	bne.n	800c028 <_fstat_r+0x1c>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	b103      	cbz	r3, 800c028 <_fstat_r+0x1c>
 800c026:	6023      	str	r3, [r4, #0]
 800c028:	bd38      	pop	{r3, r4, r5, pc}
 800c02a:	bf00      	nop
 800c02c:	20000ea4 	.word	0x20000ea4

0800c030 <_isatty_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4d06      	ldr	r5, [pc, #24]	@ (800c04c <_isatty_r+0x1c>)
 800c034:	2300      	movs	r3, #0
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	602b      	str	r3, [r5, #0]
 800c03c:	f7f5 fba9 	bl	8001792 <_isatty>
 800c040:	1c43      	adds	r3, r0, #1
 800c042:	d102      	bne.n	800c04a <_isatty_r+0x1a>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	b103      	cbz	r3, 800c04a <_isatty_r+0x1a>
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	20000ea4 	.word	0x20000ea4

0800c050 <_sbrk_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4d06      	ldr	r5, [pc, #24]	@ (800c06c <_sbrk_r+0x1c>)
 800c054:	2300      	movs	r3, #0
 800c056:	4604      	mov	r4, r0
 800c058:	4608      	mov	r0, r1
 800c05a:	602b      	str	r3, [r5, #0]
 800c05c:	f7f5 fbb2 	bl	80017c4 <_sbrk>
 800c060:	1c43      	adds	r3, r0, #1
 800c062:	d102      	bne.n	800c06a <_sbrk_r+0x1a>
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	b103      	cbz	r3, 800c06a <_sbrk_r+0x1a>
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	20000ea4 	.word	0x20000ea4

0800c070 <nan>:
 800c070:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c078 <nan+0x8>
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	00000000 	.word	0x00000000
 800c07c:	7ff80000 	.word	0x7ff80000

0800c080 <abort>:
 800c080:	b508      	push	{r3, lr}
 800c082:	2006      	movs	r0, #6
 800c084:	f000 fbc4 	bl	800c810 <raise>
 800c088:	2001      	movs	r0, #1
 800c08a:	f7f5 fb22 	bl	80016d2 <_exit>

0800c08e <_calloc_r>:
 800c08e:	b570      	push	{r4, r5, r6, lr}
 800c090:	fba1 5402 	umull	r5, r4, r1, r2
 800c094:	b934      	cbnz	r4, 800c0a4 <_calloc_r+0x16>
 800c096:	4629      	mov	r1, r5
 800c098:	f7fe f82a 	bl	800a0f0 <_malloc_r>
 800c09c:	4606      	mov	r6, r0
 800c09e:	b928      	cbnz	r0, 800c0ac <_calloc_r+0x1e>
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	bd70      	pop	{r4, r5, r6, pc}
 800c0a4:	220c      	movs	r2, #12
 800c0a6:	6002      	str	r2, [r0, #0]
 800c0a8:	2600      	movs	r6, #0
 800c0aa:	e7f9      	b.n	800c0a0 <_calloc_r+0x12>
 800c0ac:	462a      	mov	r2, r5
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	f7fd f808 	bl	80090c4 <memset>
 800c0b4:	e7f4      	b.n	800c0a0 <_calloc_r+0x12>

0800c0b6 <rshift>:
 800c0b6:	6903      	ldr	r3, [r0, #16]
 800c0b8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0c0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0c4:	f100 0414 	add.w	r4, r0, #20
 800c0c8:	dd45      	ble.n	800c156 <rshift+0xa0>
 800c0ca:	f011 011f 	ands.w	r1, r1, #31
 800c0ce:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0d2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c0d6:	d10c      	bne.n	800c0f2 <rshift+0x3c>
 800c0d8:	f100 0710 	add.w	r7, r0, #16
 800c0dc:	4629      	mov	r1, r5
 800c0de:	42b1      	cmp	r1, r6
 800c0e0:	d334      	bcc.n	800c14c <rshift+0x96>
 800c0e2:	1a9b      	subs	r3, r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	1eea      	subs	r2, r5, #3
 800c0e8:	4296      	cmp	r6, r2
 800c0ea:	bf38      	it	cc
 800c0ec:	2300      	movcc	r3, #0
 800c0ee:	4423      	add	r3, r4
 800c0f0:	e015      	b.n	800c11e <rshift+0x68>
 800c0f2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c0f6:	f1c1 0820 	rsb	r8, r1, #32
 800c0fa:	40cf      	lsrs	r7, r1
 800c0fc:	f105 0e04 	add.w	lr, r5, #4
 800c100:	46a1      	mov	r9, r4
 800c102:	4576      	cmp	r6, lr
 800c104:	46f4      	mov	ip, lr
 800c106:	d815      	bhi.n	800c134 <rshift+0x7e>
 800c108:	1a9a      	subs	r2, r3, r2
 800c10a:	0092      	lsls	r2, r2, #2
 800c10c:	3a04      	subs	r2, #4
 800c10e:	3501      	adds	r5, #1
 800c110:	42ae      	cmp	r6, r5
 800c112:	bf38      	it	cc
 800c114:	2200      	movcc	r2, #0
 800c116:	18a3      	adds	r3, r4, r2
 800c118:	50a7      	str	r7, [r4, r2]
 800c11a:	b107      	cbz	r7, 800c11e <rshift+0x68>
 800c11c:	3304      	adds	r3, #4
 800c11e:	1b1a      	subs	r2, r3, r4
 800c120:	42a3      	cmp	r3, r4
 800c122:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c126:	bf08      	it	eq
 800c128:	2300      	moveq	r3, #0
 800c12a:	6102      	str	r2, [r0, #16]
 800c12c:	bf08      	it	eq
 800c12e:	6143      	streq	r3, [r0, #20]
 800c130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c134:	f8dc c000 	ldr.w	ip, [ip]
 800c138:	fa0c fc08 	lsl.w	ip, ip, r8
 800c13c:	ea4c 0707 	orr.w	r7, ip, r7
 800c140:	f849 7b04 	str.w	r7, [r9], #4
 800c144:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c148:	40cf      	lsrs	r7, r1
 800c14a:	e7da      	b.n	800c102 <rshift+0x4c>
 800c14c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c150:	f847 cf04 	str.w	ip, [r7, #4]!
 800c154:	e7c3      	b.n	800c0de <rshift+0x28>
 800c156:	4623      	mov	r3, r4
 800c158:	e7e1      	b.n	800c11e <rshift+0x68>

0800c15a <__hexdig_fun>:
 800c15a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c15e:	2b09      	cmp	r3, #9
 800c160:	d802      	bhi.n	800c168 <__hexdig_fun+0xe>
 800c162:	3820      	subs	r0, #32
 800c164:	b2c0      	uxtb	r0, r0
 800c166:	4770      	bx	lr
 800c168:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c16c:	2b05      	cmp	r3, #5
 800c16e:	d801      	bhi.n	800c174 <__hexdig_fun+0x1a>
 800c170:	3847      	subs	r0, #71	@ 0x47
 800c172:	e7f7      	b.n	800c164 <__hexdig_fun+0xa>
 800c174:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c178:	2b05      	cmp	r3, #5
 800c17a:	d801      	bhi.n	800c180 <__hexdig_fun+0x26>
 800c17c:	3827      	subs	r0, #39	@ 0x27
 800c17e:	e7f1      	b.n	800c164 <__hexdig_fun+0xa>
 800c180:	2000      	movs	r0, #0
 800c182:	4770      	bx	lr

0800c184 <__gethex>:
 800c184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c188:	b085      	sub	sp, #20
 800c18a:	468a      	mov	sl, r1
 800c18c:	9302      	str	r3, [sp, #8]
 800c18e:	680b      	ldr	r3, [r1, #0]
 800c190:	9001      	str	r0, [sp, #4]
 800c192:	4690      	mov	r8, r2
 800c194:	1c9c      	adds	r4, r3, #2
 800c196:	46a1      	mov	r9, r4
 800c198:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c19c:	2830      	cmp	r0, #48	@ 0x30
 800c19e:	d0fa      	beq.n	800c196 <__gethex+0x12>
 800c1a0:	eba9 0303 	sub.w	r3, r9, r3
 800c1a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c1a8:	f7ff ffd7 	bl	800c15a <__hexdig_fun>
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d168      	bne.n	800c284 <__gethex+0x100>
 800c1b2:	49a0      	ldr	r1, [pc, #640]	@ (800c434 <__gethex+0x2b0>)
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	4648      	mov	r0, r9
 800c1b8:	f7fc ff8c 	bl	80090d4 <strncmp>
 800c1bc:	4607      	mov	r7, r0
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d167      	bne.n	800c292 <__gethex+0x10e>
 800c1c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c1c6:	4626      	mov	r6, r4
 800c1c8:	f7ff ffc7 	bl	800c15a <__hexdig_fun>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d062      	beq.n	800c296 <__gethex+0x112>
 800c1d0:	4623      	mov	r3, r4
 800c1d2:	7818      	ldrb	r0, [r3, #0]
 800c1d4:	2830      	cmp	r0, #48	@ 0x30
 800c1d6:	4699      	mov	r9, r3
 800c1d8:	f103 0301 	add.w	r3, r3, #1
 800c1dc:	d0f9      	beq.n	800c1d2 <__gethex+0x4e>
 800c1de:	f7ff ffbc 	bl	800c15a <__hexdig_fun>
 800c1e2:	fab0 f580 	clz	r5, r0
 800c1e6:	096d      	lsrs	r5, r5, #5
 800c1e8:	f04f 0b01 	mov.w	fp, #1
 800c1ec:	464a      	mov	r2, r9
 800c1ee:	4616      	mov	r6, r2
 800c1f0:	3201      	adds	r2, #1
 800c1f2:	7830      	ldrb	r0, [r6, #0]
 800c1f4:	f7ff ffb1 	bl	800c15a <__hexdig_fun>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d1f8      	bne.n	800c1ee <__gethex+0x6a>
 800c1fc:	498d      	ldr	r1, [pc, #564]	@ (800c434 <__gethex+0x2b0>)
 800c1fe:	2201      	movs	r2, #1
 800c200:	4630      	mov	r0, r6
 800c202:	f7fc ff67 	bl	80090d4 <strncmp>
 800c206:	2800      	cmp	r0, #0
 800c208:	d13f      	bne.n	800c28a <__gethex+0x106>
 800c20a:	b944      	cbnz	r4, 800c21e <__gethex+0x9a>
 800c20c:	1c74      	adds	r4, r6, #1
 800c20e:	4622      	mov	r2, r4
 800c210:	4616      	mov	r6, r2
 800c212:	3201      	adds	r2, #1
 800c214:	7830      	ldrb	r0, [r6, #0]
 800c216:	f7ff ffa0 	bl	800c15a <__hexdig_fun>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d1f8      	bne.n	800c210 <__gethex+0x8c>
 800c21e:	1ba4      	subs	r4, r4, r6
 800c220:	00a7      	lsls	r7, r4, #2
 800c222:	7833      	ldrb	r3, [r6, #0]
 800c224:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c228:	2b50      	cmp	r3, #80	@ 0x50
 800c22a:	d13e      	bne.n	800c2aa <__gethex+0x126>
 800c22c:	7873      	ldrb	r3, [r6, #1]
 800c22e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c230:	d033      	beq.n	800c29a <__gethex+0x116>
 800c232:	2b2d      	cmp	r3, #45	@ 0x2d
 800c234:	d034      	beq.n	800c2a0 <__gethex+0x11c>
 800c236:	1c71      	adds	r1, r6, #1
 800c238:	2400      	movs	r4, #0
 800c23a:	7808      	ldrb	r0, [r1, #0]
 800c23c:	f7ff ff8d 	bl	800c15a <__hexdig_fun>
 800c240:	1e43      	subs	r3, r0, #1
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b18      	cmp	r3, #24
 800c246:	d830      	bhi.n	800c2aa <__gethex+0x126>
 800c248:	f1a0 0210 	sub.w	r2, r0, #16
 800c24c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c250:	f7ff ff83 	bl	800c15a <__hexdig_fun>
 800c254:	f100 3cff 	add.w	ip, r0, #4294967295
 800c258:	fa5f fc8c 	uxtb.w	ip, ip
 800c25c:	f1bc 0f18 	cmp.w	ip, #24
 800c260:	f04f 030a 	mov.w	r3, #10
 800c264:	d91e      	bls.n	800c2a4 <__gethex+0x120>
 800c266:	b104      	cbz	r4, 800c26a <__gethex+0xe6>
 800c268:	4252      	negs	r2, r2
 800c26a:	4417      	add	r7, r2
 800c26c:	f8ca 1000 	str.w	r1, [sl]
 800c270:	b1ed      	cbz	r5, 800c2ae <__gethex+0x12a>
 800c272:	f1bb 0f00 	cmp.w	fp, #0
 800c276:	bf0c      	ite	eq
 800c278:	2506      	moveq	r5, #6
 800c27a:	2500      	movne	r5, #0
 800c27c:	4628      	mov	r0, r5
 800c27e:	b005      	add	sp, #20
 800c280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c284:	2500      	movs	r5, #0
 800c286:	462c      	mov	r4, r5
 800c288:	e7b0      	b.n	800c1ec <__gethex+0x68>
 800c28a:	2c00      	cmp	r4, #0
 800c28c:	d1c7      	bne.n	800c21e <__gethex+0x9a>
 800c28e:	4627      	mov	r7, r4
 800c290:	e7c7      	b.n	800c222 <__gethex+0x9e>
 800c292:	464e      	mov	r6, r9
 800c294:	462f      	mov	r7, r5
 800c296:	2501      	movs	r5, #1
 800c298:	e7c3      	b.n	800c222 <__gethex+0x9e>
 800c29a:	2400      	movs	r4, #0
 800c29c:	1cb1      	adds	r1, r6, #2
 800c29e:	e7cc      	b.n	800c23a <__gethex+0xb6>
 800c2a0:	2401      	movs	r4, #1
 800c2a2:	e7fb      	b.n	800c29c <__gethex+0x118>
 800c2a4:	fb03 0002 	mla	r0, r3, r2, r0
 800c2a8:	e7ce      	b.n	800c248 <__gethex+0xc4>
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	e7de      	b.n	800c26c <__gethex+0xe8>
 800c2ae:	eba6 0309 	sub.w	r3, r6, r9
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	2b07      	cmp	r3, #7
 800c2b8:	dc0a      	bgt.n	800c2d0 <__gethex+0x14c>
 800c2ba:	9801      	ldr	r0, [sp, #4]
 800c2bc:	f7fd ffa4 	bl	800a208 <_Balloc>
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	b940      	cbnz	r0, 800c2d6 <__gethex+0x152>
 800c2c4:	4b5c      	ldr	r3, [pc, #368]	@ (800c438 <__gethex+0x2b4>)
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	21e4      	movs	r1, #228	@ 0xe4
 800c2ca:	485c      	ldr	r0, [pc, #368]	@ (800c43c <__gethex+0x2b8>)
 800c2cc:	f7fd f826 	bl	800931c <__assert_func>
 800c2d0:	3101      	adds	r1, #1
 800c2d2:	105b      	asrs	r3, r3, #1
 800c2d4:	e7ef      	b.n	800c2b6 <__gethex+0x132>
 800c2d6:	f100 0a14 	add.w	sl, r0, #20
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4655      	mov	r5, sl
 800c2de:	469b      	mov	fp, r3
 800c2e0:	45b1      	cmp	r9, r6
 800c2e2:	d337      	bcc.n	800c354 <__gethex+0x1d0>
 800c2e4:	f845 bb04 	str.w	fp, [r5], #4
 800c2e8:	eba5 050a 	sub.w	r5, r5, sl
 800c2ec:	10ad      	asrs	r5, r5, #2
 800c2ee:	6125      	str	r5, [r4, #16]
 800c2f0:	4658      	mov	r0, fp
 800c2f2:	f7fe f87b 	bl	800a3ec <__hi0bits>
 800c2f6:	016d      	lsls	r5, r5, #5
 800c2f8:	f8d8 6000 	ldr.w	r6, [r8]
 800c2fc:	1a2d      	subs	r5, r5, r0
 800c2fe:	42b5      	cmp	r5, r6
 800c300:	dd54      	ble.n	800c3ac <__gethex+0x228>
 800c302:	1bad      	subs	r5, r5, r6
 800c304:	4629      	mov	r1, r5
 800c306:	4620      	mov	r0, r4
 800c308:	f7fe fc07 	bl	800ab1a <__any_on>
 800c30c:	4681      	mov	r9, r0
 800c30e:	b178      	cbz	r0, 800c330 <__gethex+0x1ac>
 800c310:	1e6b      	subs	r3, r5, #1
 800c312:	1159      	asrs	r1, r3, #5
 800c314:	f003 021f 	and.w	r2, r3, #31
 800c318:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c31c:	f04f 0901 	mov.w	r9, #1
 800c320:	fa09 f202 	lsl.w	r2, r9, r2
 800c324:	420a      	tst	r2, r1
 800c326:	d003      	beq.n	800c330 <__gethex+0x1ac>
 800c328:	454b      	cmp	r3, r9
 800c32a:	dc36      	bgt.n	800c39a <__gethex+0x216>
 800c32c:	f04f 0902 	mov.w	r9, #2
 800c330:	4629      	mov	r1, r5
 800c332:	4620      	mov	r0, r4
 800c334:	f7ff febf 	bl	800c0b6 <rshift>
 800c338:	442f      	add	r7, r5
 800c33a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c33e:	42bb      	cmp	r3, r7
 800c340:	da42      	bge.n	800c3c8 <__gethex+0x244>
 800c342:	9801      	ldr	r0, [sp, #4]
 800c344:	4621      	mov	r1, r4
 800c346:	f7fd ff9f 	bl	800a288 <_Bfree>
 800c34a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c34c:	2300      	movs	r3, #0
 800c34e:	6013      	str	r3, [r2, #0]
 800c350:	25a3      	movs	r5, #163	@ 0xa3
 800c352:	e793      	b.n	800c27c <__gethex+0xf8>
 800c354:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c358:	2a2e      	cmp	r2, #46	@ 0x2e
 800c35a:	d012      	beq.n	800c382 <__gethex+0x1fe>
 800c35c:	2b20      	cmp	r3, #32
 800c35e:	d104      	bne.n	800c36a <__gethex+0x1e6>
 800c360:	f845 bb04 	str.w	fp, [r5], #4
 800c364:	f04f 0b00 	mov.w	fp, #0
 800c368:	465b      	mov	r3, fp
 800c36a:	7830      	ldrb	r0, [r6, #0]
 800c36c:	9303      	str	r3, [sp, #12]
 800c36e:	f7ff fef4 	bl	800c15a <__hexdig_fun>
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	f000 000f 	and.w	r0, r0, #15
 800c378:	4098      	lsls	r0, r3
 800c37a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c37e:	3304      	adds	r3, #4
 800c380:	e7ae      	b.n	800c2e0 <__gethex+0x15c>
 800c382:	45b1      	cmp	r9, r6
 800c384:	d8ea      	bhi.n	800c35c <__gethex+0x1d8>
 800c386:	492b      	ldr	r1, [pc, #172]	@ (800c434 <__gethex+0x2b0>)
 800c388:	9303      	str	r3, [sp, #12]
 800c38a:	2201      	movs	r2, #1
 800c38c:	4630      	mov	r0, r6
 800c38e:	f7fc fea1 	bl	80090d4 <strncmp>
 800c392:	9b03      	ldr	r3, [sp, #12]
 800c394:	2800      	cmp	r0, #0
 800c396:	d1e1      	bne.n	800c35c <__gethex+0x1d8>
 800c398:	e7a2      	b.n	800c2e0 <__gethex+0x15c>
 800c39a:	1ea9      	subs	r1, r5, #2
 800c39c:	4620      	mov	r0, r4
 800c39e:	f7fe fbbc 	bl	800ab1a <__any_on>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d0c2      	beq.n	800c32c <__gethex+0x1a8>
 800c3a6:	f04f 0903 	mov.w	r9, #3
 800c3aa:	e7c1      	b.n	800c330 <__gethex+0x1ac>
 800c3ac:	da09      	bge.n	800c3c2 <__gethex+0x23e>
 800c3ae:	1b75      	subs	r5, r6, r5
 800c3b0:	4621      	mov	r1, r4
 800c3b2:	9801      	ldr	r0, [sp, #4]
 800c3b4:	462a      	mov	r2, r5
 800c3b6:	f7fe f977 	bl	800a6a8 <__lshift>
 800c3ba:	1b7f      	subs	r7, r7, r5
 800c3bc:	4604      	mov	r4, r0
 800c3be:	f100 0a14 	add.w	sl, r0, #20
 800c3c2:	f04f 0900 	mov.w	r9, #0
 800c3c6:	e7b8      	b.n	800c33a <__gethex+0x1b6>
 800c3c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c3cc:	42bd      	cmp	r5, r7
 800c3ce:	dd6f      	ble.n	800c4b0 <__gethex+0x32c>
 800c3d0:	1bed      	subs	r5, r5, r7
 800c3d2:	42ae      	cmp	r6, r5
 800c3d4:	dc34      	bgt.n	800c440 <__gethex+0x2bc>
 800c3d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d022      	beq.n	800c424 <__gethex+0x2a0>
 800c3de:	2b03      	cmp	r3, #3
 800c3e0:	d024      	beq.n	800c42c <__gethex+0x2a8>
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d115      	bne.n	800c412 <__gethex+0x28e>
 800c3e6:	42ae      	cmp	r6, r5
 800c3e8:	d113      	bne.n	800c412 <__gethex+0x28e>
 800c3ea:	2e01      	cmp	r6, #1
 800c3ec:	d10b      	bne.n	800c406 <__gethex+0x282>
 800c3ee:	9a02      	ldr	r2, [sp, #8]
 800c3f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c3f4:	6013      	str	r3, [r2, #0]
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	6123      	str	r3, [r4, #16]
 800c3fa:	f8ca 3000 	str.w	r3, [sl]
 800c3fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c400:	2562      	movs	r5, #98	@ 0x62
 800c402:	601c      	str	r4, [r3, #0]
 800c404:	e73a      	b.n	800c27c <__gethex+0xf8>
 800c406:	1e71      	subs	r1, r6, #1
 800c408:	4620      	mov	r0, r4
 800c40a:	f7fe fb86 	bl	800ab1a <__any_on>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d1ed      	bne.n	800c3ee <__gethex+0x26a>
 800c412:	9801      	ldr	r0, [sp, #4]
 800c414:	4621      	mov	r1, r4
 800c416:	f7fd ff37 	bl	800a288 <_Bfree>
 800c41a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c41c:	2300      	movs	r3, #0
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	2550      	movs	r5, #80	@ 0x50
 800c422:	e72b      	b.n	800c27c <__gethex+0xf8>
 800c424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c426:	2b00      	cmp	r3, #0
 800c428:	d1f3      	bne.n	800c412 <__gethex+0x28e>
 800c42a:	e7e0      	b.n	800c3ee <__gethex+0x26a>
 800c42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1dd      	bne.n	800c3ee <__gethex+0x26a>
 800c432:	e7ee      	b.n	800c412 <__gethex+0x28e>
 800c434:	0800d4a9 	.word	0x0800d4a9
 800c438:	0800d43f 	.word	0x0800d43f
 800c43c:	0800d4c4 	.word	0x0800d4c4
 800c440:	1e6f      	subs	r7, r5, #1
 800c442:	f1b9 0f00 	cmp.w	r9, #0
 800c446:	d130      	bne.n	800c4aa <__gethex+0x326>
 800c448:	b127      	cbz	r7, 800c454 <__gethex+0x2d0>
 800c44a:	4639      	mov	r1, r7
 800c44c:	4620      	mov	r0, r4
 800c44e:	f7fe fb64 	bl	800ab1a <__any_on>
 800c452:	4681      	mov	r9, r0
 800c454:	117a      	asrs	r2, r7, #5
 800c456:	2301      	movs	r3, #1
 800c458:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c45c:	f007 071f 	and.w	r7, r7, #31
 800c460:	40bb      	lsls	r3, r7
 800c462:	4213      	tst	r3, r2
 800c464:	4629      	mov	r1, r5
 800c466:	4620      	mov	r0, r4
 800c468:	bf18      	it	ne
 800c46a:	f049 0902 	orrne.w	r9, r9, #2
 800c46e:	f7ff fe22 	bl	800c0b6 <rshift>
 800c472:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c476:	1b76      	subs	r6, r6, r5
 800c478:	2502      	movs	r5, #2
 800c47a:	f1b9 0f00 	cmp.w	r9, #0
 800c47e:	d047      	beq.n	800c510 <__gethex+0x38c>
 800c480:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c484:	2b02      	cmp	r3, #2
 800c486:	d015      	beq.n	800c4b4 <__gethex+0x330>
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d017      	beq.n	800c4bc <__gethex+0x338>
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d109      	bne.n	800c4a4 <__gethex+0x320>
 800c490:	f019 0f02 	tst.w	r9, #2
 800c494:	d006      	beq.n	800c4a4 <__gethex+0x320>
 800c496:	f8da 3000 	ldr.w	r3, [sl]
 800c49a:	ea49 0903 	orr.w	r9, r9, r3
 800c49e:	f019 0f01 	tst.w	r9, #1
 800c4a2:	d10e      	bne.n	800c4c2 <__gethex+0x33e>
 800c4a4:	f045 0510 	orr.w	r5, r5, #16
 800c4a8:	e032      	b.n	800c510 <__gethex+0x38c>
 800c4aa:	f04f 0901 	mov.w	r9, #1
 800c4ae:	e7d1      	b.n	800c454 <__gethex+0x2d0>
 800c4b0:	2501      	movs	r5, #1
 800c4b2:	e7e2      	b.n	800c47a <__gethex+0x2f6>
 800c4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4b6:	f1c3 0301 	rsb	r3, r3, #1
 800c4ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d0f0      	beq.n	800c4a4 <__gethex+0x320>
 800c4c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c4c6:	f104 0314 	add.w	r3, r4, #20
 800c4ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c4ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c4d2:	f04f 0c00 	mov.w	ip, #0
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c4e0:	d01b      	beq.n	800c51a <__gethex+0x396>
 800c4e2:	3201      	adds	r2, #1
 800c4e4:	6002      	str	r2, [r0, #0]
 800c4e6:	2d02      	cmp	r5, #2
 800c4e8:	f104 0314 	add.w	r3, r4, #20
 800c4ec:	d13c      	bne.n	800c568 <__gethex+0x3e4>
 800c4ee:	f8d8 2000 	ldr.w	r2, [r8]
 800c4f2:	3a01      	subs	r2, #1
 800c4f4:	42b2      	cmp	r2, r6
 800c4f6:	d109      	bne.n	800c50c <__gethex+0x388>
 800c4f8:	1171      	asrs	r1, r6, #5
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c500:	f006 061f 	and.w	r6, r6, #31
 800c504:	fa02 f606 	lsl.w	r6, r2, r6
 800c508:	421e      	tst	r6, r3
 800c50a:	d13a      	bne.n	800c582 <__gethex+0x3fe>
 800c50c:	f045 0520 	orr.w	r5, r5, #32
 800c510:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c512:	601c      	str	r4, [r3, #0]
 800c514:	9b02      	ldr	r3, [sp, #8]
 800c516:	601f      	str	r7, [r3, #0]
 800c518:	e6b0      	b.n	800c27c <__gethex+0xf8>
 800c51a:	4299      	cmp	r1, r3
 800c51c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c520:	d8d9      	bhi.n	800c4d6 <__gethex+0x352>
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	459b      	cmp	fp, r3
 800c526:	db17      	blt.n	800c558 <__gethex+0x3d4>
 800c528:	6861      	ldr	r1, [r4, #4]
 800c52a:	9801      	ldr	r0, [sp, #4]
 800c52c:	3101      	adds	r1, #1
 800c52e:	f7fd fe6b 	bl	800a208 <_Balloc>
 800c532:	4681      	mov	r9, r0
 800c534:	b918      	cbnz	r0, 800c53e <__gethex+0x3ba>
 800c536:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a0 <__gethex+0x41c>)
 800c538:	4602      	mov	r2, r0
 800c53a:	2184      	movs	r1, #132	@ 0x84
 800c53c:	e6c5      	b.n	800c2ca <__gethex+0x146>
 800c53e:	6922      	ldr	r2, [r4, #16]
 800c540:	3202      	adds	r2, #2
 800c542:	f104 010c 	add.w	r1, r4, #12
 800c546:	0092      	lsls	r2, r2, #2
 800c548:	300c      	adds	r0, #12
 800c54a:	f7fc fed2 	bl	80092f2 <memcpy>
 800c54e:	4621      	mov	r1, r4
 800c550:	9801      	ldr	r0, [sp, #4]
 800c552:	f7fd fe99 	bl	800a288 <_Bfree>
 800c556:	464c      	mov	r4, r9
 800c558:	6923      	ldr	r3, [r4, #16]
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c560:	6122      	str	r2, [r4, #16]
 800c562:	2201      	movs	r2, #1
 800c564:	615a      	str	r2, [r3, #20]
 800c566:	e7be      	b.n	800c4e6 <__gethex+0x362>
 800c568:	6922      	ldr	r2, [r4, #16]
 800c56a:	455a      	cmp	r2, fp
 800c56c:	dd0b      	ble.n	800c586 <__gethex+0x402>
 800c56e:	2101      	movs	r1, #1
 800c570:	4620      	mov	r0, r4
 800c572:	f7ff fda0 	bl	800c0b6 <rshift>
 800c576:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c57a:	3701      	adds	r7, #1
 800c57c:	42bb      	cmp	r3, r7
 800c57e:	f6ff aee0 	blt.w	800c342 <__gethex+0x1be>
 800c582:	2501      	movs	r5, #1
 800c584:	e7c2      	b.n	800c50c <__gethex+0x388>
 800c586:	f016 061f 	ands.w	r6, r6, #31
 800c58a:	d0fa      	beq.n	800c582 <__gethex+0x3fe>
 800c58c:	4453      	add	r3, sl
 800c58e:	f1c6 0620 	rsb	r6, r6, #32
 800c592:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c596:	f7fd ff29 	bl	800a3ec <__hi0bits>
 800c59a:	42b0      	cmp	r0, r6
 800c59c:	dbe7      	blt.n	800c56e <__gethex+0x3ea>
 800c59e:	e7f0      	b.n	800c582 <__gethex+0x3fe>
 800c5a0:	0800d43f 	.word	0x0800d43f

0800c5a4 <L_shift>:
 800c5a4:	f1c2 0208 	rsb	r2, r2, #8
 800c5a8:	0092      	lsls	r2, r2, #2
 800c5aa:	b570      	push	{r4, r5, r6, lr}
 800c5ac:	f1c2 0620 	rsb	r6, r2, #32
 800c5b0:	6843      	ldr	r3, [r0, #4]
 800c5b2:	6804      	ldr	r4, [r0, #0]
 800c5b4:	fa03 f506 	lsl.w	r5, r3, r6
 800c5b8:	432c      	orrs	r4, r5
 800c5ba:	40d3      	lsrs	r3, r2
 800c5bc:	6004      	str	r4, [r0, #0]
 800c5be:	f840 3f04 	str.w	r3, [r0, #4]!
 800c5c2:	4288      	cmp	r0, r1
 800c5c4:	d3f4      	bcc.n	800c5b0 <L_shift+0xc>
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}

0800c5c8 <__match>:
 800c5c8:	b530      	push	{r4, r5, lr}
 800c5ca:	6803      	ldr	r3, [r0, #0]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5d2:	b914      	cbnz	r4, 800c5da <__match+0x12>
 800c5d4:	6003      	str	r3, [r0, #0]
 800c5d6:	2001      	movs	r0, #1
 800c5d8:	bd30      	pop	{r4, r5, pc}
 800c5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c5e2:	2d19      	cmp	r5, #25
 800c5e4:	bf98      	it	ls
 800c5e6:	3220      	addls	r2, #32
 800c5e8:	42a2      	cmp	r2, r4
 800c5ea:	d0f0      	beq.n	800c5ce <__match+0x6>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	e7f3      	b.n	800c5d8 <__match+0x10>

0800c5f0 <__hexnan>:
 800c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	680b      	ldr	r3, [r1, #0]
 800c5f6:	6801      	ldr	r1, [r0, #0]
 800c5f8:	115e      	asrs	r6, r3, #5
 800c5fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c5fe:	f013 031f 	ands.w	r3, r3, #31
 800c602:	b087      	sub	sp, #28
 800c604:	bf18      	it	ne
 800c606:	3604      	addne	r6, #4
 800c608:	2500      	movs	r5, #0
 800c60a:	1f37      	subs	r7, r6, #4
 800c60c:	4682      	mov	sl, r0
 800c60e:	4690      	mov	r8, r2
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	f846 5c04 	str.w	r5, [r6, #-4]
 800c616:	46b9      	mov	r9, r7
 800c618:	463c      	mov	r4, r7
 800c61a:	9502      	str	r5, [sp, #8]
 800c61c:	46ab      	mov	fp, r5
 800c61e:	784a      	ldrb	r2, [r1, #1]
 800c620:	1c4b      	adds	r3, r1, #1
 800c622:	9303      	str	r3, [sp, #12]
 800c624:	b342      	cbz	r2, 800c678 <__hexnan+0x88>
 800c626:	4610      	mov	r0, r2
 800c628:	9105      	str	r1, [sp, #20]
 800c62a:	9204      	str	r2, [sp, #16]
 800c62c:	f7ff fd95 	bl	800c15a <__hexdig_fun>
 800c630:	2800      	cmp	r0, #0
 800c632:	d151      	bne.n	800c6d8 <__hexnan+0xe8>
 800c634:	9a04      	ldr	r2, [sp, #16]
 800c636:	9905      	ldr	r1, [sp, #20]
 800c638:	2a20      	cmp	r2, #32
 800c63a:	d818      	bhi.n	800c66e <__hexnan+0x7e>
 800c63c:	9b02      	ldr	r3, [sp, #8]
 800c63e:	459b      	cmp	fp, r3
 800c640:	dd13      	ble.n	800c66a <__hexnan+0x7a>
 800c642:	454c      	cmp	r4, r9
 800c644:	d206      	bcs.n	800c654 <__hexnan+0x64>
 800c646:	2d07      	cmp	r5, #7
 800c648:	dc04      	bgt.n	800c654 <__hexnan+0x64>
 800c64a:	462a      	mov	r2, r5
 800c64c:	4649      	mov	r1, r9
 800c64e:	4620      	mov	r0, r4
 800c650:	f7ff ffa8 	bl	800c5a4 <L_shift>
 800c654:	4544      	cmp	r4, r8
 800c656:	d952      	bls.n	800c6fe <__hexnan+0x10e>
 800c658:	2300      	movs	r3, #0
 800c65a:	f1a4 0904 	sub.w	r9, r4, #4
 800c65e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c662:	f8cd b008 	str.w	fp, [sp, #8]
 800c666:	464c      	mov	r4, r9
 800c668:	461d      	mov	r5, r3
 800c66a:	9903      	ldr	r1, [sp, #12]
 800c66c:	e7d7      	b.n	800c61e <__hexnan+0x2e>
 800c66e:	2a29      	cmp	r2, #41	@ 0x29
 800c670:	d157      	bne.n	800c722 <__hexnan+0x132>
 800c672:	3102      	adds	r1, #2
 800c674:	f8ca 1000 	str.w	r1, [sl]
 800c678:	f1bb 0f00 	cmp.w	fp, #0
 800c67c:	d051      	beq.n	800c722 <__hexnan+0x132>
 800c67e:	454c      	cmp	r4, r9
 800c680:	d206      	bcs.n	800c690 <__hexnan+0xa0>
 800c682:	2d07      	cmp	r5, #7
 800c684:	dc04      	bgt.n	800c690 <__hexnan+0xa0>
 800c686:	462a      	mov	r2, r5
 800c688:	4649      	mov	r1, r9
 800c68a:	4620      	mov	r0, r4
 800c68c:	f7ff ff8a 	bl	800c5a4 <L_shift>
 800c690:	4544      	cmp	r4, r8
 800c692:	d936      	bls.n	800c702 <__hexnan+0x112>
 800c694:	f1a8 0204 	sub.w	r2, r8, #4
 800c698:	4623      	mov	r3, r4
 800c69a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c69e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c6a2:	429f      	cmp	r7, r3
 800c6a4:	d2f9      	bcs.n	800c69a <__hexnan+0xaa>
 800c6a6:	1b3b      	subs	r3, r7, r4
 800c6a8:	f023 0303 	bic.w	r3, r3, #3
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	3401      	adds	r4, #1
 800c6b0:	3e03      	subs	r6, #3
 800c6b2:	42b4      	cmp	r4, r6
 800c6b4:	bf88      	it	hi
 800c6b6:	2304      	movhi	r3, #4
 800c6b8:	4443      	add	r3, r8
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f843 2b04 	str.w	r2, [r3], #4
 800c6c0:	429f      	cmp	r7, r3
 800c6c2:	d2fb      	bcs.n	800c6bc <__hexnan+0xcc>
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	b91b      	cbnz	r3, 800c6d0 <__hexnan+0xe0>
 800c6c8:	4547      	cmp	r7, r8
 800c6ca:	d128      	bne.n	800c71e <__hexnan+0x12e>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	603b      	str	r3, [r7, #0]
 800c6d0:	2005      	movs	r0, #5
 800c6d2:	b007      	add	sp, #28
 800c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d8:	3501      	adds	r5, #1
 800c6da:	2d08      	cmp	r5, #8
 800c6dc:	f10b 0b01 	add.w	fp, fp, #1
 800c6e0:	dd06      	ble.n	800c6f0 <__hexnan+0x100>
 800c6e2:	4544      	cmp	r4, r8
 800c6e4:	d9c1      	bls.n	800c66a <__hexnan+0x7a>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6ec:	2501      	movs	r5, #1
 800c6ee:	3c04      	subs	r4, #4
 800c6f0:	6822      	ldr	r2, [r4, #0]
 800c6f2:	f000 000f 	and.w	r0, r0, #15
 800c6f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c6fa:	6020      	str	r0, [r4, #0]
 800c6fc:	e7b5      	b.n	800c66a <__hexnan+0x7a>
 800c6fe:	2508      	movs	r5, #8
 800c700:	e7b3      	b.n	800c66a <__hexnan+0x7a>
 800c702:	9b01      	ldr	r3, [sp, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d0dd      	beq.n	800c6c4 <__hexnan+0xd4>
 800c708:	f1c3 0320 	rsb	r3, r3, #32
 800c70c:	f04f 32ff 	mov.w	r2, #4294967295
 800c710:	40da      	lsrs	r2, r3
 800c712:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c716:	4013      	ands	r3, r2
 800c718:	f846 3c04 	str.w	r3, [r6, #-4]
 800c71c:	e7d2      	b.n	800c6c4 <__hexnan+0xd4>
 800c71e:	3f04      	subs	r7, #4
 800c720:	e7d0      	b.n	800c6c4 <__hexnan+0xd4>
 800c722:	2004      	movs	r0, #4
 800c724:	e7d5      	b.n	800c6d2 <__hexnan+0xe2>

0800c726 <__ascii_mbtowc>:
 800c726:	b082      	sub	sp, #8
 800c728:	b901      	cbnz	r1, 800c72c <__ascii_mbtowc+0x6>
 800c72a:	a901      	add	r1, sp, #4
 800c72c:	b142      	cbz	r2, 800c740 <__ascii_mbtowc+0x1a>
 800c72e:	b14b      	cbz	r3, 800c744 <__ascii_mbtowc+0x1e>
 800c730:	7813      	ldrb	r3, [r2, #0]
 800c732:	600b      	str	r3, [r1, #0]
 800c734:	7812      	ldrb	r2, [r2, #0]
 800c736:	1e10      	subs	r0, r2, #0
 800c738:	bf18      	it	ne
 800c73a:	2001      	movne	r0, #1
 800c73c:	b002      	add	sp, #8
 800c73e:	4770      	bx	lr
 800c740:	4610      	mov	r0, r2
 800c742:	e7fb      	b.n	800c73c <__ascii_mbtowc+0x16>
 800c744:	f06f 0001 	mvn.w	r0, #1
 800c748:	e7f8      	b.n	800c73c <__ascii_mbtowc+0x16>

0800c74a <_realloc_r>:
 800c74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c74e:	4607      	mov	r7, r0
 800c750:	4614      	mov	r4, r2
 800c752:	460d      	mov	r5, r1
 800c754:	b921      	cbnz	r1, 800c760 <_realloc_r+0x16>
 800c756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c75a:	4611      	mov	r1, r2
 800c75c:	f7fd bcc8 	b.w	800a0f0 <_malloc_r>
 800c760:	b92a      	cbnz	r2, 800c76e <_realloc_r+0x24>
 800c762:	f7fd fc51 	bl	800a008 <_free_r>
 800c766:	4625      	mov	r5, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c76e:	f000 f86b 	bl	800c848 <_malloc_usable_size_r>
 800c772:	4284      	cmp	r4, r0
 800c774:	4606      	mov	r6, r0
 800c776:	d802      	bhi.n	800c77e <_realloc_r+0x34>
 800c778:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c77c:	d8f4      	bhi.n	800c768 <_realloc_r+0x1e>
 800c77e:	4621      	mov	r1, r4
 800c780:	4638      	mov	r0, r7
 800c782:	f7fd fcb5 	bl	800a0f0 <_malloc_r>
 800c786:	4680      	mov	r8, r0
 800c788:	b908      	cbnz	r0, 800c78e <_realloc_r+0x44>
 800c78a:	4645      	mov	r5, r8
 800c78c:	e7ec      	b.n	800c768 <_realloc_r+0x1e>
 800c78e:	42b4      	cmp	r4, r6
 800c790:	4622      	mov	r2, r4
 800c792:	4629      	mov	r1, r5
 800c794:	bf28      	it	cs
 800c796:	4632      	movcs	r2, r6
 800c798:	f7fc fdab 	bl	80092f2 <memcpy>
 800c79c:	4629      	mov	r1, r5
 800c79e:	4638      	mov	r0, r7
 800c7a0:	f7fd fc32 	bl	800a008 <_free_r>
 800c7a4:	e7f1      	b.n	800c78a <_realloc_r+0x40>

0800c7a6 <__ascii_wctomb>:
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	4608      	mov	r0, r1
 800c7aa:	b141      	cbz	r1, 800c7be <__ascii_wctomb+0x18>
 800c7ac:	2aff      	cmp	r2, #255	@ 0xff
 800c7ae:	d904      	bls.n	800c7ba <__ascii_wctomb+0x14>
 800c7b0:	228a      	movs	r2, #138	@ 0x8a
 800c7b2:	601a      	str	r2, [r3, #0]
 800c7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b8:	4770      	bx	lr
 800c7ba:	700a      	strb	r2, [r1, #0]
 800c7bc:	2001      	movs	r0, #1
 800c7be:	4770      	bx	lr

0800c7c0 <_raise_r>:
 800c7c0:	291f      	cmp	r1, #31
 800c7c2:	b538      	push	{r3, r4, r5, lr}
 800c7c4:	4605      	mov	r5, r0
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	d904      	bls.n	800c7d4 <_raise_r+0x14>
 800c7ca:	2316      	movs	r3, #22
 800c7cc:	6003      	str	r3, [r0, #0]
 800c7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c7d6:	b112      	cbz	r2, 800c7de <_raise_r+0x1e>
 800c7d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7dc:	b94b      	cbnz	r3, 800c7f2 <_raise_r+0x32>
 800c7de:	4628      	mov	r0, r5
 800c7e0:	f000 f830 	bl	800c844 <_getpid_r>
 800c7e4:	4622      	mov	r2, r4
 800c7e6:	4601      	mov	r1, r0
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7ee:	f000 b817 	b.w	800c820 <_kill_r>
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d00a      	beq.n	800c80c <_raise_r+0x4c>
 800c7f6:	1c59      	adds	r1, r3, #1
 800c7f8:	d103      	bne.n	800c802 <_raise_r+0x42>
 800c7fa:	2316      	movs	r3, #22
 800c7fc:	6003      	str	r3, [r0, #0]
 800c7fe:	2001      	movs	r0, #1
 800c800:	e7e7      	b.n	800c7d2 <_raise_r+0x12>
 800c802:	2100      	movs	r1, #0
 800c804:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c808:	4620      	mov	r0, r4
 800c80a:	4798      	blx	r3
 800c80c:	2000      	movs	r0, #0
 800c80e:	e7e0      	b.n	800c7d2 <_raise_r+0x12>

0800c810 <raise>:
 800c810:	4b02      	ldr	r3, [pc, #8]	@ (800c81c <raise+0xc>)
 800c812:	4601      	mov	r1, r0
 800c814:	6818      	ldr	r0, [r3, #0]
 800c816:	f7ff bfd3 	b.w	800c7c0 <_raise_r>
 800c81a:	bf00      	nop
 800c81c:	20000060 	.word	0x20000060

0800c820 <_kill_r>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	4d07      	ldr	r5, [pc, #28]	@ (800c840 <_kill_r+0x20>)
 800c824:	2300      	movs	r3, #0
 800c826:	4604      	mov	r4, r0
 800c828:	4608      	mov	r0, r1
 800c82a:	4611      	mov	r1, r2
 800c82c:	602b      	str	r3, [r5, #0]
 800c82e:	f7f4 ff40 	bl	80016b2 <_kill>
 800c832:	1c43      	adds	r3, r0, #1
 800c834:	d102      	bne.n	800c83c <_kill_r+0x1c>
 800c836:	682b      	ldr	r3, [r5, #0]
 800c838:	b103      	cbz	r3, 800c83c <_kill_r+0x1c>
 800c83a:	6023      	str	r3, [r4, #0]
 800c83c:	bd38      	pop	{r3, r4, r5, pc}
 800c83e:	bf00      	nop
 800c840:	20000ea4 	.word	0x20000ea4

0800c844 <_getpid_r>:
 800c844:	f7f4 bf2d 	b.w	80016a2 <_getpid>

0800c848 <_malloc_usable_size_r>:
 800c848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c84c:	1f18      	subs	r0, r3, #4
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bfbc      	itt	lt
 800c852:	580b      	ldrlt	r3, [r1, r0]
 800c854:	18c0      	addlt	r0, r0, r3
 800c856:	4770      	bx	lr

0800c858 <_init>:
 800c858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85a:	bf00      	nop
 800c85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c85e:	bc08      	pop	{r3}
 800c860:	469e      	mov	lr, r3
 800c862:	4770      	bx	lr

0800c864 <_fini>:
 800c864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c866:	bf00      	nop
 800c868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c86a:	bc08      	pop	{r3}
 800c86c:	469e      	mov	lr, r3
 800c86e:	4770      	bx	lr
