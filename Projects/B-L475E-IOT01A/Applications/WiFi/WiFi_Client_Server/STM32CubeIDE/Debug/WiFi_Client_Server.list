
WiFi_Client_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c488  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0800c618  0800c618  0000d618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3b4  0800d3b4  0000f21c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d3b4  0800d3b4  0000e3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3bc  0800d3bc  0000f21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3bc  0800d3bc  0000e3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3c0  0800d3c0  0000e3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800d3c4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000f21c  2**0
                  CONTENTS
 10 .bss          00000c28  2000021c  2000021c  0000f21c  2**2
                  ALLOC
 11 ._user_heap_stack 00017004  20000e44  20000e44  0000f21c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001726a  00000000  00000000  0000f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009d  00000000  00000000  000264b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000142e9  00000000  00000000  00026553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002d3f  00000000  00000000  0003a83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001320  00000000  00000000  0003d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0dde  00000000  00000000  0003e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000ed1  00000000  00000000  0012f67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002874c  00000000  00000000  0013054f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00158c9b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006704  00000000  00000000  00158ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c600 	.word	0x0800c600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800c600 	.word	0x0800c600

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001024:	f002 f958 	bl	80032d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	@ (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	@ (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104e:	f007 fffd 	bl	800904c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001052:	f000 f80f 	bl	8001074 <main>

08001056 <LoopForever>:

LoopForever:
    b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001058:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001064:	0800d3c4 	.word	0x0800d3c4
  ldr r2, =_sbss
 8001068:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 800106c:	20000e44 	.word	0x20000e44

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6] = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	809a      	strh	r2, [r3, #4]
  uint8_t  IP_Addr[4] = {0};
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  static uint8_t TxData[100];
  int32_t Socket = -1;
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	61fb      	str	r3, [r7, #28]
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;
 800108e:	230a      	movs	r3, #10
 8001090:	837b      	strh	r3, [r7, #26]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8001092:	f002 f957 	bl	8003344 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001096:	f000 f957 	bl	8001348 <SystemClock_Config>
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 800109a:	2000      	movs	r0, #0
 800109c:	f001 fdac 	bl	8002bf8 <BSP_LED_Init>

#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80010a0:	4b8d      	ldr	r3, [pc, #564]	@ (80012d8 <main+0x264>)
 80010a2:	4a8e      	ldr	r2, [pc, #568]	@ (80012dc <main+0x268>)
 80010a4:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 9600;
 80010a6:	4b8c      	ldr	r3, [pc, #560]	@ (80012d8 <main+0x264>)
 80010a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010ac:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b8a      	ldr	r3, [pc, #552]	@ (80012d8 <main+0x264>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b88      	ldr	r3, [pc, #544]	@ (80012d8 <main+0x264>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b87      	ldr	r3, [pc, #540]	@ (80012d8 <main+0x264>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b85      	ldr	r3, [pc, #532]	@ (80012d8 <main+0x264>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b84      	ldr	r3, [pc, #528]	@ (80012d8 <main+0x264>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b82      	ldr	r3, [pc, #520]	@ (80012d8 <main+0x264>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d2:	4b81      	ldr	r3, [pc, #516]	@ (80012d8 <main+0x264>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d8:	4b7f      	ldr	r3, [pc, #508]	@ (80012d8 <main+0x264>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	@ 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 80010de:	497e      	ldr	r1, [pc, #504]	@ (80012d8 <main+0x264>)
 80010e0:	2000      	movs	r0, #0
 80010e2:	f001 fdcf 	bl	8002c84 <BSP_COM_Init>
#endif /* TERMINAL_USE */

  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \r\n\n");
 80010e6:	487e      	ldr	r0, [pc, #504]	@ (80012e0 <main+0x26c>)
 80010e8:	f007 fd88 	bl	8008bfc <puts>
  TERMOUT("TCP Client Instructions :\r\n");
 80010ec:	487d      	ldr	r0, [pc, #500]	@ (80012e4 <main+0x270>)
 80010ee:	f007 fd85 	bl	8008bfc <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\r\n");
 80010f2:	487d      	ldr	r0, [pc, #500]	@ (80012e8 <main+0x274>)
 80010f4:	f007 fd82 	bl	8008bfc <puts>
  TERMOUT("   you configured using the Configuration Access Point.\r\n");
 80010f8:	487c      	ldr	r0, [pc, #496]	@ (80012ec <main+0x278>)
 80010fa:	f007 fd7f 	bl	8008bfc <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\r\n");
 80010fe:	487c      	ldr	r0, [pc, #496]	@ (80012f0 <main+0x27c>)
 8001100:	f007 fd7c 	bl	8008bfc <puts>
  TERMOUT("   with port(8002).\r\n");
 8001104:	487b      	ldr	r0, [pc, #492]	@ (80012f4 <main+0x280>)
 8001106:	f007 fd79 	bl	8008bfc <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\r\n\n");
 800110a:	487b      	ldr	r0, [pc, #492]	@ (80012f8 <main+0x284>)
 800110c:	f007 fd76 	bl	8008bfc <puts>



  /*Initialize  WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001110:	f001 fc82 	bl	8002a18 <WIFI_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 8090 	bne.w	800123c <main+0x1c8>
  {
    TERMOUT("> WIFI Module Initialized.\r\n");
 800111c:	4877      	ldr	r0, [pc, #476]	@ (80012fc <main+0x288>)
 800111e:	f007 fd6d 	bl	8008bfc <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2106      	movs	r1, #6
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fcc3 	bl	8002ab4 <WIFI_GetMAC_Address>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d112      	bne.n	800115a <main+0xe6>
    {
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\r\n",
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	461c      	mov	r4, r3
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	461d      	mov	r5, r3
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	7c3a      	ldrb	r2, [r7, #16]
 8001144:	7c79      	ldrb	r1, [r7, #17]
 8001146:	9102      	str	r1, [sp, #8]
 8001148:	9201      	str	r2, [sp, #4]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	462b      	mov	r3, r5
 800114e:	4622      	mov	r2, r4
 8001150:	4601      	mov	r1, r0
 8001152:	486b      	ldr	r0, [pc, #428]	@ (8001300 <main+0x28c>)
 8001154:	f007 fcea 	bl	8008b2c <iprintf>
 8001158:	e005      	b.n	8001166 <main+0xf2>
               MAC_Addr[4],
               MAC_Addr[5]);
    }
    else
    {
      TERMOUT("> ERROR : CANNOT get MAC address\r\n");
 800115a:	486a      	ldr	r0, [pc, #424]	@ (8001304 <main+0x290>)
 800115c:	f007 fd4e 	bl	8008bfc <puts>
      BSP_LED_On(LED2);
 8001160:	2000      	movs	r0, #0
 8001162:	f001 fd79 	bl	8002c58 <BSP_LED_On>
    }

    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8001166:	2203      	movs	r2, #3
 8001168:	4967      	ldr	r1, [pc, #412]	@ (8001308 <main+0x294>)
 800116a:	4868      	ldr	r0, [pc, #416]	@ (800130c <main+0x298>)
 800116c:	f001 fc80 	bl	8002a70 <WIFI_Connect>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d15b      	bne.n	800122e <main+0x1ba>
    {
      TERMOUT("> es-wifi module connected \r\n");
 8001176:	4866      	ldr	r0, [pc, #408]	@ (8001310 <main+0x29c>)
 8001178:	f007 fd40 	bl	8008bfc <puts>
      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2104      	movs	r1, #4
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fcb6 	bl	8002af4 <WIFI_GetIP_Address>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d148      	bne.n	8001220 <main+0x1ac>
      {
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\r\n",
 800118e:	7a3b      	ldrb	r3, [r7, #8]
 8001190:	4619      	mov	r1, r3
 8001192:	7a7b      	ldrb	r3, [r7, #9]
 8001194:	461a      	mov	r2, r3
 8001196:	7abb      	ldrb	r3, [r7, #10]
 8001198:	4618      	mov	r0, r3
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	4603      	mov	r3, r0
 80011a0:	485c      	ldr	r0, [pc, #368]	@ (8001314 <main+0x2a0>)
 80011a2:	f007 fcc3 	bl	8008b2c <iprintf>
               IP_Addr[0],
               IP_Addr[1],
               IP_Addr[2],
               IP_Addr[3]);

        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\r\n",
 80011a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001318 <main+0x2a4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001318 <main+0x2a4>)
 80011ae:	785b      	ldrb	r3, [r3, #1]
 80011b0:	4618      	mov	r0, r3
 80011b2:	4b59      	ldr	r3, [pc, #356]	@ (8001318 <main+0x2a4>)
 80011b4:	789b      	ldrb	r3, [r3, #2]
 80011b6:	461c      	mov	r4, r3
 80011b8:	4b57      	ldr	r3, [pc, #348]	@ (8001318 <main+0x2a4>)
 80011ba:	78db      	ldrb	r3, [r3, #3]
 80011bc:	461a      	mov	r2, r3
 80011be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	9200      	str	r2, [sp, #0]
 80011c6:	4623      	mov	r3, r4
 80011c8:	4602      	mov	r2, r0
 80011ca:	4854      	ldr	r0, [pc, #336]	@ (800131c <main+0x2a8>)
 80011cc:	f007 fcae 	bl	8008b2c <iprintf>
               RemoteIP[1],
               RemoteIP[2],
               RemoteIP[3],
							 RemotePORT);

        while (Trials--)
 80011d0:	e013      	b.n	80011fa <main+0x186>
        {
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80011d2:	2300      	movs	r3, #0
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001318 <main+0x2a4>)
 80011de:	4a50      	ldr	r2, [pc, #320]	@ (8001320 <main+0x2ac>)
 80011e0:	2100      	movs	r1, #0
 80011e2:	2000      	movs	r0, #0
 80011e4:	f001 fcaa 	bl	8002b3c <WIFI_OpenClientConnection>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d105      	bne.n	80011fa <main+0x186>
          {
            TERMOUT("> TCP Connection opened successfully.\r\n");
 80011ee:	484d      	ldr	r0, [pc, #308]	@ (8001324 <main+0x2b0>)
 80011f0:	f007 fd04 	bl	8008bfc <puts>
            Socket = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
            break;
 80011f8:	e007      	b.n	800120a <main+0x196>
        while (Trials--)
 80011fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	3a01      	subs	r2, #1
 8001202:	b292      	uxth	r2, r2
 8001204:	837a      	strh	r2, [r7, #26]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1e3      	bne.n	80011d2 <main+0x15e>
          }
        }
        if(Socket == -1)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001210:	d11a      	bne.n	8001248 <main+0x1d4>
        {
          TERMOUT("> ERROR : Cannot open Connection\r\n");
 8001212:	4845      	ldr	r0, [pc, #276]	@ (8001328 <main+0x2b4>)
 8001214:	f007 fcf2 	bl	8008bfc <puts>
          BSP_LED_On(LED2);
 8001218:	2000      	movs	r0, #0
 800121a:	f001 fd1d 	bl	8002c58 <BSP_LED_On>
 800121e:	e013      	b.n	8001248 <main+0x1d4>
        }
      }
      else
      {
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\r\n");
 8001220:	4842      	ldr	r0, [pc, #264]	@ (800132c <main+0x2b8>)
 8001222:	f007 fceb 	bl	8008bfc <puts>
        BSP_LED_On(LED2);
 8001226:	2000      	movs	r0, #0
 8001228:	f001 fd16 	bl	8002c58 <BSP_LED_On>
 800122c:	e00c      	b.n	8001248 <main+0x1d4>
      }
    }
    else
    {
      TERMOUT("> ERROR : es-wifi module NOT connected\r\n");
 800122e:	4840      	ldr	r0, [pc, #256]	@ (8001330 <main+0x2bc>)
 8001230:	f007 fce4 	bl	8008bfc <puts>
      BSP_LED_On(LED2);
 8001234:	2000      	movs	r0, #0
 8001236:	f001 fd0f 	bl	8002c58 <BSP_LED_On>
 800123a:	e005      	b.n	8001248 <main+0x1d4>
    }
  }
  else
  {
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\r\n");
 800123c:	483d      	ldr	r0, [pc, #244]	@ (8001334 <main+0x2c0>)
 800123e:	f007 fcdd 	bl	8008bfc <puts>
    BSP_LED_On(LED2);
 8001242:	2000      	movs	r0, #0
 8001244:	f001 fd08 	bl	8002c58 <BSP_LED_On>
  }

  BSP_ACCELERO_Init();
 8001248:	f001 fed8 	bl	8002ffc <BSP_ACCELERO_Init>
  int16_t pDataXYZ[3] = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	809a      	strh	r2, [r3, #4]

  while(1)
  {
    if(Socket != -1)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125a:	d0fb      	beq.n	8001254 <main+0x1e0>
    {
    	/* Accelerometer reading */
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800125c:	463b      	mov	r3, r7
 800125e:	4618      	mov	r0, r3
 8001260:	f001 ff0c 	bl	800307c <BSP_ACCELERO_AccGetXYZ>
		printf("Accelerometer reading: X=%d, Y=%d, Z=%d\r\n",
				pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8001264:	f9b7 3000 	ldrsh.w	r3, [r7]
		printf("Accelerometer reading: X=%d, Y=%d, Z=%d\r\n",
 8001268:	4619      	mov	r1, r3
				pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 800126a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
		printf("Accelerometer reading: X=%d, Y=%d, Z=%d\r\n",
 800126e:	461a      	mov	r2, r3
				pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8001270:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
		printf("Accelerometer reading: X=%d, Y=%d, Z=%d\r\n",
 8001274:	4830      	ldr	r0, [pc, #192]	@ (8001338 <main+0x2c4>)
 8001276:	f007 fc59 	bl	8008b2c <iprintf>

		snprintf((char*)TxData, sizeof(TxData),
				 "%d, %d, %d\r\n",
				 pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 800127a:	f9b7 3000 	ldrsh.w	r3, [r7]
		snprintf((char*)TxData, sizeof(TxData),
 800127e:	4619      	mov	r1, r3
				 pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8001280:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001284:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
		snprintf((char*)TxData, sizeof(TxData),
 8001288:	9201      	str	r2, [sp, #4]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	460b      	mov	r3, r1
 800128e:	4a2b      	ldr	r2, [pc, #172]	@ (800133c <main+0x2c8>)
 8001290:	2164      	movs	r1, #100	@ 0x64
 8001292:	482b      	ldr	r0, [pc, #172]	@ (8001340 <main+0x2cc>)
 8001294:	f007 fcba 	bl	8008c0c <sniprintf>

		ret = WIFI_SendData(Socket, TxData, strlen((char*)TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8001298:	69fc      	ldr	r4, [r7, #28]
 800129a:	4829      	ldr	r0, [pc, #164]	@ (8001340 <main+0x2cc>)
 800129c:	f7fe ffe8 	bl	8000270 <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	1dbb      	adds	r3, r7, #6
 80012a6:	f242 7110 	movw	r1, #10000	@ 0x2710
 80012aa:	9100      	str	r1, [sp, #0]
 80012ac:	4924      	ldr	r1, [pc, #144]	@ (8001340 <main+0x2cc>)
 80012ae:	4620      	mov	r0, r4
 80012b0:	f001 fc80 	bl	8002bb4 <WIFI_SendData>
 80012b4:	4603      	mov	r3, r0
 80012b6:	617b      	str	r3, [r7, #20]
		if (ret != WIFI_STATUS_OK)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <main+0x252>
		{
			TERMOUT("> ERROR : Failed to Send Data, connection closed\r\n");
 80012be:	4821      	ldr	r0, [pc, #132]	@ (8001344 <main+0x2d0>)
 80012c0:	f007 fc9c 	bl	8008bfc <puts>
			break;
 80012c4:	e003      	b.n	80012ce <main+0x25a>
		}

		HAL_Delay(50);
 80012c6:	2032      	movs	r0, #50	@ 0x32
 80012c8:	f002 f8b8 	bl	800343c <HAL_Delay>
    if(Socket != -1)
 80012cc:	e7c2      	b.n	8001254 <main+0x1e0>
 80012ce:	2300      	movs	r3, #0
    }
  }
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdb0      	pop	{r4, r5, r7, pc}
 80012d8:	20000c68 	.word	0x20000c68
 80012dc:	40013800 	.word	0x40013800
 80012e0:	0800c618 	.word	0x0800c618
 80012e4:	0800c658 	.word	0x0800c658
 80012e8:	0800c674 	.word	0x0800c674
 80012ec:	0800c6b4 	.word	0x0800c6b4
 80012f0:	0800c6f0 	.word	0x0800c6f0
 80012f4:	0800c730 	.word	0x0800c730
 80012f8:	0800c748 	.word	0x0800c748
 80012fc:	0800c794 	.word	0x0800c794
 8001300:	0800c7b0 	.word	0x0800c7b0
 8001304:	0800c7e4 	.word	0x0800c7e4
 8001308:	0800c808 	.word	0x0800c808
 800130c:	0800c814 	.word	0x0800c814
 8001310:	0800c818 	.word	0x0800c818
 8001314:	0800c838 	.word	0x0800c838
 8001318:	20000000 	.word	0x20000000
 800131c:	0800c868 	.word	0x0800c868
 8001320:	0800c89c 	.word	0x0800c89c
 8001324:	0800c8a8 	.word	0x0800c8a8
 8001328:	0800c8d0 	.word	0x0800c8d0
 800132c:	0800c8f4 	.word	0x0800c8f4
 8001330:	0800c924 	.word	0x0800c924
 8001334:	0800c94c 	.word	0x0800c94c
 8001338:	0800c97c 	.word	0x0800c97c
 800133c:	0800c9a8 	.word	0x0800c9a8
 8001340:	20000238 	.word	0x20000238
 8001344:	0800c9b8 	.word	0x0800c9b8

08001348 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b096      	sub	sp, #88	@ 0x58
 800134c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800134e:	2310      	movs	r3, #16
 8001350:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001356:	2360      	movs	r3, #96	@ 0x60
 8001358:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001362:	2301      	movs	r3, #1
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 800136a:	2328      	movs	r3, #40	@ 0x28
 800136c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800136e:	2302      	movs	r3, #2
 8001370:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001372:	2307      	movs	r3, #7
 8001374:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001376:	2304      	movs	r3, #4
 8001378:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	4618      	mov	r0, r3
 800137e:	f003 f9ed 	bl	800475c <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x44>
  {
    /* Initialization Error */
    while(1);
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800138c:	230f      	movs	r3, #15
 800138e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2303      	movs	r3, #3
 8001392:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	657b      	str	r3, [r7, #84]	@ 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013a4:	2104      	movs	r1, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 fdb4 	bl	8004f14 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x6e>
  {
    /* Initialization Error */
    while(1);
 80013b2:	bf00      	nop
 80013b4:	e7fd      	b.n	80013b2 <SystemClock_Config+0x6a>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3758      	adds	r7, #88	@ 0x58
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 80013c8:	1d39      	adds	r1, r7, #4
 80013ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ce:	2201      	movs	r2, #1
 80013d0:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <__io_putchar+0x20>)
 80013d2:	f005 ff2a 	bl	800722a <HAL_UART_Transmit>

  return ch;
 80013d6:	687b      	ldr	r3, [r7, #4]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000c68 	.word	0x20000c68

080013e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d102      	bne.n	80013fa <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 80013f4:	f001 fb00 	bl	80029f8 <SPI_WIFI_ISR>
      break;
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 80013fa:	bf00      	nop
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001408:	4802      	ldr	r0, [pc, #8]	@ (8001414 <SPI3_IRQHandler+0x10>)
 800140a:	f005 f833 	bl	8006474 <HAL_SPI_IRQHandler>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200002a0 	.word	0x200002a0

08001418 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800142a:	bf00      	nop
 800142c:	e7fd      	b.n	800142a <HardFault_Handler+0x4>

0800142e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001432:	bf00      	nop
 8001434:	e7fd      	b.n	8001432 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800143a:	bf00      	nop
 800143c:	e7fd      	b.n	800143a <BusFault_Handler+0x4>

0800143e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001442:	bf00      	nop
 8001444:	e7fd      	b.n	8001442 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001474:	f001 ffc2 	bl	80033fc <HAL_IncTick>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001480:	2002      	movs	r0, #2
 8001482:	f002 fb2b 	bl	8003adc <HAL_GPIO_EXTI_IRQHandler>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}

0800148a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  return 1;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_kill>:

int _kill(int pid, int sig)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a4:	f007 fdcc 	bl	8009040 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2216      	movs	r2, #22
 80014ac:	601a      	str	r2, [r3, #0]
  return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_exit>:

void _exit (int status)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c2:	f04f 31ff 	mov.w	r1, #4294967295
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffe7 	bl	800149a <_kill>
  while (1) {}    /* Make sure we hang here */
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <_exit+0x12>

080014d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e00a      	b.n	80014f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e2:	f3af 8000 	nop.w
 80014e6:	4601      	mov	r1, r0
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	60ba      	str	r2, [r7, #8]
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf0      	blt.n	80014e2 <_read+0x12>
  }

  return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e009      	b.n	8001530 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	60ba      	str	r2, [r7, #8]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff4b 	bl	80013c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbf1      	blt.n	800151c <_write+0x12>
  }
  return len;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_close>:

int _close(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800156a:	605a      	str	r2, [r3, #4]
  return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_isatty>:

int _isatty(int file)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b4:	4a14      	ldr	r2, [pc, #80]	@ (8001608 <_sbrk+0x5c>)
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <_sbrk+0x60>)
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <_sbrk+0x64>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <_sbrk+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d207      	bcs.n	80015ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015dc:	f007 fd30 	bl	8009040 <__errno>
 80015e0:	4603      	mov	r3, r0
 80015e2:	220c      	movs	r2, #12
 80015e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e009      	b.n	8001600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f2:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <_sbrk+0x64>)
 80015fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20018000 	.word	0x20018000
 800160c:	00007000 	.word	0x00007000
 8001610:	2000029c 	.word	0x2000029c
 8001614:	20000e48 	.word	0x20000e48

08001618 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b2f      	cmp	r3, #47	@ 0x2f
 8001626:	d906      	bls.n	8001636 <Hex2Num+0x1e>
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b39      	cmp	r3, #57	@ 0x39
 800162c:	d803      	bhi.n	8001636 <Hex2Num+0x1e>
        return a - '0';
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	3b30      	subs	r3, #48	@ 0x30
 8001632:	b2db      	uxtb	r3, r3
 8001634:	e014      	b.n	8001660 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b60      	cmp	r3, #96	@ 0x60
 800163a:	d906      	bls.n	800164a <Hex2Num+0x32>
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	2b66      	cmp	r3, #102	@ 0x66
 8001640:	d803      	bhi.n	800164a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	3b57      	subs	r3, #87	@ 0x57
 8001646:	b2db      	uxtb	r3, r3
 8001648:	e00a      	b.n	8001660 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b40      	cmp	r3, #64	@ 0x40
 800164e:	d906      	bls.n	800165e <Hex2Num+0x46>
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b46      	cmp	r3, #70	@ 0x46
 8001654:	d803      	bhi.n	800165e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	3b37      	subs	r3, #55	@ 0x37
 800165a:	b2db      	uxtb	r3, r3
 800165c:	e000      	b.n	8001660 <Hex2Num+0x48>
    }

    return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 800167e:	e012      	b.n	80016a6 <ParseHexNumber+0x3a>
        sum <<= 4;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ffc4 	bl	8001618 <Hex2Num>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	4413      	add	r3, r2
 8001698:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3301      	adds	r3, #1
 800169e:	607b      	str	r3, [r7, #4]
        done_count++;
 80016a0:	7bbb      	ldrb	r3, [r7, #14]
 80016a2:	3301      	adds	r3, #1
 80016a4:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80016ac:	d903      	bls.n	80016b6 <ParseHexNumber+0x4a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b39      	cmp	r3, #57	@ 0x39
 80016b4:	d90f      	bls.n	80016d6 <ParseHexNumber+0x6a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b60      	cmp	r3, #96	@ 0x60
 80016bc:	d903      	bls.n	80016c6 <ParseHexNumber+0x5a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b66      	cmp	r3, #102	@ 0x66
 80016c4:	d907      	bls.n	80016d6 <ParseHexNumber+0x6a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b40      	cmp	r3, #64	@ 0x40
 80016cc:	d906      	bls.n	80016dc <ParseHexNumber+0x70>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b46      	cmp	r3, #70	@ 0x46
 80016d4:	d802      	bhi.n	80016dc <ParseHexNumber+0x70>
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d9d1      	bls.n	8001680 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <ParseHexNumber+0x7c>
        *cnt = done_count;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	7bba      	ldrb	r2, [r7, #14]
 80016e6:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b085      	sub	sp, #20
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b2d      	cmp	r3, #45	@ 0x2d
 800170e:	d119      	bne.n	8001744 <ParseNumber+0x52>
        minus = 1;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3301      	adds	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
        done_count++;
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	3301      	adds	r3, #1
 800171e:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001720:	e010      	b.n	8001744 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	3b30      	subs	r3, #48	@ 0x30
 8001734:	4413      	add	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3301      	adds	r3, #1
 800173c:	607b      	str	r3, [r7, #4]
        done_count++;
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	3301      	adds	r3, #1
 8001742:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b2f      	cmp	r3, #47	@ 0x2f
 800174a:	d903      	bls.n	8001754 <ParseNumber+0x62>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b39      	cmp	r3, #57	@ 0x39
 8001752:	d9e6      	bls.n	8001722 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <ParseNumber+0x6e>
        *cnt = done_count;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	7bba      	ldrb	r2, [r7, #14]
 800175e:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <ParseNumber+0x7a>
        return 0 - sum;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	425b      	negs	r3, r3
 800176a:	e000      	b.n	800176e <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 800176c:	68bb      	ldr	r3, [r7, #8]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 800177a:	b590      	push	{r4, r7, lr}
 800177c:	b087      	sub	sp, #28
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d027      	beq.n	80017e0 <ParseMAC+0x66>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d024      	beq.n	80017e0 <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001796:	e018      	b.n	80017ca <ParseMAC+0x50>
    uint8_t done_count = 1;
 8001798:	2301      	movs	r3, #1
 800179a:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80017a2:	d00d      	beq.n	80017c0 <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	75fa      	strb	r2, [r7, #23]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	189c      	adds	r4, r3, r2
 80017b0:	f107 0316 	add.w	r3, r7, #22
 80017b4:	4619      	mov	r1, r3
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f7ff ff58 	bl	800166c <ParseHexNumber>
 80017bc:	4603      	mov	r3, r0
 80017be:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 80017c0:	7dbb      	ldrb	r3, [r7, #22]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d906      	bls.n	80017e0 <ParseMAC+0x66>
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d803      	bhi.n	80017e0 <ParseMAC+0x66>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1db      	bne.n	8001798 <ParseMAC+0x1e>
   }
  }
}
 80017e0:	bf00      	nop
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}

080017e8 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d027      	beq.n	800184e <ParseIP+0x66>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d024      	beq.n	800184e <ParseIP+0x66>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d921      	bls.n	800184e <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800180a:	e019      	b.n	8001840 <ParseIP+0x58>
    uint8_t done_count = 1;
 800180c:	2301      	movs	r3, #1
 800180e:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b2e      	cmp	r3, #46	@ 0x2e
 8001816:	d00e      	beq.n	8001836 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001818:	f107 0316 	add.w	r3, r7, #22
 800181c:	4619      	mov	r1, r3
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f7ff ff67 	bl	80016f2 <ParseNumber>
 8001824:	4601      	mov	r1, r0
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	75fa      	strb	r2, [r7, #23]
 800182c:	461a      	mov	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4413      	add	r3, r2
 8001832:	b2ca      	uxtb	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8001836:	7dbb      	ldrb	r3, [r7, #22]
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b03      	cmp	r3, #3
 8001844:	d803      	bhi.n	800184e <ParseIP+0x66>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1de      	bne.n	800180c <ParseIP+0x24>
   }
  }
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	3302      	adds	r3, #2
 800186a:	4940      	ldr	r1, [pc, #256]	@ (800196c <AT_ParseInfo+0x114>)
 800186c:	4618      	mov	r0, r3
 800186e:	f007 fb2b 	bl	8008ec8 <strtok>
 8001872:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001874:	e071      	b.n	800195a <AT_ParseInfo+0x102>
    switch (num++) {
 8001876:	7afb      	ldrb	r3, [r7, #11]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	72fa      	strb	r2, [r7, #11]
 800187c:	2b06      	cmp	r3, #6
 800187e:	d866      	bhi.n	800194e <AT_ParseInfo+0xf6>
 8001880:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <AT_ParseInfo+0x30>)
 8001882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001886:	bf00      	nop
 8001888:	080018a5 	.word	0x080018a5
 800188c:	080018b9 	.word	0x080018b9
 8001890:	080018d1 	.word	0x080018d1
 8001894:	080018e9 	.word	0x080018e9
 8001898:	08001901 	.word	0x08001901
 800189c:	08001919 	.word	0x08001919
 80018a0:	0800192d 	.word	0x0800192d
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	221f      	movs	r2, #31
 80018a8:	68f9      	ldr	r1, [r7, #12]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 faf8 	bl	8008ea0 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	77da      	strb	r2, [r3, #31]
      break;
 80018b6:	e04b      	b.n	8001950 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3320      	adds	r3, #32
 80018bc:	2217      	movs	r2, #23
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f007 faed 	bl	8008ea0 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 80018ce:	e03f      	b.n	8001950 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3338      	adds	r3, #56	@ 0x38
 80018d4:	220f      	movs	r2, #15
 80018d6:	68f9      	ldr	r1, [r7, #12]
 80018d8:	4618      	mov	r0, r3
 80018da:	f007 fae1 	bl	8008ea0 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 80018e6:	e033      	b.n	8001950 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3348      	adds	r3, #72	@ 0x48
 80018ec:	220f      	movs	r2, #15
 80018ee:	68f9      	ldr	r1, [r7, #12]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f007 fad5 	bl	8008ea0 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 80018fe:	e027      	b.n	8001950 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3358      	adds	r3, #88	@ 0x58
 8001904:	220f      	movs	r2, #15
 8001906:	68f9      	ldr	r1, [r7, #12]
 8001908:	4618      	mov	r0, r3
 800190a:	f007 fac9 	bl	8008ea0 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 8001916:	e01b      	b.n	8001950 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001918:	2100      	movs	r1, #0
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff fee9 	bl	80016f2 <ParseNumber>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 800192a:	e011      	b.n	8001950 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 800192c:	4910      	ldr	r1, [pc, #64]	@ (8001970 <AT_ParseInfo+0x118>)
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f007 faca 	bl	8008ec8 <strtok>
 8001934:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3368      	adds	r3, #104	@ 0x68
 800193a:	221f      	movs	r2, #31
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	4618      	mov	r0, r3
 8001940:	f007 faae 	bl	8008ea0 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 800194c:	e000      	b.n	8001950 <AT_ParseInfo+0xf8>

    default: break;
 800194e:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001950:	4906      	ldr	r1, [pc, #24]	@ (800196c <AT_ParseInfo+0x114>)
 8001952:	2000      	movs	r0, #0
 8001954:	f007 fab8 	bl	8008ec8 <strtok>
 8001958:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d18a      	bne.n	8001876 <AT_ParseInfo+0x1e>
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	0800ca1c 	.word	0x0800ca1c
 8001970:	0800ca20 	.word	0x0800ca20

08001974 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3302      	adds	r3, #2
 8001986:	4959      	ldr	r1, [pc, #356]	@ (8001aec <AT_ParseConnSettings+0x178>)
 8001988:	4618      	mov	r0, r3
 800198a:	f007 fa9d 	bl	8008ec8 <strtok>
 800198e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001990:	e0a2      	b.n	8001ad8 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	73fa      	strb	r2, [r7, #15]
 8001998:	2b0b      	cmp	r3, #11
 800199a:	f200 808c 	bhi.w	8001ab6 <AT_ParseConnSettings+0x142>
 800199e:	a201      	add	r2, pc, #4	@ (adr r2, 80019a4 <AT_ParseConnSettings+0x30>)
 80019a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a4:	080019d5 	.word	0x080019d5
 80019a8:	080019eb 	.word	0x080019eb
 80019ac:	08001a03 	.word	0x08001a03
 80019b0:	08001a17 	.word	0x08001a17
 80019b4:	08001a2b 	.word	0x08001a2b
 80019b8:	08001a3f 	.word	0x08001a3f
 80019bc:	08001a4f 	.word	0x08001a4f
 80019c0:	08001a5f 	.word	0x08001a5f
 80019c4:	08001a6f 	.word	0x08001a6f
 80019c8:	08001a7f 	.word	0x08001a7f
 80019cc:	08001a8f 	.word	0x08001a8f
 80019d0:	08001aa3 	.word	0x08001aa3
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2220      	movs	r2, #32
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	4618      	mov	r0, r3
 80019dc:	f007 fa60 	bl	8008ea0 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80019e8:	e066      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	3321      	adds	r3, #33	@ 0x21
 80019ee:	2220      	movs	r2, #32
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 fa54 	bl	8008ea0 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 8001a00:	e05a      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001a02:	2100      	movs	r1, #0
 8001a04:	68b8      	ldr	r0, [r7, #8]
 8001a06:	f7ff fe74 	bl	80016f2 <ParseNumber>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8001a14:	e050      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8001a16:	2100      	movs	r1, #0
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f7ff fe6a 	bl	80016f2 <ParseNumber>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8001a28:	e046      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	68b8      	ldr	r0, [r7, #8]
 8001a2e:	f7ff fe60 	bl	80016f2 <ParseNumber>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001a3c:	e03c      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	3348      	adds	r3, #72	@ 0x48
 8001a42:	2204      	movs	r2, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	68b8      	ldr	r0, [r7, #8]
 8001a48:	f7ff fece 	bl	80017e8 <ParseIP>
      break;
 8001a4c:	e034      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	334c      	adds	r3, #76	@ 0x4c
 8001a52:	2204      	movs	r2, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	68b8      	ldr	r0, [r7, #8]
 8001a58:	f7ff fec6 	bl	80017e8 <ParseIP>
      break;
 8001a5c:	e02c      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	3350      	adds	r3, #80	@ 0x50
 8001a62:	2204      	movs	r2, #4
 8001a64:	4619      	mov	r1, r3
 8001a66:	68b8      	ldr	r0, [r7, #8]
 8001a68:	f7ff febe 	bl	80017e8 <ParseIP>
      break;
 8001a6c:	e024      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	3354      	adds	r3, #84	@ 0x54
 8001a72:	2204      	movs	r2, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	68b8      	ldr	r0, [r7, #8]
 8001a78:	f7ff feb6 	bl	80017e8 <ParseIP>
      break;
 8001a7c:	e01c      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	3358      	adds	r3, #88	@ 0x58
 8001a82:	2204      	movs	r2, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	68b8      	ldr	r0, [r7, #8]
 8001a88:	f7ff feae 	bl	80017e8 <ParseIP>
      break;
 8001a8c:	e014      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	68b8      	ldr	r0, [r7, #8]
 8001a92:	f7ff fe2e 	bl	80016f2 <ParseNumber>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8001aa0:	e00a      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	68b8      	ldr	r0, [r7, #8]
 8001aa6:	f7ff fe24 	bl	80016f2 <ParseNumber>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8001ab4:	e000      	b.n	8001ab8 <AT_ParseConnSettings+0x144>

    default:
      break;
 8001ab6:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001ab8:	490c      	ldr	r1, [pc, #48]	@ (8001aec <AT_ParseConnSettings+0x178>)
 8001aba:	2000      	movs	r0, #0
 8001abc:	f007 fa04 	bl	8008ec8 <strtok>
 8001ac0:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <AT_ParseConnSettings+0x164>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ad0:	d102      	bne.n	8001ad8 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f47f af59 	bne.w	8001992 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800ca1c 	.word	0x0800ca1c

08001af0 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d056      	beq.n	8001bbc <AT_ExecuteCommand+0xcc>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d051      	beq.n	8001bbc <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8001b1e:	68b8      	ldr	r0, [r7, #8]
 8001b20:	f7fe fba6 	bl	8000270 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b299      	uxth	r1, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68b8      	ldr	r0, [r7, #8]
 8001b32:	47a0      	blx	r4
 8001b34:	4603      	mov	r3, r0
 8001b36:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	dd3e      	ble.n	8001bbc <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001b4a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001b56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	dd27      	ble.n	8001bae <AT_ExecuteCommand+0xbe>
 8001b5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b62:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b66:	dc22      	bgt.n	8001bae <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001b68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b6c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b70:	d105      	bne.n	8001b7e <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001b72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001b7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8001b8a:	490f      	ldr	r1, [pc, #60]	@ (8001bc8 <AT_ExecuteCommand+0xd8>)
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f007 f9f7 	bl	8008f80 <strstr>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e010      	b.n	8001bbe <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8001b9c:	490b      	ldr	r1, [pc, #44]	@ (8001bcc <AT_ExecuteCommand+0xdc>)
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f007 f9ee 	bl	8008f80 <strstr>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001baa:	2305      	movs	r3, #5
 8001bac:	e007      	b.n	8001bbe <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001bae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bb2:	f113 0f04 	cmn.w	r3, #4
 8001bb6:	d101      	bne.n	8001bbc <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001bb8:	2306      	movs	r3, #6
 8001bba:	e000      	b.n	8001bbe <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001bbc:	2304      	movs	r3, #4
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd90      	pop	{r4, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	0800ca34 	.word	0x0800ca34
 8001bcc:	0800ca40 	.word	0x0800ca40

08001bd0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 8001bea:	68b8      	ldr	r0, [r7, #8]
 8001bec:	f7fe fb40 	bl	8000270 <strlen>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001bf4:	8a7b      	ldrh	r3, [r7, #18]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <AT_RequestSendData+0x32>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e05d      	b.n	8001cbe <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d057      	beq.n	8001cbc <AT_RequestSendData+0xec>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d052      	beq.n	8001cbc <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001c22:	8a79      	ldrh	r1, [r7, #18]
 8001c24:	68b8      	ldr	r0, [r7, #8]
 8001c26:	4798      	blx	r3
 8001c28:	4603      	mov	r3, r0
 8001c2a:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001c2c:	8a3a      	ldrh	r2, [r7, #16]
 8001c2e:	8a7b      	ldrh	r3, [r7, #18]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d143      	bne.n	8001cbc <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001c40:	8879      	ldrh	r1, [r7, #2]
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4798      	blx	r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001c4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d131      	bne.n	8001cb8 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001c60:	2100      	movs	r1, #0
 8001c62:	6a38      	ldr	r0, [r7, #32]
 8001c64:	4798      	blx	r3
 8001c66:	4603      	mov	r3, r0
 8001c68:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001c6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	dd19      	ble.n	8001ca6 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8001c72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c76:	6a3a      	ldr	r2, [r7, #32]
 8001c78:	4413      	add	r3, r2
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001c7e:	4912      	ldr	r1, [pc, #72]	@ (8001cc8 <AT_RequestSendData+0xf8>)
 8001c80:	6a38      	ldr	r0, [r7, #32]
 8001c82:	f007 f97d 	bl	8008f80 <strstr>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e016      	b.n	8001cbe <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001c90:	490e      	ldr	r1, [pc, #56]	@ (8001ccc <AT_RequestSendData+0xfc>)
 8001c92:	6a38      	ldr	r0, [r7, #32]
 8001c94:	f007 f974 	bl	8008f80 <strstr>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e00d      	b.n	8001cbe <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e00b      	b.n	8001cbe <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001ca6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001caa:	f113 0f04 	cmn.w	r3, #4
 8001cae:	d101      	bne.n	8001cb4 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	e004      	b.n	8001cbe <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e002      	b.n	8001cbe <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e000      	b.n	8001cbe <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8001cbc:	2304      	movs	r3, #4
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	0800ca34 	.word	0x0800ca34
 8001ccc:	0800ca40 	.word	0x0800ca40

08001cd0 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001ce2:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01b      	beq.n	8001d28 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	4798      	blx	r3
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d113      	bne.n	8001d28 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d06:	461a      	mov	r2, r3
 8001d08:	490a      	ldr	r1, [pc, #40]	@ (8001d34 <ES_WIFI_Init+0x64>)
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fef0 	bl	8001af0 <AT_ExecuteCommand>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fd98 	bl	8001858 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	0800ca50 	.word	0x0800ca50

08001d38 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00b      	beq.n	8001d64 <ES_WIFI_RegisterBusIO+0x2c>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d008      	beq.n	8001d64 <ES_WIFI_RegisterBusIO+0x2c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <ES_WIFI_RegisterBusIO+0x2c>
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <ES_WIFI_RegisterBusIO+0x2c>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001d64:	2302      	movs	r3, #2
 8001d66:	e014      	b.n	8001d92 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	4932      	ldr	r1, [pc, #200]	@ (8001e80 <ES_WIFI_Connect+0xe0>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f006 ff5d 	bl	8008c78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff fe8f 	bl	8001af0 <AT_ExecuteCommand>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d14b      	bne.n	8001e74 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4927      	ldr	r1, [pc, #156]	@ (8001e84 <ES_WIFI_Connect+0xe4>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f006 ff46 	bl	8008c78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001df8:	461a      	mov	r2, r3
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff fe78 	bl	8001af0 <AT_ExecuteCommand>
 8001e00:	4603      	mov	r3, r0
 8001e02:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d134      	bne.n	8001e74 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	491b      	ldr	r1, [pc, #108]	@ (8001e88 <ES_WIFI_Connect+0xe8>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f006 ff2b 	bl	8008c78 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7ff fe5d 	bl	8001af0 <AT_ExecuteCommand>
 8001e36:	4603      	mov	r3, r0
 8001e38:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d119      	bne.n	8001e74 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e46:	4911      	ldr	r1, [pc, #68]	@ (8001e8c <ES_WIFI_Connect+0xec>)
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f006 ff15 	bl	8008c78 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff fe47 	bl	8001af0 <AT_ExecuteCommand>
 8001e62:	4603      	mov	r3, r0
 8001e64:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d103      	bne.n	8001e74 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	0800ca68 	.word	0x0800ca68
 8001e84:	0800ca70 	.word	0x0800ca70
 8001e88:	0800ca78 	.word	0x0800ca78
 8001e8c:	0800ca80 	.word	0x0800ca80

08001e90 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e9e:	4913      	ldr	r1, [pc, #76]	@ (8001eec <ES_WIFI_IsConnected+0x5c>)
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f006 fee9 	bl	8008c78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fe1b 	bl	8001af0 <AT_ExecuteCommand>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8001eca:	2b31      	cmp	r3, #49	@ 0x31
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	0800ca84 	.word	0x0800ca84

08001ef0 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001efe:	4910      	ldr	r1, [pc, #64]	@ (8001f40 <ES_WIFI_GetNetworkSettings+0x50>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f006 feb9 	bl	8008c78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f12:	461a      	mov	r2, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff fdeb 	bl	8001af0 <AT_ExecuteCommand>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d108      	bne.n	8001f36 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	338d      	adds	r3, #141	@ 0x8d
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4610      	mov	r0, r2
 8001f32:	f7ff fd1f 	bl	8001974 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	0800ca8c 	.word	0x0800ca8c

08001f44 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f58:	4913      	ldr	r1, [pc, #76]	@ (8001fa8 <ES_WIFI_GetMACAddress+0x64>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f006 fe8c 	bl	8008c78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff fdbe 	bl	8001af0 <AT_ExecuteCommand>
 8001f74:	4603      	mov	r3, r0
 8001f76:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10e      	bne.n	8001f9c <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f84:	3302      	adds	r3, #2
 8001f86:	4909      	ldr	r1, [pc, #36]	@ (8001fac <ES_WIFI_GetMACAddress+0x68>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f006 ff9d 	bl	8008ec8 <strtok>
 8001f8e:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6938      	ldr	r0, [r7, #16]
 8001f98:	f7ff fbef 	bl	800177a <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	0800cadc 	.word	0x0800cadc
 8001fac:	0800cae0 	.word	0x0800cae0

08001fb0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <ES_WIFI_StartClientConnection+0x1e>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d105      	bne.n	8001fda <ES_WIFI_StartClientConnection+0x2a>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	885b      	ldrh	r3, [r3, #2]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <ES_WIFI_StartClientConnection+0x2a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e0b1      	b.n	800213e <ES_WIFI_StartClientConnection+0x18e>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4958      	ldr	r1, [pc, #352]	@ (8002148 <ES_WIFI_StartClientConnection+0x198>)
 8001fe8:	f006 fe46 	bl	8008c78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fd78 	bl	8001af0 <AT_ExecuteCommand>
 8002000:	4603      	mov	r3, r0
 8002002:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d114      	bne.n	8002034 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	494d      	ldr	r1, [pc, #308]	@ (800214c <ES_WIFI_StartClientConnection+0x19c>)
 8002018:	f006 fe2e 	bl	8008c78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002028:	461a      	mov	r2, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fd60 	bl	8001af0 <AT_ExecuteCommand>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d114      	bne.n	8002064 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	889b      	ldrh	r3, [r3, #4]
 8002044:	461a      	mov	r2, r3
 8002046:	4942      	ldr	r1, [pc, #264]	@ (8002150 <ES_WIFI_StartClientConnection+0x1a0>)
 8002048:	f006 fe16 	bl	8008c78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002058:	461a      	mov	r2, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fd48 	bl	8001af0 <AT_ExecuteCommand>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d114      	bne.n	8002094 <ES_WIFI_StartClientConnection+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	885b      	ldrh	r3, [r3, #2]
 8002074:	461a      	mov	r2, r3
 8002076:	4937      	ldr	r1, [pc, #220]	@ (8002154 <ES_WIFI_StartClientConnection+0x1a4>)
 8002078:	f006 fdfe 	bl	8008c78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002088:	461a      	mov	r2, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fd30 	bl	8001af0 <AT_ExecuteCommand>
 8002090:	4603      	mov	r3, r0
 8002092:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d120      	bne.n	80020dc <ES_WIFI_StartClientConnection+0x12c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	799b      	ldrb	r3, [r3, #6]
 80020a4:	4619      	mov	r1, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	79db      	ldrb	r3, [r3, #7]
 80020aa:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80020b0:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	9200      	str	r2, [sp, #0]
 80020ba:	4623      	mov	r3, r4
 80020bc:	460a      	mov	r2, r1
 80020be:	4926      	ldr	r1, [pc, #152]	@ (8002158 <ES_WIFI_StartClientConnection+0x1a8>)
 80020c0:	f006 fdda 	bl	8008c78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020d0:	461a      	mov	r2, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fd0c 	bl	8001af0 <AT_ExecuteCommand>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d116      	bne.n	8002110 <ES_WIFI_StartClientConnection+0x160>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d112      	bne.n	8002110 <ES_WIFI_StartClientConnection+0x160>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020f0:	491a      	ldr	r1, [pc, #104]	@ (800215c <ES_WIFI_StartClientConnection+0x1ac>)
 80020f2:	4618      	mov	r0, r3
 80020f4:	f006 fdc0 	bl	8008c78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002104:	461a      	mov	r2, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fcf2 	bl	8001af0 <AT_ExecuteCommand>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d112      	bne.n	800213c <ES_WIFI_StartClientConnection+0x18c>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800211c:	4910      	ldr	r1, [pc, #64]	@ (8002160 <ES_WIFI_StartClientConnection+0x1b0>)
 800211e:	4618      	mov	r0, r3
 8002120:	f006 fdaa 	bl	8008c78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002130:	461a      	mov	r2, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fcdc 	bl	8001af0 <AT_ExecuteCommand>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	bf00      	nop
 8002148:	0800cb44 	.word	0x0800cb44
 800214c:	0800cb4c 	.word	0x0800cb4c
 8002150:	0800cb54 	.word	0x0800cb54
 8002154:	0800cb5c 	.word	0x0800cb5c
 8002158:	0800cb64 	.word	0x0800cb64
 800215c:	0800cb74 	.word	0x0800cb74
 8002160:	0800cb7c 	.word	0x0800cb7c

08002164 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	461a      	mov	r2, r3
 8002170:	460b      	mov	r3, r1
 8002172:	72fb      	strb	r3, [r7, #11]
 8002174:	4613      	mov	r3, r2
 8002176:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002178:	2302      	movs	r3, #2
 800217a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8002182:	2301      	movs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e001      	b.n	800218c <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 800218c:	893b      	ldrh	r3, [r7, #8]
 800218e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8002192:	d302      	bcc.n	800219a <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8002194:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8002198:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	893a      	ldrh	r2, [r7, #8]
 800219e:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021a6:	7afa      	ldrb	r2, [r7, #11]
 80021a8:	4942      	ldr	r1, [pc, #264]	@ (80022b4 <ES_WIFI_SendData+0x150>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f006 fd64 	bl	8008c78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021bc:	461a      	mov	r2, r3
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff fc96 	bl	8001af0 <AT_ExecuteCommand>
 80021c4:	4603      	mov	r3, r0
 80021c6:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d15e      	bne.n	800228c <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4938      	ldr	r1, [pc, #224]	@ (80022b8 <ES_WIFI_SendData+0x154>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f006 fd4d 	bl	8008c78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021ea:	461a      	mov	r2, r3
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff fc7f 	bl	8001af0 <AT_ExecuteCommand>
 80021f2:	4603      	mov	r3, r0
 80021f4:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d13d      	bne.n	8002278 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002202:	893a      	ldrh	r2, [r7, #8]
 8002204:	492d      	ldr	r1, [pc, #180]	@ (80022bc <ES_WIFI_SendData+0x158>)
 8002206:	4618      	mov	r0, r3
 8002208:	f006 fd36 	bl	8008c78 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002218:	893a      	ldrh	r2, [r7, #8]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7ff fcd5 	bl	8001bd0 <AT_RequestSendData>
 8002226:	4603      	mov	r3, r0
 8002228:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d119      	bne.n	8002264 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002236:	4922      	ldr	r1, [pc, #136]	@ (80022c0 <ES_WIFI_SendData+0x15c>)
 8002238:	4618      	mov	r0, r3
 800223a:	f006 fea1 	bl	8008f80 <strstr>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d02c      	beq.n	800229e <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002244:	f640 1201 	movw	r2, #2305	@ 0x901
 8002248:	491e      	ldr	r1, [pc, #120]	@ (80022c4 <ES_WIFI_SendData+0x160>)
 800224a:	481f      	ldr	r0, [pc, #124]	@ (80022c8 <ES_WIFI_SendData+0x164>)
 800224c:	f006 fc6e 	bl	8008b2c <iprintf>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002256:	4619      	mov	r1, r3
 8002258:	481c      	ldr	r0, [pc, #112]	@ (80022cc <ES_WIFI_SendData+0x168>)
 800225a:	f006 fc67 	bl	8008b2c <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800225e:	2302      	movs	r3, #2
 8002260:	74fb      	strb	r3, [r7, #19]
 8002262:	e01c      	b.n	800229e <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8002264:	f640 1207 	movw	r2, #2311	@ 0x907
 8002268:	4916      	ldr	r1, [pc, #88]	@ (80022c4 <ES_WIFI_SendData+0x160>)
 800226a:	4817      	ldr	r0, [pc, #92]	@ (80022c8 <ES_WIFI_SendData+0x164>)
 800226c:	f006 fc5e 	bl	8008b2c <iprintf>
 8002270:	4817      	ldr	r0, [pc, #92]	@ (80022d0 <ES_WIFI_SendData+0x16c>)
 8002272:	f006 fcc3 	bl	8008bfc <puts>
 8002276:	e012      	b.n	800229e <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8002278:	f640 120c 	movw	r2, #2316	@ 0x90c
 800227c:	4911      	ldr	r1, [pc, #68]	@ (80022c4 <ES_WIFI_SendData+0x160>)
 800227e:	4812      	ldr	r0, [pc, #72]	@ (80022c8 <ES_WIFI_SendData+0x164>)
 8002280:	f006 fc54 	bl	8008b2c <iprintf>
 8002284:	4813      	ldr	r0, [pc, #76]	@ (80022d4 <ES_WIFI_SendData+0x170>)
 8002286:	f006 fcb9 	bl	8008bfc <puts>
 800228a:	e008      	b.n	800229e <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800228c:	f640 1211 	movw	r2, #2321	@ 0x911
 8002290:	490c      	ldr	r1, [pc, #48]	@ (80022c4 <ES_WIFI_SendData+0x160>)
 8002292:	480d      	ldr	r0, [pc, #52]	@ (80022c8 <ES_WIFI_SendData+0x164>)
 8002294:	f006 fc4a 	bl	8008b2c <iprintf>
 8002298:	480f      	ldr	r0, [pc, #60]	@ (80022d8 <ES_WIFI_SendData+0x174>)
 800229a:	f006 fcaf 	bl	8008bfc <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d102      	bne.n	80022aa <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	2200      	movs	r2, #0
 80022a8:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	0800cb44 	.word	0x0800cb44
 80022b8:	0800cd40 	.word	0x0800cd40
 80022bc:	0800cd48 	.word	0x0800cd48
 80022c0:	0800cd54 	.word	0x0800cd54
 80022c4:	0800cbd4 	.word	0x0800cbd4
 80022c8:	0800cc34 	.word	0x0800cc34
 80022cc:	0800cd5c 	.word	0x0800cd5c
 80022d0:	0800cd78 	.word	0x0800cd78
 80022d4:	0800cd94 	.word	0x0800cd94
 80022d8:	0800cda8 	.word	0x0800cda8

080022dc <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	@ 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 80022e4:	4b57      	ldr	r3, [pc, #348]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	4a56      	ldr	r2, [pc, #344]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f0:	4b54      	ldr	r3, [pc, #336]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	4b51      	ldr	r3, [pc, #324]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 80022fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002300:	4a50      	ldr	r2, [pc, #320]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002308:	4b4e      	ldr	r3, [pc, #312]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 800230a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002314:	4b4b      	ldr	r3, [pc, #300]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 8002316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002318:	4a4a      	ldr	r2, [pc, #296]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002320:	4b48      	ldr	r3, [pc, #288]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 8002322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800232c:	4b45      	ldr	r3, [pc, #276]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 800232e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002330:	4a44      	ldr	r2, [pc, #272]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 8002332:	f043 0310 	orr.w	r3, r3, #16
 8002336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002338:	4b42      	ldr	r3, [pc, #264]	@ (8002444 <SPI_WIFI_MspInit+0x168>)
 800233a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800234a:	483f      	ldr	r0, [pc, #252]	@ (8002448 <SPI_WIFI_MspInit+0x16c>)
 800234c:	f001 fbae 	bl	8003aac <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002350:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002354:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002356:	2301      	movs	r3, #1
 8002358:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	4837      	ldr	r0, [pc, #220]	@ (8002448 <SPI_WIFI_MspInit+0x16c>)
 800236a:	f001 f9dd 	bl	8003728 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800236e:	2302      	movs	r3, #2
 8002370:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002372:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002376:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	4619      	mov	r1, r3
 8002386:	4831      	ldr	r0, [pc, #196]	@ (800244c <SPI_WIFI_MspInit+0x170>)
 8002388:	f001 f9ce 	bl	8003728 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800238c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002390:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002392:	2301      	movs	r3, #1
 8002394:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80023a2:	f107 031c 	add.w	r3, r7, #28
 80023a6:	4619      	mov	r1, r3
 80023a8:	4828      	ldr	r0, [pc, #160]	@ (800244c <SPI_WIFI_MspInit+0x170>)
 80023aa:	f001 f9bd 	bl	8003728 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80023ae:	2201      	movs	r2, #1
 80023b0:	2101      	movs	r1, #1
 80023b2:	4826      	ldr	r0, [pc, #152]	@ (800244c <SPI_WIFI_MspInit+0x170>)
 80023b4:	f001 fb7a 	bl	8003aac <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80023b8:	2301      	movs	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80023c4:	2301      	movs	r3, #1
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	481f      	ldr	r0, [pc, #124]	@ (800244c <SPI_WIFI_MspInit+0x170>)
 80023d0:	f001 f9aa 	bl	8003728 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80023d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023d8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80023e2:	2301      	movs	r3, #1
 80023e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80023e6:	2306      	movs	r3, #6
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4817      	ldr	r0, [pc, #92]	@ (8002450 <SPI_WIFI_MspInit+0x174>)
 80023f2:	f001 f999 	bl	8003728 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80023f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fa:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002404:	2301      	movs	r3, #1
 8002406:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002408:	2306      	movs	r3, #6
 800240a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	4619      	mov	r1, r3
 8002412:	480f      	ldr	r0, [pc, #60]	@ (8002450 <SPI_WIFI_MspInit+0x174>)
 8002414:	f001 f988 	bl	8003728 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002418:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800241c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002422:	2301      	movs	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002426:	2301      	movs	r3, #1
 8002428:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800242a:	2306      	movs	r3, #6
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4619      	mov	r1, r3
 8002434:	4806      	ldr	r0, [pc, #24]	@ (8002450 <SPI_WIFI_MspInit+0x174>)
 8002436:	f001 f977 	bl	8003728 <HAL_GPIO_Init>
}
 800243a:	bf00      	nop
 800243c:	3730      	adds	r7, #48	@ 0x30
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	48000400 	.word	0x48000400
 800244c:	48001000 	.word	0x48001000
 8002450:	48000800 	.word	0x48000800

08002454 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d145      	bne.n	80024f4 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002468:	4b27      	ldr	r3, [pc, #156]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 800246a:	4a28      	ldr	r2, [pc, #160]	@ (800250c <SPI_WIFI_Init+0xb8>)
 800246c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800246e:	4826      	ldr	r0, [pc, #152]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 8002470:	f7ff ff34 	bl	80022dc <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002474:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 8002476:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800247a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800247c:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002482:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 8002484:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002488:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800248a:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 8002492:	2200      	movs	r2, #0
 8002494:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 8002498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800249e:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 80024a0:	2210      	movs	r2, #16
 80024a2:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80024a4:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80024aa:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80024b0:	4b15      	ldr	r3, [pc, #84]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80024bc:	4812      	ldr	r0, [pc, #72]	@ (8002508 <SPI_WIFI_Init+0xb4>)
 80024be:	f002 ff4d 	bl	800535c <HAL_SPI_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
 80024cc:	e018      	b.n	8002500 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	2007      	movs	r0, #7
 80024d4:	f001 f8b1 	bl	800363a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80024d8:	2007      	movs	r0, #7
 80024da:	f001 f8ca 	bl	8003672 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2033      	movs	r0, #51	@ 0x33
 80024e4:	f001 f8a9 	bl	800363a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80024e8:	2033      	movs	r0, #51	@ 0x33
 80024ea:	f001 f8c2 	bl	8003672 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80024ee:	200a      	movs	r0, #10
 80024f0:	f000 fa08 	bl	8002904 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 80024f4:	f000 f80c 	bl	8002510 <SPI_WIFI_ResetModule>
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]

  return rc;
 80024fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200002a0 	.word	0x200002a0
 800250c:	40003c00 	.word	0x40003c00

08002510 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002516:	f000 ff85 	bl	8003424 <HAL_GetTick>
 800251a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002520:	2200      	movs	r2, #0
 8002522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002526:	4835      	ldr	r0, [pc, #212]	@ (80025fc <SPI_WIFI_ResetModule+0xec>)
 8002528:	f001 fac0 	bl	8003aac <HAL_GPIO_WritePin>
 800252c:	200a      	movs	r0, #10
 800252e:	f000 ff85 	bl	800343c <HAL_Delay>
 8002532:	2201      	movs	r2, #1
 8002534:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002538:	4830      	ldr	r0, [pc, #192]	@ (80025fc <SPI_WIFI_ResetModule+0xec>)
 800253a:	f001 fab7 	bl	8003aac <HAL_GPIO_WritePin>
 800253e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002542:	f000 ff7b 	bl	800343c <HAL_Delay>
  WIFI_ENABLE_NSS();
 8002546:	2200      	movs	r2, #0
 8002548:	2101      	movs	r1, #1
 800254a:	482c      	ldr	r0, [pc, #176]	@ (80025fc <SPI_WIFI_ResetModule+0xec>)
 800254c:	f001 faae 	bl	8003aac <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002550:	200f      	movs	r0, #15
 8002552:	f000 f9d7 	bl	8002904 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8002556:	e02b      	b.n	80025b0 <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d907      	bls.n	800256e <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 800255e:	2201      	movs	r2, #1
 8002560:	2101      	movs	r1, #1
 8002562:	4826      	ldr	r0, [pc, #152]	@ (80025fc <SPI_WIFI_ResetModule+0xec>)
 8002564:	f001 faa2 	bl	8003aac <HAL_GPIO_WritePin>
      return -1;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
 800256c:	e042      	b.n	80025f4 <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	463a      	mov	r2, r7
 8002572:	18d1      	adds	r1, r2, r3
 8002574:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002578:	2201      	movs	r2, #1
 800257a:	4821      	ldr	r0, [pc, #132]	@ (8002600 <SPI_WIFI_ResetModule+0xf0>)
 800257c:	f002 fff6 	bl	800556c <HAL_SPI_Receive>
 8002580:	4603      	mov	r3, r0
 8002582:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	3302      	adds	r3, #2
 8002588:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 800258a:	f000 ff4b 	bl	8003424 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002598:	d202      	bcs.n	80025a0 <SPI_WIFI_ResetModule+0x90>
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 80025a0:	2201      	movs	r2, #1
 80025a2:	2101      	movs	r1, #1
 80025a4:	4815      	ldr	r0, [pc, #84]	@ (80025fc <SPI_WIFI_ResetModule+0xec>)
 80025a6:	f001 fa81 	bl	8003aac <HAL_GPIO_WritePin>
      return -1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	e021      	b.n	80025f4 <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 80025b0:	2102      	movs	r1, #2
 80025b2:	4812      	ldr	r0, [pc, #72]	@ (80025fc <SPI_WIFI_ResetModule+0xec>)
 80025b4:	f001 fa62 	bl	8003a7c <HAL_GPIO_ReadPin>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d0cc      	beq.n	8002558 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 80025be:	2201      	movs	r2, #1
 80025c0:	2101      	movs	r1, #1
 80025c2:	480e      	ldr	r0, [pc, #56]	@ (80025fc <SPI_WIFI_ResetModule+0xec>)
 80025c4:	f001 fa72 	bl	8003aac <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80025c8:	783b      	ldrb	r3, [r7, #0]
 80025ca:	2b15      	cmp	r3, #21
 80025cc:	d10e      	bne.n	80025ec <SPI_WIFI_ResetModule+0xdc>
 80025ce:	787b      	ldrb	r3, [r7, #1]
 80025d0:	2b15      	cmp	r3, #21
 80025d2:	d10b      	bne.n	80025ec <SPI_WIFI_ResetModule+0xdc>
 80025d4:	78bb      	ldrb	r3, [r7, #2]
 80025d6:	2b0d      	cmp	r3, #13
 80025d8:	d108      	bne.n	80025ec <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80025da:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80025dc:	2b0a      	cmp	r3, #10
 80025de:	d105      	bne.n	80025ec <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80025e0:	793b      	ldrb	r3, [r7, #4]
 80025e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80025e4:	d102      	bne.n	80025ec <SPI_WIFI_ResetModule+0xdc>
 80025e6:	797b      	ldrb	r3, [r7, #5]
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d002      	beq.n	80025f2 <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
 80025f0:	e000      	b.n	80025f4 <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	48001000 	.word	0x48001000
 8002600:	200002a0 	.word	0x200002a0

08002604 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002608:	4802      	ldr	r0, [pc, #8]	@ (8002614 <SPI_WIFI_DeInit+0x10>)
 800260a:	f002 ff73 	bl	80054f4 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200002a0 	.word	0x200002a0

08002618 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002620:	f000 ff00 	bl	8003424 <HAL_GetTick>
 8002624:	4603      	mov	r3, r0
 8002626:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002628:	e00a      	b.n	8002640 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800262a:	f000 fefb 	bl	8003424 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad2      	subs	r2, r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d902      	bls.n	8002640 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e007      	b.n	8002650 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002640:	2102      	movs	r1, #2
 8002642:	4805      	ldr	r0, [pc, #20]	@ (8002658 <wait_cmddata_rdy_high+0x40>)
 8002644:	f001 fa1a 	bl	8003a7c <HAL_GPIO_ReadPin>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d1ed      	bne.n	800262a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	48001000 	.word	0x48001000

0800265c <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002664:	f000 fede 	bl	8003424 <HAL_GetTick>
 8002668:	4603      	mov	r3, r0
 800266a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 800266c:	e00a      	b.n	8002684 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800266e:	f000 fed9 	bl	8003424 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad2      	subs	r2, r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	d902      	bls.n	8002684 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	e004      	b.n	800268e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <wait_cmddata_rdy_rising_event+0x3c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d0f0      	beq.n	800266e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800268c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000030c 	.word	0x2000030c

0800269c <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80026a4:	f000 febe 	bl	8003424 <HAL_GetTick>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 80026ac:	e00a      	b.n	80026c4 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80026ae:	f000 feb9 	bl	8003424 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1ad2      	subs	r2, r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d902      	bls.n	80026c4 <wait_spi_rx_event+0x28>
    {
      return -1;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	e004      	b.n	80026ce <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 80026c4:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <wait_spi_rx_event+0x3c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d0f0      	beq.n	80026ae <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80026cc:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000304 	.word	0x20000304

080026dc <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80026e4:	f000 fe9e 	bl	8003424 <HAL_GetTick>
 80026e8:	4603      	mov	r3, r0
 80026ea:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 80026ec:	e00a      	b.n	8002704 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80026ee:	f000 fe99 	bl	8003424 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad2      	subs	r2, r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d902      	bls.n	8002704 <wait_spi_tx_event+0x28>
    {
      return -1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e004      	b.n	800270e <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <wait_spi_tx_event+0x3c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d0f0      	beq.n	80026ee <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800270c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000308 	.word	0x20000308

0800271c <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	460b      	mov	r3, r1
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 800272e:	2201      	movs	r2, #1
 8002730:	2101      	movs	r1, #1
 8002732:	4834      	ldr	r0, [pc, #208]	@ (8002804 <SPI_WIFI_ReceiveData+0xe8>)
 8002734:	f001 f9ba 	bl	8003aac <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002738:	2003      	movs	r0, #3
 800273a:	f000 f8e3 	bl	8002904 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff8b 	bl	800265c <wait_cmddata_rdy_rising_event>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	da02      	bge.n	8002752 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800274c:	f06f 0302 	mvn.w	r3, #2
 8002750:	e054      	b.n	80027fc <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002752:	2200      	movs	r2, #0
 8002754:	2101      	movs	r1, #1
 8002756:	482b      	ldr	r0, [pc, #172]	@ (8002804 <SPI_WIFI_ReceiveData+0xe8>)
 8002758:	f001 f9a8 	bl	8003aac <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800275c:	200f      	movs	r0, #15
 800275e:	f000 f8d1 	bl	8002904 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8002762:	e03d      	b.n	80027e0 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8002764:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002768:	897b      	ldrh	r3, [r7, #10]
 800276a:	429a      	cmp	r2, r3
 800276c:	db02      	blt.n	8002774 <SPI_WIFI_ReceiveData+0x58>
 800276e:	897b      	ldrh	r3, [r7, #10]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d13c      	bne.n	80027ee <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <SPI_WIFI_ReceiveData+0xec>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	2201      	movs	r2, #1
 8002780:	4619      	mov	r1, r3
 8002782:	4822      	ldr	r0, [pc, #136]	@ (800280c <SPI_WIFI_ReceiveData+0xf0>)
 8002784:	f003 fcd2 	bl	800612c <HAL_SPI_Receive_IT>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800278e:	2201      	movs	r2, #1
 8002790:	2101      	movs	r1, #1
 8002792:	481c      	ldr	r0, [pc, #112]	@ (8002804 <SPI_WIFI_ReceiveData+0xe8>)
 8002794:	f001 f98a 	bl	8003aac <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002798:	f04f 33ff 	mov.w	r3, #4294967295
 800279c:	e02e      	b.n	80027fc <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff7b 	bl	800269c <wait_spi_rx_event>

      pData[0] = tmp[0];
 80027a6:	7d3a      	ldrb	r2, [r7, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3301      	adds	r3, #1
 80027b0:	7d7a      	ldrb	r2, [r7, #21]
 80027b2:	701a      	strb	r2, [r3, #0]
      length += 2;
 80027b4:	8afb      	ldrh	r3, [r7, #22]
 80027b6:	3302      	adds	r3, #2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3302      	adds	r3, #2
 80027c0:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 80027c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027c6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80027ca:	db09      	blt.n	80027e0 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80027cc:	2201      	movs	r2, #1
 80027ce:	2101      	movs	r1, #1
 80027d0:	480c      	ldr	r0, [pc, #48]	@ (8002804 <SPI_WIFI_ReceiveData+0xe8>)
 80027d2:	f001 f96b 	bl	8003aac <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80027d6:	f7ff fe9b 	bl	8002510 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80027da:	f06f 0303 	mvn.w	r3, #3
 80027de:	e00d      	b.n	80027fc <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80027e0:	2102      	movs	r1, #2
 80027e2:	4808      	ldr	r0, [pc, #32]	@ (8002804 <SPI_WIFI_ReceiveData+0xe8>)
 80027e4:	f001 f94a 	bl	8003a7c <HAL_GPIO_ReadPin>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d0ba      	beq.n	8002764 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80027ee:	2201      	movs	r2, #1
 80027f0:	2101      	movs	r1, #1
 80027f2:	4804      	ldr	r0, [pc, #16]	@ (8002804 <SPI_WIFI_ReceiveData+0xe8>)
 80027f4:	f001 f95a 	bl	8003aac <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80027f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	48001000 	.word	0x48001000
 8002808:	20000304 	.word	0x20000304
 800280c:	200002a0 	.word	0x200002a0

08002810 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	460b      	mov	r3, r1
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fef9 	bl	8002618 <wait_cmddata_rdy_high>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	da02      	bge.n	8002832 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	e04f      	b.n	80028d2 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8002832:	4b2a      	ldr	r3, [pc, #168]	@ (80028dc <SPI_WIFI_SendData+0xcc>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002838:	2200      	movs	r2, #0
 800283a:	2101      	movs	r1, #1
 800283c:	4828      	ldr	r0, [pc, #160]	@ (80028e0 <SPI_WIFI_SendData+0xd0>)
 800283e:	f001 f935 	bl	8003aac <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002842:	200f      	movs	r0, #15
 8002844:	f000 f85e 	bl	8002904 <SPI_WIFI_DelayUs>
  if (len > 1)
 8002848:	897b      	ldrh	r3, [r7, #10]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d919      	bls.n	8002882 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 800284e:	4b25      	ldr	r3, [pc, #148]	@ (80028e4 <SPI_WIFI_SendData+0xd4>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8002854:	897b      	ldrh	r3, [r7, #10]
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	68f9      	ldr	r1, [r7, #12]
 800285e:	4822      	ldr	r0, [pc, #136]	@ (80028e8 <SPI_WIFI_SendData+0xd8>)
 8002860:	f003 fbc8 	bl	8005ff4 <HAL_SPI_Transmit_IT>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800286a:	2201      	movs	r2, #1
 800286c:	2101      	movs	r1, #1
 800286e:	481c      	ldr	r0, [pc, #112]	@ (80028e0 <SPI_WIFI_SendData+0xd0>)
 8002870:	f001 f91c 	bl	8003aac <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	e02b      	b.n	80028d2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff2d 	bl	80026dc <wait_spi_tx_event>
  }

  if (len & 1)
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 800288c:	897b      	ldrh	r3, [r7, #10]
 800288e:	3b01      	subs	r3, #1
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002898:	230a      	movs	r3, #10
 800289a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <SPI_WIFI_SendData+0xd4>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	2201      	movs	r2, #1
 80028a8:	4619      	mov	r1, r3
 80028aa:	480f      	ldr	r0, [pc, #60]	@ (80028e8 <SPI_WIFI_SendData+0xd8>)
 80028ac:	f003 fba2 	bl	8005ff4 <HAL_SPI_Transmit_IT>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80028b6:	2201      	movs	r2, #1
 80028b8:	2101      	movs	r1, #1
 80028ba:	4809      	ldr	r0, [pc, #36]	@ (80028e0 <SPI_WIFI_SendData+0xd0>)
 80028bc:	f001 f8f6 	bl	8003aac <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
 80028c4:	e005      	b.n	80028d2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff07 	bl	80026dc <wait_spi_tx_event>
  }
  return len;
 80028ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000030c 	.word	0x2000030c
 80028e0:	48001000 	.word	0x48001000
 80028e4:	20000308 	.word	0x20000308
 80028e8:	200002a0 	.word	0x200002a0

080028ec <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fda1 	bl	800343c <HAL_Delay>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8002914:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <SPI_WIFI_DelayUs+0x94>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d122      	bne.n	8002962 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 800291c:	4b1f      	ldr	r3, [pc, #124]	@ (800299c <SPI_WIFI_DelayUs+0x98>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1f      	ldr	r2, [pc, #124]	@ (80029a0 <SPI_WIFI_DelayUs+0x9c>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	099b      	lsrs	r3, r3, #6
 8002928:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002932:	f000 fd77 	bl	8003424 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002938:	e002      	b.n	8002940 <SPI_WIFI_DelayUs+0x3c>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	3b01      	subs	r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f9      	bne.n	800293a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8002946:	f000 fd6d 	bl	8003424 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	4a11      	ldr	r2, [pc, #68]	@ (8002998 <SPI_WIFI_DelayUs+0x94>)
 8002952:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002954:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <SPI_WIFI_DelayUs+0x94>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <SPI_WIFI_DelayUs+0x5e>
 800295c:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <SPI_WIFI_DelayUs+0x94>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <SPI_WIFI_DelayUs+0x98>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a0f      	ldr	r2, [pc, #60]	@ (80029a4 <SPI_WIFI_DelayUs+0xa0>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	0c9a      	lsrs	r2, r3, #18
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <SPI_WIFI_DelayUs+0x94>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	fb02 f303 	mul.w	r3, r2, r3
 8002980:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002982:	e002      	b.n	800298a <SPI_WIFI_DelayUs+0x86>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3b01      	subs	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f9      	bne.n	8002984 <SPI_WIFI_DelayUs+0x80>
  return;
 8002990:	bf00      	nop
}
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000310 	.word	0x20000310
 800299c:	20000048 	.word	0x20000048
 80029a0:	10624dd3 	.word	0x10624dd3
 80029a4:	431bde83 	.word	0x431bde83

080029a8 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 80029b0:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_SPI_RxCpltCallback+0x24>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80029b8:	4b04      	ldr	r3, [pc, #16]	@ (80029cc <HAL_SPI_RxCpltCallback+0x24>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
  }
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000304 	.word	0x20000304

080029d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_SPI_TxCpltCallback+0x24>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80029e0:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <HAL_SPI_TxCpltCallback+0x24>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
  }
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000308 	.word	0x20000308

080029f8 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <SPI_WIFI_ISR+0x1c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d102      	bne.n	8002a0a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002a04:	4b03      	ldr	r3, [pc, #12]	@ (8002a14 <SPI_WIFI_ISR+0x1c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
   }
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	2000030c 	.word	0x2000030c

08002a18 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002a22:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <WIFI_Init+0x40>)
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <WIFI_Init+0x44>)
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <WIFI_Init+0x48>)
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <WIFI_Init+0x4c>)
 8002a2e:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <WIFI_Init+0x50>)
 8002a30:	480e      	ldr	r0, [pc, #56]	@ (8002a6c <WIFI_Init+0x54>)
 8002a32:	f7ff f981 	bl	8001d38 <ES_WIFI_RegisterBusIO>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002a3c:	480b      	ldr	r0, [pc, #44]	@ (8002a6c <WIFI_Init+0x54>)
 8002a3e:	f7ff f947 	bl	8001cd0 <ES_WIFI_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	0800271d 	.word	0x0800271d
 8002a5c:	08002811 	.word	0x08002811
 8002a60:	080028ed 	.word	0x080028ed
 8002a64:	08002605 	.word	0x08002605
 8002a68:	08002455 	.word	0x08002455
 8002a6c:	20000314 	.word	0x20000314

08002a70 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	68f9      	ldr	r1, [r7, #12]
 8002a88:	4809      	ldr	r0, [pc, #36]	@ (8002ab0 <WIFI_Connect+0x40>)
 8002a8a:	f7ff f989 	bl	8001da0 <ES_WIFI_Connect>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002a94:	4806      	ldr	r0, [pc, #24]	@ (8002ab0 <WIFI_Connect+0x40>)
 8002a96:	f7ff fa2b 	bl	8001ef0 <ES_WIFI_GetNetworkSettings>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000314 	.word	0x20000314

08002ab4 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <WIFI_GetMAC_Address+0x32>
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4806      	ldr	r0, [pc, #24]	@ (8002af0 <WIFI_GetMAC_Address+0x3c>)
 8002ad8:	f7ff fa34 	bl	8001f44 <ES_WIFI_GetMACAddress>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000314 	.word	0x20000314

08002af4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <WIFI_GetIP_Address+0x38>
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d90d      	bls.n	8002b2c <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002b10:	4809      	ldr	r0, [pc, #36]	@ (8002b38 <WIFI_GetIP_Address+0x44>)
 8002b12:	f7ff f9bd 	bl	8001e90 <ES_WIFI_IsConnected>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <WIFI_GetIP_Address+0x44>)
 8002b1e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 8002b22:	461a      	mov	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000314 	.word	0x20000314

08002b3c <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	@ 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8002b58:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002b5a:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8002b5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002b5e:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002b60:	7afb      	ldrb	r3, [r7, #11]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	3301      	adds	r3, #1
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	3302      	adds	r3, #2
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	3303      	adds	r3, #3
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	4619      	mov	r1, r3
 8002b92:	4807      	ldr	r0, [pc, #28]	@ (8002bb0 <WIFI_OpenClientConnection+0x74>)
 8002b94:	f7ff fa0c 	bl	8001fb0 <ES_WIFI_StartClientConnection>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8002ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3728      	adds	r7, #40	@ 0x28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000314 	.word	0x20000314

08002bb4 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	4806      	ldr	r0, [pc, #24]	@ (8002bf4 <WIFI_SendData+0x40>)
 8002bdc:	f7ff fac2 	bl	8002164 <ES_WIFI_SendData>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000314 	.word	0x20000314

08002bf8 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <BSP_LED_Init+0x28>
 8002c08:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <BSP_LED_Init+0x58>)
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0c:	4a10      	ldr	r2, [pc, #64]	@ (8002c50 <BSP_LED_Init+0x58>)
 8002c0e:	f043 0302 	orr.w	r3, r3, #2
 8002c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c14:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <BSP_LED_Init+0x58>)
 8002c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002c20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c24:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002c26:	2301      	movs	r3, #1
 8002c28:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	4a07      	ldr	r2, [pc, #28]	@ (8002c54 <BSP_LED_Init+0x5c>)
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	f107 020c 	add.w	r2, r7, #12
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fd71 	bl	8003728 <HAL_GPIO_Init>
}
 8002c46:	bf00      	nop
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	20000004 	.word	0x20000004

08002c58 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	4a06      	ldr	r2, [pc, #24]	@ (8002c80 <BSP_LED_On+0x28>)
 8002c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c6e:	b291      	uxth	r1, r2
 8002c70:	2201      	movs	r2, #1
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 ff1a 	bl	8003aac <HAL_GPIO_WritePin>
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000004 	.word	0x20000004

08002c84 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	@ 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <BSP_COM_Init+0x2a>
 8002c96:	4b2d      	ldr	r3, [pc, #180]	@ (8002d4c <BSP_COM_Init+0xc8>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d4c <BSP_COM_Init+0xc8>)
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d4c <BSP_COM_Init+0xc8>)
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <BSP_COM_Init+0x48>
 8002cb4:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <BSP_COM_Init+0xc8>)
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb8:	4a24      	ldr	r2, [pc, #144]	@ (8002d4c <BSP_COM_Init+0xc8>)
 8002cba:	f043 0302 	orr.w	r3, r3, #2
 8002cbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cc0:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <BSP_COM_Init+0xc8>)
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <BSP_COM_Init+0x66>
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <BSP_COM_Init+0xc8>)
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <BSP_COM_Init+0xc8>)
 8002cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cde:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <BSP_COM_Init+0xc8>)
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8002cea:	2340      	movs	r3, #64	@ 0x40
 8002cec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002cfa:	2307      	movs	r3, #7
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4a13      	ldr	r2, [pc, #76]	@ (8002d50 <BSP_COM_Init+0xcc>)
 8002d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d06:	f107 0214 	add.w	r2, r7, #20
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fd0b 	bl	8003728 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	4a0c      	ldr	r2, [pc, #48]	@ (8002d54 <BSP_COM_Init+0xd0>)
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	f107 0214 	add.w	r2, r7, #20
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fcfb 	bl	8003728 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	4a08      	ldr	r2, [pc, #32]	@ (8002d58 <BSP_COM_Init+0xd4>)
 8002d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8002d3e:	6838      	ldr	r0, [r7, #0]
 8002d40:	f004 fa1b 	bl	800717a <HAL_UART_Init>
}
 8002d44:	bf00      	nop
 8002d46:	3728      	adds	r7, #40	@ 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	2000000c 	.word	0x2000000c
 8002d54:	20000010 	.word	0x20000010
 8002d58:	20000008 	.word	0x20000008

08002d5c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002d64:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <I2Cx_MspInit+0xa8>)
 8002d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d68:	4a26      	ldr	r2, [pc, #152]	@ (8002e04 <I2Cx_MspInit+0xa8>)
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d70:	4b24      	ldr	r3, [pc, #144]	@ (8002e04 <I2Cx_MspInit+0xa8>)
 8002d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002d7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002d82:	2312      	movs	r3, #18
 8002d84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002d86:	2301      	movs	r3, #1
 8002d88:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	4619      	mov	r1, r3
 8002d98:	481b      	ldr	r0, [pc, #108]	@ (8002e08 <I2Cx_MspInit+0xac>)
 8002d9a:	f000 fcc5 	bl	8003728 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4619      	mov	r1, r3
 8002da4:	4818      	ldr	r0, [pc, #96]	@ (8002e08 <I2Cx_MspInit+0xac>)
 8002da6:	f000 fcbf 	bl	8003728 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002daa:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <I2Cx_MspInit+0xa8>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dae:	4a15      	ldr	r2, [pc, #84]	@ (8002e04 <I2Cx_MspInit+0xa8>)
 8002db0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db6:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <I2Cx_MspInit+0xa8>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002dc2:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <I2Cx_MspInit+0xa8>)
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002e04 <I2Cx_MspInit+0xa8>)
 8002dc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dcc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <I2Cx_MspInit+0xa8>)
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8002e04 <I2Cx_MspInit+0xa8>)
 8002dd4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002dd8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	210f      	movs	r1, #15
 8002dde:	2021      	movs	r0, #33	@ 0x21
 8002de0:	f000 fc2b 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002de4:	2021      	movs	r0, #33	@ 0x21
 8002de6:	f000 fc44 	bl	8003672 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002dea:	2200      	movs	r2, #0
 8002dec:	210f      	movs	r1, #15
 8002dee:	2022      	movs	r0, #34	@ 0x22
 8002df0:	f000 fc23 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002df4:	2022      	movs	r0, #34	@ 0x22
 8002df6:	f000 fc3c 	bl	8003672 <HAL_NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	@ 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	48000400 	.word	0x48000400

08002e0c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a12      	ldr	r2, [pc, #72]	@ (8002e60 <I2Cx_Init+0x54>)
 8002e18:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a11      	ldr	r2, [pc, #68]	@ (8002e64 <I2Cx_Init+0x58>)
 8002e1e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff89 	bl	8002d5c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fe5e 	bl	8003b0c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002e50:	2100      	movs	r1, #0
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f001 fc28 	bl	80046a8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40005800 	.word	0x40005800
 8002e64:	00702681 	.word	0x00702681

08002e68 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	@ 0x28
 8002e6c:	af04      	add	r7, sp, #16
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	72fb      	strb	r3, [r7, #11]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	813b      	strh	r3, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e86:	7afb      	ldrb	r3, [r7, #11]
 8002e88:	b299      	uxth	r1, r3
 8002e8a:	88f8      	ldrh	r0, [r7, #6]
 8002e8c:	893a      	ldrh	r2, [r7, #8]
 8002e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f001 f826 	bl	8003ef0 <HAL_I2C_Mem_Read>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002eae:	7afb      	ldrb	r3, [r7, #11]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f832 	bl	8002f1c <I2Cx_Error>
  }
  return status;
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b08a      	sub	sp, #40	@ 0x28
 8002ec6:	af04      	add	r7, sp, #16
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	4608      	mov	r0, r1
 8002ecc:	4611      	mov	r1, r2
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	72fb      	strb	r3, [r7, #11]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	813b      	strh	r3, [r7, #8]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002ee0:	7afb      	ldrb	r3, [r7, #11]
 8002ee2:	b299      	uxth	r1, r3
 8002ee4:	88f8      	ldrh	r0, [r7, #6]
 8002ee6:	893a      	ldrh	r2, [r7, #8]
 8002ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fee5 	bl	8003cc8 <HAL_I2C_Mem_Write>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002f08:	7afb      	ldrb	r3, [r7, #11]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f805 	bl	8002f1c <I2Cx_Error>
  }
  return status;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fe8a 	bl	8003c42 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ff6c 	bl	8002e0c <I2Cx_Init>
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002f40:	4802      	ldr	r0, [pc, #8]	@ (8002f4c <SENSOR_IO_Init+0x10>)
 8002f42:	f7ff ff63 	bl	8002e0c <I2Cx_Init>
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000c14 	.word	0x20000c14

08002f50 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	71bb      	strb	r3, [r7, #6]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002f62:	79bb      	ldrb	r3, [r7, #6]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	79f9      	ldrb	r1, [r7, #7]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	1d7b      	adds	r3, r7, #5
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2301      	movs	r3, #1
 8002f72:	4803      	ldr	r0, [pc, #12]	@ (8002f80 <SENSOR_IO_Write+0x30>)
 8002f74:	f7ff ffa5 	bl	8002ec2 <I2Cx_WriteMultiple>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000c14 	.word	0x20000c14

08002f84 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	460a      	mov	r2, r1
 8002f8e:	71fb      	strb	r3, [r7, #7]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002f98:	79bb      	ldrb	r3, [r7, #6]
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	79f9      	ldrb	r1, [r7, #7]
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	f107 030f 	add.w	r3, r7, #15
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	4804      	ldr	r0, [pc, #16]	@ (8002fbc <SENSOR_IO_Read+0x38>)
 8002fac:	f7ff ff5c 	bl	8002e68 <I2Cx_ReadMultiple>

  return read_value;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000c14 	.word	0x20000c14

08002fc0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	603a      	str	r2, [r7, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	71bb      	strb	r3, [r7, #6]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002fd6:	79bb      	ldrb	r3, [r7, #6]
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	79f9      	ldrb	r1, [r7, #7]
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	4804      	ldr	r0, [pc, #16]	@ (8002ff8 <SENSOR_IO_ReadMultiple+0x38>)
 8002fe8:	f7ff ff3e 	bl	8002e68 <I2Cx_ReadMultiple>
 8002fec:	4603      	mov	r3, r0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000c14 	.word	0x20000c14

08002ffc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003006:	2300      	movs	r3, #0
 8003008:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800300a:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <BSP_ACCELERO_Init+0x78>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4798      	blx	r3
 8003010:	4603      	mov	r3, r0
 8003012:	2b6a      	cmp	r3, #106	@ 0x6a
 8003014:	d002      	beq.n	800301c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
 800301a:	e025      	b.n	8003068 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800301c:	4b16      	ldr	r3, [pc, #88]	@ (8003078 <BSP_ACCELERO_Init+0x7c>)
 800301e:	4a15      	ldr	r2, [pc, #84]	@ (8003074 <BSP_ACCELERO_Init+0x78>)
 8003020:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003022:	2330      	movs	r3, #48	@ 0x30
 8003024:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800302a:	2300      	movs	r3, #0
 800302c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800302e:	2340      	movs	r3, #64	@ 0x40
 8003030:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800303a:	797a      	ldrb	r2, [r7, #5]
 800303c:	7abb      	ldrb	r3, [r7, #10]
 800303e:	4313      	orrs	r3, r2
 8003040:	b2db      	uxtb	r3, r3
 8003042:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003044:	7a3b      	ldrb	r3, [r7, #8]
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	b2db      	uxtb	r3, r3
 800304c:	b21b      	sxth	r3, r3
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	b21a      	sxth	r2, r3
 8003052:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	b21b      	sxth	r3, r3
 800305a:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800305c:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <BSP_ACCELERO_Init+0x7c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	89ba      	ldrh	r2, [r7, #12]
 8003064:	4610      	mov	r0, r2
 8003066:	4798      	blx	r3
  }  

  return ret;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000014 	.word	0x20000014
 8003078:	20000cf0 	.word	0x20000cf0

0800307c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003084:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800308c:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003096:	4b04      	ldr	r3, [pc, #16]	@ (80030a8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
    }
  }
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000cf0 	.word	0x20000cf0

080030ac <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80030ba:	2110      	movs	r1, #16
 80030bc:	20d4      	movs	r0, #212	@ 0xd4
 80030be:	f7ff ff61 	bl	8002f84 <SENSOR_IO_Read>
 80030c2:	4603      	mov	r3, r0
 80030c4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80030ca:	7bbb      	ldrb	r3, [r7, #14]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80030d2:	7bba      	ldrb	r2, [r7, #14]
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80030da:	7bbb      	ldrb	r3, [r7, #14]
 80030dc:	461a      	mov	r2, r3
 80030de:	2110      	movs	r1, #16
 80030e0:	20d4      	movs	r0, #212	@ 0xd4
 80030e2:	f7ff ff35 	bl	8002f50 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80030e6:	2112      	movs	r1, #18
 80030e8:	20d4      	movs	r0, #212	@ 0xd4
 80030ea:	f7ff ff4b 	bl	8002f84 <SENSOR_IO_Read>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80030fa:	7bbb      	ldrb	r3, [r7, #14]
 80030fc:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003100:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003102:	7bba      	ldrb	r2, [r7, #14]
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	4313      	orrs	r3, r2
 8003108:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800310a:	7bbb      	ldrb	r3, [r7, #14]
 800310c:	461a      	mov	r2, r3
 800310e:	2112      	movs	r1, #18
 8003110:	20d4      	movs	r0, #212	@ 0xd4
 8003112:	f7ff ff1d 	bl	8002f50 <SENSOR_IO_Write>
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003124:	2300      	movs	r3, #0
 8003126:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003128:	2110      	movs	r1, #16
 800312a:	20d4      	movs	r0, #212	@ 0xd4
 800312c:	f7ff ff2a 	bl	8002f84 <SENSOR_IO_Read>
 8003130:	4603      	mov	r3, r0
 8003132:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	461a      	mov	r2, r3
 8003140:	2110      	movs	r1, #16
 8003142:	20d4      	movs	r0, #212	@ 0xd4
 8003144:	f7ff ff04 	bl	8002f50 <SENSOR_IO_Write>
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003154:	f7ff fef2 	bl	8002f3c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003158:	210f      	movs	r1, #15
 800315a:	20d4      	movs	r0, #212	@ 0xd4
 800315c:	f7ff ff12 	bl	8002f84 <SENSOR_IO_Read>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	bd80      	pop	{r7, pc}

08003166 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003174:	2115      	movs	r1, #21
 8003176:	20d4      	movs	r0, #212	@ 0xd4
 8003178:	f7ff ff04 	bl	8002f84 <SENSOR_IO_Read>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	f023 0310 	bic.w	r3, r3, #16
 8003186:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	f043 0310 	orr.w	r3, r3, #16
 8003194:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	461a      	mov	r2, r3
 800319a:	2115      	movs	r1, #21
 800319c:	20d4      	movs	r0, #212	@ 0xd4
 800319e:	f7ff fed7 	bl	8002f50 <SENSOR_IO_Write>
}
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80031c2:	2110      	movs	r1, #16
 80031c4:	20d4      	movs	r0, #212	@ 0xd4
 80031c6:	f7ff fedd 	bl	8002f84 <SENSOR_IO_Read>
 80031ca:	4603      	mov	r3, r0
 80031cc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80031ce:	f107 0208 	add.w	r2, r7, #8
 80031d2:	2306      	movs	r3, #6
 80031d4:	2128      	movs	r1, #40	@ 0x28
 80031d6:	20d4      	movs	r0, #212	@ 0xd4
 80031d8:	f7ff fef2 	bl	8002fc0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80031dc:	2300      	movs	r3, #0
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e01a      	b.n	8003218 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	3301      	adds	r3, #1
 80031e8:	3320      	adds	r3, #32
 80031ea:	443b      	add	r3, r7
 80031ec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	7ffa      	ldrb	r2, [r7, #31]
 80031f6:	0052      	lsls	r2, r2, #1
 80031f8:	3220      	adds	r2, #32
 80031fa:	443a      	add	r2, r7
 80031fc:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003200:	4413      	add	r3, r2
 8003202:	b29a      	uxth	r2, r3
 8003204:	7ffb      	ldrb	r3, [r7, #31]
 8003206:	b212      	sxth	r2, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	3320      	adds	r3, #32
 800320c:	443b      	add	r3, r7
 800320e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003212:	7ffb      	ldrb	r3, [r7, #31]
 8003214:	3301      	adds	r3, #1
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	7ffb      	ldrb	r3, [r7, #31]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d9e1      	bls.n	80031e2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800321e:	7dfb      	ldrb	r3, [r7, #23]
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d829      	bhi.n	800327c <LSM6DSL_AccReadXYZ+0xd0>
 8003228:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <LSM6DSL_AccReadXYZ+0x84>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003265 	.word	0x08003265
 8003234:	0800327d 	.word	0x0800327d
 8003238:	0800327d 	.word	0x0800327d
 800323c:	0800327d 	.word	0x0800327d
 8003240:	08003277 	.word	0x08003277
 8003244:	0800327d 	.word	0x0800327d
 8003248:	0800327d 	.word	0x0800327d
 800324c:	0800327d 	.word	0x0800327d
 8003250:	0800326b 	.word	0x0800326b
 8003254:	0800327d 	.word	0x0800327d
 8003258:	0800327d 	.word	0x0800327d
 800325c:	0800327d 	.word	0x0800327d
 8003260:	08003271 	.word	0x08003271
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003264:	4b18      	ldr	r3, [pc, #96]	@ (80032c8 <LSM6DSL_AccReadXYZ+0x11c>)
 8003266:	61bb      	str	r3, [r7, #24]
    break;
 8003268:	e008      	b.n	800327c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800326a:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <LSM6DSL_AccReadXYZ+0x120>)
 800326c:	61bb      	str	r3, [r7, #24]
    break;
 800326e:	e005      	b.n	800327c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003270:	4b17      	ldr	r3, [pc, #92]	@ (80032d0 <LSM6DSL_AccReadXYZ+0x124>)
 8003272:	61bb      	str	r3, [r7, #24]
    break;
 8003274:	e002      	b.n	800327c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003276:	4b17      	ldr	r3, [pc, #92]	@ (80032d4 <LSM6DSL_AccReadXYZ+0x128>)
 8003278:	61bb      	str	r3, [r7, #24]
    break;    
 800327a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e01a      	b.n	80032b8 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003282:	7ffb      	ldrb	r3, [r7, #31]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	3320      	adds	r3, #32
 8003288:	443b      	add	r3, r7
 800328a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003296:	edd7 7a06 	vldr	s15, [r7, #24]
 800329a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329e:	7ffb      	ldrb	r3, [r7, #31]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032aa:	ee17 2a90 	vmov	r2, s15
 80032ae:	b212      	sxth	r2, r2
 80032b0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80032b2:	7ffb      	ldrb	r3, [r7, #31]
 80032b4:	3301      	adds	r3, #1
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	7ffb      	ldrb	r3, [r7, #31]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d9e1      	bls.n	8003282 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80032be:	bf00      	nop
 80032c0:	bf00      	nop
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	3d79db23 	.word	0x3d79db23
 80032cc:	3df9db23 	.word	0x3df9db23
 80032d0:	3e79db23 	.word	0x3e79db23
 80032d4:	3ef9db23 	.word	0x3ef9db23

080032d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032dc:	4b17      	ldr	r3, [pc, #92]	@ (800333c <SystemInit+0x64>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e2:	4a16      	ldr	r2, [pc, #88]	@ (800333c <SystemInit+0x64>)
 80032e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80032ec:	4b14      	ldr	r3, [pc, #80]	@ (8003340 <SystemInit+0x68>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a13      	ldr	r2, [pc, #76]	@ (8003340 <SystemInit+0x68>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032f8:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <SystemInit+0x68>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80032fe:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <SystemInit+0x68>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a0f      	ldr	r2, [pc, #60]	@ (8003340 <SystemInit+0x68>)
 8003304:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003308:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800330c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800330e:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <SystemInit+0x68>)
 8003310:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003314:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003316:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <SystemInit+0x68>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a09      	ldr	r2, [pc, #36]	@ (8003340 <SystemInit+0x68>)
 800331c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003320:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003322:	4b07      	ldr	r3, [pc, #28]	@ (8003340 <SystemInit+0x68>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003328:	4b04      	ldr	r3, [pc, #16]	@ (800333c <SystemInit+0x64>)
 800332a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800332e:	609a      	str	r2, [r3, #8]
#endif
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00
 8003340:	40021000 	.word	0x40021000

08003344 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334e:	2003      	movs	r0, #3
 8003350:	f000 f968 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003354:	200f      	movs	r0, #15
 8003356:	f000 f815 	bl	8003384 <HAL_InitTick>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	e001      	b.n	800336a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003366:	f000 f805 	bl	8003374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800336a:	79fb      	ldrb	r3, [r7, #7]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003390:	4b17      	ldr	r3, [pc, #92]	@ (80033f0 <HAL_InitTick+0x6c>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d023      	beq.n	80033e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003398:	4b16      	ldr	r3, [pc, #88]	@ (80033f4 <HAL_InitTick+0x70>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <HAL_InitTick+0x6c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	4619      	mov	r1, r3
 80033a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f96d 	bl	800368e <HAL_SYSTICK_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d809      	bhi.n	80033d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c0:	2200      	movs	r2, #0
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	f000 f937 	bl	800363a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033cc:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <HAL_InitTick+0x74>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e007      	b.n	80033e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	e004      	b.n	80033e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	e001      	b.n	80033e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000050 	.word	0x20000050
 80033f4:	20000048 	.word	0x20000048
 80033f8:	2000004c 	.word	0x2000004c

080033fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003400:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_IncTick+0x20>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_IncTick+0x24>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4413      	add	r3, r2
 800340c:	4a04      	ldr	r2, [pc, #16]	@ (8003420 <HAL_IncTick+0x24>)
 800340e:	6013      	str	r3, [r2, #0]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000050 	.word	0x20000050
 8003420:	20000cf4 	.word	0x20000cf4

08003424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return uwTick;
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <HAL_GetTick+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000cf4 	.word	0x20000cf4

0800343c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7ff ffee 	bl	8003424 <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d005      	beq.n	8003462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003456:	4b0a      	ldr	r3, [pc, #40]	@ (8003480 <HAL_Delay+0x44>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003462:	bf00      	nop
 8003464:	f7ff ffde 	bl	8003424 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	d8f7      	bhi.n	8003464 <HAL_Delay+0x28>
  {
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000050 	.word	0x20000050

08003484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	@ (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	@ (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	@ (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	@ (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	@ 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f0:	d301      	bcc.n	80035f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00f      	b.n	8003616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <SysTick_Config+0x40>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fe:	210f      	movs	r1, #15
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	f7ff ff8e 	bl	8003524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <SysTick_Config+0x40>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <SysTick_Config+0x40>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010

08003624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff29 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff3e 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff8e 	bl	8003578 <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5d 	bl	8003524 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff31 	bl	80034e8 <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffa2 	bl	80035e0 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d005      	beq.n	80036ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2204      	movs	r2, #4
 80036c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
 80036c8:	e029      	b.n	800371e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 020e 	bic.w	r2, r2, #14
 80036d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	f003 021c 	and.w	r2, r3, #28
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	2101      	movs	r1, #1
 80036f8:	fa01 f202 	lsl.w	r2, r1, r2
 80036fc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
    }
  }
  return status;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003736:	e17f      	b.n	8003a38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8171 	beq.w	8003a32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d005      	beq.n	8003768 <HAL_GPIO_Init+0x40>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d130      	bne.n	80037ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800379e:	2201      	movs	r2, #1
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0201 	and.w	r2, r3, #1
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d118      	bne.n	8003808 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037dc:	2201      	movs	r2, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f003 0201 	and.w	r2, r3, #1
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d017      	beq.n	8003844 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d123      	bne.n	8003898 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	6939      	ldr	r1, [r7, #16]
 8003894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80ac 	beq.w	8003a32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	4b5f      	ldr	r3, [pc, #380]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038de:	4a5e      	ldr	r2, [pc, #376]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80038e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038f2:	4a5a      	ldr	r2, [pc, #360]	@ (8003a5c <HAL_GPIO_Init+0x334>)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	3302      	adds	r3, #2
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800391c:	d025      	beq.n	800396a <HAL_GPIO_Init+0x242>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4f      	ldr	r2, [pc, #316]	@ (8003a60 <HAL_GPIO_Init+0x338>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <HAL_GPIO_Init+0x23e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4e      	ldr	r2, [pc, #312]	@ (8003a64 <HAL_GPIO_Init+0x33c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x23a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4d      	ldr	r2, [pc, #308]	@ (8003a68 <HAL_GPIO_Init+0x340>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x236>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4c      	ldr	r2, [pc, #304]	@ (8003a6c <HAL_GPIO_Init+0x344>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x232>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4b      	ldr	r2, [pc, #300]	@ (8003a70 <HAL_GPIO_Init+0x348>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x22e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4a      	ldr	r2, [pc, #296]	@ (8003a74 <HAL_GPIO_Init+0x34c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x22a>
 800394e:	2306      	movs	r3, #6
 8003950:	e00c      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003952:	2307      	movs	r3, #7
 8003954:	e00a      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003956:	2305      	movs	r3, #5
 8003958:	e008      	b.n	800396c <HAL_GPIO_Init+0x244>
 800395a:	2304      	movs	r3, #4
 800395c:	e006      	b.n	800396c <HAL_GPIO_Init+0x244>
 800395e:	2303      	movs	r3, #3
 8003960:	e004      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003962:	2302      	movs	r3, #2
 8003964:	e002      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_GPIO_Init+0x244>
 800396a:	2300      	movs	r3, #0
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	f002 0203 	and.w	r2, r2, #3
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	4093      	lsls	r3, r2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800397c:	4937      	ldr	r1, [pc, #220]	@ (8003a5c <HAL_GPIO_Init+0x334>)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	3302      	adds	r3, #2
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800398a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ae:	4a32      	ldr	r2, [pc, #200]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039b4:	4b30      	ldr	r3, [pc, #192]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039d8:	4a27      	ldr	r2, [pc, #156]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039de:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a02:	4a1d      	ldr	r2, [pc, #116]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a2c:	4a12      	ldr	r2, [pc, #72]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	3301      	adds	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f47f ae78 	bne.w	8003738 <HAL_GPIO_Init+0x10>
  }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	48000400 	.word	0x48000400
 8003a64:	48000800 	.word	0x48000800
 8003a68:	48000c00 	.word	0x48000c00
 8003a6c:	48001000 	.word	0x48001000
 8003a70:	48001400 	.word	0x48001400
 8003a74:	48001800 	.word	0x48001800
 8003a78:	40010400 	.word	0x40010400

08003a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	887b      	ldrh	r3, [r7, #2]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e001      	b.n	8003a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003abc:	787b      	ldrb	r3, [r7, #1]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ac8:	e002      	b.n	8003ad0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ae6:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d006      	beq.n	8003b00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003af2:	4a05      	ldr	r2, [pc, #20]	@ (8003b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fc72 	bl	80013e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40010400 	.word	0x40010400

08003b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e08d      	b.n	8003c3a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8b4 	bl	8003ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2224      	movs	r2, #36	@ 0x24
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d107      	bne.n	8003b86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	e006      	b.n	8003b94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d108      	bne.n	8003bae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	e007      	b.n	8003bbe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003be0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69d9      	ldr	r1, [r3, #28]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e021      	b.n	8003c98 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	@ 0x24
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f821 	bl	8003cb4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	817b      	strh	r3, [r7, #10]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	813b      	strh	r3, [r7, #8]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	f040 80f9 	bne.w	8003ee2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_I2C_Mem_Write+0x34>
 8003cf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d02:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0ed      	b.n	8003ee4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_I2C_Mem_Write+0x4e>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e0e6      	b.n	8003ee4 <HAL_I2C_Mem_Write+0x21c>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d1e:	f7ff fb81 	bl	8003424 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2319      	movs	r3, #25
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fac3 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0d1      	b.n	8003ee4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2221      	movs	r2, #33	@ 0x21
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2240      	movs	r2, #64	@ 0x40
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d68:	88f8      	ldrh	r0, [r7, #6]
 8003d6a:	893a      	ldrh	r2, [r7, #8]
 8003d6c:	8979      	ldrh	r1, [r7, #10]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	4603      	mov	r3, r0
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f9d3 	bl	8004124 <I2C_RequestMemoryWrite>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0a9      	b.n	8003ee4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2bff      	cmp	r3, #255	@ 0xff
 8003d98:	d90e      	bls.n	8003db8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	22ff      	movs	r2, #255	@ 0xff
 8003d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	8979      	ldrh	r1, [r7, #10]
 8003da8:	2300      	movs	r3, #0
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fc47 	bl	8004644 <I2C_TransferConfig>
 8003db6:	e00f      	b.n	8003dd8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	8979      	ldrh	r1, [r7, #10]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fc36 	bl	8004644 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fac6 	bl	800436e <I2C_WaitOnTXISFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e07b      	b.n	8003ee4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d034      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x1c8>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d130      	bne.n	8003e90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e34:	2200      	movs	r2, #0
 8003e36:	2180      	movs	r1, #128	@ 0x80
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fa3f 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e04d      	b.n	8003ee4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2bff      	cmp	r3, #255	@ 0xff
 8003e50:	d90e      	bls.n	8003e70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	22ff      	movs	r2, #255	@ 0xff
 8003e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	8979      	ldrh	r1, [r7, #10]
 8003e60:	2300      	movs	r3, #0
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fbeb 	bl	8004644 <I2C_TransferConfig>
 8003e6e:	e00f      	b.n	8003e90 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	8979      	ldrh	r1, [r7, #10]
 8003e82:	2300      	movs	r3, #0
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fbda 	bl	8004644 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d19e      	bne.n	8003dd8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 faac 	bl	80043fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e01a      	b.n	8003ee4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6859      	ldr	r1, [r3, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <HAL_I2C_Mem_Write+0x224>)
 8003ec2:	400b      	ands	r3, r1
 8003ec4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	fe00e800 	.word	0xfe00e800

08003ef0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	461a      	mov	r2, r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	817b      	strh	r3, [r7, #10]
 8003f02:	460b      	mov	r3, r1
 8003f04:	813b      	strh	r3, [r7, #8]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	f040 80fd 	bne.w	8004112 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_I2C_Mem_Read+0x34>
 8003f1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f2a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0f1      	b.n	8004114 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_I2C_Mem_Read+0x4e>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e0ea      	b.n	8004114 <HAL_I2C_Mem_Read+0x224>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f46:	f7ff fa6d 	bl	8003424 <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2319      	movs	r3, #25
 8003f52:	2201      	movs	r2, #1
 8003f54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f9af 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0d5      	b.n	8004114 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2222      	movs	r2, #34	@ 0x22
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2240      	movs	r2, #64	@ 0x40
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a3a      	ldr	r2, [r7, #32]
 8003f82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f90:	88f8      	ldrh	r0, [r7, #6]
 8003f92:	893a      	ldrh	r2, [r7, #8]
 8003f94:	8979      	ldrh	r1, [r7, #10]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f913 	bl	80041cc <I2C_RequestMemoryRead>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0ad      	b.n	8004114 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2bff      	cmp	r3, #255	@ 0xff
 8003fc0:	d90e      	bls.n	8003fe0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	8979      	ldrh	r1, [r7, #10]
 8003fd0:	4b52      	ldr	r3, [pc, #328]	@ (800411c <HAL_I2C_Mem_Read+0x22c>)
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fb33 	bl	8004644 <I2C_TransferConfig>
 8003fde:	e00f      	b.n	8004000 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	8979      	ldrh	r1, [r7, #10]
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800411c <HAL_I2C_Mem_Read+0x22c>)
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fb22 	bl	8004644 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004006:	2200      	movs	r2, #0
 8004008:	2104      	movs	r1, #4
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f956 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e07c      	b.n	8004114 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d034      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x1d0>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d130      	bne.n	80040c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004064:	2200      	movs	r2, #0
 8004066:	2180      	movs	r1, #128	@ 0x80
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f927 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e04d      	b.n	8004114 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	2bff      	cmp	r3, #255	@ 0xff
 8004080:	d90e      	bls.n	80040a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408c:	b2da      	uxtb	r2, r3
 800408e:	8979      	ldrh	r1, [r7, #10]
 8004090:	2300      	movs	r3, #0
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fad3 	bl	8004644 <I2C_TransferConfig>
 800409e:	e00f      	b.n	80040c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	8979      	ldrh	r1, [r7, #10]
 80040b2:	2300      	movs	r3, #0
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fac2 	bl	8004644 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d19a      	bne.n	8004000 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f994 	bl	80043fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e01a      	b.n	8004114 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2220      	movs	r2, #32
 80040e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_I2C_Mem_Read+0x230>)
 80040f2:	400b      	ands	r3, r1
 80040f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	80002400 	.word	0x80002400
 8004120:	fe00e800 	.word	0xfe00e800

08004124 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	461a      	mov	r2, r3
 8004132:	4603      	mov	r3, r0
 8004134:	817b      	strh	r3, [r7, #10]
 8004136:	460b      	mov	r3, r1
 8004138:	813b      	strh	r3, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	4b20      	ldr	r3, [pc, #128]	@ (80041c8 <I2C_RequestMemoryWrite+0xa4>)
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fa79 	bl	8004644 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	69b9      	ldr	r1, [r7, #24]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f909 	bl	800436e <I2C_WaitOnTXISFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e02c      	b.n	80041c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	629a      	str	r2, [r3, #40]	@ 0x28
 8004176:	e015      	b.n	80041a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004178:	893b      	ldrh	r3, [r7, #8]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	b29b      	uxth	r3, r3
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	69b9      	ldr	r1, [r7, #24]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f8ef 	bl	800436e <I2C_WaitOnTXISFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e012      	b.n	80041c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800419a:	893b      	ldrh	r3, [r7, #8]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2200      	movs	r2, #0
 80041ac:	2180      	movs	r1, #128	@ 0x80
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f884 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	80002000 	.word	0x80002000

080041cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	460b      	mov	r3, r1
 80041e0:	813b      	strh	r3, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	8979      	ldrh	r1, [r7, #10]
 80041ec:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <I2C_RequestMemoryRead+0xa4>)
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2300      	movs	r3, #0
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fa26 	bl	8004644 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	69b9      	ldr	r1, [r7, #24]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f8b6 	bl	800436e <I2C_WaitOnTXISFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e02c      	b.n	8004266 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d105      	bne.n	800421e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004212:	893b      	ldrh	r3, [r7, #8]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	629a      	str	r2, [r3, #40]	@ 0x28
 800421c:	e015      	b.n	800424a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800421e:	893b      	ldrh	r3, [r7, #8]
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	b29b      	uxth	r3, r3
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	69b9      	ldr	r1, [r7, #24]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f89c 	bl	800436e <I2C_WaitOnTXISFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e012      	b.n	8004266 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004240:	893b      	ldrh	r3, [r7, #8]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2200      	movs	r2, #0
 8004252:	2140      	movs	r1, #64	@ 0x40
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f831 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	80002000 	.word	0x80002000

08004274 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d103      	bne.n	8004292 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d007      	beq.n	80042b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	619a      	str	r2, [r3, #24]
  }
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042cc:	e03b      	b.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f8d6 	bl	8004484 <I2C_IsErrorOccurred>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e041      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d02d      	beq.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7ff f89b 	bl	8003424 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <I2C_WaitOnFlagUntilTimeout+0x44>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d122      	bne.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4013      	ands	r3, r2
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	429a      	cmp	r2, r3
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	429a      	cmp	r2, r3
 800431c:	d113      	bne.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e00f      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4013      	ands	r3, r2
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	429a      	cmp	r2, r3
 8004362:	d0b4      	beq.n	80042ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800437a:	e033      	b.n	80043e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f87f 	bl	8004484 <I2C_IsErrorOccurred>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e031      	b.n	80043f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d025      	beq.n	80043e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004398:	f7ff f844 	bl	8003424 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d302      	bcc.n	80043ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d11a      	bne.n	80043e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d013      	beq.n	80043e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e007      	b.n	80043f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d1c4      	bne.n	800437c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004408:	e02f      	b.n	800446a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f838 	bl	8004484 <I2C_IsErrorOccurred>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e02d      	b.n	800447a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441e:	f7ff f801 	bl	8003424 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	429a      	cmp	r2, r3
 800442c:	d302      	bcc.n	8004434 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d11a      	bne.n	800446a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b20      	cmp	r3, #32
 8004440:	d013      	beq.n	800446a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004446:	f043 0220 	orr.w	r2, r3, #32
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e007      	b.n	800447a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b20      	cmp	r3, #32
 8004476:	d1c8      	bne.n	800440a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	@ 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d068      	beq.n	8004582 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2210      	movs	r2, #16
 80044b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044b8:	e049      	b.n	800454e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d045      	beq.n	800454e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044c2:	f7fe ffaf 	bl	8003424 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d302      	bcc.n	80044d8 <I2C_IsErrorOccurred+0x54>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d13a      	bne.n	800454e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044fa:	d121      	bne.n	8004540 <I2C_IsErrorOccurred+0xbc>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004502:	d01d      	beq.n	8004540 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004504:	7cfb      	ldrb	r3, [r7, #19]
 8004506:	2b20      	cmp	r3, #32
 8004508:	d01a      	beq.n	8004540 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004518:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800451a:	f7fe ff83 	bl	8003424 <HAL_GetTick>
 800451e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004520:	e00e      	b.n	8004540 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004522:	f7fe ff7f 	bl	8003424 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b19      	cmp	r3, #25
 800452e:	d907      	bls.n	8004540 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	f043 0320 	orr.w	r3, r3, #32
 8004536:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800453e:	e006      	b.n	800454e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b20      	cmp	r3, #32
 800454c:	d1e9      	bne.n	8004522 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b20      	cmp	r3, #32
 800455a:	d003      	beq.n	8004564 <I2C_IsErrorOccurred+0xe0>
 800455c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0aa      	beq.n	80044ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004568:	2b00      	cmp	r3, #0
 800456a:	d103      	bne.n	8004574 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2220      	movs	r2, #32
 8004572:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f043 0304 	orr.w	r3, r3, #4
 800457a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00b      	beq.n	80045ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	f043 0308 	orr.w	r3, r3, #8
 80045bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f043 0302 	orr.w	r3, r3, #2
 80045de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80045f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01c      	beq.n	8004632 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff fe3b 	bl	8004274 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6859      	ldr	r1, [r3, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <I2C_IsErrorOccurred+0x1bc>)
 800460a:	400b      	ands	r3, r1
 800460c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004636:	4618      	mov	r0, r3
 8004638:	3728      	adds	r7, #40	@ 0x28
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	fe00e800 	.word	0xfe00e800

08004644 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	817b      	strh	r3, [r7, #10]
 8004652:	4613      	mov	r3, r2
 8004654:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004656:	897b      	ldrh	r3, [r7, #10]
 8004658:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800465c:	7a7b      	ldrb	r3, [r7, #9]
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004664:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	4313      	orrs	r3, r2
 800466e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004672:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	0d5b      	lsrs	r3, r3, #21
 800467e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004682:	4b08      	ldr	r3, [pc, #32]	@ (80046a4 <I2C_TransferConfig+0x60>)
 8004684:	430b      	orrs	r3, r1
 8004686:	43db      	mvns	r3, r3
 8004688:	ea02 0103 	and.w	r1, r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	03ff63ff 	.word	0x03ff63ff

080046a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	d138      	bne.n	8004730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e032      	b.n	8004732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	@ 0x24
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0201 	bic.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	e000      	b.n	8004732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004730:	2302      	movs	r3, #2
  }
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004744:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <HAL_PWREx_GetVoltageRange+0x18>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40007000 	.word	0x40007000

0800475c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e3ca      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800476e:	4b97      	ldr	r3, [pc, #604]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004778:	4b94      	ldr	r3, [pc, #592]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 80e4 	beq.w	8004958 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <HAL_RCC_OscConfig+0x4a>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b0c      	cmp	r3, #12
 800479a:	f040 808b 	bne.w	80048b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	f040 8087 	bne.w	80048b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047a6:	4b89      	ldr	r3, [pc, #548]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_RCC_OscConfig+0x62>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e3a2      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1a      	ldr	r2, [r3, #32]
 80047c2:	4b82      	ldr	r3, [pc, #520]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <HAL_RCC_OscConfig+0x7c>
 80047ce:	4b7f      	ldr	r3, [pc, #508]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d6:	e005      	b.n	80047e4 <HAL_RCC_OscConfig+0x88>
 80047d8:	4b7c      	ldr	r3, [pc, #496]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d223      	bcs.n	8004830 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fd55 	bl	800529c <RCC_SetFlashLatencyFromMSIRange>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e383      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047fc:	4b73      	ldr	r3, [pc, #460]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a72      	ldr	r2, [pc, #456]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004802:	f043 0308 	orr.w	r3, r3, #8
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	4b70      	ldr	r3, [pc, #448]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	496d      	ldr	r1, [pc, #436]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800481a:	4b6c      	ldr	r3, [pc, #432]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	4968      	ldr	r1, [pc, #416]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
 800482e:	e025      	b.n	800487c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004830:	4b66      	ldr	r3, [pc, #408]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a65      	ldr	r2, [pc, #404]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004836:	f043 0308 	orr.w	r3, r3, #8
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	4b63      	ldr	r3, [pc, #396]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	4960      	ldr	r1, [pc, #384]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800484e:	4b5f      	ldr	r3, [pc, #380]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	021b      	lsls	r3, r3, #8
 800485c:	495b      	ldr	r1, [pc, #364]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800485e:	4313      	orrs	r3, r2
 8004860:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fd15 	bl	800529c <RCC_SetFlashLatencyFromMSIRange>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e343      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800487c:	f000 fc4a 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b52      	ldr	r3, [pc, #328]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	4950      	ldr	r1, [pc, #320]	@ (80049d0 <HAL_RCC_OscConfig+0x274>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	4a4e      	ldr	r2, [pc, #312]	@ (80049d4 <HAL_RCC_OscConfig+0x278>)
 800489a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800489c:	4b4e      	ldr	r3, [pc, #312]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fd6f 	bl	8003384 <HAL_InitTick>
 80048a6:	4603      	mov	r3, r0
 80048a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d052      	beq.n	8004956 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	e327      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d032      	beq.n	8004922 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048bc:	4b43      	ldr	r3, [pc, #268]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a42      	ldr	r2, [pc, #264]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048c8:	f7fe fdac 	bl	8003424 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048d0:	f7fe fda8 	bl	8003424 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e310      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048e2:	4b3a      	ldr	r3, [pc, #232]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ee:	4b37      	ldr	r3, [pc, #220]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a36      	ldr	r2, [pc, #216]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80048f4:	f043 0308 	orr.w	r3, r3, #8
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4b34      	ldr	r3, [pc, #208]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4931      	ldr	r1, [pc, #196]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004908:	4313      	orrs	r3, r2
 800490a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800490c:	4b2f      	ldr	r3, [pc, #188]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	492c      	ldr	r1, [pc, #176]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
 8004920:	e01a      	b.n	8004958 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004922:	4b2a      	ldr	r3, [pc, #168]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a29      	ldr	r2, [pc, #164]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800492e:	f7fe fd79 	bl	8003424 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004936:	f7fe fd75 	bl	8003424 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e2dd      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004948:	4b20      	ldr	r3, [pc, #128]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f0      	bne.n	8004936 <HAL_RCC_OscConfig+0x1da>
 8004954:	e000      	b.n	8004958 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004956:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d074      	beq.n	8004a4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b08      	cmp	r3, #8
 8004968:	d005      	beq.n	8004976 <HAL_RCC_OscConfig+0x21a>
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d10e      	bne.n	800498e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d10b      	bne.n	800498e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004976:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d064      	beq.n	8004a4c <HAL_RCC_OscConfig+0x2f0>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d160      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e2ba      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004996:	d106      	bne.n	80049a6 <HAL_RCC_OscConfig+0x24a>
 8004998:	4b0c      	ldr	r3, [pc, #48]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a0b      	ldr	r2, [pc, #44]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 800499e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e026      	b.n	80049f4 <HAL_RCC_OscConfig+0x298>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049ae:	d115      	bne.n	80049dc <HAL_RCC_OscConfig+0x280>
 80049b0:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a05      	ldr	r2, [pc, #20]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80049b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b03      	ldr	r3, [pc, #12]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a02      	ldr	r2, [pc, #8]	@ (80049cc <HAL_RCC_OscConfig+0x270>)
 80049c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	e014      	b.n	80049f4 <HAL_RCC_OscConfig+0x298>
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
 80049d0:	0800ceec 	.word	0x0800ceec
 80049d4:	20000048 	.word	0x20000048
 80049d8:	2000004c 	.word	0x2000004c
 80049dc:	4ba0      	ldr	r3, [pc, #640]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a9f      	ldr	r2, [pc, #636]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 80049e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b9d      	ldr	r3, [pc, #628]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a9c      	ldr	r2, [pc, #624]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 80049ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d013      	beq.n	8004a24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fe fd12 	bl	8003424 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a04:	f7fe fd0e 	bl	8003424 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b64      	cmp	r3, #100	@ 0x64
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e276      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a16:	4b92      	ldr	r3, [pc, #584]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x2a8>
 8004a22:	e014      	b.n	8004a4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fe fcfe 	bl	8003424 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fe fcfa 	bl	8003424 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	@ 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e262      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a3e:	4b88      	ldr	r3, [pc, #544]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x2d0>
 8004a4a:	e000      	b.n	8004a4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d060      	beq.n	8004b1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_OscConfig+0x310>
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b0c      	cmp	r3, #12
 8004a64:	d119      	bne.n	8004a9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d116      	bne.n	8004a9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_OscConfig+0x328>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e23f      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a84:	4b76      	ldr	r3, [pc, #472]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	061b      	lsls	r3, r3, #24
 8004a92:	4973      	ldr	r1, [pc, #460]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a98:	e040      	b.n	8004b1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d023      	beq.n	8004aea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aae:	f7fe fcb9 	bl	8003424 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab6:	f7fe fcb5 	bl	8003424 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e21d      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ac8:	4b65      	ldr	r3, [pc, #404]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad4:	4b62      	ldr	r3, [pc, #392]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	061b      	lsls	r3, r3, #24
 8004ae2:	495f      	ldr	r1, [pc, #380]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	604b      	str	r3, [r1, #4]
 8004ae8:	e018      	b.n	8004b1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aea:	4b5d      	ldr	r3, [pc, #372]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a5c      	ldr	r2, [pc, #368]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af6:	f7fe fc95 	bl	8003424 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afe:	f7fe fc91 	bl	8003424 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e1f9      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b10:	4b53      	ldr	r3, [pc, #332]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f0      	bne.n	8004afe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d03c      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01c      	beq.n	8004b6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b30:	4b4b      	ldr	r3, [pc, #300]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b36:	4a4a      	ldr	r2, [pc, #296]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fe fc70 	bl	8003424 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b48:	f7fe fc6c 	bl	8003424 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e1d4      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b5a:	4b41      	ldr	r3, [pc, #260]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0ef      	beq.n	8004b48 <HAL_RCC_OscConfig+0x3ec>
 8004b68:	e01b      	b.n	8004ba2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b70:	4a3b      	ldr	r2, [pc, #236]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7a:	f7fe fc53 	bl	8003424 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b82:	f7fe fc4f 	bl	8003424 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e1b7      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b94:	4b32      	ldr	r3, [pc, #200]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1ef      	bne.n	8004b82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80a6 	beq.w	8004cfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10d      	bne.n	8004bdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc0:	4b27      	ldr	r3, [pc, #156]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc4:	4a26      	ldr	r2, [pc, #152]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bcc:	4b24      	ldr	r3, [pc, #144]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bdc:	4b21      	ldr	r3, [pc, #132]	@ (8004c64 <HAL_RCC_OscConfig+0x508>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d118      	bne.n	8004c1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004be8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c64 <HAL_RCC_OscConfig+0x508>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1d      	ldr	r2, [pc, #116]	@ (8004c64 <HAL_RCC_OscConfig+0x508>)
 8004bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf4:	f7fe fc16 	bl	8003424 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfc:	f7fe fc12 	bl	8003424 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e17a      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c0e:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <HAL_RCC_OscConfig+0x508>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d108      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4d8>
 8004c22:	4b0f      	ldr	r3, [pc, #60]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c28:	4a0d      	ldr	r2, [pc, #52]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c32:	e029      	b.n	8004c88 <HAL_RCC_OscConfig+0x52c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b05      	cmp	r3, #5
 8004c3a:	d115      	bne.n	8004c68 <HAL_RCC_OscConfig+0x50c>
 8004c3c:	4b08      	ldr	r3, [pc, #32]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	4a07      	ldr	r2, [pc, #28]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004c44:	f043 0304 	orr.w	r3, r3, #4
 8004c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c4c:	4b04      	ldr	r3, [pc, #16]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c52:	4a03      	ldr	r2, [pc, #12]	@ (8004c60 <HAL_RCC_OscConfig+0x504>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c5c:	e014      	b.n	8004c88 <HAL_RCC_OscConfig+0x52c>
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40007000 	.word	0x40007000
 8004c68:	4b9c      	ldr	r3, [pc, #624]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6e:	4a9b      	ldr	r2, [pc, #620]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c78:	4b98      	ldr	r3, [pc, #608]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7e:	4a97      	ldr	r2, [pc, #604]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d016      	beq.n	8004cbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c90:	f7fe fbc8 	bl	8003424 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c98:	f7fe fbc4 	bl	8003424 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e12a      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cae:	4b8b      	ldr	r3, [pc, #556]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0ed      	beq.n	8004c98 <HAL_RCC_OscConfig+0x53c>
 8004cbc:	e015      	b.n	8004cea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbe:	f7fe fbb1 	bl	8003424 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cc4:	e00a      	b.n	8004cdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc6:	f7fe fbad 	bl	8003424 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e113      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cdc:	4b7f      	ldr	r3, [pc, #508]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1ed      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cea:	7ffb      	ldrb	r3, [r7, #31]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d105      	bne.n	8004cfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf0:	4b7a      	ldr	r3, [pc, #488]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf4:	4a79      	ldr	r2, [pc, #484]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cfa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80fe 	beq.w	8004f02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	f040 80d0 	bne.w	8004eb0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d10:	4b72      	ldr	r3, [pc, #456]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 0203 	and.w	r2, r3, #3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d130      	bne.n	8004d86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d127      	bne.n	8004d86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d11f      	bne.n	8004d86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d50:	2a07      	cmp	r2, #7
 8004d52:	bf14      	ite	ne
 8004d54:	2201      	movne	r2, #1
 8004d56:	2200      	moveq	r2, #0
 8004d58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d113      	bne.n	8004d86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d109      	bne.n	8004d86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d06e      	beq.n	8004e64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b0c      	cmp	r3, #12
 8004d8a:	d069      	beq.n	8004e60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d8c:	4b53      	ldr	r3, [pc, #332]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d98:	4b50      	ldr	r3, [pc, #320]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0ad      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004da8:	4b4c      	ldr	r3, [pc, #304]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a4b      	ldr	r2, [pc, #300]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004db2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004db4:	f7fe fb36 	bl	8003424 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dbc:	f7fe fb32 	bl	8003424 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e09a      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dce:	4b43      	ldr	r3, [pc, #268]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dda:	4b40      	ldr	r3, [pc, #256]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	4b40      	ldr	r3, [pc, #256]	@ (8004ee0 <HAL_RCC_OscConfig+0x784>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004dea:	3a01      	subs	r2, #1
 8004dec:	0112      	lsls	r2, r2, #4
 8004dee:	4311      	orrs	r1, r2
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004df4:	0212      	lsls	r2, r2, #8
 8004df6:	4311      	orrs	r1, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dfc:	0852      	lsrs	r2, r2, #1
 8004dfe:	3a01      	subs	r2, #1
 8004e00:	0552      	lsls	r2, r2, #21
 8004e02:	4311      	orrs	r1, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e08:	0852      	lsrs	r2, r2, #1
 8004e0a:	3a01      	subs	r2, #1
 8004e0c:	0652      	lsls	r2, r2, #25
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e14:	0912      	lsrs	r2, r2, #4
 8004e16:	0452      	lsls	r2, r2, #17
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	4930      	ldr	r1, [pc, #192]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e20:	4b2e      	ldr	r3, [pc, #184]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a2d      	ldr	r2, [pc, #180]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4a2a      	ldr	r2, [pc, #168]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e38:	f7fe faf4 	bl	8003424 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e40:	f7fe faf0 	bl	8003424 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e058      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e52:	4b22      	ldr	r3, [pc, #136]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e5e:	e050      	b.n	8004f02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e04f      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e64:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d148      	bne.n	8004f02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e70:	4b1a      	ldr	r3, [pc, #104]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a19      	ldr	r2, [pc, #100]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e7c:	4b17      	ldr	r3, [pc, #92]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4a16      	ldr	r2, [pc, #88]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e88:	f7fe facc 	bl	8003424 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fe fac8 	bl	8003424 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e030      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0x734>
 8004eae:	e028      	b.n	8004f02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d023      	beq.n	8004efe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb6:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a08      	ldr	r2, [pc, #32]	@ (8004edc <HAL_RCC_OscConfig+0x780>)
 8004ebc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec2:	f7fe faaf 	bl	8003424 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec8:	e00c      	b.n	8004ee4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fe faab 	bl	8003424 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d905      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e013      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee4:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <HAL_RCC_OscConfig+0x7b0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1ec      	bne.n	8004eca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ef0:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <HAL_RCC_OscConfig+0x7b0>)
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	4905      	ldr	r1, [pc, #20]	@ (8004f0c <HAL_RCC_OscConfig+0x7b0>)
 8004ef6:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <HAL_RCC_OscConfig+0x7b4>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60cb      	str	r3, [r1, #12]
 8004efc:	e001      	b.n	8004f02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	feeefffc 	.word	0xfeeefffc

08004f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0e7      	b.n	80050f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f28:	4b75      	ldr	r3, [pc, #468]	@ (8005100 <HAL_RCC_ClockConfig+0x1ec>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d910      	bls.n	8004f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b72      	ldr	r3, [pc, #456]	@ (8005100 <HAL_RCC_ClockConfig+0x1ec>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 0207 	bic.w	r2, r3, #7
 8004f3e:	4970      	ldr	r1, [pc, #448]	@ (8005100 <HAL_RCC_ClockConfig+0x1ec>)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b6e      	ldr	r3, [pc, #440]	@ (8005100 <HAL_RCC_ClockConfig+0x1ec>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0cf      	b.n	80050f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	4b66      	ldr	r3, [pc, #408]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d908      	bls.n	8004f86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f74:	4b63      	ldr	r3, [pc, #396]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4960      	ldr	r1, [pc, #384]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d04c      	beq.n	800502c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9a:	4b5a      	ldr	r3, [pc, #360]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d121      	bne.n	8004fea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e0a6      	b.n	80050f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb2:	4b54      	ldr	r3, [pc, #336]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d115      	bne.n	8004fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e09a      	b.n	80050f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d107      	bne.n	8004fda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fca:	4b4e      	ldr	r3, [pc, #312]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e08e      	b.n	80050f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fda:	4b4a      	ldr	r3, [pc, #296]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e086      	b.n	80050f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fea:	4b46      	ldr	r3, [pc, #280]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f023 0203 	bic.w	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4943      	ldr	r1, [pc, #268]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffc:	f7fe fa12 	bl	8003424 <HAL_GetTick>
 8005000:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	e00a      	b.n	800501a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005004:	f7fe fa0e 	bl	8003424 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e06e      	b.n	80050f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501a:	4b3a      	ldr	r3, [pc, #232]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 020c 	and.w	r2, r3, #12
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	429a      	cmp	r2, r3
 800502a:	d1eb      	bne.n	8005004 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d010      	beq.n	800505a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	4b31      	ldr	r3, [pc, #196]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005044:	429a      	cmp	r2, r3
 8005046:	d208      	bcs.n	800505a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005048:	4b2e      	ldr	r3, [pc, #184]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	492b      	ldr	r1, [pc, #172]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800505a:	4b29      	ldr	r3, [pc, #164]	@ (8005100 <HAL_RCC_ClockConfig+0x1ec>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d210      	bcs.n	800508a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005068:	4b25      	ldr	r3, [pc, #148]	@ (8005100 <HAL_RCC_ClockConfig+0x1ec>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f023 0207 	bic.w	r2, r3, #7
 8005070:	4923      	ldr	r1, [pc, #140]	@ (8005100 <HAL_RCC_ClockConfig+0x1ec>)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	4313      	orrs	r3, r2
 8005076:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005078:	4b21      	ldr	r3, [pc, #132]	@ (8005100 <HAL_RCC_ClockConfig+0x1ec>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d001      	beq.n	800508a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e036      	b.n	80050f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005096:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	4918      	ldr	r1, [pc, #96]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050b4:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4910      	ldr	r1, [pc, #64]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050c8:	f000 f824 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005104 <HAL_RCC_ClockConfig+0x1f0>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	490b      	ldr	r1, [pc, #44]	@ (8005108 <HAL_RCC_ClockConfig+0x1f4>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
 80050e4:	4a09      	ldr	r2, [pc, #36]	@ (800510c <HAL_RCC_ClockConfig+0x1f8>)
 80050e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050e8:	4b09      	ldr	r3, [pc, #36]	@ (8005110 <HAL_RCC_ClockConfig+0x1fc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe f949 	bl	8003384 <HAL_InitTick>
 80050f2:	4603      	mov	r3, r0
 80050f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80050f6:	7afb      	ldrb	r3, [r7, #11]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40022000 	.word	0x40022000
 8005104:	40021000 	.word	0x40021000
 8005108:	0800ceec 	.word	0x0800ceec
 800510c:	20000048 	.word	0x20000048
 8005110:	2000004c 	.word	0x2000004c

08005114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	@ 0x24
 8005118:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	2300      	movs	r3, #0
 8005120:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005122:	4b3e      	ldr	r3, [pc, #248]	@ (800521c <HAL_RCC_GetSysClockFreq+0x108>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800512c:	4b3b      	ldr	r3, [pc, #236]	@ (800521c <HAL_RCC_GetSysClockFreq+0x108>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0x34>
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b0c      	cmp	r3, #12
 8005140:	d121      	bne.n	8005186 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d11e      	bne.n	8005186 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005148:	4b34      	ldr	r3, [pc, #208]	@ (800521c <HAL_RCC_GetSysClockFreq+0x108>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d107      	bne.n	8005164 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005154:	4b31      	ldr	r3, [pc, #196]	@ (800521c <HAL_RCC_GetSysClockFreq+0x108>)
 8005156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	e005      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005164:	4b2d      	ldr	r3, [pc, #180]	@ (800521c <HAL_RCC_GetSysClockFreq+0x108>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005170:	4a2b      	ldr	r2, [pc, #172]	@ (8005220 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005178:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10d      	bne.n	800519c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005184:	e00a      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d102      	bne.n	8005192 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800518c:	4b25      	ldr	r3, [pc, #148]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x110>)
 800518e:	61bb      	str	r3, [r7, #24]
 8005190:	e004      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d101      	bne.n	800519c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005198:	4b23      	ldr	r3, [pc, #140]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x114>)
 800519a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	d134      	bne.n	800520c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051a2:	4b1e      	ldr	r3, [pc, #120]	@ (800521c <HAL_RCC_GetSysClockFreq+0x108>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d003      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0xa6>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d003      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0xac>
 80051b8:	e005      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x110>)
 80051bc:	617b      	str	r3, [r7, #20]
      break;
 80051be:	e005      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051c0:	4b19      	ldr	r3, [pc, #100]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x114>)
 80051c2:	617b      	str	r3, [r7, #20]
      break;
 80051c4:	e002      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	617b      	str	r3, [r7, #20]
      break;
 80051ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051cc:	4b13      	ldr	r3, [pc, #76]	@ (800521c <HAL_RCC_GetSysClockFreq+0x108>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	3301      	adds	r3, #1
 80051d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051da:	4b10      	ldr	r3, [pc, #64]	@ (800521c <HAL_RCC_GetSysClockFreq+0x108>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	fb03 f202 	mul.w	r2, r3, r2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051f2:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <HAL_RCC_GetSysClockFreq+0x108>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	0e5b      	lsrs	r3, r3, #25
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	3301      	adds	r3, #1
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	fbb2 f3f3 	udiv	r3, r2, r3
 800520a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800520c:	69bb      	ldr	r3, [r7, #24]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3724      	adds	r7, #36	@ 0x24
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
 8005220:	0800cf04 	.word	0x0800cf04
 8005224:	00f42400 	.word	0x00f42400
 8005228:	007a1200 	.word	0x007a1200

0800522c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005230:	4b03      	ldr	r3, [pc, #12]	@ (8005240 <HAL_RCC_GetHCLKFreq+0x14>)
 8005232:	681b      	ldr	r3, [r3, #0]
}
 8005234:	4618      	mov	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20000048 	.word	0x20000048

08005244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005248:	f7ff fff0 	bl	800522c <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	0a1b      	lsrs	r3, r3, #8
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4904      	ldr	r1, [pc, #16]	@ (800526c <HAL_RCC_GetPCLK1Freq+0x28>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40021000 	.word	0x40021000
 800526c:	0800cefc 	.word	0x0800cefc

08005270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005274:	f7ff ffda 	bl	800522c <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0adb      	lsrs	r3, r3, #11
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4904      	ldr	r1, [pc, #16]	@ (8005298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40021000 	.word	0x40021000
 8005298:	0800cefc 	.word	0x0800cefc

0800529c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052b4:	f7ff fa44 	bl	8004740 <HAL_PWREx_GetVoltageRange>
 80052b8:	6178      	str	r0, [r7, #20]
 80052ba:	e014      	b.n	80052e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052bc:	4b25      	ldr	r3, [pc, #148]	@ (8005354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c0:	4a24      	ldr	r2, [pc, #144]	@ (8005354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80052c8:	4b22      	ldr	r3, [pc, #136]	@ (8005354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052d4:	f7ff fa34 	bl	8004740 <HAL_PWREx_GetVoltageRange>
 80052d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052da:	4b1e      	ldr	r3, [pc, #120]	@ (8005354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052de:	4a1d      	ldr	r2, [pc, #116]	@ (8005354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ec:	d10b      	bne.n	8005306 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b80      	cmp	r3, #128	@ 0x80
 80052f2:	d919      	bls.n	8005328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80052f8:	d902      	bls.n	8005300 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052fa:	2302      	movs	r3, #2
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	e013      	b.n	8005328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005300:	2301      	movs	r3, #1
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	e010      	b.n	8005328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b80      	cmp	r3, #128	@ 0x80
 800530a:	d902      	bls.n	8005312 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800530c:	2303      	movs	r3, #3
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	e00a      	b.n	8005328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b80      	cmp	r3, #128	@ 0x80
 8005316:	d102      	bne.n	800531e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005318:	2302      	movs	r3, #2
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	e004      	b.n	8005328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b70      	cmp	r3, #112	@ 0x70
 8005322:	d101      	bne.n	8005328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005324:	2301      	movs	r3, #1
 8005326:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005328:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f023 0207 	bic.w	r2, r3, #7
 8005330:	4909      	ldr	r1, [pc, #36]	@ (8005358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005338:	4b07      	ldr	r3, [pc, #28]	@ (8005358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	429a      	cmp	r2, r3
 8005344:	d001      	beq.n	800534a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40021000 	.word	0x40021000
 8005358:	40022000 	.word	0x40022000

0800535c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0be      	b.n	80054ec <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800537e:	d009      	beq.n	8005394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	61da      	str	r2, [r3, #28]
 8005386:	e005      	b.n	8005394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f8cb 	bl	8005544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053ce:	d902      	bls.n	80053d6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e002      	b.n	80053dc <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80053e4:	d007      	beq.n	80053f6 <HAL_SPI_Init+0x9a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053ee:	d002      	beq.n	80053f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005438:	ea42 0103 	orr.w	r1, r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005440:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005454:	d11b      	bne.n	800548e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10b      	bne.n	8005476 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005466:	d903      	bls.n	8005470 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	631a      	str	r2, [r3, #48]	@ 0x30
 800546e:	e002      	b.n	8005476 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547a:	2b02      	cmp	r3, #2
 800547c:	d107      	bne.n	800548e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800548c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	0c1b      	lsrs	r3, r3, #16
 8005494:	f003 0204 	and.w	r2, r3, #4
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80054b4:	ea42 0103 	orr.w	r1, r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ce:	d105      	bne.n	80054dc <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	b292      	uxth	r2, r2
 80054da:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e01a      	b.n	800553c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800551c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f81a 	bl	8005558 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	@ 0x28
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d001      	beq.n	8005594 <HAL_SPI_Receive+0x28>
  {
    return HAL_BUSY;
 8005590:	2302      	movs	r3, #2
 8005592:	e1e0      	b.n	8005956 <HAL_SPI_Receive+0x3ea>
  }

  if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_SPI_Receive+0x34>
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_SPI_Receive+0x38>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e1d8      	b.n	8005956 <HAL_SPI_Receive+0x3ea>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ac:	d112      	bne.n	80055d4 <HAL_SPI_Receive+0x68>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10e      	bne.n	80055d4 <HAL_SPI_Receive+0x68>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2204      	movs	r2, #4
 80055ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f9c7 	bl	800595e <HAL_SPI_TransmitReceive>
 80055d0:	4603      	mov	r3, r0
 80055d2:	e1c0      	b.n	8005956 <HAL_SPI_Receive+0x3ea>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d4:	f7fd ff26 	bl	8003424 <HAL_GetTick>
 80055d8:	61f8      	str	r0, [r7, #28]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_SPI_Receive+0x7c>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e1b6      	b.n	8005956 <HAL_SPI_Receive+0x3ea>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2204      	movs	r2, #4
 80055f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800563a:	d118      	bne.n	800566e <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800565a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005676:	d908      	bls.n	800568a <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005686:	605a      	str	r2, [r3, #4]
 8005688:	e007      	b.n	800569a <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005698:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a2:	d10f      	bne.n	80056c4 <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	d007      	beq.n	80056e2 <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056ea:	d875      	bhi.n	80057d8 <HAL_SPI_Receive+0x26c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056ec:	e037      	b.n	800575e <HAL_SPI_Receive+0x1f2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d117      	bne.n	800572c <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f103 020c 	add.w	r2, r3, #12
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800572a:	e018      	b.n	800575e <HAL_SPI_Receive+0x1f2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800572c:	f7fd fe7a 	bl	8003424 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d803      	bhi.n	8005744 <HAL_SPI_Receive+0x1d8>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d102      	bne.n	800574a <HAL_SPI_Receive+0x1de>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <HAL_SPI_Receive+0x1f2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e0fb      	b.n	8005956 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1c1      	bne.n	80056ee <HAL_SPI_Receive+0x182>
 800576a:	e03b      	b.n	80057e4 <HAL_SPI_Receive+0x278>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b01      	cmp	r3, #1
 8005778:	d115      	bne.n	80057a6 <HAL_SPI_Receive+0x23a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005784:	b292      	uxth	r2, r2
 8005786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578c:	1c9a      	adds	r2, r3, #2
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80057a4:	e018      	b.n	80057d8 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a6:	f7fd fe3d 	bl	8003424 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d803      	bhi.n	80057be <HAL_SPI_Receive+0x252>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d102      	bne.n	80057c4 <HAL_SPI_Receive+0x258>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <HAL_SPI_Receive+0x26c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e0be      	b.n	8005956 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1c3      	bne.n	800576c <HAL_SPI_Receive+0x200>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ec:	f040 8087 	bne.w	80058fe <HAL_SPI_Receive+0x392>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057fe:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	2101      	movs	r1, #1
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f001 fa18 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      __HAL_UNLOCK(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e099      	b.n	8005956 <HAL_SPI_Receive+0x3ea>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800582a:	d907      	bls.n	800583c <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	b292      	uxth	r2, r2
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	e008      	b.n	800584e <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f103 020c 	add.w	r2, r3, #12
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005848:	7812      	ldrb	r2, [r2, #0]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2201      	movs	r2, #1
 8005856:	2101      	movs	r1, #1
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f001 f9f1 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00f      	beq.n	8005884 <HAL_SPI_Receive+0x318>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005868:	f043 0202 	orr.w	r2, r3, #2
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e068      	b.n	8005956 <HAL_SPI_Receive+0x3ea>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800588c:	d105      	bne.n	800589a <HAL_SPI_Receive+0x32e>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	e031      	b.n	80058fe <HAL_SPI_Receive+0x392>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058aa:	7cfb      	ldrb	r3, [r7, #19]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058b4:	d123      	bne.n	80058fe <HAL_SPI_Receive+0x392>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d11f      	bne.n	80058fe <HAL_SPI_Receive+0x392>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2201      	movs	r2, #1
 80058c6:	2101      	movs	r1, #1
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f001 f9b9 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00f      	beq.n	80058f4 <HAL_SPI_Receive+0x388>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d8:	f043 0202 	orr.w	r2, r3, #2
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e030      	b.n	8005956 <HAL_SPI_Receive+0x3ea>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80058fc:	7cfb      	ldrb	r3, [r7, #19]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f001 faba 	bl	8006e7c <SPI_EndRxTransaction>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_SPI_Receive+0x3a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b10      	cmp	r3, #16
 8005920:	d10a      	bne.n	8005938 <HAL_SPI_Receive+0x3cc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005926:	f043 0202 	orr.w	r2, r3, #2
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005936:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_SPI_Receive+0x3e8>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <HAL_SPI_Receive+0x3ea>
  }
  else
  {
    return HAL_OK;
 8005954:	2300      	movs	r3, #0
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b090      	sub	sp, #64	@ 0x40
 8005962:	af02      	add	r7, sp, #8
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
 800596a:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005974:	2301      	movs	r3, #1
 8005976:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005978:	f7fd fd54 	bl	8003424 <HAL_GetTick>
 800597c:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005984:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tmp_mode            = hspi->Init.Mode;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
  initial_TxXferCount = Size;
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 8005992:	887b      	ldrh	r3, [r7, #2]
 8005994:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	623b      	str	r3, [r7, #32]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	61fb      	str	r3, [r7, #28]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d00d      	beq.n	80059ca <HAL_SPI_TransmitReceive+0x6c>
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059b4:	d107      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x68>
 80059be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d001      	beq.n	80059ca <HAL_SPI_TransmitReceive+0x6c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80059c6:	2302      	movs	r3, #2
 80059c8:	e30f      	b.n	8005fea <HAL_SPI_TransmitReceive+0x68c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x7e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x7e>
 80059d6:	887b      	ldrh	r3, [r7, #2]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e304      	b.n	8005fea <HAL_SPI_TransmitReceive+0x68c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_SPI_TransmitReceive+0x90>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e2fd      	b.n	8005fea <HAL_SPI_TransmitReceive+0x68c>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d003      	beq.n	8005a0a <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2205      	movs	r2, #5
 8005a06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	887a      	ldrh	r2, [r7, #2]
 8005a1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	887a      	ldrh	r2, [r7, #2]
 8005a22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	887a      	ldrh	r2, [r7, #2]
 8005a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	887a      	ldrh	r2, [r7, #2]
 8005a36:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a4c:	d10f      	bne.n	8005a6e <HAL_SPI_TransmitReceive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a6c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a76:	d802      	bhi.n	8005a7e <HAL_SPI_TransmitReceive+0x120>
 8005a78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d908      	bls.n	8005a90 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	e007      	b.n	8005aa0 <HAL_SPI_TransmitReceive+0x142>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a9e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	d007      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005abc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ac6:	f240 80d0 	bls.w	8005c6a <HAL_SPI_TransmitReceive+0x30c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x17c>
 8005ad2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	f040 80ba 	bne.w	8005c4e <HAL_SPI_TransmitReceive+0x2f0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	881a      	ldrh	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aea:	1c9a      	adds	r2, r3, #2
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f040 80a2 	bne.w	8005c4e <HAL_SPI_TransmitReceive+0x2f0>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b12:	f040 809c 	bne.w	8005c4e <HAL_SPI_TransmitReceive+0x2f0>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10c      	bne.n	8005b3a <HAL_SPI_TransmitReceive+0x1dc>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b38:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b48:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b4a:	e080      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x2f0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d13f      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x27c>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d03a      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x27c>
 8005b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d137      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x27c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	881a      	ldrh	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7a:	1c9a      	adds	r2, r3, #2
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11e      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x27c>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba4:	d119      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x27c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10c      	bne.n	8005bca <HAL_SPI_TransmitReceive+0x26c>
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <HAL_SPI_TransmitReceive+0x26c>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bc8:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005bd8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d11c      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x2c4>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d016      	beq.n	8005c22 <HAL_SPI_TransmitReceive+0x2c4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	b292      	uxth	r2, r2
 8005c00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	1c9a      	adds	r2, r3, #2
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c22:	f7fd fbff 	bl	8003424 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d80d      	bhi.n	8005c4e <HAL_SPI_TransmitReceive+0x2f0>
 8005c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d009      	beq.n	8005c4e <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e1cd      	b.n	8005fea <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f47f af79 	bne.w	8005b4c <HAL_SPI_TransmitReceive+0x1ee>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f47f af72 	bne.w	8005b4c <HAL_SPI_TransmitReceive+0x1ee>
 8005c68:	e12f      	b.n	8005eca <HAL_SPI_TransmitReceive+0x56c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0x31c>
 8005c72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	f040 811b 	bne.w	8005eb0 <HAL_SPI_TransmitReceive+0x552>
    {
      if (hspi->TxXferCount > 1U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d912      	bls.n	8005caa <HAL_SPI_TransmitReceive+0x34c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	881a      	ldrh	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c94:	1c9a      	adds	r2, r3, #2
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b02      	subs	r3, #2
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ca8:	e102      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x552>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	7812      	ldrb	r2, [r2, #0]
 8005cb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f040 80ea 	bne.w	8005eb0 <HAL_SPI_TransmitReceive+0x552>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce4:	f040 80e4 	bne.w	8005eb0 <HAL_SPI_TransmitReceive+0x552>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10c      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x3ae>
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x3ae>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d0a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d1a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d1c:	e0c8      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x552>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d158      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x480>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d053      	beq.n	8005dde <HAL_SPI_TransmitReceive+0x480>
 8005d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d150      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x480>
      {
        if (hspi->TxXferCount > 1U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d912      	bls.n	8005d6c <HAL_SPI_TransmitReceive+0x40e>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4a:	881a      	ldrh	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d56:	1c9a      	adds	r2, r3, #2
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b02      	subs	r3, #2
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d6a:	e012      	b.n	8005d92 <HAL_SPI_TransmitReceive+0x434>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	7812      	ldrb	r2, [r2, #0]
 8005d78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d11e      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x480>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da8:	d119      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x480>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10c      	bne.n	8005dce <HAL_SPI_TransmitReceive+0x470>
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <HAL_SPI_TransmitReceive+0x470>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dcc:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ddc:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d148      	bne.n	8005e7e <HAL_SPI_TransmitReceive+0x520>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d042      	beq.n	8005e7e <HAL_SPI_TransmitReceive+0x520>
      {
        if (hspi->RxXferCount > 1U)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d923      	bls.n	8005e4c <HAL_SPI_TransmitReceive+0x4ee>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	1c9a      	adds	r2, r3, #2
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b02      	subs	r3, #2
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d81f      	bhi.n	8005e7a <HAL_SPI_TransmitReceive+0x51c>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	e016      	b.n	8005e7a <HAL_SPI_TransmitReceive+0x51c>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f103 020c 	add.w	r2, r3, #12
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e58:	7812      	ldrb	r2, [r2, #0]
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e7e:	f7fd fad1 	bl	8003424 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d803      	bhi.n	8005e96 <HAL_SPI_TransmitReceive+0x538>
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d102      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x53e>
 8005e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <HAL_SPI_TransmitReceive+0x552>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e09c      	b.n	8005fea <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f47f af31 	bne.w	8005d1e <HAL_SPI_TransmitReceive+0x3c0>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f47f af2a 	bne.w	8005d1e <HAL_SPI_TransmitReceive+0x3c0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ed2:	d152      	bne.n	8005f7a <HAL_SPI_TransmitReceive+0x61c>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eda:	2201      	movs	r2, #1
 8005edc:	2101      	movs	r1, #1
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 feae 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00f      	beq.n	8005f0a <HAL_SPI_TransmitReceive+0x5ac>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eee:	f043 0202 	orr.w	r2, r3, #2
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e06f      	b.n	8005fea <HAL_SPI_TransmitReceive+0x68c>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005f12:	d105      	bne.n	8005f20 <HAL_SPI_TransmitReceive+0x5c2>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	e02c      	b.n	8005f7a <HAL_SPI_TransmitReceive+0x61c>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	330c      	adds	r3, #12
 8005f26:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f30:	7cfb      	ldrb	r3, [r7, #19]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d11f      	bne.n	8005f7a <HAL_SPI_TransmitReceive+0x61c>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f40:	2201      	movs	r2, #1
 8005f42:	2101      	movs	r1, #1
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fe7b 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00f      	beq.n	8005f70 <HAL_SPI_TransmitReceive+0x612>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f54:	f043 0202 	orr.w	r2, r3, #2
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e03c      	b.n	8005fea <HAL_SPI_TransmitReceive+0x68c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005f78:	7cfb      	ldrb	r3, [r7, #19]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d110      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x64c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f8c:	f043 0202 	orr.w	r2, r3, #2
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005f9c:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e01f      	b.n	8005fea <HAL_SPI_TransmitReceive+0x68c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 ffbc 	bl	8006f2c <SPI_EndRxTxTransaction>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d008      	beq.n	8005fcc <HAL_SPI_TransmitReceive+0x66e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e00e      	b.n	8005fea <HAL_SPI_TransmitReceive+0x68c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_SPI_TransmitReceive+0x68a>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <HAL_SPI_TransmitReceive+0x68c>
  }
  else
  {
    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3738      	adds	r7, #56	@ 0x38
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	4613      	mov	r3, r2
 8006000:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_SPI_Transmit_IT+0x1a>
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e082      	b.n	8006118 <HAL_SPI_Transmit_IT+0x124>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b01      	cmp	r3, #1
 800601c:	d001      	beq.n	8006022 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800601e:	2302      	movs	r3, #2
 8006020:	e07a      	b.n	8006118 <HAL_SPI_Transmit_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_SPI_Transmit_IT+0x3c>
 800602c:	2302      	movs	r3, #2
 800602e:	e073      	b.n	8006118 <HAL_SPI_Transmit_IT+0x124>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2203      	movs	r2, #3
 800603c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	88fa      	ldrh	r2, [r7, #6]
 8006056:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800607c:	d903      	bls.n	8006086 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a28      	ldr	r2, [pc, #160]	@ (8006124 <HAL_SPI_Transmit_IT+0x130>)
 8006082:	651a      	str	r2, [r3, #80]	@ 0x50
 8006084:	e002      	b.n	800608c <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a27      	ldr	r2, [pc, #156]	@ (8006128 <HAL_SPI_Transmit_IT+0x134>)
 800608a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006094:	d10f      	bne.n	80060b6 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060b4:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060be:	d10f      	bne.n	80060e0 <HAL_SPI_Transmit_IT+0xec>
  {
    SPI_RESET_CRC(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060de:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ea:	2b40      	cmp	r3, #64	@ 0x40
 80060ec:	d007      	beq.n	80060fe <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060fc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006114:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	08006be1 	.word	0x08006be1
 8006128:	08006b81 	.word	0x08006b81

0800612c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	4613      	mov	r3, r2
 8006138:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b01      	cmp	r3, #1
 8006144:	d001      	beq.n	800614a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8006146:	2302      	movs	r3, #2
 8006148:	e0ba      	b.n	80062c0 <HAL_SPI_Receive_IT+0x194>
  }

  if ((pData == NULL) || (Size == 0U))
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <HAL_SPI_Receive_IT+0x2a>
 8006150:	88fb      	ldrh	r3, [r7, #6]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e0b2      	b.n	80062c0 <HAL_SPI_Receive_IT+0x194>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d110      	bne.n	8006184 <HAL_SPI_Receive_IT+0x58>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800616a:	d10b      	bne.n	8006184 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2204      	movs	r2, #4
 8006170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f8a8 	bl	80062d0 <HAL_SPI_TransmitReceive_IT>
 8006180:	4603      	mov	r3, r0
 8006182:	e09d      	b.n	80062c0 <HAL_SPI_Receive_IT+0x194>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_SPI_Receive_IT+0x66>
 800618e:	2302      	movs	r3, #2
 8006190:	e096      	b.n	80062c0 <HAL_SPI_Receive_IT+0x194>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2204      	movs	r2, #4
 800619e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061de:	d90b      	bls.n	80061f8 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061ee:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4a35      	ldr	r2, [pc, #212]	@ (80062c8 <HAL_SPI_Receive_IT+0x19c>)
 80061f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80061f6:	e00a      	b.n	800620e <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006206:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a30      	ldr	r2, [pc, #192]	@ (80062cc <HAL_SPI_Receive_IT+0x1a0>)
 800620c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006216:	d10f      	bne.n	8006238 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006226:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006236:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006240:	d11f      	bne.n	8006282 <HAL_SPI_Receive_IT+0x156>
  {
    hspi->CRCSize = 1U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006250:	d806      	bhi.n	8006260 <HAL_SPI_Receive_IT+0x134>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006256:	2b02      	cmp	r3, #2
 8006258:	d102      	bne.n	8006260 <HAL_SPI_Receive_IT+0x134>
    {
      hspi->CRCSize = 2U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2202      	movs	r2, #2
 800625e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e002      	b.n	8006288 <HAL_SPI_Receive_IT+0x15c>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006292:	2b40      	cmp	r3, #64	@ 0x40
 8006294:	d007      	beq.n	80062a6 <HAL_SPI_Receive_IT+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062a4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80062bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	08006af9 	.word	0x08006af9
 80062cc:	08006a39 	.word	0x08006a39

080062d0 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062e4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d00c      	beq.n	800630c <HAL_SPI_TransmitReceive_IT+0x3c>
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062f8:	d106      	bne.n	8006308 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_SPI_TransmitReceive_IT+0x38>
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b04      	cmp	r3, #4
 8006306:	d001      	beq.n	800630c <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006308:	2302      	movs	r3, #2
 800630a:	e0a5      	b.n	8006458 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_SPI_TransmitReceive_IT+0x4e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_SPI_TransmitReceive_IT+0x4e>
 8006318:	887b      	ldrh	r3, [r7, #2]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e09a      	b.n	8006458 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_SPI_TransmitReceive_IT+0x60>
 800632c:	2302      	movs	r3, #2
 800632e:	e093      	b.n	8006458 <HAL_SPI_TransmitReceive_IT+0x188>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b04      	cmp	r3, #4
 8006342:	d003      	beq.n	800634c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2205      	movs	r2, #5
 8006348:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	887a      	ldrh	r2, [r7, #2]
 800635c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	887a      	ldrh	r2, [r7, #2]
 8006362:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	887a      	ldrh	r2, [r7, #2]
 800636e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	887a      	ldrh	r2, [r7, #2]
 8006376:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006382:	d906      	bls.n	8006392 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4a37      	ldr	r2, [pc, #220]	@ (8006464 <HAL_SPI_TransmitReceive_IT+0x194>)
 8006388:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4a36      	ldr	r2, [pc, #216]	@ (8006468 <HAL_SPI_TransmitReceive_IT+0x198>)
 800638e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006390:	e005      	b.n	800639e <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a35      	ldr	r2, [pc, #212]	@ (800646c <HAL_SPI_TransmitReceive_IT+0x19c>)
 8006396:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a35      	ldr	r2, [pc, #212]	@ (8006470 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 800639c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063a6:	d11f      	bne.n	80063e8 <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063b6:	d806      	bhi.n	80063c6 <HAL_SPI_TransmitReceive_IT+0xf6>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d102      	bne.n	80063c6 <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2202      	movs	r2, #2
 80063c4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	e002      	b.n	80063ee <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063f6:	d802      	bhi.n	80063fe <HAL_SPI_TransmitReceive_IT+0x12e>
 80063f8:	887b      	ldrh	r3, [r7, #2]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d908      	bls.n	8006410 <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800640c:	605a      	str	r2, [r3, #4]
 800640e:	e007      	b.n	8006420 <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800641e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d007      	beq.n	800643e <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800643c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8006454:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	080068c1 	.word	0x080068c1
 8006468:	08006971 	.word	0x08006971
 800646c:	080066c9 	.word	0x080066c9
 8006470:	08006805 	.word	0x08006805

08006474 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	099b      	lsrs	r3, r3, #6
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10f      	bne.n	80064b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	099b      	lsrs	r3, r3, #6
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	4798      	blx	r3
    return;
 80064b6:	e0d7      	b.n	8006668 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_SPI_IRQHandler+0x66>
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	09db      	lsrs	r3, r3, #7
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
    return;
 80064d8:	e0c6      	b.n	8006668 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10c      	bne.n	8006500 <HAL_SPI_IRQHandler+0x8c>
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	099b      	lsrs	r3, r3, #6
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	0a1b      	lsrs	r3, r3, #8
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 80b4 	beq.w	8006668 <HAL_SPI_IRQHandler+0x1f4>
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80ad 	beq.w	8006668 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	099b      	lsrs	r3, r3, #6
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d023      	beq.n	8006562 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b03      	cmp	r3, #3
 8006524:	d011      	beq.n	800654a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800652a:	f043 0204 	orr.w	r2, r3, #4
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	e00b      	b.n	8006562 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800654a:	2300      	movs	r3, #0
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	693b      	ldr	r3, [r7, #16]
        return;
 8006560:	e082      	b.n	8006668 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d014      	beq.n	8006598 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006572:	f043 0201 	orr.w	r2, r3, #1
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	0a1b      	lsrs	r3, r3, #8
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00c      	beq.n	80065be <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a8:	f043 0208 	orr.w	r2, r3, #8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065b0:	2300      	movs	r3, #0
 80065b2:	60bb      	str	r3, [r7, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	60bb      	str	r3, [r7, #8]
 80065bc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d04f      	beq.n	8006666 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065d4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <HAL_SPI_IRQHandler+0x17e>
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d034      	beq.n	800665c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0203 	bic.w	r2, r2, #3
 8006600:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006606:	2b00      	cmp	r3, #0
 8006608:	d011      	beq.n	800662e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800660e:	4a18      	ldr	r2, [pc, #96]	@ (8006670 <HAL_SPI_IRQHandler+0x1fc>)
 8006610:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006616:	4618      	mov	r0, r3
 8006618:	f7fd f845 	bl	80036a6 <HAL_DMA_Abort_IT>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006626:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006632:	2b00      	cmp	r3, #0
 8006634:	d016      	beq.n	8006664 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800663a:	4a0d      	ldr	r2, [pc, #52]	@ (8006670 <HAL_SPI_IRQHandler+0x1fc>)
 800663c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006642:	4618      	mov	r0, r3
 8006644:	f7fd f82f 	bl	80036a6 <HAL_DMA_Abort_IT>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006652:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800665a:	e003      	b.n	8006664 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f813 	bl	8006688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006662:	e000      	b.n	8006666 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006664:	bf00      	nop
    return;
 8006666:	bf00      	nop
  }
}
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	0800669d 	.word	0x0800669d

08006674 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff ffe5 	bl	8006688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066be:	bf00      	nop
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d923      	bls.n	8006724 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e6:	b292      	uxth	r2, r2
 80066e8:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ee:	1c9a      	adds	r2, r3, #2
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b02      	subs	r3, #2
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b01      	cmp	r3, #1
 8006710:	d11f      	bne.n	8006752 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006720:	605a      	str	r2, [r3, #4]
 8006722:	e016      	b.n	8006752 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f103 020c 	add.w	r2, r3, #12
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006730:	7812      	ldrb	r2, [r2, #0]
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d120      	bne.n	80067a0 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006766:	d10b      	bne.n	8006780 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006776:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a0b      	ldr	r2, [pc, #44]	@ (80067a8 <SPI_2linesRxISR_8BIT+0xe0>)
 800677c:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 800677e:	e00f      	b.n	80067a0 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800678e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d102      	bne.n	80067a0 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fc0c 	bl	8006fb8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	080067ad 	.word	0x080067ad

080067ac <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	330c      	adds	r3, #12
 80067be:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80067c8:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ce:	1e5a      	subs	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10f      	bne.n	80067fc <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80067ea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fbde 	bl	8006fb8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	d912      	bls.n	800683c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681a:	881a      	ldrh	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006826:	1c9a      	adds	r2, r3, #2
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b02      	subs	r3, #2
 8006834:	b29a      	uxth	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800683a:	e012      	b.n	8006862 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	330c      	adds	r3, #12
 8006846:	7812      	ldrb	r2, [r2, #0]
 8006848:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d126      	bne.n	80068ba <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006874:	d110      	bne.n	8006898 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006884:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006894:	605a      	str	r2, [r3, #4]
      return;
 8006896:	e010      	b.n	80068ba <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068a6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fb7f 	bl	8006fb8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d2:	b292      	uxth	r2, r2
 80068d4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	1c9a      	adds	r2, r3, #2
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d118      	bne.n	8006930 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006906:	d103      	bne.n	8006910 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a0b      	ldr	r2, [pc, #44]	@ (8006938 <SPI_2linesRxISR_16BIT+0x78>)
 800690c:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 800690e:	e00f      	b.n	8006930 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800691e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d102      	bne.n	8006930 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fb44 	bl	8006fb8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	0800693d 	.word	0x0800693d

0800693c <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006950:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006960:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fb28 	bl	8006fb8 <SPI_CloseRxTx_ISR>
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697c:	881a      	ldrh	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006988:	1c9a      	adds	r2, r3, #2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d126      	bne.n	80069f4 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ae:	d110      	bne.n	80069d2 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069be:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069ce:	605a      	str	r2, [r3, #4]
      return;
 80069d0:	e010      	b.n	80069f4 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069e0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fae2 	bl	8006fb8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006a16:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a1c:	1e5a      	subs	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fb20 	bl	8007070 <SPI_CloseRx_ISR>
  }
}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f103 020c 	add.w	r2, r3, #12
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4c:	7812      	ldrb	r2, [r2, #0]
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d10c      	bne.n	8006a94 <SPI_RxISR_8BIT+0x5c>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a82:	d107      	bne.n	8006a94 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a92:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10b      	bne.n	8006ab8 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa8:	d103      	bne.n	8006ab2 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a04      	ldr	r2, [pc, #16]	@ (8006ac0 <SPI_RxISR_8BIT+0x88>)
 8006aae:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006ab0:	e002      	b.n	8006ab8 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fadc 	bl	8007070 <SPI_CloseRx_ISR>
  }
}
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	080069fb 	.word	0x080069fb

08006ac4 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006ad8:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ae8:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fac0 	bl	8007070 <SPI_CloseRx_ISR>
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0a:	b292      	uxth	r2, r2
 8006b0c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b12:	1c9a      	adds	r2, r3, #2
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d10c      	bne.n	8006b50 <SPI_RxISR_16BIT+0x58>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b3e:	d107      	bne.n	8006b50 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b4e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b64:	d103      	bne.n	8006b6e <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a04      	ldr	r2, [pc, #16]	@ (8006b7c <SPI_RxISR_16BIT+0x84>)
 8006b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006b6c:	e002      	b.n	8006b74 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa7e 	bl	8007070 <SPI_CloseRx_ISR>
  }
}
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	08006ac5 	.word	0x08006ac5

08006b80 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	7812      	ldrb	r2, [r2, #0]
 8006b94:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10f      	bne.n	8006bd8 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bc0:	d107      	bne.n	8006bd2 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bd0:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa92 	bl	80070fc <SPI_CloseTx_ISR>
  }
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bec:	881a      	ldrh	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf8:	1c9a      	adds	r2, r3, #2
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10f      	bne.n	8006c36 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c1e:	d107      	bne.n	8006c30 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c2e:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fa63 	bl	80070fc <SPI_CloseTx_ISR>
  }
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c50:	f7fc fbe8 	bl	8003424 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c60:	f7fc fbe0 	bl	8003424 <HAL_GetTick>
 8006c64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c66:	4b39      	ldr	r3, [pc, #228]	@ (8006d4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	015b      	lsls	r3, r3, #5
 8006c6c:	0d1b      	lsrs	r3, r3, #20
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	fb02 f303 	mul.w	r3, r2, r3
 8006c74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c76:	e054      	b.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7e:	d050      	beq.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c80:	f7fc fbd0 	bl	8003424 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d902      	bls.n	8006c96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d13d      	bne.n	8006d12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ca4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cae:	d111      	bne.n	8006cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb8:	d004      	beq.n	8006cc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc2:	d107      	bne.n	8006cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cdc:	d10f      	bne.n	8006cfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e017      	b.n	8006d42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	bf0c      	ite	eq
 8006d32:	2301      	moveq	r3, #1
 8006d34:	2300      	movne	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d19b      	bne.n	8006c78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000048 	.word	0x20000048

08006d50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	@ 0x28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d62:	f7fc fb5f 	bl	8003424 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	4413      	add	r3, r2
 8006d70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006d72:	f7fc fb57 	bl	8003424 <HAL_GetTick>
 8006d76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	330c      	adds	r3, #12
 8006d7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d80:	4b3d      	ldr	r3, [pc, #244]	@ (8006e78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	00da      	lsls	r2, r3, #3
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	0d1b      	lsrs	r3, r3, #20
 8006d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
 8006d96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d98:	e060      	b.n	8006e5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006da0:	d107      	bne.n	8006db2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d050      	beq.n	8006e5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dba:	f7fc fb33 	bl	8003424 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d902      	bls.n	8006dd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d13d      	bne.n	8006e4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006de8:	d111      	bne.n	8006e0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006df2:	d004      	beq.n	8006dfe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dfc:	d107      	bne.n	8006e0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e16:	d10f      	bne.n	8006e38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e010      	b.n	8006e6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	4013      	ands	r3, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d196      	bne.n	8006d9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3728      	adds	r7, #40	@ 0x28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000048 	.word	0x20000048

08006e7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e90:	d111      	bne.n	8006eb6 <SPI_EndRxTransaction+0x3a>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e9a:	d004      	beq.n	8006ea6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ea4:	d107      	bne.n	8006eb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eb4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2180      	movs	r1, #128	@ 0x80
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff febd 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d007      	beq.n	8006edc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e023      	b.n	8006f24 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ee4:	d11d      	bne.n	8006f22 <SPI_EndRxTransaction+0xa6>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eee:	d004      	beq.n	8006efa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef8:	d113      	bne.n	8006f22 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff ff22 	bl	8006d50 <SPI_WaitFifoStateUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f16:	f043 0220 	orr.w	r2, r3, #32
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e000      	b.n	8006f24 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff ff03 	bl	8006d50 <SPI_WaitFifoStateUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f54:	f043 0220 	orr.w	r2, r3, #32
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e027      	b.n	8006fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	2180      	movs	r1, #128	@ 0x80
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff fe68 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f7a:	f043 0220 	orr.w	r2, r3, #32
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e014      	b.n	8006fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff fedc 	bl	8006d50 <SPI_WaitFifoStateUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa2:	f043 0220 	orr.w	r2, r3, #32
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e000      	b.n	8006fb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fc0:	f7fc fa30 	bl	8003424 <HAL_GetTick>
 8006fc4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0220 	bic.w	r2, r2, #32
 8006fd4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	2164      	movs	r1, #100	@ 0x64
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff ffa6 	bl	8006f2c <SPI_EndRxTxTransaction>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d005      	beq.n	8006ff2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fea:	f043 0220 	orr.w	r2, r3, #32
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d112      	bne.n	8007026 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800700c:	f043 0202 	orr.w	r2, r3, #2
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800701c:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff fb32 	bl	8006688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007024:	e020      	b.n	8007068 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800702a:	2b00      	cmp	r3, #0
 800702c:	d115      	bne.n	800705a <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b04      	cmp	r3, #4
 8007038:	d107      	bne.n	800704a <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fb fcb0 	bl	80029a8 <HAL_SPI_RxCpltCallback>
}
 8007048:	e00e      	b.n	8007068 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff fb0e 	bl	8006674 <HAL_SPI_TxRxCpltCallback>
}
 8007058:	e006      	b.n	8007068 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fb10 	bl	8006688 <HAL_SPI_ErrorCallback>
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007086:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007088:	f7fc f9cc 	bl	8003424 <HAL_GetTick>
 800708c:	4603      	mov	r3, r0
 800708e:	461a      	mov	r2, r3
 8007090:	2164      	movs	r1, #100	@ 0x64
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff fef2 	bl	8006e7c <SPI_EndRxTransaction>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070a2:	f043 0220 	orr.w	r2, r3, #32
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b10      	cmp	r3, #16
 80070be:	d10e      	bne.n	80070de <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070c4:	f043 0202 	orr.w	r2, r3, #2
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80070d4:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff fad6 	bl	8006688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80070dc:	e00a      	b.n	80070f4 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d103      	bne.n	80070ee <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fb fc5e 	bl	80029a8 <HAL_SPI_RxCpltCallback>
}
 80070ec:	e002      	b.n	80070f4 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff faca 	bl	8006688 <HAL_SPI_ErrorCallback>
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007104:	f7fc f98e 	bl	8003424 <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007118:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	2164      	movs	r1, #100	@ 0x64
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff ff04 	bl	8006f2c <SPI_EndRxTxTransaction>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800712e:	f043 0220 	orr.w	r2, r3, #32
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800713e:	2300      	movs	r3, #0
 8007140:	60bb      	str	r3, [r7, #8]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff fa8f 	bl	8006688 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800716a:	e002      	b.n	8007172 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7fb fc2f 	bl	80029d0 <HAL_SPI_TxCpltCallback>
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e040      	b.n	800720e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f83a 	bl	8007216 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2224      	movs	r2, #36	@ 0x24
 80071a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0201 	bic.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fb73 	bl	80078ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f8b8 	bl	800733c <UART_SetConfig>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e01b      	b.n	800720e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0201 	orr.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fbf2 	bl	80079f0 <UART_CheckIdleState>
 800720c:	4603      	mov	r3, r0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b08a      	sub	sp, #40	@ 0x28
 800722e:	af02      	add	r7, sp, #8
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	603b      	str	r3, [r7, #0]
 8007236:	4613      	mov	r3, r2
 8007238:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800723e:	2b20      	cmp	r3, #32
 8007240:	d177      	bne.n	8007332 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HAL_UART_Transmit+0x24>
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e070      	b.n	8007334 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2221      	movs	r2, #33	@ 0x21
 800725e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007260:	f7fc f8e0 	bl	8003424 <HAL_GetTick>
 8007264:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	88fa      	ldrh	r2, [r7, #6]
 800726a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	88fa      	ldrh	r2, [r7, #6]
 8007272:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800727e:	d108      	bne.n	8007292 <HAL_UART_Transmit+0x68>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	e003      	b.n	800729a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800729a:	e02f      	b.n	80072fc <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2200      	movs	r2, #0
 80072a4:	2180      	movs	r1, #128	@ 0x80
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 fc4a 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e03b      	b.n	8007334 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10b      	bne.n	80072da <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	881a      	ldrh	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072ce:	b292      	uxth	r2, r2
 80072d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	3302      	adds	r3, #2
 80072d6:	61bb      	str	r3, [r7, #24]
 80072d8:	e007      	b.n	80072ea <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	3301      	adds	r3, #1
 80072e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007302:	b29b      	uxth	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1c9      	bne.n	800729c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2200      	movs	r2, #0
 8007310:	2140      	movs	r1, #64	@ 0x40
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fc14 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2220      	movs	r2, #32
 8007322:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e005      	b.n	8007334 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2220      	movs	r2, #32
 800732c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	e000      	b.n	8007334 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007332:	2302      	movs	r3, #2
  }
}
 8007334:	4618      	mov	r0, r3
 8007336:	3720      	adds	r7, #32
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800733c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007340:	b08a      	sub	sp, #40	@ 0x28
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	431a      	orrs	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	431a      	orrs	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	4313      	orrs	r3, r2
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4ba4      	ldr	r3, [pc, #656]	@ (80075fc <UART_SetConfig+0x2c0>)
 800736c:	4013      	ands	r3, r2
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	6812      	ldr	r2, [r2, #0]
 8007372:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007374:	430b      	orrs	r3, r1
 8007376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a99      	ldr	r2, [pc, #612]	@ (8007600 <UART_SetConfig+0x2c4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a4:	4313      	orrs	r3, r2
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b8:	430a      	orrs	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a90      	ldr	r2, [pc, #576]	@ (8007604 <UART_SetConfig+0x2c8>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d126      	bne.n	8007414 <UART_SetConfig+0xd8>
 80073c6:	4b90      	ldr	r3, [pc, #576]	@ (8007608 <UART_SetConfig+0x2cc>)
 80073c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d81b      	bhi.n	800740c <UART_SetConfig+0xd0>
 80073d4:	a201      	add	r2, pc, #4	@ (adr r2, 80073dc <UART_SetConfig+0xa0>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	080073ed 	.word	0x080073ed
 80073e0:	080073fd 	.word	0x080073fd
 80073e4:	080073f5 	.word	0x080073f5
 80073e8:	08007405 	.word	0x08007405
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073f2:	e116      	b.n	8007622 <UART_SetConfig+0x2e6>
 80073f4:	2302      	movs	r3, #2
 80073f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073fa:	e112      	b.n	8007622 <UART_SetConfig+0x2e6>
 80073fc:	2304      	movs	r3, #4
 80073fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007402:	e10e      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007404:	2308      	movs	r3, #8
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800740a:	e10a      	b.n	8007622 <UART_SetConfig+0x2e6>
 800740c:	2310      	movs	r3, #16
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007412:	e106      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a7c      	ldr	r2, [pc, #496]	@ (800760c <UART_SetConfig+0x2d0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d138      	bne.n	8007490 <UART_SetConfig+0x154>
 800741e:	4b7a      	ldr	r3, [pc, #488]	@ (8007608 <UART_SetConfig+0x2cc>)
 8007420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007424:	f003 030c 	and.w	r3, r3, #12
 8007428:	2b0c      	cmp	r3, #12
 800742a:	d82d      	bhi.n	8007488 <UART_SetConfig+0x14c>
 800742c:	a201      	add	r2, pc, #4	@ (adr r2, 8007434 <UART_SetConfig+0xf8>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	08007469 	.word	0x08007469
 8007438:	08007489 	.word	0x08007489
 800743c:	08007489 	.word	0x08007489
 8007440:	08007489 	.word	0x08007489
 8007444:	08007479 	.word	0x08007479
 8007448:	08007489 	.word	0x08007489
 800744c:	08007489 	.word	0x08007489
 8007450:	08007489 	.word	0x08007489
 8007454:	08007471 	.word	0x08007471
 8007458:	08007489 	.word	0x08007489
 800745c:	08007489 	.word	0x08007489
 8007460:	08007489 	.word	0x08007489
 8007464:	08007481 	.word	0x08007481
 8007468:	2300      	movs	r3, #0
 800746a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800746e:	e0d8      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007470:	2302      	movs	r3, #2
 8007472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007476:	e0d4      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007478:	2304      	movs	r3, #4
 800747a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800747e:	e0d0      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007480:	2308      	movs	r3, #8
 8007482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007486:	e0cc      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007488:	2310      	movs	r3, #16
 800748a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800748e:	e0c8      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a5e      	ldr	r2, [pc, #376]	@ (8007610 <UART_SetConfig+0x2d4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d125      	bne.n	80074e6 <UART_SetConfig+0x1aa>
 800749a:	4b5b      	ldr	r3, [pc, #364]	@ (8007608 <UART_SetConfig+0x2cc>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074a4:	2b30      	cmp	r3, #48	@ 0x30
 80074a6:	d016      	beq.n	80074d6 <UART_SetConfig+0x19a>
 80074a8:	2b30      	cmp	r3, #48	@ 0x30
 80074aa:	d818      	bhi.n	80074de <UART_SetConfig+0x1a2>
 80074ac:	2b20      	cmp	r3, #32
 80074ae:	d00a      	beq.n	80074c6 <UART_SetConfig+0x18a>
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d814      	bhi.n	80074de <UART_SetConfig+0x1a2>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <UART_SetConfig+0x182>
 80074b8:	2b10      	cmp	r3, #16
 80074ba:	d008      	beq.n	80074ce <UART_SetConfig+0x192>
 80074bc:	e00f      	b.n	80074de <UART_SetConfig+0x1a2>
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074c4:	e0ad      	b.n	8007622 <UART_SetConfig+0x2e6>
 80074c6:	2302      	movs	r3, #2
 80074c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074cc:	e0a9      	b.n	8007622 <UART_SetConfig+0x2e6>
 80074ce:	2304      	movs	r3, #4
 80074d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074d4:	e0a5      	b.n	8007622 <UART_SetConfig+0x2e6>
 80074d6:	2308      	movs	r3, #8
 80074d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074dc:	e0a1      	b.n	8007622 <UART_SetConfig+0x2e6>
 80074de:	2310      	movs	r3, #16
 80074e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e4:	e09d      	b.n	8007622 <UART_SetConfig+0x2e6>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a4a      	ldr	r2, [pc, #296]	@ (8007614 <UART_SetConfig+0x2d8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d125      	bne.n	800753c <UART_SetConfig+0x200>
 80074f0:	4b45      	ldr	r3, [pc, #276]	@ (8007608 <UART_SetConfig+0x2cc>)
 80074f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80074fc:	d016      	beq.n	800752c <UART_SetConfig+0x1f0>
 80074fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007500:	d818      	bhi.n	8007534 <UART_SetConfig+0x1f8>
 8007502:	2b80      	cmp	r3, #128	@ 0x80
 8007504:	d00a      	beq.n	800751c <UART_SetConfig+0x1e0>
 8007506:	2b80      	cmp	r3, #128	@ 0x80
 8007508:	d814      	bhi.n	8007534 <UART_SetConfig+0x1f8>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <UART_SetConfig+0x1d8>
 800750e:	2b40      	cmp	r3, #64	@ 0x40
 8007510:	d008      	beq.n	8007524 <UART_SetConfig+0x1e8>
 8007512:	e00f      	b.n	8007534 <UART_SetConfig+0x1f8>
 8007514:	2300      	movs	r3, #0
 8007516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800751a:	e082      	b.n	8007622 <UART_SetConfig+0x2e6>
 800751c:	2302      	movs	r3, #2
 800751e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007522:	e07e      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007524:	2304      	movs	r3, #4
 8007526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800752a:	e07a      	b.n	8007622 <UART_SetConfig+0x2e6>
 800752c:	2308      	movs	r3, #8
 800752e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007532:	e076      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007534:	2310      	movs	r3, #16
 8007536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800753a:	e072      	b.n	8007622 <UART_SetConfig+0x2e6>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a35      	ldr	r2, [pc, #212]	@ (8007618 <UART_SetConfig+0x2dc>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d12a      	bne.n	800759c <UART_SetConfig+0x260>
 8007546:	4b30      	ldr	r3, [pc, #192]	@ (8007608 <UART_SetConfig+0x2cc>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007550:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007554:	d01a      	beq.n	800758c <UART_SetConfig+0x250>
 8007556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800755a:	d81b      	bhi.n	8007594 <UART_SetConfig+0x258>
 800755c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007560:	d00c      	beq.n	800757c <UART_SetConfig+0x240>
 8007562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007566:	d815      	bhi.n	8007594 <UART_SetConfig+0x258>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <UART_SetConfig+0x238>
 800756c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007570:	d008      	beq.n	8007584 <UART_SetConfig+0x248>
 8007572:	e00f      	b.n	8007594 <UART_SetConfig+0x258>
 8007574:	2300      	movs	r3, #0
 8007576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800757a:	e052      	b.n	8007622 <UART_SetConfig+0x2e6>
 800757c:	2302      	movs	r3, #2
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007582:	e04e      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007584:	2304      	movs	r3, #4
 8007586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800758a:	e04a      	b.n	8007622 <UART_SetConfig+0x2e6>
 800758c:	2308      	movs	r3, #8
 800758e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007592:	e046      	b.n	8007622 <UART_SetConfig+0x2e6>
 8007594:	2310      	movs	r3, #16
 8007596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800759a:	e042      	b.n	8007622 <UART_SetConfig+0x2e6>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a17      	ldr	r2, [pc, #92]	@ (8007600 <UART_SetConfig+0x2c4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d13a      	bne.n	800761c <UART_SetConfig+0x2e0>
 80075a6:	4b18      	ldr	r3, [pc, #96]	@ (8007608 <UART_SetConfig+0x2cc>)
 80075a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075b4:	d01a      	beq.n	80075ec <UART_SetConfig+0x2b0>
 80075b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075ba:	d81b      	bhi.n	80075f4 <UART_SetConfig+0x2b8>
 80075bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c0:	d00c      	beq.n	80075dc <UART_SetConfig+0x2a0>
 80075c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c6:	d815      	bhi.n	80075f4 <UART_SetConfig+0x2b8>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <UART_SetConfig+0x298>
 80075cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d0:	d008      	beq.n	80075e4 <UART_SetConfig+0x2a8>
 80075d2:	e00f      	b.n	80075f4 <UART_SetConfig+0x2b8>
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075da:	e022      	b.n	8007622 <UART_SetConfig+0x2e6>
 80075dc:	2302      	movs	r3, #2
 80075de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075e2:	e01e      	b.n	8007622 <UART_SetConfig+0x2e6>
 80075e4:	2304      	movs	r3, #4
 80075e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ea:	e01a      	b.n	8007622 <UART_SetConfig+0x2e6>
 80075ec:	2308      	movs	r3, #8
 80075ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075f2:	e016      	b.n	8007622 <UART_SetConfig+0x2e6>
 80075f4:	2310      	movs	r3, #16
 80075f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075fa:	e012      	b.n	8007622 <UART_SetConfig+0x2e6>
 80075fc:	efff69f3 	.word	0xefff69f3
 8007600:	40008000 	.word	0x40008000
 8007604:	40013800 	.word	0x40013800
 8007608:	40021000 	.word	0x40021000
 800760c:	40004400 	.word	0x40004400
 8007610:	40004800 	.word	0x40004800
 8007614:	40004c00 	.word	0x40004c00
 8007618:	40005000 	.word	0x40005000
 800761c:	2310      	movs	r3, #16
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a9f      	ldr	r2, [pc, #636]	@ (80078a4 <UART_SetConfig+0x568>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d17a      	bne.n	8007722 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800762c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007630:	2b08      	cmp	r3, #8
 8007632:	d824      	bhi.n	800767e <UART_SetConfig+0x342>
 8007634:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <UART_SetConfig+0x300>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	08007661 	.word	0x08007661
 8007640:	0800767f 	.word	0x0800767f
 8007644:	08007669 	.word	0x08007669
 8007648:	0800767f 	.word	0x0800767f
 800764c:	0800766f 	.word	0x0800766f
 8007650:	0800767f 	.word	0x0800767f
 8007654:	0800767f 	.word	0x0800767f
 8007658:	0800767f 	.word	0x0800767f
 800765c:	08007677 	.word	0x08007677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007660:	f7fd fdf0 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007664:	61f8      	str	r0, [r7, #28]
        break;
 8007666:	e010      	b.n	800768a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007668:	4b8f      	ldr	r3, [pc, #572]	@ (80078a8 <UART_SetConfig+0x56c>)
 800766a:	61fb      	str	r3, [r7, #28]
        break;
 800766c:	e00d      	b.n	800768a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800766e:	f7fd fd51 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 8007672:	61f8      	str	r0, [r7, #28]
        break;
 8007674:	e009      	b.n	800768a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800767a:	61fb      	str	r3, [r7, #28]
        break;
 800767c:	e005      	b.n	800768a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007688:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80fb 	beq.w	8007888 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	4613      	mov	r3, r2
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	4413      	add	r3, r2
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d305      	bcc.n	80076ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d903      	bls.n	80076b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076b4:	e0e8      	b.n	8007888 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	2200      	movs	r2, #0
 80076ba:	461c      	mov	r4, r3
 80076bc:	4615      	mov	r5, r2
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	f04f 0300 	mov.w	r3, #0
 80076c6:	022b      	lsls	r3, r5, #8
 80076c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80076cc:	0222      	lsls	r2, r4, #8
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	6849      	ldr	r1, [r1, #4]
 80076d2:	0849      	lsrs	r1, r1, #1
 80076d4:	2000      	movs	r0, #0
 80076d6:	4688      	mov	r8, r1
 80076d8:	4681      	mov	r9, r0
 80076da:	eb12 0a08 	adds.w	sl, r2, r8
 80076de:	eb43 0b09 	adc.w	fp, r3, r9
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f0:	4650      	mov	r0, sl
 80076f2:	4659      	mov	r1, fp
 80076f4:	f7f9 fac8 	bl	8000c88 <__aeabi_uldivmod>
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	4613      	mov	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007706:	d308      	bcc.n	800771a <UART_SetConfig+0x3de>
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800770e:	d204      	bcs.n	800771a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	60da      	str	r2, [r3, #12]
 8007718:	e0b6      	b.n	8007888 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007720:	e0b2      	b.n	8007888 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800772a:	d15e      	bne.n	80077ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800772c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007730:	2b08      	cmp	r3, #8
 8007732:	d828      	bhi.n	8007786 <UART_SetConfig+0x44a>
 8007734:	a201      	add	r2, pc, #4	@ (adr r2, 800773c <UART_SetConfig+0x400>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	08007761 	.word	0x08007761
 8007740:	08007769 	.word	0x08007769
 8007744:	08007771 	.word	0x08007771
 8007748:	08007787 	.word	0x08007787
 800774c:	08007777 	.word	0x08007777
 8007750:	08007787 	.word	0x08007787
 8007754:	08007787 	.word	0x08007787
 8007758:	08007787 	.word	0x08007787
 800775c:	0800777f 	.word	0x0800777f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007760:	f7fd fd70 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007764:	61f8      	str	r0, [r7, #28]
        break;
 8007766:	e014      	b.n	8007792 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007768:	f7fd fd82 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 800776c:	61f8      	str	r0, [r7, #28]
        break;
 800776e:	e010      	b.n	8007792 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007770:	4b4d      	ldr	r3, [pc, #308]	@ (80078a8 <UART_SetConfig+0x56c>)
 8007772:	61fb      	str	r3, [r7, #28]
        break;
 8007774:	e00d      	b.n	8007792 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007776:	f7fd fccd 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 800777a:	61f8      	str	r0, [r7, #28]
        break;
 800777c:	e009      	b.n	8007792 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800777e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007782:	61fb      	str	r3, [r7, #28]
        break;
 8007784:	e005      	b.n	8007792 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d077      	beq.n	8007888 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	005a      	lsls	r2, r3, #1
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	085b      	lsrs	r3, r3, #1
 80077a2:	441a      	add	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b0f      	cmp	r3, #15
 80077b2:	d916      	bls.n	80077e2 <UART_SetConfig+0x4a6>
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077ba:	d212      	bcs.n	80077e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f023 030f 	bic.w	r3, r3, #15
 80077c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	085b      	lsrs	r3, r3, #1
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	8afb      	ldrh	r3, [r7, #22]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	8afa      	ldrh	r2, [r7, #22]
 80077de:	60da      	str	r2, [r3, #12]
 80077e0:	e052      	b.n	8007888 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077e8:	e04e      	b.n	8007888 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d827      	bhi.n	8007842 <UART_SetConfig+0x506>
 80077f2:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <UART_SetConfig+0x4bc>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	0800781d 	.word	0x0800781d
 80077fc:	08007825 	.word	0x08007825
 8007800:	0800782d 	.word	0x0800782d
 8007804:	08007843 	.word	0x08007843
 8007808:	08007833 	.word	0x08007833
 800780c:	08007843 	.word	0x08007843
 8007810:	08007843 	.word	0x08007843
 8007814:	08007843 	.word	0x08007843
 8007818:	0800783b 	.word	0x0800783b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800781c:	f7fd fd12 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007820:	61f8      	str	r0, [r7, #28]
        break;
 8007822:	e014      	b.n	800784e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007824:	f7fd fd24 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 8007828:	61f8      	str	r0, [r7, #28]
        break;
 800782a:	e010      	b.n	800784e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800782c:	4b1e      	ldr	r3, [pc, #120]	@ (80078a8 <UART_SetConfig+0x56c>)
 800782e:	61fb      	str	r3, [r7, #28]
        break;
 8007830:	e00d      	b.n	800784e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007832:	f7fd fc6f 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 8007836:	61f8      	str	r0, [r7, #28]
        break;
 8007838:	e009      	b.n	800784e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800783a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800783e:	61fb      	str	r3, [r7, #28]
        break;
 8007840:	e005      	b.n	800784e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800784c:	bf00      	nop
    }

    if (pclk != 0U)
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d019      	beq.n	8007888 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	085a      	lsrs	r2, r3, #1
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	441a      	add	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	fbb2 f3f3 	udiv	r3, r2, r3
 8007866:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b0f      	cmp	r3, #15
 800786c:	d909      	bls.n	8007882 <UART_SetConfig+0x546>
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007874:	d205      	bcs.n	8007882 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	b29a      	uxth	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60da      	str	r2, [r3, #12]
 8007880:	e002      	b.n	8007888 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007894:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007898:	4618      	mov	r0, r3
 800789a:	3728      	adds	r7, #40	@ 0x28
 800789c:	46bd      	mov	sp, r7
 800789e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078a2:	bf00      	nop
 80078a4:	40008000 	.word	0x40008000
 80078a8:	00f42400 	.word	0x00f42400

080078ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791e:	f003 0304 	and.w	r3, r3, #4
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00a      	beq.n	800795e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01a      	beq.n	80079c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079aa:	d10a      	bne.n	80079c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	605a      	str	r2, [r3, #4]
  }
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b098      	sub	sp, #96	@ 0x60
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a00:	f7fb fd10 	bl	8003424 <HAL_GetTick>
 8007a04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0308 	and.w	r3, r3, #8
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d12e      	bne.n	8007a72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f88c 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d021      	beq.n	8007a72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a42:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e062      	b.n	8007b38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d149      	bne.n	8007b14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f856 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d03c      	beq.n	8007b14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aec:	61fa      	str	r2, [r7, #28]
 8007aee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	69b9      	ldr	r1, [r7, #24]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	617b      	str	r3, [r7, #20]
   return(result);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e5      	bne.n	8007acc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e011      	b.n	8007b38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3758      	adds	r7, #88	@ 0x58
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b50:	e04f      	b.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d04b      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7fb fc63 	bl	8003424 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e04e      	b.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d037      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b80      	cmp	r3, #128	@ 0x80
 8007b86:	d034      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b40      	cmp	r3, #64	@ 0x40
 8007b8c:	d031      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d110      	bne.n	8007bbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 f838 	bl	8007c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2208      	movs	r2, #8
 8007bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e029      	b.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bcc:	d111      	bne.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f81e 	bl	8007c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e00f      	b.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69da      	ldr	r2, [r3, #28]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	bf0c      	ite	eq
 8007c02:	2301      	moveq	r3, #1
 8007c04:	2300      	movne	r3, #0
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	461a      	mov	r2, r3
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d0a0      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b095      	sub	sp, #84	@ 0x54
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c40:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e6      	bne.n	8007c22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	f023 0301 	bic.w	r3, r3, #1
 8007c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3308      	adds	r3, #8
 8007c72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e5      	bne.n	8007c54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d118      	bne.n	8007cc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f023 0310 	bic.w	r3, r3, #16
 8007ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cae:	61bb      	str	r3, [r7, #24]
 8007cb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6979      	ldr	r1, [r7, #20]
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	613b      	str	r3, [r7, #16]
   return(result);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e6      	bne.n	8007c90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007cd6:	bf00      	nop
 8007cd8:	3754      	adds	r7, #84	@ 0x54
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <__cvt>:
 8007ce2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce6:	ec57 6b10 	vmov	r6, r7, d0
 8007cea:	2f00      	cmp	r7, #0
 8007cec:	460c      	mov	r4, r1
 8007cee:	4619      	mov	r1, r3
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	bfbb      	ittet	lt
 8007cf4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007cf8:	461f      	movlt	r7, r3
 8007cfa:	2300      	movge	r3, #0
 8007cfc:	232d      	movlt	r3, #45	@ 0x2d
 8007cfe:	700b      	strb	r3, [r1, #0]
 8007d00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d02:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007d06:	4691      	mov	r9, r2
 8007d08:	f023 0820 	bic.w	r8, r3, #32
 8007d0c:	bfbc      	itt	lt
 8007d0e:	4632      	movlt	r2, r6
 8007d10:	4616      	movlt	r6, r2
 8007d12:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d16:	d005      	beq.n	8007d24 <__cvt+0x42>
 8007d18:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d1c:	d100      	bne.n	8007d20 <__cvt+0x3e>
 8007d1e:	3401      	adds	r4, #1
 8007d20:	2102      	movs	r1, #2
 8007d22:	e000      	b.n	8007d26 <__cvt+0x44>
 8007d24:	2103      	movs	r1, #3
 8007d26:	ab03      	add	r3, sp, #12
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	ab02      	add	r3, sp, #8
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	ec47 6b10 	vmov	d0, r6, r7
 8007d32:	4653      	mov	r3, sl
 8007d34:	4622      	mov	r2, r4
 8007d36:	f001 fa6b 	bl	8009210 <_dtoa_r>
 8007d3a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007d3e:	4605      	mov	r5, r0
 8007d40:	d119      	bne.n	8007d76 <__cvt+0x94>
 8007d42:	f019 0f01 	tst.w	r9, #1
 8007d46:	d00e      	beq.n	8007d66 <__cvt+0x84>
 8007d48:	eb00 0904 	add.w	r9, r0, r4
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2300      	movs	r3, #0
 8007d50:	4630      	mov	r0, r6
 8007d52:	4639      	mov	r1, r7
 8007d54:	f7f8 feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d58:	b108      	cbz	r0, 8007d5e <__cvt+0x7c>
 8007d5a:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d5e:	2230      	movs	r2, #48	@ 0x30
 8007d60:	9b03      	ldr	r3, [sp, #12]
 8007d62:	454b      	cmp	r3, r9
 8007d64:	d31e      	bcc.n	8007da4 <__cvt+0xc2>
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d6a:	1b5b      	subs	r3, r3, r5
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	b004      	add	sp, #16
 8007d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d76:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d7a:	eb00 0904 	add.w	r9, r0, r4
 8007d7e:	d1e5      	bne.n	8007d4c <__cvt+0x6a>
 8007d80:	7803      	ldrb	r3, [r0, #0]
 8007d82:	2b30      	cmp	r3, #48	@ 0x30
 8007d84:	d10a      	bne.n	8007d9c <__cvt+0xba>
 8007d86:	2200      	movs	r2, #0
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	f7f8 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d92:	b918      	cbnz	r0, 8007d9c <__cvt+0xba>
 8007d94:	f1c4 0401 	rsb	r4, r4, #1
 8007d98:	f8ca 4000 	str.w	r4, [sl]
 8007d9c:	f8da 3000 	ldr.w	r3, [sl]
 8007da0:	4499      	add	r9, r3
 8007da2:	e7d3      	b.n	8007d4c <__cvt+0x6a>
 8007da4:	1c59      	adds	r1, r3, #1
 8007da6:	9103      	str	r1, [sp, #12]
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	e7d9      	b.n	8007d60 <__cvt+0x7e>

08007dac <__exponent>:
 8007dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dae:	2900      	cmp	r1, #0
 8007db0:	bfba      	itte	lt
 8007db2:	4249      	neglt	r1, r1
 8007db4:	232d      	movlt	r3, #45	@ 0x2d
 8007db6:	232b      	movge	r3, #43	@ 0x2b
 8007db8:	2909      	cmp	r1, #9
 8007dba:	7002      	strb	r2, [r0, #0]
 8007dbc:	7043      	strb	r3, [r0, #1]
 8007dbe:	dd29      	ble.n	8007e14 <__exponent+0x68>
 8007dc0:	f10d 0307 	add.w	r3, sp, #7
 8007dc4:	461d      	mov	r5, r3
 8007dc6:	270a      	movs	r7, #10
 8007dc8:	461a      	mov	r2, r3
 8007dca:	fbb1 f6f7 	udiv	r6, r1, r7
 8007dce:	fb07 1416 	mls	r4, r7, r6, r1
 8007dd2:	3430      	adds	r4, #48	@ 0x30
 8007dd4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007dd8:	460c      	mov	r4, r1
 8007dda:	2c63      	cmp	r4, #99	@ 0x63
 8007ddc:	f103 33ff 	add.w	r3, r3, #4294967295
 8007de0:	4631      	mov	r1, r6
 8007de2:	dcf1      	bgt.n	8007dc8 <__exponent+0x1c>
 8007de4:	3130      	adds	r1, #48	@ 0x30
 8007de6:	1e94      	subs	r4, r2, #2
 8007de8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007dec:	1c41      	adds	r1, r0, #1
 8007dee:	4623      	mov	r3, r4
 8007df0:	42ab      	cmp	r3, r5
 8007df2:	d30a      	bcc.n	8007e0a <__exponent+0x5e>
 8007df4:	f10d 0309 	add.w	r3, sp, #9
 8007df8:	1a9b      	subs	r3, r3, r2
 8007dfa:	42ac      	cmp	r4, r5
 8007dfc:	bf88      	it	hi
 8007dfe:	2300      	movhi	r3, #0
 8007e00:	3302      	adds	r3, #2
 8007e02:	4403      	add	r3, r0
 8007e04:	1a18      	subs	r0, r3, r0
 8007e06:	b003      	add	sp, #12
 8007e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e0a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e0e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e12:	e7ed      	b.n	8007df0 <__exponent+0x44>
 8007e14:	2330      	movs	r3, #48	@ 0x30
 8007e16:	3130      	adds	r1, #48	@ 0x30
 8007e18:	7083      	strb	r3, [r0, #2]
 8007e1a:	70c1      	strb	r1, [r0, #3]
 8007e1c:	1d03      	adds	r3, r0, #4
 8007e1e:	e7f1      	b.n	8007e04 <__exponent+0x58>

08007e20 <_printf_float>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	b08d      	sub	sp, #52	@ 0x34
 8007e26:	460c      	mov	r4, r1
 8007e28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007e2c:	4616      	mov	r6, r2
 8007e2e:	461f      	mov	r7, r3
 8007e30:	4605      	mov	r5, r0
 8007e32:	f001 f8bb 	bl	8008fac <_localeconv_r>
 8007e36:	6803      	ldr	r3, [r0, #0]
 8007e38:	9304      	str	r3, [sp, #16]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7f8 fa18 	bl	8000270 <strlen>
 8007e40:	2300      	movs	r3, #0
 8007e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e44:	f8d8 3000 	ldr.w	r3, [r8]
 8007e48:	9005      	str	r0, [sp, #20]
 8007e4a:	3307      	adds	r3, #7
 8007e4c:	f023 0307 	bic.w	r3, r3, #7
 8007e50:	f103 0208 	add.w	r2, r3, #8
 8007e54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e58:	f8d4 b000 	ldr.w	fp, [r4]
 8007e5c:	f8c8 2000 	str.w	r2, [r8]
 8007e60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007e68:	9307      	str	r3, [sp, #28]
 8007e6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007e72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e76:	4b9c      	ldr	r3, [pc, #624]	@ (80080e8 <_printf_float+0x2c8>)
 8007e78:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7c:	f7f8 fe56 	bl	8000b2c <__aeabi_dcmpun>
 8007e80:	bb70      	cbnz	r0, 8007ee0 <_printf_float+0xc0>
 8007e82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e86:	4b98      	ldr	r3, [pc, #608]	@ (80080e8 <_printf_float+0x2c8>)
 8007e88:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8c:	f7f8 fe30 	bl	8000af0 <__aeabi_dcmple>
 8007e90:	bb30      	cbnz	r0, 8007ee0 <_printf_float+0xc0>
 8007e92:	2200      	movs	r2, #0
 8007e94:	2300      	movs	r3, #0
 8007e96:	4640      	mov	r0, r8
 8007e98:	4649      	mov	r1, r9
 8007e9a:	f7f8 fe1f 	bl	8000adc <__aeabi_dcmplt>
 8007e9e:	b110      	cbz	r0, 8007ea6 <_printf_float+0x86>
 8007ea0:	232d      	movs	r3, #45	@ 0x2d
 8007ea2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ea6:	4a91      	ldr	r2, [pc, #580]	@ (80080ec <_printf_float+0x2cc>)
 8007ea8:	4b91      	ldr	r3, [pc, #580]	@ (80080f0 <_printf_float+0x2d0>)
 8007eaa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007eae:	bf8c      	ite	hi
 8007eb0:	4690      	movhi	r8, r2
 8007eb2:	4698      	movls	r8, r3
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	f02b 0304 	bic.w	r3, fp, #4
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	f04f 0900 	mov.w	r9, #0
 8007ec2:	9700      	str	r7, [sp, #0]
 8007ec4:	4633      	mov	r3, r6
 8007ec6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f000 f9d2 	bl	8008274 <_printf_common>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f040 808d 	bne.w	8007ff0 <_printf_float+0x1d0>
 8007ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eda:	b00d      	add	sp, #52	@ 0x34
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	f7f8 fe20 	bl	8000b2c <__aeabi_dcmpun>
 8007eec:	b140      	cbz	r0, 8007f00 <_printf_float+0xe0>
 8007eee:	464b      	mov	r3, r9
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	bfbc      	itt	lt
 8007ef4:	232d      	movlt	r3, #45	@ 0x2d
 8007ef6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007efa:	4a7e      	ldr	r2, [pc, #504]	@ (80080f4 <_printf_float+0x2d4>)
 8007efc:	4b7e      	ldr	r3, [pc, #504]	@ (80080f8 <_printf_float+0x2d8>)
 8007efe:	e7d4      	b.n	8007eaa <_printf_float+0x8a>
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007f06:	9206      	str	r2, [sp, #24]
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	d13b      	bne.n	8007f84 <_printf_float+0x164>
 8007f0c:	2306      	movs	r3, #6
 8007f0e:	6063      	str	r3, [r4, #4]
 8007f10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007f14:	2300      	movs	r3, #0
 8007f16:	6022      	str	r2, [r4, #0]
 8007f18:	9303      	str	r3, [sp, #12]
 8007f1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007f1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007f20:	ab09      	add	r3, sp, #36	@ 0x24
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	6861      	ldr	r1, [r4, #4]
 8007f26:	ec49 8b10 	vmov	d0, r8, r9
 8007f2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f7ff fed7 	bl	8007ce2 <__cvt>
 8007f34:	9b06      	ldr	r3, [sp, #24]
 8007f36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f38:	2b47      	cmp	r3, #71	@ 0x47
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	d129      	bne.n	8007f92 <_printf_float+0x172>
 8007f3e:	1cc8      	adds	r0, r1, #3
 8007f40:	db02      	blt.n	8007f48 <_printf_float+0x128>
 8007f42:	6863      	ldr	r3, [r4, #4]
 8007f44:	4299      	cmp	r1, r3
 8007f46:	dd41      	ble.n	8007fcc <_printf_float+0x1ac>
 8007f48:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f4c:	fa5f fa8a 	uxtb.w	sl, sl
 8007f50:	3901      	subs	r1, #1
 8007f52:	4652      	mov	r2, sl
 8007f54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007f58:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f5a:	f7ff ff27 	bl	8007dac <__exponent>
 8007f5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f60:	1813      	adds	r3, r2, r0
 8007f62:	2a01      	cmp	r2, #1
 8007f64:	4681      	mov	r9, r0
 8007f66:	6123      	str	r3, [r4, #16]
 8007f68:	dc02      	bgt.n	8007f70 <_printf_float+0x150>
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	07d2      	lsls	r2, r2, #31
 8007f6e:	d501      	bpl.n	8007f74 <_printf_float+0x154>
 8007f70:	3301      	adds	r3, #1
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0a2      	beq.n	8007ec2 <_printf_float+0xa2>
 8007f7c:	232d      	movs	r3, #45	@ 0x2d
 8007f7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f82:	e79e      	b.n	8007ec2 <_printf_float+0xa2>
 8007f84:	9a06      	ldr	r2, [sp, #24]
 8007f86:	2a47      	cmp	r2, #71	@ 0x47
 8007f88:	d1c2      	bne.n	8007f10 <_printf_float+0xf0>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1c0      	bne.n	8007f10 <_printf_float+0xf0>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e7bd      	b.n	8007f0e <_printf_float+0xee>
 8007f92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f96:	d9db      	bls.n	8007f50 <_printf_float+0x130>
 8007f98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007f9c:	d118      	bne.n	8007fd0 <_printf_float+0x1b0>
 8007f9e:	2900      	cmp	r1, #0
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	dd0b      	ble.n	8007fbc <_printf_float+0x19c>
 8007fa4:	6121      	str	r1, [r4, #16]
 8007fa6:	b913      	cbnz	r3, 8007fae <_printf_float+0x18e>
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	07d0      	lsls	r0, r2, #31
 8007fac:	d502      	bpl.n	8007fb4 <_printf_float+0x194>
 8007fae:	3301      	adds	r3, #1
 8007fb0:	440b      	add	r3, r1
 8007fb2:	6123      	str	r3, [r4, #16]
 8007fb4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007fb6:	f04f 0900 	mov.w	r9, #0
 8007fba:	e7db      	b.n	8007f74 <_printf_float+0x154>
 8007fbc:	b913      	cbnz	r3, 8007fc4 <_printf_float+0x1a4>
 8007fbe:	6822      	ldr	r2, [r4, #0]
 8007fc0:	07d2      	lsls	r2, r2, #31
 8007fc2:	d501      	bpl.n	8007fc8 <_printf_float+0x1a8>
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	e7f4      	b.n	8007fb2 <_printf_float+0x192>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e7f2      	b.n	8007fb2 <_printf_float+0x192>
 8007fcc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007fd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	db05      	blt.n	8007fe2 <_printf_float+0x1c2>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	6121      	str	r1, [r4, #16]
 8007fda:	07d8      	lsls	r0, r3, #31
 8007fdc:	d5ea      	bpl.n	8007fb4 <_printf_float+0x194>
 8007fde:	1c4b      	adds	r3, r1, #1
 8007fe0:	e7e7      	b.n	8007fb2 <_printf_float+0x192>
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	bfd4      	ite	le
 8007fe6:	f1c1 0202 	rsble	r2, r1, #2
 8007fea:	2201      	movgt	r2, #1
 8007fec:	4413      	add	r3, r2
 8007fee:	e7e0      	b.n	8007fb2 <_printf_float+0x192>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	055a      	lsls	r2, r3, #21
 8007ff4:	d407      	bmi.n	8008006 <_printf_float+0x1e6>
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	47b8      	blx	r7
 8008000:	3001      	adds	r0, #1
 8008002:	d12b      	bne.n	800805c <_printf_float+0x23c>
 8008004:	e767      	b.n	8007ed6 <_printf_float+0xb6>
 8008006:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800800a:	f240 80dd 	bls.w	80081c8 <_printf_float+0x3a8>
 800800e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008012:	2200      	movs	r2, #0
 8008014:	2300      	movs	r3, #0
 8008016:	f7f8 fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800801a:	2800      	cmp	r0, #0
 800801c:	d033      	beq.n	8008086 <_printf_float+0x266>
 800801e:	4a37      	ldr	r2, [pc, #220]	@ (80080fc <_printf_float+0x2dc>)
 8008020:	2301      	movs	r3, #1
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	f43f af54 	beq.w	8007ed6 <_printf_float+0xb6>
 800802e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008032:	4543      	cmp	r3, r8
 8008034:	db02      	blt.n	800803c <_printf_float+0x21c>
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	07d8      	lsls	r0, r3, #31
 800803a:	d50f      	bpl.n	800805c <_printf_float+0x23c>
 800803c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	f43f af45 	beq.w	8007ed6 <_printf_float+0xb6>
 800804c:	f04f 0900 	mov.w	r9, #0
 8008050:	f108 38ff 	add.w	r8, r8, #4294967295
 8008054:	f104 0a1a 	add.w	sl, r4, #26
 8008058:	45c8      	cmp	r8, r9
 800805a:	dc09      	bgt.n	8008070 <_printf_float+0x250>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	079b      	lsls	r3, r3, #30
 8008060:	f100 8103 	bmi.w	800826a <_printf_float+0x44a>
 8008064:	68e0      	ldr	r0, [r4, #12]
 8008066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008068:	4298      	cmp	r0, r3
 800806a:	bfb8      	it	lt
 800806c:	4618      	movlt	r0, r3
 800806e:	e734      	b.n	8007eda <_printf_float+0xba>
 8008070:	2301      	movs	r3, #1
 8008072:	4652      	mov	r2, sl
 8008074:	4631      	mov	r1, r6
 8008076:	4628      	mov	r0, r5
 8008078:	47b8      	blx	r7
 800807a:	3001      	adds	r0, #1
 800807c:	f43f af2b 	beq.w	8007ed6 <_printf_float+0xb6>
 8008080:	f109 0901 	add.w	r9, r9, #1
 8008084:	e7e8      	b.n	8008058 <_printf_float+0x238>
 8008086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	dc39      	bgt.n	8008100 <_printf_float+0x2e0>
 800808c:	4a1b      	ldr	r2, [pc, #108]	@ (80080fc <_printf_float+0x2dc>)
 800808e:	2301      	movs	r3, #1
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	47b8      	blx	r7
 8008096:	3001      	adds	r0, #1
 8008098:	f43f af1d 	beq.w	8007ed6 <_printf_float+0xb6>
 800809c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80080a0:	ea59 0303 	orrs.w	r3, r9, r3
 80080a4:	d102      	bne.n	80080ac <_printf_float+0x28c>
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	07d9      	lsls	r1, r3, #31
 80080aa:	d5d7      	bpl.n	800805c <_printf_float+0x23c>
 80080ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080b0:	4631      	mov	r1, r6
 80080b2:	4628      	mov	r0, r5
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	f43f af0d 	beq.w	8007ed6 <_printf_float+0xb6>
 80080bc:	f04f 0a00 	mov.w	sl, #0
 80080c0:	f104 0b1a 	add.w	fp, r4, #26
 80080c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c6:	425b      	negs	r3, r3
 80080c8:	4553      	cmp	r3, sl
 80080ca:	dc01      	bgt.n	80080d0 <_printf_float+0x2b0>
 80080cc:	464b      	mov	r3, r9
 80080ce:	e793      	b.n	8007ff8 <_printf_float+0x1d8>
 80080d0:	2301      	movs	r3, #1
 80080d2:	465a      	mov	r2, fp
 80080d4:	4631      	mov	r1, r6
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	f43f aefb 	beq.w	8007ed6 <_printf_float+0xb6>
 80080e0:	f10a 0a01 	add.w	sl, sl, #1
 80080e4:	e7ee      	b.n	80080c4 <_printf_float+0x2a4>
 80080e6:	bf00      	nop
 80080e8:	7fefffff 	.word	0x7fefffff
 80080ec:	0800cf38 	.word	0x0800cf38
 80080f0:	0800cf34 	.word	0x0800cf34
 80080f4:	0800cf40 	.word	0x0800cf40
 80080f8:	0800cf3c 	.word	0x0800cf3c
 80080fc:	0800cf44 	.word	0x0800cf44
 8008100:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008102:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008106:	4553      	cmp	r3, sl
 8008108:	bfa8      	it	ge
 800810a:	4653      	movge	r3, sl
 800810c:	2b00      	cmp	r3, #0
 800810e:	4699      	mov	r9, r3
 8008110:	dc36      	bgt.n	8008180 <_printf_float+0x360>
 8008112:	f04f 0b00 	mov.w	fp, #0
 8008116:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800811a:	f104 021a 	add.w	r2, r4, #26
 800811e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008120:	9306      	str	r3, [sp, #24]
 8008122:	eba3 0309 	sub.w	r3, r3, r9
 8008126:	455b      	cmp	r3, fp
 8008128:	dc31      	bgt.n	800818e <_printf_float+0x36e>
 800812a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812c:	459a      	cmp	sl, r3
 800812e:	dc3a      	bgt.n	80081a6 <_printf_float+0x386>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	07da      	lsls	r2, r3, #31
 8008134:	d437      	bmi.n	80081a6 <_printf_float+0x386>
 8008136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008138:	ebaa 0903 	sub.w	r9, sl, r3
 800813c:	9b06      	ldr	r3, [sp, #24]
 800813e:	ebaa 0303 	sub.w	r3, sl, r3
 8008142:	4599      	cmp	r9, r3
 8008144:	bfa8      	it	ge
 8008146:	4699      	movge	r9, r3
 8008148:	f1b9 0f00 	cmp.w	r9, #0
 800814c:	dc33      	bgt.n	80081b6 <_printf_float+0x396>
 800814e:	f04f 0800 	mov.w	r8, #0
 8008152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008156:	f104 0b1a 	add.w	fp, r4, #26
 800815a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800815c:	ebaa 0303 	sub.w	r3, sl, r3
 8008160:	eba3 0309 	sub.w	r3, r3, r9
 8008164:	4543      	cmp	r3, r8
 8008166:	f77f af79 	ble.w	800805c <_printf_float+0x23c>
 800816a:	2301      	movs	r3, #1
 800816c:	465a      	mov	r2, fp
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	f43f aeae 	beq.w	8007ed6 <_printf_float+0xb6>
 800817a:	f108 0801 	add.w	r8, r8, #1
 800817e:	e7ec      	b.n	800815a <_printf_float+0x33a>
 8008180:	4642      	mov	r2, r8
 8008182:	4631      	mov	r1, r6
 8008184:	4628      	mov	r0, r5
 8008186:	47b8      	blx	r7
 8008188:	3001      	adds	r0, #1
 800818a:	d1c2      	bne.n	8008112 <_printf_float+0x2f2>
 800818c:	e6a3      	b.n	8007ed6 <_printf_float+0xb6>
 800818e:	2301      	movs	r3, #1
 8008190:	4631      	mov	r1, r6
 8008192:	4628      	mov	r0, r5
 8008194:	9206      	str	r2, [sp, #24]
 8008196:	47b8      	blx	r7
 8008198:	3001      	adds	r0, #1
 800819a:	f43f ae9c 	beq.w	8007ed6 <_printf_float+0xb6>
 800819e:	9a06      	ldr	r2, [sp, #24]
 80081a0:	f10b 0b01 	add.w	fp, fp, #1
 80081a4:	e7bb      	b.n	800811e <_printf_float+0x2fe>
 80081a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081aa:	4631      	mov	r1, r6
 80081ac:	4628      	mov	r0, r5
 80081ae:	47b8      	blx	r7
 80081b0:	3001      	adds	r0, #1
 80081b2:	d1c0      	bne.n	8008136 <_printf_float+0x316>
 80081b4:	e68f      	b.n	8007ed6 <_printf_float+0xb6>
 80081b6:	9a06      	ldr	r2, [sp, #24]
 80081b8:	464b      	mov	r3, r9
 80081ba:	4442      	add	r2, r8
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	d1c3      	bne.n	800814e <_printf_float+0x32e>
 80081c6:	e686      	b.n	8007ed6 <_printf_float+0xb6>
 80081c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081cc:	f1ba 0f01 	cmp.w	sl, #1
 80081d0:	dc01      	bgt.n	80081d6 <_printf_float+0x3b6>
 80081d2:	07db      	lsls	r3, r3, #31
 80081d4:	d536      	bpl.n	8008244 <_printf_float+0x424>
 80081d6:	2301      	movs	r3, #1
 80081d8:	4642      	mov	r2, r8
 80081da:	4631      	mov	r1, r6
 80081dc:	4628      	mov	r0, r5
 80081de:	47b8      	blx	r7
 80081e0:	3001      	adds	r0, #1
 80081e2:	f43f ae78 	beq.w	8007ed6 <_printf_float+0xb6>
 80081e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ea:	4631      	mov	r1, r6
 80081ec:	4628      	mov	r0, r5
 80081ee:	47b8      	blx	r7
 80081f0:	3001      	adds	r0, #1
 80081f2:	f43f ae70 	beq.w	8007ed6 <_printf_float+0xb6>
 80081f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80081fa:	2200      	movs	r2, #0
 80081fc:	2300      	movs	r3, #0
 80081fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008202:	f7f8 fc61 	bl	8000ac8 <__aeabi_dcmpeq>
 8008206:	b9c0      	cbnz	r0, 800823a <_printf_float+0x41a>
 8008208:	4653      	mov	r3, sl
 800820a:	f108 0201 	add.w	r2, r8, #1
 800820e:	4631      	mov	r1, r6
 8008210:	4628      	mov	r0, r5
 8008212:	47b8      	blx	r7
 8008214:	3001      	adds	r0, #1
 8008216:	d10c      	bne.n	8008232 <_printf_float+0x412>
 8008218:	e65d      	b.n	8007ed6 <_printf_float+0xb6>
 800821a:	2301      	movs	r3, #1
 800821c:	465a      	mov	r2, fp
 800821e:	4631      	mov	r1, r6
 8008220:	4628      	mov	r0, r5
 8008222:	47b8      	blx	r7
 8008224:	3001      	adds	r0, #1
 8008226:	f43f ae56 	beq.w	8007ed6 <_printf_float+0xb6>
 800822a:	f108 0801 	add.w	r8, r8, #1
 800822e:	45d0      	cmp	r8, sl
 8008230:	dbf3      	blt.n	800821a <_printf_float+0x3fa>
 8008232:	464b      	mov	r3, r9
 8008234:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008238:	e6df      	b.n	8007ffa <_printf_float+0x1da>
 800823a:	f04f 0800 	mov.w	r8, #0
 800823e:	f104 0b1a 	add.w	fp, r4, #26
 8008242:	e7f4      	b.n	800822e <_printf_float+0x40e>
 8008244:	2301      	movs	r3, #1
 8008246:	4642      	mov	r2, r8
 8008248:	e7e1      	b.n	800820e <_printf_float+0x3ee>
 800824a:	2301      	movs	r3, #1
 800824c:	464a      	mov	r2, r9
 800824e:	4631      	mov	r1, r6
 8008250:	4628      	mov	r0, r5
 8008252:	47b8      	blx	r7
 8008254:	3001      	adds	r0, #1
 8008256:	f43f ae3e 	beq.w	8007ed6 <_printf_float+0xb6>
 800825a:	f108 0801 	add.w	r8, r8, #1
 800825e:	68e3      	ldr	r3, [r4, #12]
 8008260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008262:	1a5b      	subs	r3, r3, r1
 8008264:	4543      	cmp	r3, r8
 8008266:	dcf0      	bgt.n	800824a <_printf_float+0x42a>
 8008268:	e6fc      	b.n	8008064 <_printf_float+0x244>
 800826a:	f04f 0800 	mov.w	r8, #0
 800826e:	f104 0919 	add.w	r9, r4, #25
 8008272:	e7f4      	b.n	800825e <_printf_float+0x43e>

08008274 <_printf_common>:
 8008274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008278:	4616      	mov	r6, r2
 800827a:	4698      	mov	r8, r3
 800827c:	688a      	ldr	r2, [r1, #8]
 800827e:	690b      	ldr	r3, [r1, #16]
 8008280:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008284:	4293      	cmp	r3, r2
 8008286:	bfb8      	it	lt
 8008288:	4613      	movlt	r3, r2
 800828a:	6033      	str	r3, [r6, #0]
 800828c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008290:	4607      	mov	r7, r0
 8008292:	460c      	mov	r4, r1
 8008294:	b10a      	cbz	r2, 800829a <_printf_common+0x26>
 8008296:	3301      	adds	r3, #1
 8008298:	6033      	str	r3, [r6, #0]
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	0699      	lsls	r1, r3, #26
 800829e:	bf42      	ittt	mi
 80082a0:	6833      	ldrmi	r3, [r6, #0]
 80082a2:	3302      	addmi	r3, #2
 80082a4:	6033      	strmi	r3, [r6, #0]
 80082a6:	6825      	ldr	r5, [r4, #0]
 80082a8:	f015 0506 	ands.w	r5, r5, #6
 80082ac:	d106      	bne.n	80082bc <_printf_common+0x48>
 80082ae:	f104 0a19 	add.w	sl, r4, #25
 80082b2:	68e3      	ldr	r3, [r4, #12]
 80082b4:	6832      	ldr	r2, [r6, #0]
 80082b6:	1a9b      	subs	r3, r3, r2
 80082b8:	42ab      	cmp	r3, r5
 80082ba:	dc26      	bgt.n	800830a <_printf_common+0x96>
 80082bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082c0:	6822      	ldr	r2, [r4, #0]
 80082c2:	3b00      	subs	r3, #0
 80082c4:	bf18      	it	ne
 80082c6:	2301      	movne	r3, #1
 80082c8:	0692      	lsls	r2, r2, #26
 80082ca:	d42b      	bmi.n	8008324 <_printf_common+0xb0>
 80082cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082d0:	4641      	mov	r1, r8
 80082d2:	4638      	mov	r0, r7
 80082d4:	47c8      	blx	r9
 80082d6:	3001      	adds	r0, #1
 80082d8:	d01e      	beq.n	8008318 <_printf_common+0xa4>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	6922      	ldr	r2, [r4, #16]
 80082de:	f003 0306 	and.w	r3, r3, #6
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	bf02      	ittt	eq
 80082e6:	68e5      	ldreq	r5, [r4, #12]
 80082e8:	6833      	ldreq	r3, [r6, #0]
 80082ea:	1aed      	subeq	r5, r5, r3
 80082ec:	68a3      	ldr	r3, [r4, #8]
 80082ee:	bf0c      	ite	eq
 80082f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082f4:	2500      	movne	r5, #0
 80082f6:	4293      	cmp	r3, r2
 80082f8:	bfc4      	itt	gt
 80082fa:	1a9b      	subgt	r3, r3, r2
 80082fc:	18ed      	addgt	r5, r5, r3
 80082fe:	2600      	movs	r6, #0
 8008300:	341a      	adds	r4, #26
 8008302:	42b5      	cmp	r5, r6
 8008304:	d11a      	bne.n	800833c <_printf_common+0xc8>
 8008306:	2000      	movs	r0, #0
 8008308:	e008      	b.n	800831c <_printf_common+0xa8>
 800830a:	2301      	movs	r3, #1
 800830c:	4652      	mov	r2, sl
 800830e:	4641      	mov	r1, r8
 8008310:	4638      	mov	r0, r7
 8008312:	47c8      	blx	r9
 8008314:	3001      	adds	r0, #1
 8008316:	d103      	bne.n	8008320 <_printf_common+0xac>
 8008318:	f04f 30ff 	mov.w	r0, #4294967295
 800831c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008320:	3501      	adds	r5, #1
 8008322:	e7c6      	b.n	80082b2 <_printf_common+0x3e>
 8008324:	18e1      	adds	r1, r4, r3
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	2030      	movs	r0, #48	@ 0x30
 800832a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800832e:	4422      	add	r2, r4
 8008330:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008334:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008338:	3302      	adds	r3, #2
 800833a:	e7c7      	b.n	80082cc <_printf_common+0x58>
 800833c:	2301      	movs	r3, #1
 800833e:	4622      	mov	r2, r4
 8008340:	4641      	mov	r1, r8
 8008342:	4638      	mov	r0, r7
 8008344:	47c8      	blx	r9
 8008346:	3001      	adds	r0, #1
 8008348:	d0e6      	beq.n	8008318 <_printf_common+0xa4>
 800834a:	3601      	adds	r6, #1
 800834c:	e7d9      	b.n	8008302 <_printf_common+0x8e>
	...

08008350 <_printf_i>:
 8008350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008354:	7e0f      	ldrb	r7, [r1, #24]
 8008356:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008358:	2f78      	cmp	r7, #120	@ 0x78
 800835a:	4691      	mov	r9, r2
 800835c:	4680      	mov	r8, r0
 800835e:	460c      	mov	r4, r1
 8008360:	469a      	mov	sl, r3
 8008362:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008366:	d807      	bhi.n	8008378 <_printf_i+0x28>
 8008368:	2f62      	cmp	r7, #98	@ 0x62
 800836a:	d80a      	bhi.n	8008382 <_printf_i+0x32>
 800836c:	2f00      	cmp	r7, #0
 800836e:	f000 80d1 	beq.w	8008514 <_printf_i+0x1c4>
 8008372:	2f58      	cmp	r7, #88	@ 0x58
 8008374:	f000 80b8 	beq.w	80084e8 <_printf_i+0x198>
 8008378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800837c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008380:	e03a      	b.n	80083f8 <_printf_i+0xa8>
 8008382:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008386:	2b15      	cmp	r3, #21
 8008388:	d8f6      	bhi.n	8008378 <_printf_i+0x28>
 800838a:	a101      	add	r1, pc, #4	@ (adr r1, 8008390 <_printf_i+0x40>)
 800838c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008390:	080083e9 	.word	0x080083e9
 8008394:	080083fd 	.word	0x080083fd
 8008398:	08008379 	.word	0x08008379
 800839c:	08008379 	.word	0x08008379
 80083a0:	08008379 	.word	0x08008379
 80083a4:	08008379 	.word	0x08008379
 80083a8:	080083fd 	.word	0x080083fd
 80083ac:	08008379 	.word	0x08008379
 80083b0:	08008379 	.word	0x08008379
 80083b4:	08008379 	.word	0x08008379
 80083b8:	08008379 	.word	0x08008379
 80083bc:	080084fb 	.word	0x080084fb
 80083c0:	08008427 	.word	0x08008427
 80083c4:	080084b5 	.word	0x080084b5
 80083c8:	08008379 	.word	0x08008379
 80083cc:	08008379 	.word	0x08008379
 80083d0:	0800851d 	.word	0x0800851d
 80083d4:	08008379 	.word	0x08008379
 80083d8:	08008427 	.word	0x08008427
 80083dc:	08008379 	.word	0x08008379
 80083e0:	08008379 	.word	0x08008379
 80083e4:	080084bd 	.word	0x080084bd
 80083e8:	6833      	ldr	r3, [r6, #0]
 80083ea:	1d1a      	adds	r2, r3, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6032      	str	r2, [r6, #0]
 80083f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083f8:	2301      	movs	r3, #1
 80083fa:	e09c      	b.n	8008536 <_printf_i+0x1e6>
 80083fc:	6833      	ldr	r3, [r6, #0]
 80083fe:	6820      	ldr	r0, [r4, #0]
 8008400:	1d19      	adds	r1, r3, #4
 8008402:	6031      	str	r1, [r6, #0]
 8008404:	0606      	lsls	r6, r0, #24
 8008406:	d501      	bpl.n	800840c <_printf_i+0xbc>
 8008408:	681d      	ldr	r5, [r3, #0]
 800840a:	e003      	b.n	8008414 <_printf_i+0xc4>
 800840c:	0645      	lsls	r5, r0, #25
 800840e:	d5fb      	bpl.n	8008408 <_printf_i+0xb8>
 8008410:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008414:	2d00      	cmp	r5, #0
 8008416:	da03      	bge.n	8008420 <_printf_i+0xd0>
 8008418:	232d      	movs	r3, #45	@ 0x2d
 800841a:	426d      	negs	r5, r5
 800841c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008420:	4858      	ldr	r0, [pc, #352]	@ (8008584 <_printf_i+0x234>)
 8008422:	230a      	movs	r3, #10
 8008424:	e011      	b.n	800844a <_printf_i+0xfa>
 8008426:	6821      	ldr	r1, [r4, #0]
 8008428:	6833      	ldr	r3, [r6, #0]
 800842a:	0608      	lsls	r0, r1, #24
 800842c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008430:	d402      	bmi.n	8008438 <_printf_i+0xe8>
 8008432:	0649      	lsls	r1, r1, #25
 8008434:	bf48      	it	mi
 8008436:	b2ad      	uxthmi	r5, r5
 8008438:	2f6f      	cmp	r7, #111	@ 0x6f
 800843a:	4852      	ldr	r0, [pc, #328]	@ (8008584 <_printf_i+0x234>)
 800843c:	6033      	str	r3, [r6, #0]
 800843e:	bf14      	ite	ne
 8008440:	230a      	movne	r3, #10
 8008442:	2308      	moveq	r3, #8
 8008444:	2100      	movs	r1, #0
 8008446:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800844a:	6866      	ldr	r6, [r4, #4]
 800844c:	60a6      	str	r6, [r4, #8]
 800844e:	2e00      	cmp	r6, #0
 8008450:	db05      	blt.n	800845e <_printf_i+0x10e>
 8008452:	6821      	ldr	r1, [r4, #0]
 8008454:	432e      	orrs	r6, r5
 8008456:	f021 0104 	bic.w	r1, r1, #4
 800845a:	6021      	str	r1, [r4, #0]
 800845c:	d04b      	beq.n	80084f6 <_printf_i+0x1a6>
 800845e:	4616      	mov	r6, r2
 8008460:	fbb5 f1f3 	udiv	r1, r5, r3
 8008464:	fb03 5711 	mls	r7, r3, r1, r5
 8008468:	5dc7      	ldrb	r7, [r0, r7]
 800846a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800846e:	462f      	mov	r7, r5
 8008470:	42bb      	cmp	r3, r7
 8008472:	460d      	mov	r5, r1
 8008474:	d9f4      	bls.n	8008460 <_printf_i+0x110>
 8008476:	2b08      	cmp	r3, #8
 8008478:	d10b      	bne.n	8008492 <_printf_i+0x142>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	07df      	lsls	r7, r3, #31
 800847e:	d508      	bpl.n	8008492 <_printf_i+0x142>
 8008480:	6923      	ldr	r3, [r4, #16]
 8008482:	6861      	ldr	r1, [r4, #4]
 8008484:	4299      	cmp	r1, r3
 8008486:	bfde      	ittt	le
 8008488:	2330      	movle	r3, #48	@ 0x30
 800848a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800848e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008492:	1b92      	subs	r2, r2, r6
 8008494:	6122      	str	r2, [r4, #16]
 8008496:	f8cd a000 	str.w	sl, [sp]
 800849a:	464b      	mov	r3, r9
 800849c:	aa03      	add	r2, sp, #12
 800849e:	4621      	mov	r1, r4
 80084a0:	4640      	mov	r0, r8
 80084a2:	f7ff fee7 	bl	8008274 <_printf_common>
 80084a6:	3001      	adds	r0, #1
 80084a8:	d14a      	bne.n	8008540 <_printf_i+0x1f0>
 80084aa:	f04f 30ff 	mov.w	r0, #4294967295
 80084ae:	b004      	add	sp, #16
 80084b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	f043 0320 	orr.w	r3, r3, #32
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	4832      	ldr	r0, [pc, #200]	@ (8008588 <_printf_i+0x238>)
 80084be:	2778      	movs	r7, #120	@ 0x78
 80084c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	6831      	ldr	r1, [r6, #0]
 80084c8:	061f      	lsls	r7, r3, #24
 80084ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80084ce:	d402      	bmi.n	80084d6 <_printf_i+0x186>
 80084d0:	065f      	lsls	r7, r3, #25
 80084d2:	bf48      	it	mi
 80084d4:	b2ad      	uxthmi	r5, r5
 80084d6:	6031      	str	r1, [r6, #0]
 80084d8:	07d9      	lsls	r1, r3, #31
 80084da:	bf44      	itt	mi
 80084dc:	f043 0320 	orrmi.w	r3, r3, #32
 80084e0:	6023      	strmi	r3, [r4, #0]
 80084e2:	b11d      	cbz	r5, 80084ec <_printf_i+0x19c>
 80084e4:	2310      	movs	r3, #16
 80084e6:	e7ad      	b.n	8008444 <_printf_i+0xf4>
 80084e8:	4826      	ldr	r0, [pc, #152]	@ (8008584 <_printf_i+0x234>)
 80084ea:	e7e9      	b.n	80084c0 <_printf_i+0x170>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	f023 0320 	bic.w	r3, r3, #32
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	e7f6      	b.n	80084e4 <_printf_i+0x194>
 80084f6:	4616      	mov	r6, r2
 80084f8:	e7bd      	b.n	8008476 <_printf_i+0x126>
 80084fa:	6833      	ldr	r3, [r6, #0]
 80084fc:	6825      	ldr	r5, [r4, #0]
 80084fe:	6961      	ldr	r1, [r4, #20]
 8008500:	1d18      	adds	r0, r3, #4
 8008502:	6030      	str	r0, [r6, #0]
 8008504:	062e      	lsls	r6, r5, #24
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	d501      	bpl.n	800850e <_printf_i+0x1be>
 800850a:	6019      	str	r1, [r3, #0]
 800850c:	e002      	b.n	8008514 <_printf_i+0x1c4>
 800850e:	0668      	lsls	r0, r5, #25
 8008510:	d5fb      	bpl.n	800850a <_printf_i+0x1ba>
 8008512:	8019      	strh	r1, [r3, #0]
 8008514:	2300      	movs	r3, #0
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	4616      	mov	r6, r2
 800851a:	e7bc      	b.n	8008496 <_printf_i+0x146>
 800851c:	6833      	ldr	r3, [r6, #0]
 800851e:	1d1a      	adds	r2, r3, #4
 8008520:	6032      	str	r2, [r6, #0]
 8008522:	681e      	ldr	r6, [r3, #0]
 8008524:	6862      	ldr	r2, [r4, #4]
 8008526:	2100      	movs	r1, #0
 8008528:	4630      	mov	r0, r6
 800852a:	f7f7 fe51 	bl	80001d0 <memchr>
 800852e:	b108      	cbz	r0, 8008534 <_printf_i+0x1e4>
 8008530:	1b80      	subs	r0, r0, r6
 8008532:	6060      	str	r0, [r4, #4]
 8008534:	6863      	ldr	r3, [r4, #4]
 8008536:	6123      	str	r3, [r4, #16]
 8008538:	2300      	movs	r3, #0
 800853a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800853e:	e7aa      	b.n	8008496 <_printf_i+0x146>
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	4632      	mov	r2, r6
 8008544:	4649      	mov	r1, r9
 8008546:	4640      	mov	r0, r8
 8008548:	47d0      	blx	sl
 800854a:	3001      	adds	r0, #1
 800854c:	d0ad      	beq.n	80084aa <_printf_i+0x15a>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	079b      	lsls	r3, r3, #30
 8008552:	d413      	bmi.n	800857c <_printf_i+0x22c>
 8008554:	68e0      	ldr	r0, [r4, #12]
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	4298      	cmp	r0, r3
 800855a:	bfb8      	it	lt
 800855c:	4618      	movlt	r0, r3
 800855e:	e7a6      	b.n	80084ae <_printf_i+0x15e>
 8008560:	2301      	movs	r3, #1
 8008562:	4632      	mov	r2, r6
 8008564:	4649      	mov	r1, r9
 8008566:	4640      	mov	r0, r8
 8008568:	47d0      	blx	sl
 800856a:	3001      	adds	r0, #1
 800856c:	d09d      	beq.n	80084aa <_printf_i+0x15a>
 800856e:	3501      	adds	r5, #1
 8008570:	68e3      	ldr	r3, [r4, #12]
 8008572:	9903      	ldr	r1, [sp, #12]
 8008574:	1a5b      	subs	r3, r3, r1
 8008576:	42ab      	cmp	r3, r5
 8008578:	dcf2      	bgt.n	8008560 <_printf_i+0x210>
 800857a:	e7eb      	b.n	8008554 <_printf_i+0x204>
 800857c:	2500      	movs	r5, #0
 800857e:	f104 0619 	add.w	r6, r4, #25
 8008582:	e7f5      	b.n	8008570 <_printf_i+0x220>
 8008584:	0800cf46 	.word	0x0800cf46
 8008588:	0800cf57 	.word	0x0800cf57

0800858c <_scanf_float>:
 800858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	b087      	sub	sp, #28
 8008592:	4691      	mov	r9, r2
 8008594:	9303      	str	r3, [sp, #12]
 8008596:	688b      	ldr	r3, [r1, #8]
 8008598:	1e5a      	subs	r2, r3, #1
 800859a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800859e:	bf81      	itttt	hi
 80085a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80085a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80085a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80085ac:	608b      	strhi	r3, [r1, #8]
 80085ae:	680b      	ldr	r3, [r1, #0]
 80085b0:	460a      	mov	r2, r1
 80085b2:	f04f 0500 	mov.w	r5, #0
 80085b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80085ba:	f842 3b1c 	str.w	r3, [r2], #28
 80085be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80085c2:	4680      	mov	r8, r0
 80085c4:	460c      	mov	r4, r1
 80085c6:	bf98      	it	ls
 80085c8:	f04f 0b00 	movls.w	fp, #0
 80085cc:	9201      	str	r2, [sp, #4]
 80085ce:	4616      	mov	r6, r2
 80085d0:	46aa      	mov	sl, r5
 80085d2:	462f      	mov	r7, r5
 80085d4:	9502      	str	r5, [sp, #8]
 80085d6:	68a2      	ldr	r2, [r4, #8]
 80085d8:	b15a      	cbz	r2, 80085f2 <_scanf_float+0x66>
 80085da:	f8d9 3000 	ldr.w	r3, [r9]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80085e2:	d863      	bhi.n	80086ac <_scanf_float+0x120>
 80085e4:	2b40      	cmp	r3, #64	@ 0x40
 80085e6:	d83b      	bhi.n	8008660 <_scanf_float+0xd4>
 80085e8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80085ec:	b2c8      	uxtb	r0, r1
 80085ee:	280e      	cmp	r0, #14
 80085f0:	d939      	bls.n	8008666 <_scanf_float+0xda>
 80085f2:	b11f      	cbz	r7, 80085fc <_scanf_float+0x70>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085fa:	6023      	str	r3, [r4, #0]
 80085fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008600:	f1ba 0f01 	cmp.w	sl, #1
 8008604:	f200 8114 	bhi.w	8008830 <_scanf_float+0x2a4>
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	429e      	cmp	r6, r3
 800860c:	f200 8105 	bhi.w	800881a <_scanf_float+0x28e>
 8008610:	2001      	movs	r0, #1
 8008612:	b007      	add	sp, #28
 8008614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008618:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800861c:	2a0d      	cmp	r2, #13
 800861e:	d8e8      	bhi.n	80085f2 <_scanf_float+0x66>
 8008620:	a101      	add	r1, pc, #4	@ (adr r1, 8008628 <_scanf_float+0x9c>)
 8008622:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008626:	bf00      	nop
 8008628:	08008771 	.word	0x08008771
 800862c:	080085f3 	.word	0x080085f3
 8008630:	080085f3 	.word	0x080085f3
 8008634:	080085f3 	.word	0x080085f3
 8008638:	080087cd 	.word	0x080087cd
 800863c:	080087a7 	.word	0x080087a7
 8008640:	080085f3 	.word	0x080085f3
 8008644:	080085f3 	.word	0x080085f3
 8008648:	0800877f 	.word	0x0800877f
 800864c:	080085f3 	.word	0x080085f3
 8008650:	080085f3 	.word	0x080085f3
 8008654:	080085f3 	.word	0x080085f3
 8008658:	080085f3 	.word	0x080085f3
 800865c:	0800873b 	.word	0x0800873b
 8008660:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008664:	e7da      	b.n	800861c <_scanf_float+0x90>
 8008666:	290e      	cmp	r1, #14
 8008668:	d8c3      	bhi.n	80085f2 <_scanf_float+0x66>
 800866a:	a001      	add	r0, pc, #4	@ (adr r0, 8008670 <_scanf_float+0xe4>)
 800866c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008670:	0800872b 	.word	0x0800872b
 8008674:	080085f3 	.word	0x080085f3
 8008678:	0800872b 	.word	0x0800872b
 800867c:	080087bb 	.word	0x080087bb
 8008680:	080085f3 	.word	0x080085f3
 8008684:	080086cd 	.word	0x080086cd
 8008688:	08008711 	.word	0x08008711
 800868c:	08008711 	.word	0x08008711
 8008690:	08008711 	.word	0x08008711
 8008694:	08008711 	.word	0x08008711
 8008698:	08008711 	.word	0x08008711
 800869c:	08008711 	.word	0x08008711
 80086a0:	08008711 	.word	0x08008711
 80086a4:	08008711 	.word	0x08008711
 80086a8:	08008711 	.word	0x08008711
 80086ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80086ae:	d809      	bhi.n	80086c4 <_scanf_float+0x138>
 80086b0:	2b60      	cmp	r3, #96	@ 0x60
 80086b2:	d8b1      	bhi.n	8008618 <_scanf_float+0x8c>
 80086b4:	2b54      	cmp	r3, #84	@ 0x54
 80086b6:	d07b      	beq.n	80087b0 <_scanf_float+0x224>
 80086b8:	2b59      	cmp	r3, #89	@ 0x59
 80086ba:	d19a      	bne.n	80085f2 <_scanf_float+0x66>
 80086bc:	2d07      	cmp	r5, #7
 80086be:	d198      	bne.n	80085f2 <_scanf_float+0x66>
 80086c0:	2508      	movs	r5, #8
 80086c2:	e02f      	b.n	8008724 <_scanf_float+0x198>
 80086c4:	2b74      	cmp	r3, #116	@ 0x74
 80086c6:	d073      	beq.n	80087b0 <_scanf_float+0x224>
 80086c8:	2b79      	cmp	r3, #121	@ 0x79
 80086ca:	e7f6      	b.n	80086ba <_scanf_float+0x12e>
 80086cc:	6821      	ldr	r1, [r4, #0]
 80086ce:	05c8      	lsls	r0, r1, #23
 80086d0:	d51e      	bpl.n	8008710 <_scanf_float+0x184>
 80086d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80086d6:	6021      	str	r1, [r4, #0]
 80086d8:	3701      	adds	r7, #1
 80086da:	f1bb 0f00 	cmp.w	fp, #0
 80086de:	d003      	beq.n	80086e8 <_scanf_float+0x15c>
 80086e0:	3201      	adds	r2, #1
 80086e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086e6:	60a2      	str	r2, [r4, #8]
 80086e8:	68a3      	ldr	r3, [r4, #8]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	60a3      	str	r3, [r4, #8]
 80086ee:	6923      	ldr	r3, [r4, #16]
 80086f0:	3301      	adds	r3, #1
 80086f2:	6123      	str	r3, [r4, #16]
 80086f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f8c9 3004 	str.w	r3, [r9, #4]
 8008700:	f340 8082 	ble.w	8008808 <_scanf_float+0x27c>
 8008704:	f8d9 3000 	ldr.w	r3, [r9]
 8008708:	3301      	adds	r3, #1
 800870a:	f8c9 3000 	str.w	r3, [r9]
 800870e:	e762      	b.n	80085d6 <_scanf_float+0x4a>
 8008710:	eb1a 0105 	adds.w	r1, sl, r5
 8008714:	f47f af6d 	bne.w	80085f2 <_scanf_float+0x66>
 8008718:	6822      	ldr	r2, [r4, #0]
 800871a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800871e:	6022      	str	r2, [r4, #0]
 8008720:	460d      	mov	r5, r1
 8008722:	468a      	mov	sl, r1
 8008724:	f806 3b01 	strb.w	r3, [r6], #1
 8008728:	e7de      	b.n	80086e8 <_scanf_float+0x15c>
 800872a:	6822      	ldr	r2, [r4, #0]
 800872c:	0610      	lsls	r0, r2, #24
 800872e:	f57f af60 	bpl.w	80085f2 <_scanf_float+0x66>
 8008732:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008736:	6022      	str	r2, [r4, #0]
 8008738:	e7f4      	b.n	8008724 <_scanf_float+0x198>
 800873a:	f1ba 0f00 	cmp.w	sl, #0
 800873e:	d10c      	bne.n	800875a <_scanf_float+0x1ce>
 8008740:	b977      	cbnz	r7, 8008760 <_scanf_float+0x1d4>
 8008742:	6822      	ldr	r2, [r4, #0]
 8008744:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008748:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800874c:	d108      	bne.n	8008760 <_scanf_float+0x1d4>
 800874e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008752:	6022      	str	r2, [r4, #0]
 8008754:	f04f 0a01 	mov.w	sl, #1
 8008758:	e7e4      	b.n	8008724 <_scanf_float+0x198>
 800875a:	f1ba 0f02 	cmp.w	sl, #2
 800875e:	d050      	beq.n	8008802 <_scanf_float+0x276>
 8008760:	2d01      	cmp	r5, #1
 8008762:	d002      	beq.n	800876a <_scanf_float+0x1de>
 8008764:	2d04      	cmp	r5, #4
 8008766:	f47f af44 	bne.w	80085f2 <_scanf_float+0x66>
 800876a:	3501      	adds	r5, #1
 800876c:	b2ed      	uxtb	r5, r5
 800876e:	e7d9      	b.n	8008724 <_scanf_float+0x198>
 8008770:	f1ba 0f01 	cmp.w	sl, #1
 8008774:	f47f af3d 	bne.w	80085f2 <_scanf_float+0x66>
 8008778:	f04f 0a02 	mov.w	sl, #2
 800877c:	e7d2      	b.n	8008724 <_scanf_float+0x198>
 800877e:	b975      	cbnz	r5, 800879e <_scanf_float+0x212>
 8008780:	2f00      	cmp	r7, #0
 8008782:	f47f af37 	bne.w	80085f4 <_scanf_float+0x68>
 8008786:	6822      	ldr	r2, [r4, #0]
 8008788:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800878c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008790:	f040 8103 	bne.w	800899a <_scanf_float+0x40e>
 8008794:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008798:	6022      	str	r2, [r4, #0]
 800879a:	2501      	movs	r5, #1
 800879c:	e7c2      	b.n	8008724 <_scanf_float+0x198>
 800879e:	2d03      	cmp	r5, #3
 80087a0:	d0e3      	beq.n	800876a <_scanf_float+0x1de>
 80087a2:	2d05      	cmp	r5, #5
 80087a4:	e7df      	b.n	8008766 <_scanf_float+0x1da>
 80087a6:	2d02      	cmp	r5, #2
 80087a8:	f47f af23 	bne.w	80085f2 <_scanf_float+0x66>
 80087ac:	2503      	movs	r5, #3
 80087ae:	e7b9      	b.n	8008724 <_scanf_float+0x198>
 80087b0:	2d06      	cmp	r5, #6
 80087b2:	f47f af1e 	bne.w	80085f2 <_scanf_float+0x66>
 80087b6:	2507      	movs	r5, #7
 80087b8:	e7b4      	b.n	8008724 <_scanf_float+0x198>
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	0591      	lsls	r1, r2, #22
 80087be:	f57f af18 	bpl.w	80085f2 <_scanf_float+0x66>
 80087c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80087c6:	6022      	str	r2, [r4, #0]
 80087c8:	9702      	str	r7, [sp, #8]
 80087ca:	e7ab      	b.n	8008724 <_scanf_float+0x198>
 80087cc:	6822      	ldr	r2, [r4, #0]
 80087ce:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80087d2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80087d6:	d005      	beq.n	80087e4 <_scanf_float+0x258>
 80087d8:	0550      	lsls	r0, r2, #21
 80087da:	f57f af0a 	bpl.w	80085f2 <_scanf_float+0x66>
 80087de:	2f00      	cmp	r7, #0
 80087e0:	f000 80db 	beq.w	800899a <_scanf_float+0x40e>
 80087e4:	0591      	lsls	r1, r2, #22
 80087e6:	bf58      	it	pl
 80087e8:	9902      	ldrpl	r1, [sp, #8]
 80087ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087ee:	bf58      	it	pl
 80087f0:	1a79      	subpl	r1, r7, r1
 80087f2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80087f6:	bf58      	it	pl
 80087f8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80087fc:	6022      	str	r2, [r4, #0]
 80087fe:	2700      	movs	r7, #0
 8008800:	e790      	b.n	8008724 <_scanf_float+0x198>
 8008802:	f04f 0a03 	mov.w	sl, #3
 8008806:	e78d      	b.n	8008724 <_scanf_float+0x198>
 8008808:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800880c:	4649      	mov	r1, r9
 800880e:	4640      	mov	r0, r8
 8008810:	4798      	blx	r3
 8008812:	2800      	cmp	r0, #0
 8008814:	f43f aedf 	beq.w	80085d6 <_scanf_float+0x4a>
 8008818:	e6eb      	b.n	80085f2 <_scanf_float+0x66>
 800881a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800881e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008822:	464a      	mov	r2, r9
 8008824:	4640      	mov	r0, r8
 8008826:	4798      	blx	r3
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	3b01      	subs	r3, #1
 800882c:	6123      	str	r3, [r4, #16]
 800882e:	e6eb      	b.n	8008608 <_scanf_float+0x7c>
 8008830:	1e6b      	subs	r3, r5, #1
 8008832:	2b06      	cmp	r3, #6
 8008834:	d824      	bhi.n	8008880 <_scanf_float+0x2f4>
 8008836:	2d02      	cmp	r5, #2
 8008838:	d836      	bhi.n	80088a8 <_scanf_float+0x31c>
 800883a:	9b01      	ldr	r3, [sp, #4]
 800883c:	429e      	cmp	r6, r3
 800883e:	f67f aee7 	bls.w	8008610 <_scanf_float+0x84>
 8008842:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008846:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800884a:	464a      	mov	r2, r9
 800884c:	4640      	mov	r0, r8
 800884e:	4798      	blx	r3
 8008850:	6923      	ldr	r3, [r4, #16]
 8008852:	3b01      	subs	r3, #1
 8008854:	6123      	str	r3, [r4, #16]
 8008856:	e7f0      	b.n	800883a <_scanf_float+0x2ae>
 8008858:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800885c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008860:	464a      	mov	r2, r9
 8008862:	4640      	mov	r0, r8
 8008864:	4798      	blx	r3
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	3b01      	subs	r3, #1
 800886a:	6123      	str	r3, [r4, #16]
 800886c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008870:	fa5f fa8a 	uxtb.w	sl, sl
 8008874:	f1ba 0f02 	cmp.w	sl, #2
 8008878:	d1ee      	bne.n	8008858 <_scanf_float+0x2cc>
 800887a:	3d03      	subs	r5, #3
 800887c:	b2ed      	uxtb	r5, r5
 800887e:	1b76      	subs	r6, r6, r5
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	05da      	lsls	r2, r3, #23
 8008884:	d530      	bpl.n	80088e8 <_scanf_float+0x35c>
 8008886:	055b      	lsls	r3, r3, #21
 8008888:	d511      	bpl.n	80088ae <_scanf_float+0x322>
 800888a:	9b01      	ldr	r3, [sp, #4]
 800888c:	429e      	cmp	r6, r3
 800888e:	f67f aebf 	bls.w	8008610 <_scanf_float+0x84>
 8008892:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008896:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800889a:	464a      	mov	r2, r9
 800889c:	4640      	mov	r0, r8
 800889e:	4798      	blx	r3
 80088a0:	6923      	ldr	r3, [r4, #16]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	6123      	str	r3, [r4, #16]
 80088a6:	e7f0      	b.n	800888a <_scanf_float+0x2fe>
 80088a8:	46aa      	mov	sl, r5
 80088aa:	46b3      	mov	fp, r6
 80088ac:	e7de      	b.n	800886c <_scanf_float+0x2e0>
 80088ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	2965      	cmp	r1, #101	@ 0x65
 80088b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80088ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80088be:	6123      	str	r3, [r4, #16]
 80088c0:	d00c      	beq.n	80088dc <_scanf_float+0x350>
 80088c2:	2945      	cmp	r1, #69	@ 0x45
 80088c4:	d00a      	beq.n	80088dc <_scanf_float+0x350>
 80088c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088ca:	464a      	mov	r2, r9
 80088cc:	4640      	mov	r0, r8
 80088ce:	4798      	blx	r3
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	1eb5      	subs	r5, r6, #2
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088e0:	464a      	mov	r2, r9
 80088e2:	4640      	mov	r0, r8
 80088e4:	4798      	blx	r3
 80088e6:	462e      	mov	r6, r5
 80088e8:	6822      	ldr	r2, [r4, #0]
 80088ea:	f012 0210 	ands.w	r2, r2, #16
 80088ee:	d001      	beq.n	80088f4 <_scanf_float+0x368>
 80088f0:	2000      	movs	r0, #0
 80088f2:	e68e      	b.n	8008612 <_scanf_float+0x86>
 80088f4:	7032      	strb	r2, [r6, #0]
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80088fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008900:	d125      	bne.n	800894e <_scanf_float+0x3c2>
 8008902:	9b02      	ldr	r3, [sp, #8]
 8008904:	429f      	cmp	r7, r3
 8008906:	d00a      	beq.n	800891e <_scanf_float+0x392>
 8008908:	1bda      	subs	r2, r3, r7
 800890a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800890e:	429e      	cmp	r6, r3
 8008910:	bf28      	it	cs
 8008912:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008916:	4922      	ldr	r1, [pc, #136]	@ (80089a0 <_scanf_float+0x414>)
 8008918:	4630      	mov	r0, r6
 800891a:	f000 f9ad 	bl	8008c78 <siprintf>
 800891e:	9901      	ldr	r1, [sp, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	4640      	mov	r0, r8
 8008924:	f002 fdf0 	bl	800b508 <_strtod_r>
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	6821      	ldr	r1, [r4, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f011 0f02 	tst.w	r1, #2
 8008932:	ec57 6b10 	vmov	r6, r7, d0
 8008936:	f103 0204 	add.w	r2, r3, #4
 800893a:	d015      	beq.n	8008968 <_scanf_float+0x3dc>
 800893c:	9903      	ldr	r1, [sp, #12]
 800893e:	600a      	str	r2, [r1, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	e9c3 6700 	strd	r6, r7, [r3]
 8008946:	68e3      	ldr	r3, [r4, #12]
 8008948:	3301      	adds	r3, #1
 800894a:	60e3      	str	r3, [r4, #12]
 800894c:	e7d0      	b.n	80088f0 <_scanf_float+0x364>
 800894e:	9b04      	ldr	r3, [sp, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0e4      	beq.n	800891e <_scanf_float+0x392>
 8008954:	9905      	ldr	r1, [sp, #20]
 8008956:	230a      	movs	r3, #10
 8008958:	3101      	adds	r1, #1
 800895a:	4640      	mov	r0, r8
 800895c:	f002 fe54 	bl	800b608 <_strtol_r>
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	9e05      	ldr	r6, [sp, #20]
 8008964:	1ac2      	subs	r2, r0, r3
 8008966:	e7d0      	b.n	800890a <_scanf_float+0x37e>
 8008968:	f011 0f04 	tst.w	r1, #4
 800896c:	9903      	ldr	r1, [sp, #12]
 800896e:	600a      	str	r2, [r1, #0]
 8008970:	d1e6      	bne.n	8008940 <_scanf_float+0x3b4>
 8008972:	681d      	ldr	r5, [r3, #0]
 8008974:	4632      	mov	r2, r6
 8008976:	463b      	mov	r3, r7
 8008978:	4630      	mov	r0, r6
 800897a:	4639      	mov	r1, r7
 800897c:	f7f8 f8d6 	bl	8000b2c <__aeabi_dcmpun>
 8008980:	b128      	cbz	r0, 800898e <_scanf_float+0x402>
 8008982:	4808      	ldr	r0, [pc, #32]	@ (80089a4 <_scanf_float+0x418>)
 8008984:	f000 fb98 	bl	80090b8 <nanf>
 8008988:	ed85 0a00 	vstr	s0, [r5]
 800898c:	e7db      	b.n	8008946 <_scanf_float+0x3ba>
 800898e:	4630      	mov	r0, r6
 8008990:	4639      	mov	r1, r7
 8008992:	f7f8 f929 	bl	8000be8 <__aeabi_d2f>
 8008996:	6028      	str	r0, [r5, #0]
 8008998:	e7d5      	b.n	8008946 <_scanf_float+0x3ba>
 800899a:	2700      	movs	r7, #0
 800899c:	e62e      	b.n	80085fc <_scanf_float+0x70>
 800899e:	bf00      	nop
 80089a0:	0800cf68 	.word	0x0800cf68
 80089a4:	0800d019 	.word	0x0800d019

080089a8 <std>:
 80089a8:	2300      	movs	r3, #0
 80089aa:	b510      	push	{r4, lr}
 80089ac:	4604      	mov	r4, r0
 80089ae:	e9c0 3300 	strd	r3, r3, [r0]
 80089b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089b6:	6083      	str	r3, [r0, #8]
 80089b8:	8181      	strh	r1, [r0, #12]
 80089ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80089bc:	81c2      	strh	r2, [r0, #14]
 80089be:	6183      	str	r3, [r0, #24]
 80089c0:	4619      	mov	r1, r3
 80089c2:	2208      	movs	r2, #8
 80089c4:	305c      	adds	r0, #92	@ 0x5c
 80089c6:	f000 fa51 	bl	8008e6c <memset>
 80089ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008a00 <std+0x58>)
 80089cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80089ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008a04 <std+0x5c>)
 80089d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a08 <std+0x60>)
 80089d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80089d6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <std+0x64>)
 80089d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80089da:	4b0d      	ldr	r3, [pc, #52]	@ (8008a10 <std+0x68>)
 80089dc:	6224      	str	r4, [r4, #32]
 80089de:	429c      	cmp	r4, r3
 80089e0:	d006      	beq.n	80089f0 <std+0x48>
 80089e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80089e6:	4294      	cmp	r4, r2
 80089e8:	d002      	beq.n	80089f0 <std+0x48>
 80089ea:	33d0      	adds	r3, #208	@ 0xd0
 80089ec:	429c      	cmp	r4, r3
 80089ee:	d105      	bne.n	80089fc <std+0x54>
 80089f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089f8:	f000 bb4c 	b.w	8009094 <__retarget_lock_init_recursive>
 80089fc:	bd10      	pop	{r4, pc}
 80089fe:	bf00      	nop
 8008a00:	08008cbd 	.word	0x08008cbd
 8008a04:	08008cdf 	.word	0x08008cdf
 8008a08:	08008d17 	.word	0x08008d17
 8008a0c:	08008d3b 	.word	0x08008d3b
 8008a10:	20000cf8 	.word	0x20000cf8

08008a14 <stdio_exit_handler>:
 8008a14:	4a02      	ldr	r2, [pc, #8]	@ (8008a20 <stdio_exit_handler+0xc>)
 8008a16:	4903      	ldr	r1, [pc, #12]	@ (8008a24 <stdio_exit_handler+0x10>)
 8008a18:	4803      	ldr	r0, [pc, #12]	@ (8008a28 <stdio_exit_handler+0x14>)
 8008a1a:	f000 b869 	b.w	8008af0 <_fwalk_sglue>
 8008a1e:	bf00      	nop
 8008a20:	20000054 	.word	0x20000054
 8008a24:	0800bc49 	.word	0x0800bc49
 8008a28:	20000064 	.word	0x20000064

08008a2c <cleanup_stdio>:
 8008a2c:	6841      	ldr	r1, [r0, #4]
 8008a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a60 <cleanup_stdio+0x34>)
 8008a30:	4299      	cmp	r1, r3
 8008a32:	b510      	push	{r4, lr}
 8008a34:	4604      	mov	r4, r0
 8008a36:	d001      	beq.n	8008a3c <cleanup_stdio+0x10>
 8008a38:	f003 f906 	bl	800bc48 <_fflush_r>
 8008a3c:	68a1      	ldr	r1, [r4, #8]
 8008a3e:	4b09      	ldr	r3, [pc, #36]	@ (8008a64 <cleanup_stdio+0x38>)
 8008a40:	4299      	cmp	r1, r3
 8008a42:	d002      	beq.n	8008a4a <cleanup_stdio+0x1e>
 8008a44:	4620      	mov	r0, r4
 8008a46:	f003 f8ff 	bl	800bc48 <_fflush_r>
 8008a4a:	68e1      	ldr	r1, [r4, #12]
 8008a4c:	4b06      	ldr	r3, [pc, #24]	@ (8008a68 <cleanup_stdio+0x3c>)
 8008a4e:	4299      	cmp	r1, r3
 8008a50:	d004      	beq.n	8008a5c <cleanup_stdio+0x30>
 8008a52:	4620      	mov	r0, r4
 8008a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a58:	f003 b8f6 	b.w	800bc48 <_fflush_r>
 8008a5c:	bd10      	pop	{r4, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000cf8 	.word	0x20000cf8
 8008a64:	20000d60 	.word	0x20000d60
 8008a68:	20000dc8 	.word	0x20000dc8

08008a6c <global_stdio_init.part.0>:
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a9c <global_stdio_init.part.0+0x30>)
 8008a70:	4c0b      	ldr	r4, [pc, #44]	@ (8008aa0 <global_stdio_init.part.0+0x34>)
 8008a72:	4a0c      	ldr	r2, [pc, #48]	@ (8008aa4 <global_stdio_init.part.0+0x38>)
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	4620      	mov	r0, r4
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2104      	movs	r1, #4
 8008a7c:	f7ff ff94 	bl	80089a8 <std>
 8008a80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a84:	2201      	movs	r2, #1
 8008a86:	2109      	movs	r1, #9
 8008a88:	f7ff ff8e 	bl	80089a8 <std>
 8008a8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a90:	2202      	movs	r2, #2
 8008a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a96:	2112      	movs	r1, #18
 8008a98:	f7ff bf86 	b.w	80089a8 <std>
 8008a9c:	20000e30 	.word	0x20000e30
 8008aa0:	20000cf8 	.word	0x20000cf8
 8008aa4:	08008a15 	.word	0x08008a15

08008aa8 <__sfp_lock_acquire>:
 8008aa8:	4801      	ldr	r0, [pc, #4]	@ (8008ab0 <__sfp_lock_acquire+0x8>)
 8008aaa:	f000 baf4 	b.w	8009096 <__retarget_lock_acquire_recursive>
 8008aae:	bf00      	nop
 8008ab0:	20000e39 	.word	0x20000e39

08008ab4 <__sfp_lock_release>:
 8008ab4:	4801      	ldr	r0, [pc, #4]	@ (8008abc <__sfp_lock_release+0x8>)
 8008ab6:	f000 baef 	b.w	8009098 <__retarget_lock_release_recursive>
 8008aba:	bf00      	nop
 8008abc:	20000e39 	.word	0x20000e39

08008ac0 <__sinit>:
 8008ac0:	b510      	push	{r4, lr}
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	f7ff fff0 	bl	8008aa8 <__sfp_lock_acquire>
 8008ac8:	6a23      	ldr	r3, [r4, #32]
 8008aca:	b11b      	cbz	r3, 8008ad4 <__sinit+0x14>
 8008acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad0:	f7ff bff0 	b.w	8008ab4 <__sfp_lock_release>
 8008ad4:	4b04      	ldr	r3, [pc, #16]	@ (8008ae8 <__sinit+0x28>)
 8008ad6:	6223      	str	r3, [r4, #32]
 8008ad8:	4b04      	ldr	r3, [pc, #16]	@ (8008aec <__sinit+0x2c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1f5      	bne.n	8008acc <__sinit+0xc>
 8008ae0:	f7ff ffc4 	bl	8008a6c <global_stdio_init.part.0>
 8008ae4:	e7f2      	b.n	8008acc <__sinit+0xc>
 8008ae6:	bf00      	nop
 8008ae8:	08008a2d 	.word	0x08008a2d
 8008aec:	20000e30 	.word	0x20000e30

08008af0 <_fwalk_sglue>:
 8008af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af4:	4607      	mov	r7, r0
 8008af6:	4688      	mov	r8, r1
 8008af8:	4614      	mov	r4, r2
 8008afa:	2600      	movs	r6, #0
 8008afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b00:	f1b9 0901 	subs.w	r9, r9, #1
 8008b04:	d505      	bpl.n	8008b12 <_fwalk_sglue+0x22>
 8008b06:	6824      	ldr	r4, [r4, #0]
 8008b08:	2c00      	cmp	r4, #0
 8008b0a:	d1f7      	bne.n	8008afc <_fwalk_sglue+0xc>
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b12:	89ab      	ldrh	r3, [r5, #12]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d907      	bls.n	8008b28 <_fwalk_sglue+0x38>
 8008b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	d003      	beq.n	8008b28 <_fwalk_sglue+0x38>
 8008b20:	4629      	mov	r1, r5
 8008b22:	4638      	mov	r0, r7
 8008b24:	47c0      	blx	r8
 8008b26:	4306      	orrs	r6, r0
 8008b28:	3568      	adds	r5, #104	@ 0x68
 8008b2a:	e7e9      	b.n	8008b00 <_fwalk_sglue+0x10>

08008b2c <iprintf>:
 8008b2c:	b40f      	push	{r0, r1, r2, r3}
 8008b2e:	b507      	push	{r0, r1, r2, lr}
 8008b30:	4906      	ldr	r1, [pc, #24]	@ (8008b4c <iprintf+0x20>)
 8008b32:	ab04      	add	r3, sp, #16
 8008b34:	6808      	ldr	r0, [r1, #0]
 8008b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b3a:	6881      	ldr	r1, [r0, #8]
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	f002 fee7 	bl	800b910 <_vfiprintf_r>
 8008b42:	b003      	add	sp, #12
 8008b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b48:	b004      	add	sp, #16
 8008b4a:	4770      	bx	lr
 8008b4c:	20000060 	.word	0x20000060

08008b50 <_puts_r>:
 8008b50:	6a03      	ldr	r3, [r0, #32]
 8008b52:	b570      	push	{r4, r5, r6, lr}
 8008b54:	6884      	ldr	r4, [r0, #8]
 8008b56:	4605      	mov	r5, r0
 8008b58:	460e      	mov	r6, r1
 8008b5a:	b90b      	cbnz	r3, 8008b60 <_puts_r+0x10>
 8008b5c:	f7ff ffb0 	bl	8008ac0 <__sinit>
 8008b60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b62:	07db      	lsls	r3, r3, #31
 8008b64:	d405      	bmi.n	8008b72 <_puts_r+0x22>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	0598      	lsls	r0, r3, #22
 8008b6a:	d402      	bmi.n	8008b72 <_puts_r+0x22>
 8008b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b6e:	f000 fa92 	bl	8009096 <__retarget_lock_acquire_recursive>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	0719      	lsls	r1, r3, #28
 8008b76:	d502      	bpl.n	8008b7e <_puts_r+0x2e>
 8008b78:	6923      	ldr	r3, [r4, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d135      	bne.n	8008bea <_puts_r+0x9a>
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f000 f91d 	bl	8008dc0 <__swsetup_r>
 8008b86:	b380      	cbz	r0, 8008bea <_puts_r+0x9a>
 8008b88:	f04f 35ff 	mov.w	r5, #4294967295
 8008b8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b8e:	07da      	lsls	r2, r3, #31
 8008b90:	d405      	bmi.n	8008b9e <_puts_r+0x4e>
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	059b      	lsls	r3, r3, #22
 8008b96:	d402      	bmi.n	8008b9e <_puts_r+0x4e>
 8008b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b9a:	f000 fa7d 	bl	8009098 <__retarget_lock_release_recursive>
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	bd70      	pop	{r4, r5, r6, pc}
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	da04      	bge.n	8008bb0 <_puts_r+0x60>
 8008ba6:	69a2      	ldr	r2, [r4, #24]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	dc17      	bgt.n	8008bdc <_puts_r+0x8c>
 8008bac:	290a      	cmp	r1, #10
 8008bae:	d015      	beq.n	8008bdc <_puts_r+0x8c>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	1c5a      	adds	r2, r3, #1
 8008bb4:	6022      	str	r2, [r4, #0]
 8008bb6:	7019      	strb	r1, [r3, #0]
 8008bb8:	68a3      	ldr	r3, [r4, #8]
 8008bba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	60a3      	str	r3, [r4, #8]
 8008bc2:	2900      	cmp	r1, #0
 8008bc4:	d1ed      	bne.n	8008ba2 <_puts_r+0x52>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	da11      	bge.n	8008bee <_puts_r+0x9e>
 8008bca:	4622      	mov	r2, r4
 8008bcc:	210a      	movs	r1, #10
 8008bce:	4628      	mov	r0, r5
 8008bd0:	f000 f8b7 	bl	8008d42 <__swbuf_r>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d0d7      	beq.n	8008b88 <_puts_r+0x38>
 8008bd8:	250a      	movs	r5, #10
 8008bda:	e7d7      	b.n	8008b8c <_puts_r+0x3c>
 8008bdc:	4622      	mov	r2, r4
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 f8af 	bl	8008d42 <__swbuf_r>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d1e7      	bne.n	8008bb8 <_puts_r+0x68>
 8008be8:	e7ce      	b.n	8008b88 <_puts_r+0x38>
 8008bea:	3e01      	subs	r6, #1
 8008bec:	e7e4      	b.n	8008bb8 <_puts_r+0x68>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	6022      	str	r2, [r4, #0]
 8008bf4:	220a      	movs	r2, #10
 8008bf6:	701a      	strb	r2, [r3, #0]
 8008bf8:	e7ee      	b.n	8008bd8 <_puts_r+0x88>
	...

08008bfc <puts>:
 8008bfc:	4b02      	ldr	r3, [pc, #8]	@ (8008c08 <puts+0xc>)
 8008bfe:	4601      	mov	r1, r0
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	f7ff bfa5 	b.w	8008b50 <_puts_r>
 8008c06:	bf00      	nop
 8008c08:	20000060 	.word	0x20000060

08008c0c <sniprintf>:
 8008c0c:	b40c      	push	{r2, r3}
 8008c0e:	b530      	push	{r4, r5, lr}
 8008c10:	4b18      	ldr	r3, [pc, #96]	@ (8008c74 <sniprintf+0x68>)
 8008c12:	1e0c      	subs	r4, r1, #0
 8008c14:	681d      	ldr	r5, [r3, #0]
 8008c16:	b09d      	sub	sp, #116	@ 0x74
 8008c18:	da08      	bge.n	8008c2c <sniprintf+0x20>
 8008c1a:	238b      	movs	r3, #139	@ 0x8b
 8008c1c:	602b      	str	r3, [r5, #0]
 8008c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c22:	b01d      	add	sp, #116	@ 0x74
 8008c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c28:	b002      	add	sp, #8
 8008c2a:	4770      	bx	lr
 8008c2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008c3a:	bf14      	ite	ne
 8008c3c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c40:	4623      	moveq	r3, r4
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	9307      	str	r3, [sp, #28]
 8008c46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c4a:	9002      	str	r0, [sp, #8]
 8008c4c:	9006      	str	r0, [sp, #24]
 8008c4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c54:	ab21      	add	r3, sp, #132	@ 0x84
 8008c56:	a902      	add	r1, sp, #8
 8008c58:	4628      	mov	r0, r5
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	f002 fd32 	bl	800b6c4 <_svfiprintf_r>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	bfbc      	itt	lt
 8008c64:	238b      	movlt	r3, #139	@ 0x8b
 8008c66:	602b      	strlt	r3, [r5, #0]
 8008c68:	2c00      	cmp	r4, #0
 8008c6a:	d0da      	beq.n	8008c22 <sniprintf+0x16>
 8008c6c:	9b02      	ldr	r3, [sp, #8]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	e7d6      	b.n	8008c22 <sniprintf+0x16>
 8008c74:	20000060 	.word	0x20000060

08008c78 <siprintf>:
 8008c78:	b40e      	push	{r1, r2, r3}
 8008c7a:	b510      	push	{r4, lr}
 8008c7c:	b09d      	sub	sp, #116	@ 0x74
 8008c7e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008c80:	9002      	str	r0, [sp, #8]
 8008c82:	9006      	str	r0, [sp, #24]
 8008c84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c88:	480a      	ldr	r0, [pc, #40]	@ (8008cb4 <siprintf+0x3c>)
 8008c8a:	9107      	str	r1, [sp, #28]
 8008c8c:	9104      	str	r1, [sp, #16]
 8008c8e:	490a      	ldr	r1, [pc, #40]	@ (8008cb8 <siprintf+0x40>)
 8008c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c94:	9105      	str	r1, [sp, #20]
 8008c96:	2400      	movs	r4, #0
 8008c98:	a902      	add	r1, sp, #8
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008ca0:	f002 fd10 	bl	800b6c4 <_svfiprintf_r>
 8008ca4:	9b02      	ldr	r3, [sp, #8]
 8008ca6:	701c      	strb	r4, [r3, #0]
 8008ca8:	b01d      	add	sp, #116	@ 0x74
 8008caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cae:	b003      	add	sp, #12
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000060 	.word	0x20000060
 8008cb8:	ffff0208 	.word	0xffff0208

08008cbc <__sread>:
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc4:	f000 f998 	bl	8008ff8 <_read_r>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	bfab      	itete	ge
 8008ccc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008cce:	89a3      	ldrhlt	r3, [r4, #12]
 8008cd0:	181b      	addge	r3, r3, r0
 8008cd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008cd6:	bfac      	ite	ge
 8008cd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cda:	81a3      	strhlt	r3, [r4, #12]
 8008cdc:	bd10      	pop	{r4, pc}

08008cde <__swrite>:
 8008cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce2:	461f      	mov	r7, r3
 8008ce4:	898b      	ldrh	r3, [r1, #12]
 8008ce6:	05db      	lsls	r3, r3, #23
 8008ce8:	4605      	mov	r5, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	4616      	mov	r6, r2
 8008cee:	d505      	bpl.n	8008cfc <__swrite+0x1e>
 8008cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f000 f96c 	bl	8008fd4 <_lseek_r>
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d06:	81a3      	strh	r3, [r4, #12]
 8008d08:	4632      	mov	r2, r6
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d12:	f000 b983 	b.w	800901c <_write_r>

08008d16 <__sseek>:
 8008d16:	b510      	push	{r4, lr}
 8008d18:	460c      	mov	r4, r1
 8008d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1e:	f000 f959 	bl	8008fd4 <_lseek_r>
 8008d22:	1c43      	adds	r3, r0, #1
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	bf15      	itete	ne
 8008d28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d32:	81a3      	strheq	r3, [r4, #12]
 8008d34:	bf18      	it	ne
 8008d36:	81a3      	strhne	r3, [r4, #12]
 8008d38:	bd10      	pop	{r4, pc}

08008d3a <__sclose>:
 8008d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3e:	f000 b939 	b.w	8008fb4 <_close_r>

08008d42 <__swbuf_r>:
 8008d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d44:	460e      	mov	r6, r1
 8008d46:	4614      	mov	r4, r2
 8008d48:	4605      	mov	r5, r0
 8008d4a:	b118      	cbz	r0, 8008d54 <__swbuf_r+0x12>
 8008d4c:	6a03      	ldr	r3, [r0, #32]
 8008d4e:	b90b      	cbnz	r3, 8008d54 <__swbuf_r+0x12>
 8008d50:	f7ff feb6 	bl	8008ac0 <__sinit>
 8008d54:	69a3      	ldr	r3, [r4, #24]
 8008d56:	60a3      	str	r3, [r4, #8]
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	071a      	lsls	r2, r3, #28
 8008d5c:	d501      	bpl.n	8008d62 <__swbuf_r+0x20>
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	b943      	cbnz	r3, 8008d74 <__swbuf_r+0x32>
 8008d62:	4621      	mov	r1, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 f82b 	bl	8008dc0 <__swsetup_r>
 8008d6a:	b118      	cbz	r0, 8008d74 <__swbuf_r+0x32>
 8008d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8008d70:	4638      	mov	r0, r7
 8008d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	6922      	ldr	r2, [r4, #16]
 8008d78:	1a98      	subs	r0, r3, r2
 8008d7a:	6963      	ldr	r3, [r4, #20]
 8008d7c:	b2f6      	uxtb	r6, r6
 8008d7e:	4283      	cmp	r3, r0
 8008d80:	4637      	mov	r7, r6
 8008d82:	dc05      	bgt.n	8008d90 <__swbuf_r+0x4e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f002 ff5e 	bl	800bc48 <_fflush_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d1ed      	bne.n	8008d6c <__swbuf_r+0x2a>
 8008d90:	68a3      	ldr	r3, [r4, #8]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	60a3      	str	r3, [r4, #8]
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	6022      	str	r2, [r4, #0]
 8008d9c:	701e      	strb	r6, [r3, #0]
 8008d9e:	6962      	ldr	r2, [r4, #20]
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d004      	beq.n	8008db0 <__swbuf_r+0x6e>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	07db      	lsls	r3, r3, #31
 8008daa:	d5e1      	bpl.n	8008d70 <__swbuf_r+0x2e>
 8008dac:	2e0a      	cmp	r6, #10
 8008dae:	d1df      	bne.n	8008d70 <__swbuf_r+0x2e>
 8008db0:	4621      	mov	r1, r4
 8008db2:	4628      	mov	r0, r5
 8008db4:	f002 ff48 	bl	800bc48 <_fflush_r>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d0d9      	beq.n	8008d70 <__swbuf_r+0x2e>
 8008dbc:	e7d6      	b.n	8008d6c <__swbuf_r+0x2a>
	...

08008dc0 <__swsetup_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4b29      	ldr	r3, [pc, #164]	@ (8008e68 <__swsetup_r+0xa8>)
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	6818      	ldr	r0, [r3, #0]
 8008dc8:	460c      	mov	r4, r1
 8008dca:	b118      	cbz	r0, 8008dd4 <__swsetup_r+0x14>
 8008dcc:	6a03      	ldr	r3, [r0, #32]
 8008dce:	b90b      	cbnz	r3, 8008dd4 <__swsetup_r+0x14>
 8008dd0:	f7ff fe76 	bl	8008ac0 <__sinit>
 8008dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dd8:	0719      	lsls	r1, r3, #28
 8008dda:	d422      	bmi.n	8008e22 <__swsetup_r+0x62>
 8008ddc:	06da      	lsls	r2, r3, #27
 8008dde:	d407      	bmi.n	8008df0 <__swsetup_r+0x30>
 8008de0:	2209      	movs	r2, #9
 8008de2:	602a      	str	r2, [r5, #0]
 8008de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	f04f 30ff 	mov.w	r0, #4294967295
 8008dee:	e033      	b.n	8008e58 <__swsetup_r+0x98>
 8008df0:	0758      	lsls	r0, r3, #29
 8008df2:	d512      	bpl.n	8008e1a <__swsetup_r+0x5a>
 8008df4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008df6:	b141      	cbz	r1, 8008e0a <__swsetup_r+0x4a>
 8008df8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dfc:	4299      	cmp	r1, r3
 8008dfe:	d002      	beq.n	8008e06 <__swsetup_r+0x46>
 8008e00:	4628      	mov	r0, r5
 8008e02:	f000 ffd5 	bl	8009db0 <_free_r>
 8008e06:	2300      	movs	r3, #0
 8008e08:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	2300      	movs	r3, #0
 8008e14:	6063      	str	r3, [r4, #4]
 8008e16:	6923      	ldr	r3, [r4, #16]
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	f043 0308 	orr.w	r3, r3, #8
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	b94b      	cbnz	r3, 8008e3a <__swsetup_r+0x7a>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e30:	d003      	beq.n	8008e3a <__swsetup_r+0x7a>
 8008e32:	4621      	mov	r1, r4
 8008e34:	4628      	mov	r0, r5
 8008e36:	f002 ff67 	bl	800bd08 <__smakebuf_r>
 8008e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3e:	f013 0201 	ands.w	r2, r3, #1
 8008e42:	d00a      	beq.n	8008e5a <__swsetup_r+0x9a>
 8008e44:	2200      	movs	r2, #0
 8008e46:	60a2      	str	r2, [r4, #8]
 8008e48:	6962      	ldr	r2, [r4, #20]
 8008e4a:	4252      	negs	r2, r2
 8008e4c:	61a2      	str	r2, [r4, #24]
 8008e4e:	6922      	ldr	r2, [r4, #16]
 8008e50:	b942      	cbnz	r2, 8008e64 <__swsetup_r+0xa4>
 8008e52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e56:	d1c5      	bne.n	8008de4 <__swsetup_r+0x24>
 8008e58:	bd38      	pop	{r3, r4, r5, pc}
 8008e5a:	0799      	lsls	r1, r3, #30
 8008e5c:	bf58      	it	pl
 8008e5e:	6962      	ldrpl	r2, [r4, #20]
 8008e60:	60a2      	str	r2, [r4, #8]
 8008e62:	e7f4      	b.n	8008e4e <__swsetup_r+0x8e>
 8008e64:	2000      	movs	r0, #0
 8008e66:	e7f7      	b.n	8008e58 <__swsetup_r+0x98>
 8008e68:	20000060 	.word	0x20000060

08008e6c <memset>:
 8008e6c:	4402      	add	r2, r0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d100      	bne.n	8008e76 <memset+0xa>
 8008e74:	4770      	bx	lr
 8008e76:	f803 1b01 	strb.w	r1, [r3], #1
 8008e7a:	e7f9      	b.n	8008e70 <memset+0x4>

08008e7c <strncmp>:
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	b16a      	cbz	r2, 8008e9c <strncmp+0x20>
 8008e80:	3901      	subs	r1, #1
 8008e82:	1884      	adds	r4, r0, r2
 8008e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d103      	bne.n	8008e98 <strncmp+0x1c>
 8008e90:	42a0      	cmp	r0, r4
 8008e92:	d001      	beq.n	8008e98 <strncmp+0x1c>
 8008e94:	2a00      	cmp	r2, #0
 8008e96:	d1f5      	bne.n	8008e84 <strncmp+0x8>
 8008e98:	1ad0      	subs	r0, r2, r3
 8008e9a:	bd10      	pop	{r4, pc}
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	e7fc      	b.n	8008e9a <strncmp+0x1e>

08008ea0 <strncpy>:
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	3901      	subs	r1, #1
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	b132      	cbz	r2, 8008eb6 <strncpy+0x16>
 8008ea8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008eac:	f803 4b01 	strb.w	r4, [r3], #1
 8008eb0:	3a01      	subs	r2, #1
 8008eb2:	2c00      	cmp	r4, #0
 8008eb4:	d1f7      	bne.n	8008ea6 <strncpy+0x6>
 8008eb6:	441a      	add	r2, r3
 8008eb8:	2100      	movs	r1, #0
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d100      	bne.n	8008ec0 <strncpy+0x20>
 8008ebe:	bd10      	pop	{r4, pc}
 8008ec0:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec4:	e7f9      	b.n	8008eba <strncpy+0x1a>
	...

08008ec8 <strtok>:
 8008ec8:	4b16      	ldr	r3, [pc, #88]	@ (8008f24 <strtok+0x5c>)
 8008eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ece:	681f      	ldr	r7, [r3, #0]
 8008ed0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	460e      	mov	r6, r1
 8008ed6:	b9ec      	cbnz	r4, 8008f14 <strtok+0x4c>
 8008ed8:	2050      	movs	r0, #80	@ 0x50
 8008eda:	f000 ffb3 	bl	8009e44 <malloc>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	6478      	str	r0, [r7, #68]	@ 0x44
 8008ee2:	b920      	cbnz	r0, 8008eee <strtok+0x26>
 8008ee4:	4b10      	ldr	r3, [pc, #64]	@ (8008f28 <strtok+0x60>)
 8008ee6:	4811      	ldr	r0, [pc, #68]	@ (8008f2c <strtok+0x64>)
 8008ee8:	215b      	movs	r1, #91	@ 0x5b
 8008eea:	f000 f8eb 	bl	80090c4 <__assert_func>
 8008eee:	e9c0 4400 	strd	r4, r4, [r0]
 8008ef2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008ef6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008efa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008efe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008f02:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008f06:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008f0a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008f0e:	6184      	str	r4, [r0, #24]
 8008f10:	7704      	strb	r4, [r0, #28]
 8008f12:	6244      	str	r4, [r0, #36]	@ 0x24
 8008f14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f16:	4631      	mov	r1, r6
 8008f18:	4628      	mov	r0, r5
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f20:	f000 b806 	b.w	8008f30 <__strtok_r>
 8008f24:	20000060 	.word	0x20000060
 8008f28:	0800cf6d 	.word	0x0800cf6d
 8008f2c:	0800cf84 	.word	0x0800cf84

08008f30 <__strtok_r>:
 8008f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f32:	4604      	mov	r4, r0
 8008f34:	b908      	cbnz	r0, 8008f3a <__strtok_r+0xa>
 8008f36:	6814      	ldr	r4, [r2, #0]
 8008f38:	b144      	cbz	r4, 8008f4c <__strtok_r+0x1c>
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008f40:	460f      	mov	r7, r1
 8008f42:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008f46:	b91e      	cbnz	r6, 8008f50 <__strtok_r+0x20>
 8008f48:	b965      	cbnz	r5, 8008f64 <__strtok_r+0x34>
 8008f4a:	6015      	str	r5, [r2, #0]
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	e005      	b.n	8008f5c <__strtok_r+0x2c>
 8008f50:	42b5      	cmp	r5, r6
 8008f52:	d1f6      	bne.n	8008f42 <__strtok_r+0x12>
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1f0      	bne.n	8008f3a <__strtok_r+0xa>
 8008f58:	6014      	str	r4, [r2, #0]
 8008f5a:	7003      	strb	r3, [r0, #0]
 8008f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f5e:	461c      	mov	r4, r3
 8008f60:	e00c      	b.n	8008f7c <__strtok_r+0x4c>
 8008f62:	b91d      	cbnz	r5, 8008f6c <__strtok_r+0x3c>
 8008f64:	4627      	mov	r7, r4
 8008f66:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f6a:	460e      	mov	r6, r1
 8008f6c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008f70:	42ab      	cmp	r3, r5
 8008f72:	d1f6      	bne.n	8008f62 <__strtok_r+0x32>
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0f2      	beq.n	8008f5e <__strtok_r+0x2e>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	703b      	strb	r3, [r7, #0]
 8008f7c:	6014      	str	r4, [r2, #0]
 8008f7e:	e7ed      	b.n	8008f5c <__strtok_r+0x2c>

08008f80 <strstr>:
 8008f80:	780a      	ldrb	r2, [r1, #0]
 8008f82:	b570      	push	{r4, r5, r6, lr}
 8008f84:	b96a      	cbnz	r2, 8008fa2 <strstr+0x22>
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d109      	bne.n	8008fa0 <strstr+0x20>
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	4605      	mov	r5, r0
 8008f90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d0f6      	beq.n	8008f86 <strstr+0x6>
 8008f98:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008f9c:	429e      	cmp	r6, r3
 8008f9e:	d0f7      	beq.n	8008f90 <strstr+0x10>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	7803      	ldrb	r3, [r0, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1ef      	bne.n	8008f88 <strstr+0x8>
 8008fa8:	4618      	mov	r0, r3
 8008faa:	e7ec      	b.n	8008f86 <strstr+0x6>

08008fac <_localeconv_r>:
 8008fac:	4800      	ldr	r0, [pc, #0]	@ (8008fb0 <_localeconv_r+0x4>)
 8008fae:	4770      	bx	lr
 8008fb0:	200001a0 	.word	0x200001a0

08008fb4 <_close_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	4d06      	ldr	r5, [pc, #24]	@ (8008fd0 <_close_r+0x1c>)
 8008fb8:	2300      	movs	r3, #0
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	602b      	str	r3, [r5, #0]
 8008fc0:	f7f8 fabf 	bl	8001542 <_close>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	d102      	bne.n	8008fce <_close_r+0x1a>
 8008fc8:	682b      	ldr	r3, [r5, #0]
 8008fca:	b103      	cbz	r3, 8008fce <_close_r+0x1a>
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	bd38      	pop	{r3, r4, r5, pc}
 8008fd0:	20000e34 	.word	0x20000e34

08008fd4 <_lseek_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4d07      	ldr	r5, [pc, #28]	@ (8008ff4 <_lseek_r+0x20>)
 8008fd8:	4604      	mov	r4, r0
 8008fda:	4608      	mov	r0, r1
 8008fdc:	4611      	mov	r1, r2
 8008fde:	2200      	movs	r2, #0
 8008fe0:	602a      	str	r2, [r5, #0]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f7f8 fad4 	bl	8001590 <_lseek>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_lseek_r+0x1e>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_lseek_r+0x1e>
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	20000e34 	.word	0x20000e34

08008ff8 <_read_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d07      	ldr	r5, [pc, #28]	@ (8009018 <_read_r+0x20>)
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	4608      	mov	r0, r1
 8009000:	4611      	mov	r1, r2
 8009002:	2200      	movs	r2, #0
 8009004:	602a      	str	r2, [r5, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f7f8 fa62 	bl	80014d0 <_read>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_read_r+0x1e>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_read_r+0x1e>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	20000e34 	.word	0x20000e34

0800901c <_write_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d07      	ldr	r5, [pc, #28]	@ (800903c <_write_r+0x20>)
 8009020:	4604      	mov	r4, r0
 8009022:	4608      	mov	r0, r1
 8009024:	4611      	mov	r1, r2
 8009026:	2200      	movs	r2, #0
 8009028:	602a      	str	r2, [r5, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	f7f8 fa6d 	bl	800150a <_write>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_write_r+0x1e>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_write_r+0x1e>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	20000e34 	.word	0x20000e34

08009040 <__errno>:
 8009040:	4b01      	ldr	r3, [pc, #4]	@ (8009048 <__errno+0x8>)
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000060 	.word	0x20000060

0800904c <__libc_init_array>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4d0d      	ldr	r5, [pc, #52]	@ (8009084 <__libc_init_array+0x38>)
 8009050:	4c0d      	ldr	r4, [pc, #52]	@ (8009088 <__libc_init_array+0x3c>)
 8009052:	1b64      	subs	r4, r4, r5
 8009054:	10a4      	asrs	r4, r4, #2
 8009056:	2600      	movs	r6, #0
 8009058:	42a6      	cmp	r6, r4
 800905a:	d109      	bne.n	8009070 <__libc_init_array+0x24>
 800905c:	4d0b      	ldr	r5, [pc, #44]	@ (800908c <__libc_init_array+0x40>)
 800905e:	4c0c      	ldr	r4, [pc, #48]	@ (8009090 <__libc_init_array+0x44>)
 8009060:	f003 face 	bl	800c600 <_init>
 8009064:	1b64      	subs	r4, r4, r5
 8009066:	10a4      	asrs	r4, r4, #2
 8009068:	2600      	movs	r6, #0
 800906a:	42a6      	cmp	r6, r4
 800906c:	d105      	bne.n	800907a <__libc_init_array+0x2e>
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	f855 3b04 	ldr.w	r3, [r5], #4
 8009074:	4798      	blx	r3
 8009076:	3601      	adds	r6, #1
 8009078:	e7ee      	b.n	8009058 <__libc_init_array+0xc>
 800907a:	f855 3b04 	ldr.w	r3, [r5], #4
 800907e:	4798      	blx	r3
 8009080:	3601      	adds	r6, #1
 8009082:	e7f2      	b.n	800906a <__libc_init_array+0x1e>
 8009084:	0800d3bc 	.word	0x0800d3bc
 8009088:	0800d3bc 	.word	0x0800d3bc
 800908c:	0800d3bc 	.word	0x0800d3bc
 8009090:	0800d3c0 	.word	0x0800d3c0

08009094 <__retarget_lock_init_recursive>:
 8009094:	4770      	bx	lr

08009096 <__retarget_lock_acquire_recursive>:
 8009096:	4770      	bx	lr

08009098 <__retarget_lock_release_recursive>:
 8009098:	4770      	bx	lr

0800909a <memcpy>:
 800909a:	440a      	add	r2, r1
 800909c:	4291      	cmp	r1, r2
 800909e:	f100 33ff 	add.w	r3, r0, #4294967295
 80090a2:	d100      	bne.n	80090a6 <memcpy+0xc>
 80090a4:	4770      	bx	lr
 80090a6:	b510      	push	{r4, lr}
 80090a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090b0:	4291      	cmp	r1, r2
 80090b2:	d1f9      	bne.n	80090a8 <memcpy+0xe>
 80090b4:	bd10      	pop	{r4, pc}
	...

080090b8 <nanf>:
 80090b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80090c0 <nanf+0x8>
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	7fc00000 	.word	0x7fc00000

080090c4 <__assert_func>:
 80090c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090c6:	4614      	mov	r4, r2
 80090c8:	461a      	mov	r2, r3
 80090ca:	4b09      	ldr	r3, [pc, #36]	@ (80090f0 <__assert_func+0x2c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4605      	mov	r5, r0
 80090d0:	68d8      	ldr	r0, [r3, #12]
 80090d2:	b14c      	cbz	r4, 80090e8 <__assert_func+0x24>
 80090d4:	4b07      	ldr	r3, [pc, #28]	@ (80090f4 <__assert_func+0x30>)
 80090d6:	9100      	str	r1, [sp, #0]
 80090d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090dc:	4906      	ldr	r1, [pc, #24]	@ (80090f8 <__assert_func+0x34>)
 80090de:	462b      	mov	r3, r5
 80090e0:	f002 fdda 	bl	800bc98 <fiprintf>
 80090e4:	f002 fea0 	bl	800be28 <abort>
 80090e8:	4b04      	ldr	r3, [pc, #16]	@ (80090fc <__assert_func+0x38>)
 80090ea:	461c      	mov	r4, r3
 80090ec:	e7f3      	b.n	80090d6 <__assert_func+0x12>
 80090ee:	bf00      	nop
 80090f0:	20000060 	.word	0x20000060
 80090f4:	0800cfde 	.word	0x0800cfde
 80090f8:	0800cfeb 	.word	0x0800cfeb
 80090fc:	0800d019 	.word	0x0800d019

08009100 <quorem>:
 8009100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	6903      	ldr	r3, [r0, #16]
 8009106:	690c      	ldr	r4, [r1, #16]
 8009108:	42a3      	cmp	r3, r4
 800910a:	4607      	mov	r7, r0
 800910c:	db7e      	blt.n	800920c <quorem+0x10c>
 800910e:	3c01      	subs	r4, #1
 8009110:	f101 0814 	add.w	r8, r1, #20
 8009114:	00a3      	lsls	r3, r4, #2
 8009116:	f100 0514 	add.w	r5, r0, #20
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800912a:	3301      	adds	r3, #1
 800912c:	429a      	cmp	r2, r3
 800912e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009132:	fbb2 f6f3 	udiv	r6, r2, r3
 8009136:	d32e      	bcc.n	8009196 <quorem+0x96>
 8009138:	f04f 0a00 	mov.w	sl, #0
 800913c:	46c4      	mov	ip, r8
 800913e:	46ae      	mov	lr, r5
 8009140:	46d3      	mov	fp, sl
 8009142:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009146:	b298      	uxth	r0, r3
 8009148:	fb06 a000 	mla	r0, r6, r0, sl
 800914c:	0c02      	lsrs	r2, r0, #16
 800914e:	0c1b      	lsrs	r3, r3, #16
 8009150:	fb06 2303 	mla	r3, r6, r3, r2
 8009154:	f8de 2000 	ldr.w	r2, [lr]
 8009158:	b280      	uxth	r0, r0
 800915a:	b292      	uxth	r2, r2
 800915c:	1a12      	subs	r2, r2, r0
 800915e:	445a      	add	r2, fp
 8009160:	f8de 0000 	ldr.w	r0, [lr]
 8009164:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009168:	b29b      	uxth	r3, r3
 800916a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800916e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009172:	b292      	uxth	r2, r2
 8009174:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009178:	45e1      	cmp	r9, ip
 800917a:	f84e 2b04 	str.w	r2, [lr], #4
 800917e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009182:	d2de      	bcs.n	8009142 <quorem+0x42>
 8009184:	9b00      	ldr	r3, [sp, #0]
 8009186:	58eb      	ldr	r3, [r5, r3]
 8009188:	b92b      	cbnz	r3, 8009196 <quorem+0x96>
 800918a:	9b01      	ldr	r3, [sp, #4]
 800918c:	3b04      	subs	r3, #4
 800918e:	429d      	cmp	r5, r3
 8009190:	461a      	mov	r2, r3
 8009192:	d32f      	bcc.n	80091f4 <quorem+0xf4>
 8009194:	613c      	str	r4, [r7, #16]
 8009196:	4638      	mov	r0, r7
 8009198:	f001 f9c6 	bl	800a528 <__mcmp>
 800919c:	2800      	cmp	r0, #0
 800919e:	db25      	blt.n	80091ec <quorem+0xec>
 80091a0:	4629      	mov	r1, r5
 80091a2:	2000      	movs	r0, #0
 80091a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80091a8:	f8d1 c000 	ldr.w	ip, [r1]
 80091ac:	fa1f fe82 	uxth.w	lr, r2
 80091b0:	fa1f f38c 	uxth.w	r3, ip
 80091b4:	eba3 030e 	sub.w	r3, r3, lr
 80091b8:	4403      	add	r3, r0
 80091ba:	0c12      	lsrs	r2, r2, #16
 80091bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80091c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091ca:	45c1      	cmp	r9, r8
 80091cc:	f841 3b04 	str.w	r3, [r1], #4
 80091d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80091d4:	d2e6      	bcs.n	80091a4 <quorem+0xa4>
 80091d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091de:	b922      	cbnz	r2, 80091ea <quorem+0xea>
 80091e0:	3b04      	subs	r3, #4
 80091e2:	429d      	cmp	r5, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	d30b      	bcc.n	8009200 <quorem+0x100>
 80091e8:	613c      	str	r4, [r7, #16]
 80091ea:	3601      	adds	r6, #1
 80091ec:	4630      	mov	r0, r6
 80091ee:	b003      	add	sp, #12
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	6812      	ldr	r2, [r2, #0]
 80091f6:	3b04      	subs	r3, #4
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	d1cb      	bne.n	8009194 <quorem+0x94>
 80091fc:	3c01      	subs	r4, #1
 80091fe:	e7c6      	b.n	800918e <quorem+0x8e>
 8009200:	6812      	ldr	r2, [r2, #0]
 8009202:	3b04      	subs	r3, #4
 8009204:	2a00      	cmp	r2, #0
 8009206:	d1ef      	bne.n	80091e8 <quorem+0xe8>
 8009208:	3c01      	subs	r4, #1
 800920a:	e7ea      	b.n	80091e2 <quorem+0xe2>
 800920c:	2000      	movs	r0, #0
 800920e:	e7ee      	b.n	80091ee <quorem+0xee>

08009210 <_dtoa_r>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	69c7      	ldr	r7, [r0, #28]
 8009216:	b097      	sub	sp, #92	@ 0x5c
 8009218:	ed8d 0b04 	vstr	d0, [sp, #16]
 800921c:	ec55 4b10 	vmov	r4, r5, d0
 8009220:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009222:	9107      	str	r1, [sp, #28]
 8009224:	4681      	mov	r9, r0
 8009226:	920c      	str	r2, [sp, #48]	@ 0x30
 8009228:	9311      	str	r3, [sp, #68]	@ 0x44
 800922a:	b97f      	cbnz	r7, 800924c <_dtoa_r+0x3c>
 800922c:	2010      	movs	r0, #16
 800922e:	f000 fe09 	bl	8009e44 <malloc>
 8009232:	4602      	mov	r2, r0
 8009234:	f8c9 001c 	str.w	r0, [r9, #28]
 8009238:	b920      	cbnz	r0, 8009244 <_dtoa_r+0x34>
 800923a:	4ba9      	ldr	r3, [pc, #676]	@ (80094e0 <_dtoa_r+0x2d0>)
 800923c:	21ef      	movs	r1, #239	@ 0xef
 800923e:	48a9      	ldr	r0, [pc, #676]	@ (80094e4 <_dtoa_r+0x2d4>)
 8009240:	f7ff ff40 	bl	80090c4 <__assert_func>
 8009244:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009248:	6007      	str	r7, [r0, #0]
 800924a:	60c7      	str	r7, [r0, #12]
 800924c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009250:	6819      	ldr	r1, [r3, #0]
 8009252:	b159      	cbz	r1, 800926c <_dtoa_r+0x5c>
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	604a      	str	r2, [r1, #4]
 8009258:	2301      	movs	r3, #1
 800925a:	4093      	lsls	r3, r2
 800925c:	608b      	str	r3, [r1, #8]
 800925e:	4648      	mov	r0, r9
 8009260:	f000 fee6 	bl	800a030 <_Bfree>
 8009264:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	1e2b      	subs	r3, r5, #0
 800926e:	bfb9      	ittee	lt
 8009270:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009274:	9305      	strlt	r3, [sp, #20]
 8009276:	2300      	movge	r3, #0
 8009278:	6033      	strge	r3, [r6, #0]
 800927a:	9f05      	ldr	r7, [sp, #20]
 800927c:	4b9a      	ldr	r3, [pc, #616]	@ (80094e8 <_dtoa_r+0x2d8>)
 800927e:	bfbc      	itt	lt
 8009280:	2201      	movlt	r2, #1
 8009282:	6032      	strlt	r2, [r6, #0]
 8009284:	43bb      	bics	r3, r7
 8009286:	d112      	bne.n	80092ae <_dtoa_r+0x9e>
 8009288:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800928a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009294:	4323      	orrs	r3, r4
 8009296:	f000 855a 	beq.w	8009d4e <_dtoa_r+0xb3e>
 800929a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800929c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80094fc <_dtoa_r+0x2ec>
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 855c 	beq.w	8009d5e <_dtoa_r+0xb4e>
 80092a6:	f10a 0303 	add.w	r3, sl, #3
 80092aa:	f000 bd56 	b.w	8009d5a <_dtoa_r+0xb4a>
 80092ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80092b2:	2200      	movs	r2, #0
 80092b4:	ec51 0b17 	vmov	r0, r1, d7
 80092b8:	2300      	movs	r3, #0
 80092ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80092be:	f7f7 fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 80092c2:	4680      	mov	r8, r0
 80092c4:	b158      	cbz	r0, 80092de <_dtoa_r+0xce>
 80092c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80092c8:	2301      	movs	r3, #1
 80092ca:	6013      	str	r3, [r2, #0]
 80092cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80092ce:	b113      	cbz	r3, 80092d6 <_dtoa_r+0xc6>
 80092d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80092d2:	4b86      	ldr	r3, [pc, #536]	@ (80094ec <_dtoa_r+0x2dc>)
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009500 <_dtoa_r+0x2f0>
 80092da:	f000 bd40 	b.w	8009d5e <_dtoa_r+0xb4e>
 80092de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80092e2:	aa14      	add	r2, sp, #80	@ 0x50
 80092e4:	a915      	add	r1, sp, #84	@ 0x54
 80092e6:	4648      	mov	r0, r9
 80092e8:	f001 fa3e 	bl	800a768 <__d2b>
 80092ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80092f0:	9002      	str	r0, [sp, #8]
 80092f2:	2e00      	cmp	r6, #0
 80092f4:	d078      	beq.n	80093e8 <_dtoa_r+0x1d8>
 80092f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80092fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009304:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009308:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800930c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009310:	4619      	mov	r1, r3
 8009312:	2200      	movs	r2, #0
 8009314:	4b76      	ldr	r3, [pc, #472]	@ (80094f0 <_dtoa_r+0x2e0>)
 8009316:	f7f6 ffb7 	bl	8000288 <__aeabi_dsub>
 800931a:	a36b      	add	r3, pc, #428	@ (adr r3, 80094c8 <_dtoa_r+0x2b8>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	f7f7 f96a 	bl	80005f8 <__aeabi_dmul>
 8009324:	a36a      	add	r3, pc, #424	@ (adr r3, 80094d0 <_dtoa_r+0x2c0>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ffaf 	bl	800028c <__adddf3>
 800932e:	4604      	mov	r4, r0
 8009330:	4630      	mov	r0, r6
 8009332:	460d      	mov	r5, r1
 8009334:	f7f7 f8f6 	bl	8000524 <__aeabi_i2d>
 8009338:	a367      	add	r3, pc, #412	@ (adr r3, 80094d8 <_dtoa_r+0x2c8>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f7 f95b 	bl	80005f8 <__aeabi_dmul>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4620      	mov	r0, r4
 8009348:	4629      	mov	r1, r5
 800934a:	f7f6 ff9f 	bl	800028c <__adddf3>
 800934e:	4604      	mov	r4, r0
 8009350:	460d      	mov	r5, r1
 8009352:	f7f7 fc01 	bl	8000b58 <__aeabi_d2iz>
 8009356:	2200      	movs	r2, #0
 8009358:	4607      	mov	r7, r0
 800935a:	2300      	movs	r3, #0
 800935c:	4620      	mov	r0, r4
 800935e:	4629      	mov	r1, r5
 8009360:	f7f7 fbbc 	bl	8000adc <__aeabi_dcmplt>
 8009364:	b140      	cbz	r0, 8009378 <_dtoa_r+0x168>
 8009366:	4638      	mov	r0, r7
 8009368:	f7f7 f8dc 	bl	8000524 <__aeabi_i2d>
 800936c:	4622      	mov	r2, r4
 800936e:	462b      	mov	r3, r5
 8009370:	f7f7 fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009374:	b900      	cbnz	r0, 8009378 <_dtoa_r+0x168>
 8009376:	3f01      	subs	r7, #1
 8009378:	2f16      	cmp	r7, #22
 800937a:	d852      	bhi.n	8009422 <_dtoa_r+0x212>
 800937c:	4b5d      	ldr	r3, [pc, #372]	@ (80094f4 <_dtoa_r+0x2e4>)
 800937e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800938a:	f7f7 fba7 	bl	8000adc <__aeabi_dcmplt>
 800938e:	2800      	cmp	r0, #0
 8009390:	d049      	beq.n	8009426 <_dtoa_r+0x216>
 8009392:	3f01      	subs	r7, #1
 8009394:	2300      	movs	r3, #0
 8009396:	9310      	str	r3, [sp, #64]	@ 0x40
 8009398:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800939a:	1b9b      	subs	r3, r3, r6
 800939c:	1e5a      	subs	r2, r3, #1
 800939e:	bf45      	ittet	mi
 80093a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80093a4:	9300      	strmi	r3, [sp, #0]
 80093a6:	2300      	movpl	r3, #0
 80093a8:	2300      	movmi	r3, #0
 80093aa:	9206      	str	r2, [sp, #24]
 80093ac:	bf54      	ite	pl
 80093ae:	9300      	strpl	r3, [sp, #0]
 80093b0:	9306      	strmi	r3, [sp, #24]
 80093b2:	2f00      	cmp	r7, #0
 80093b4:	db39      	blt.n	800942a <_dtoa_r+0x21a>
 80093b6:	9b06      	ldr	r3, [sp, #24]
 80093b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80093ba:	443b      	add	r3, r7
 80093bc:	9306      	str	r3, [sp, #24]
 80093be:	2300      	movs	r3, #0
 80093c0:	9308      	str	r3, [sp, #32]
 80093c2:	9b07      	ldr	r3, [sp, #28]
 80093c4:	2b09      	cmp	r3, #9
 80093c6:	d863      	bhi.n	8009490 <_dtoa_r+0x280>
 80093c8:	2b05      	cmp	r3, #5
 80093ca:	bfc4      	itt	gt
 80093cc:	3b04      	subgt	r3, #4
 80093ce:	9307      	strgt	r3, [sp, #28]
 80093d0:	9b07      	ldr	r3, [sp, #28]
 80093d2:	f1a3 0302 	sub.w	r3, r3, #2
 80093d6:	bfcc      	ite	gt
 80093d8:	2400      	movgt	r4, #0
 80093da:	2401      	movle	r4, #1
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d863      	bhi.n	80094a8 <_dtoa_r+0x298>
 80093e0:	e8df f003 	tbb	[pc, r3]
 80093e4:	2b375452 	.word	0x2b375452
 80093e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80093ec:	441e      	add	r6, r3
 80093ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80093f2:	2b20      	cmp	r3, #32
 80093f4:	bfc1      	itttt	gt
 80093f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80093fa:	409f      	lslgt	r7, r3
 80093fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009400:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009404:	bfd6      	itet	le
 8009406:	f1c3 0320 	rsble	r3, r3, #32
 800940a:	ea47 0003 	orrgt.w	r0, r7, r3
 800940e:	fa04 f003 	lslle.w	r0, r4, r3
 8009412:	f7f7 f877 	bl	8000504 <__aeabi_ui2d>
 8009416:	2201      	movs	r2, #1
 8009418:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800941c:	3e01      	subs	r6, #1
 800941e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009420:	e776      	b.n	8009310 <_dtoa_r+0x100>
 8009422:	2301      	movs	r3, #1
 8009424:	e7b7      	b.n	8009396 <_dtoa_r+0x186>
 8009426:	9010      	str	r0, [sp, #64]	@ 0x40
 8009428:	e7b6      	b.n	8009398 <_dtoa_r+0x188>
 800942a:	9b00      	ldr	r3, [sp, #0]
 800942c:	1bdb      	subs	r3, r3, r7
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	427b      	negs	r3, r7
 8009432:	9308      	str	r3, [sp, #32]
 8009434:	2300      	movs	r3, #0
 8009436:	930d      	str	r3, [sp, #52]	@ 0x34
 8009438:	e7c3      	b.n	80093c2 <_dtoa_r+0x1b2>
 800943a:	2301      	movs	r3, #1
 800943c:	9309      	str	r3, [sp, #36]	@ 0x24
 800943e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009440:	eb07 0b03 	add.w	fp, r7, r3
 8009444:	f10b 0301 	add.w	r3, fp, #1
 8009448:	2b01      	cmp	r3, #1
 800944a:	9303      	str	r3, [sp, #12]
 800944c:	bfb8      	it	lt
 800944e:	2301      	movlt	r3, #1
 8009450:	e006      	b.n	8009460 <_dtoa_r+0x250>
 8009452:	2301      	movs	r3, #1
 8009454:	9309      	str	r3, [sp, #36]	@ 0x24
 8009456:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009458:	2b00      	cmp	r3, #0
 800945a:	dd28      	ble.n	80094ae <_dtoa_r+0x29e>
 800945c:	469b      	mov	fp, r3
 800945e:	9303      	str	r3, [sp, #12]
 8009460:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009464:	2100      	movs	r1, #0
 8009466:	2204      	movs	r2, #4
 8009468:	f102 0514 	add.w	r5, r2, #20
 800946c:	429d      	cmp	r5, r3
 800946e:	d926      	bls.n	80094be <_dtoa_r+0x2ae>
 8009470:	6041      	str	r1, [r0, #4]
 8009472:	4648      	mov	r0, r9
 8009474:	f000 fd9c 	bl	8009fb0 <_Balloc>
 8009478:	4682      	mov	sl, r0
 800947a:	2800      	cmp	r0, #0
 800947c:	d142      	bne.n	8009504 <_dtoa_r+0x2f4>
 800947e:	4b1e      	ldr	r3, [pc, #120]	@ (80094f8 <_dtoa_r+0x2e8>)
 8009480:	4602      	mov	r2, r0
 8009482:	f240 11af 	movw	r1, #431	@ 0x1af
 8009486:	e6da      	b.n	800923e <_dtoa_r+0x2e>
 8009488:	2300      	movs	r3, #0
 800948a:	e7e3      	b.n	8009454 <_dtoa_r+0x244>
 800948c:	2300      	movs	r3, #0
 800948e:	e7d5      	b.n	800943c <_dtoa_r+0x22c>
 8009490:	2401      	movs	r4, #1
 8009492:	2300      	movs	r3, #0
 8009494:	9307      	str	r3, [sp, #28]
 8009496:	9409      	str	r4, [sp, #36]	@ 0x24
 8009498:	f04f 3bff 	mov.w	fp, #4294967295
 800949c:	2200      	movs	r2, #0
 800949e:	f8cd b00c 	str.w	fp, [sp, #12]
 80094a2:	2312      	movs	r3, #18
 80094a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80094a6:	e7db      	b.n	8009460 <_dtoa_r+0x250>
 80094a8:	2301      	movs	r3, #1
 80094aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ac:	e7f4      	b.n	8009498 <_dtoa_r+0x288>
 80094ae:	f04f 0b01 	mov.w	fp, #1
 80094b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80094b6:	465b      	mov	r3, fp
 80094b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80094bc:	e7d0      	b.n	8009460 <_dtoa_r+0x250>
 80094be:	3101      	adds	r1, #1
 80094c0:	0052      	lsls	r2, r2, #1
 80094c2:	e7d1      	b.n	8009468 <_dtoa_r+0x258>
 80094c4:	f3af 8000 	nop.w
 80094c8:	636f4361 	.word	0x636f4361
 80094cc:	3fd287a7 	.word	0x3fd287a7
 80094d0:	8b60c8b3 	.word	0x8b60c8b3
 80094d4:	3fc68a28 	.word	0x3fc68a28
 80094d8:	509f79fb 	.word	0x509f79fb
 80094dc:	3fd34413 	.word	0x3fd34413
 80094e0:	0800cf6d 	.word	0x0800cf6d
 80094e4:	0800d027 	.word	0x0800d027
 80094e8:	7ff00000 	.word	0x7ff00000
 80094ec:	0800cf45 	.word	0x0800cf45
 80094f0:	3ff80000 	.word	0x3ff80000
 80094f4:	0800d198 	.word	0x0800d198
 80094f8:	0800d07f 	.word	0x0800d07f
 80094fc:	0800d023 	.word	0x0800d023
 8009500:	0800cf44 	.word	0x0800cf44
 8009504:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009508:	6018      	str	r0, [r3, #0]
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	2b0e      	cmp	r3, #14
 800950e:	f200 80a1 	bhi.w	8009654 <_dtoa_r+0x444>
 8009512:	2c00      	cmp	r4, #0
 8009514:	f000 809e 	beq.w	8009654 <_dtoa_r+0x444>
 8009518:	2f00      	cmp	r7, #0
 800951a:	dd33      	ble.n	8009584 <_dtoa_r+0x374>
 800951c:	4b9c      	ldr	r3, [pc, #624]	@ (8009790 <_dtoa_r+0x580>)
 800951e:	f007 020f 	and.w	r2, r7, #15
 8009522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009526:	ed93 7b00 	vldr	d7, [r3]
 800952a:	05f8      	lsls	r0, r7, #23
 800952c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009530:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009534:	d516      	bpl.n	8009564 <_dtoa_r+0x354>
 8009536:	4b97      	ldr	r3, [pc, #604]	@ (8009794 <_dtoa_r+0x584>)
 8009538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800953c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009540:	f7f7 f984 	bl	800084c <__aeabi_ddiv>
 8009544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009548:	f004 040f 	and.w	r4, r4, #15
 800954c:	2603      	movs	r6, #3
 800954e:	4d91      	ldr	r5, [pc, #580]	@ (8009794 <_dtoa_r+0x584>)
 8009550:	b954      	cbnz	r4, 8009568 <_dtoa_r+0x358>
 8009552:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800955a:	f7f7 f977 	bl	800084c <__aeabi_ddiv>
 800955e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009562:	e028      	b.n	80095b6 <_dtoa_r+0x3a6>
 8009564:	2602      	movs	r6, #2
 8009566:	e7f2      	b.n	800954e <_dtoa_r+0x33e>
 8009568:	07e1      	lsls	r1, r4, #31
 800956a:	d508      	bpl.n	800957e <_dtoa_r+0x36e>
 800956c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009570:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009574:	f7f7 f840 	bl	80005f8 <__aeabi_dmul>
 8009578:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800957c:	3601      	adds	r6, #1
 800957e:	1064      	asrs	r4, r4, #1
 8009580:	3508      	adds	r5, #8
 8009582:	e7e5      	b.n	8009550 <_dtoa_r+0x340>
 8009584:	f000 80af 	beq.w	80096e6 <_dtoa_r+0x4d6>
 8009588:	427c      	negs	r4, r7
 800958a:	4b81      	ldr	r3, [pc, #516]	@ (8009790 <_dtoa_r+0x580>)
 800958c:	4d81      	ldr	r5, [pc, #516]	@ (8009794 <_dtoa_r+0x584>)
 800958e:	f004 020f 	and.w	r2, r4, #15
 8009592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800959e:	f7f7 f82b 	bl	80005f8 <__aeabi_dmul>
 80095a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095a6:	1124      	asrs	r4, r4, #4
 80095a8:	2300      	movs	r3, #0
 80095aa:	2602      	movs	r6, #2
 80095ac:	2c00      	cmp	r4, #0
 80095ae:	f040 808f 	bne.w	80096d0 <_dtoa_r+0x4c0>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1d3      	bne.n	800955e <_dtoa_r+0x34e>
 80095b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 8094 	beq.w	80096ea <_dtoa_r+0x4da>
 80095c2:	4b75      	ldr	r3, [pc, #468]	@ (8009798 <_dtoa_r+0x588>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	4620      	mov	r0, r4
 80095c8:	4629      	mov	r1, r5
 80095ca:	f7f7 fa87 	bl	8000adc <__aeabi_dcmplt>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f000 808b 	beq.w	80096ea <_dtoa_r+0x4da>
 80095d4:	9b03      	ldr	r3, [sp, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 8087 	beq.w	80096ea <_dtoa_r+0x4da>
 80095dc:	f1bb 0f00 	cmp.w	fp, #0
 80095e0:	dd34      	ble.n	800964c <_dtoa_r+0x43c>
 80095e2:	4620      	mov	r0, r4
 80095e4:	4b6d      	ldr	r3, [pc, #436]	@ (800979c <_dtoa_r+0x58c>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	4629      	mov	r1, r5
 80095ea:	f7f7 f805 	bl	80005f8 <__aeabi_dmul>
 80095ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80095f6:	3601      	adds	r6, #1
 80095f8:	465c      	mov	r4, fp
 80095fa:	4630      	mov	r0, r6
 80095fc:	f7f6 ff92 	bl	8000524 <__aeabi_i2d>
 8009600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009604:	f7f6 fff8 	bl	80005f8 <__aeabi_dmul>
 8009608:	4b65      	ldr	r3, [pc, #404]	@ (80097a0 <_dtoa_r+0x590>)
 800960a:	2200      	movs	r2, #0
 800960c:	f7f6 fe3e 	bl	800028c <__adddf3>
 8009610:	4605      	mov	r5, r0
 8009612:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009616:	2c00      	cmp	r4, #0
 8009618:	d16a      	bne.n	80096f0 <_dtoa_r+0x4e0>
 800961a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800961e:	4b61      	ldr	r3, [pc, #388]	@ (80097a4 <_dtoa_r+0x594>)
 8009620:	2200      	movs	r2, #0
 8009622:	f7f6 fe31 	bl	8000288 <__aeabi_dsub>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800962e:	462a      	mov	r2, r5
 8009630:	4633      	mov	r3, r6
 8009632:	f7f7 fa71 	bl	8000b18 <__aeabi_dcmpgt>
 8009636:	2800      	cmp	r0, #0
 8009638:	f040 8298 	bne.w	8009b6c <_dtoa_r+0x95c>
 800963c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009640:	462a      	mov	r2, r5
 8009642:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009646:	f7f7 fa49 	bl	8000adc <__aeabi_dcmplt>
 800964a:	bb38      	cbnz	r0, 800969c <_dtoa_r+0x48c>
 800964c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009650:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009654:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009656:	2b00      	cmp	r3, #0
 8009658:	f2c0 8157 	blt.w	800990a <_dtoa_r+0x6fa>
 800965c:	2f0e      	cmp	r7, #14
 800965e:	f300 8154 	bgt.w	800990a <_dtoa_r+0x6fa>
 8009662:	4b4b      	ldr	r3, [pc, #300]	@ (8009790 <_dtoa_r+0x580>)
 8009664:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009668:	ed93 7b00 	vldr	d7, [r3]
 800966c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800966e:	2b00      	cmp	r3, #0
 8009670:	ed8d 7b00 	vstr	d7, [sp]
 8009674:	f280 80e5 	bge.w	8009842 <_dtoa_r+0x632>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f300 80e1 	bgt.w	8009842 <_dtoa_r+0x632>
 8009680:	d10c      	bne.n	800969c <_dtoa_r+0x48c>
 8009682:	4b48      	ldr	r3, [pc, #288]	@ (80097a4 <_dtoa_r+0x594>)
 8009684:	2200      	movs	r2, #0
 8009686:	ec51 0b17 	vmov	r0, r1, d7
 800968a:	f7f6 ffb5 	bl	80005f8 <__aeabi_dmul>
 800968e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009692:	f7f7 fa37 	bl	8000b04 <__aeabi_dcmpge>
 8009696:	2800      	cmp	r0, #0
 8009698:	f000 8266 	beq.w	8009b68 <_dtoa_r+0x958>
 800969c:	2400      	movs	r4, #0
 800969e:	4625      	mov	r5, r4
 80096a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096a2:	4656      	mov	r6, sl
 80096a4:	ea6f 0803 	mvn.w	r8, r3
 80096a8:	2700      	movs	r7, #0
 80096aa:	4621      	mov	r1, r4
 80096ac:	4648      	mov	r0, r9
 80096ae:	f000 fcbf 	bl	800a030 <_Bfree>
 80096b2:	2d00      	cmp	r5, #0
 80096b4:	f000 80bd 	beq.w	8009832 <_dtoa_r+0x622>
 80096b8:	b12f      	cbz	r7, 80096c6 <_dtoa_r+0x4b6>
 80096ba:	42af      	cmp	r7, r5
 80096bc:	d003      	beq.n	80096c6 <_dtoa_r+0x4b6>
 80096be:	4639      	mov	r1, r7
 80096c0:	4648      	mov	r0, r9
 80096c2:	f000 fcb5 	bl	800a030 <_Bfree>
 80096c6:	4629      	mov	r1, r5
 80096c8:	4648      	mov	r0, r9
 80096ca:	f000 fcb1 	bl	800a030 <_Bfree>
 80096ce:	e0b0      	b.n	8009832 <_dtoa_r+0x622>
 80096d0:	07e2      	lsls	r2, r4, #31
 80096d2:	d505      	bpl.n	80096e0 <_dtoa_r+0x4d0>
 80096d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096d8:	f7f6 ff8e 	bl	80005f8 <__aeabi_dmul>
 80096dc:	3601      	adds	r6, #1
 80096de:	2301      	movs	r3, #1
 80096e0:	1064      	asrs	r4, r4, #1
 80096e2:	3508      	adds	r5, #8
 80096e4:	e762      	b.n	80095ac <_dtoa_r+0x39c>
 80096e6:	2602      	movs	r6, #2
 80096e8:	e765      	b.n	80095b6 <_dtoa_r+0x3a6>
 80096ea:	9c03      	ldr	r4, [sp, #12]
 80096ec:	46b8      	mov	r8, r7
 80096ee:	e784      	b.n	80095fa <_dtoa_r+0x3ea>
 80096f0:	4b27      	ldr	r3, [pc, #156]	@ (8009790 <_dtoa_r+0x580>)
 80096f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80096fc:	4454      	add	r4, sl
 80096fe:	2900      	cmp	r1, #0
 8009700:	d054      	beq.n	80097ac <_dtoa_r+0x59c>
 8009702:	4929      	ldr	r1, [pc, #164]	@ (80097a8 <_dtoa_r+0x598>)
 8009704:	2000      	movs	r0, #0
 8009706:	f7f7 f8a1 	bl	800084c <__aeabi_ddiv>
 800970a:	4633      	mov	r3, r6
 800970c:	462a      	mov	r2, r5
 800970e:	f7f6 fdbb 	bl	8000288 <__aeabi_dsub>
 8009712:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009716:	4656      	mov	r6, sl
 8009718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800971c:	f7f7 fa1c 	bl	8000b58 <__aeabi_d2iz>
 8009720:	4605      	mov	r5, r0
 8009722:	f7f6 feff 	bl	8000524 <__aeabi_i2d>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800972e:	f7f6 fdab 	bl	8000288 <__aeabi_dsub>
 8009732:	3530      	adds	r5, #48	@ 0x30
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800973c:	f806 5b01 	strb.w	r5, [r6], #1
 8009740:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009744:	f7f7 f9ca 	bl	8000adc <__aeabi_dcmplt>
 8009748:	2800      	cmp	r0, #0
 800974a:	d172      	bne.n	8009832 <_dtoa_r+0x622>
 800974c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009750:	4911      	ldr	r1, [pc, #68]	@ (8009798 <_dtoa_r+0x588>)
 8009752:	2000      	movs	r0, #0
 8009754:	f7f6 fd98 	bl	8000288 <__aeabi_dsub>
 8009758:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800975c:	f7f7 f9be 	bl	8000adc <__aeabi_dcmplt>
 8009760:	2800      	cmp	r0, #0
 8009762:	f040 80b4 	bne.w	80098ce <_dtoa_r+0x6be>
 8009766:	42a6      	cmp	r6, r4
 8009768:	f43f af70 	beq.w	800964c <_dtoa_r+0x43c>
 800976c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009770:	4b0a      	ldr	r3, [pc, #40]	@ (800979c <_dtoa_r+0x58c>)
 8009772:	2200      	movs	r2, #0
 8009774:	f7f6 ff40 	bl	80005f8 <__aeabi_dmul>
 8009778:	4b08      	ldr	r3, [pc, #32]	@ (800979c <_dtoa_r+0x58c>)
 800977a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800977e:	2200      	movs	r2, #0
 8009780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009784:	f7f6 ff38 	bl	80005f8 <__aeabi_dmul>
 8009788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800978c:	e7c4      	b.n	8009718 <_dtoa_r+0x508>
 800978e:	bf00      	nop
 8009790:	0800d198 	.word	0x0800d198
 8009794:	0800d170 	.word	0x0800d170
 8009798:	3ff00000 	.word	0x3ff00000
 800979c:	40240000 	.word	0x40240000
 80097a0:	401c0000 	.word	0x401c0000
 80097a4:	40140000 	.word	0x40140000
 80097a8:	3fe00000 	.word	0x3fe00000
 80097ac:	4631      	mov	r1, r6
 80097ae:	4628      	mov	r0, r5
 80097b0:	f7f6 ff22 	bl	80005f8 <__aeabi_dmul>
 80097b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80097ba:	4656      	mov	r6, sl
 80097bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097c0:	f7f7 f9ca 	bl	8000b58 <__aeabi_d2iz>
 80097c4:	4605      	mov	r5, r0
 80097c6:	f7f6 fead 	bl	8000524 <__aeabi_i2d>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097d2:	f7f6 fd59 	bl	8000288 <__aeabi_dsub>
 80097d6:	3530      	adds	r5, #48	@ 0x30
 80097d8:	f806 5b01 	strb.w	r5, [r6], #1
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	42a6      	cmp	r6, r4
 80097e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097e6:	f04f 0200 	mov.w	r2, #0
 80097ea:	d124      	bne.n	8009836 <_dtoa_r+0x626>
 80097ec:	4baf      	ldr	r3, [pc, #700]	@ (8009aac <_dtoa_r+0x89c>)
 80097ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80097f2:	f7f6 fd4b 	bl	800028c <__adddf3>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097fe:	f7f7 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8009802:	2800      	cmp	r0, #0
 8009804:	d163      	bne.n	80098ce <_dtoa_r+0x6be>
 8009806:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800980a:	49a8      	ldr	r1, [pc, #672]	@ (8009aac <_dtoa_r+0x89c>)
 800980c:	2000      	movs	r0, #0
 800980e:	f7f6 fd3b 	bl	8000288 <__aeabi_dsub>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800981a:	f7f7 f95f 	bl	8000adc <__aeabi_dcmplt>
 800981e:	2800      	cmp	r0, #0
 8009820:	f43f af14 	beq.w	800964c <_dtoa_r+0x43c>
 8009824:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009826:	1e73      	subs	r3, r6, #1
 8009828:	9313      	str	r3, [sp, #76]	@ 0x4c
 800982a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800982e:	2b30      	cmp	r3, #48	@ 0x30
 8009830:	d0f8      	beq.n	8009824 <_dtoa_r+0x614>
 8009832:	4647      	mov	r7, r8
 8009834:	e03b      	b.n	80098ae <_dtoa_r+0x69e>
 8009836:	4b9e      	ldr	r3, [pc, #632]	@ (8009ab0 <_dtoa_r+0x8a0>)
 8009838:	f7f6 fede 	bl	80005f8 <__aeabi_dmul>
 800983c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009840:	e7bc      	b.n	80097bc <_dtoa_r+0x5ac>
 8009842:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009846:	4656      	mov	r6, sl
 8009848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f6 fffc 	bl	800084c <__aeabi_ddiv>
 8009854:	f7f7 f980 	bl	8000b58 <__aeabi_d2iz>
 8009858:	4680      	mov	r8, r0
 800985a:	f7f6 fe63 	bl	8000524 <__aeabi_i2d>
 800985e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009862:	f7f6 fec9 	bl	80005f8 <__aeabi_dmul>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	4620      	mov	r0, r4
 800986c:	4629      	mov	r1, r5
 800986e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009872:	f7f6 fd09 	bl	8000288 <__aeabi_dsub>
 8009876:	f806 4b01 	strb.w	r4, [r6], #1
 800987a:	9d03      	ldr	r5, [sp, #12]
 800987c:	eba6 040a 	sub.w	r4, r6, sl
 8009880:	42a5      	cmp	r5, r4
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	d133      	bne.n	80098f0 <_dtoa_r+0x6e0>
 8009888:	f7f6 fd00 	bl	800028c <__adddf3>
 800988c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009890:	4604      	mov	r4, r0
 8009892:	460d      	mov	r5, r1
 8009894:	f7f7 f940 	bl	8000b18 <__aeabi_dcmpgt>
 8009898:	b9c0      	cbnz	r0, 80098cc <_dtoa_r+0x6bc>
 800989a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f7 f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80098a6:	b110      	cbz	r0, 80098ae <_dtoa_r+0x69e>
 80098a8:	f018 0f01 	tst.w	r8, #1
 80098ac:	d10e      	bne.n	80098cc <_dtoa_r+0x6bc>
 80098ae:	9902      	ldr	r1, [sp, #8]
 80098b0:	4648      	mov	r0, r9
 80098b2:	f000 fbbd 	bl	800a030 <_Bfree>
 80098b6:	2300      	movs	r3, #0
 80098b8:	7033      	strb	r3, [r6, #0]
 80098ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80098bc:	3701      	adds	r7, #1
 80098be:	601f      	str	r7, [r3, #0]
 80098c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 824b 	beq.w	8009d5e <_dtoa_r+0xb4e>
 80098c8:	601e      	str	r6, [r3, #0]
 80098ca:	e248      	b.n	8009d5e <_dtoa_r+0xb4e>
 80098cc:	46b8      	mov	r8, r7
 80098ce:	4633      	mov	r3, r6
 80098d0:	461e      	mov	r6, r3
 80098d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098d6:	2a39      	cmp	r2, #57	@ 0x39
 80098d8:	d106      	bne.n	80098e8 <_dtoa_r+0x6d8>
 80098da:	459a      	cmp	sl, r3
 80098dc:	d1f8      	bne.n	80098d0 <_dtoa_r+0x6c0>
 80098de:	2230      	movs	r2, #48	@ 0x30
 80098e0:	f108 0801 	add.w	r8, r8, #1
 80098e4:	f88a 2000 	strb.w	r2, [sl]
 80098e8:	781a      	ldrb	r2, [r3, #0]
 80098ea:	3201      	adds	r2, #1
 80098ec:	701a      	strb	r2, [r3, #0]
 80098ee:	e7a0      	b.n	8009832 <_dtoa_r+0x622>
 80098f0:	4b6f      	ldr	r3, [pc, #444]	@ (8009ab0 <_dtoa_r+0x8a0>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	f7f6 fe80 	bl	80005f8 <__aeabi_dmul>
 80098f8:	2200      	movs	r2, #0
 80098fa:	2300      	movs	r3, #0
 80098fc:	4604      	mov	r4, r0
 80098fe:	460d      	mov	r5, r1
 8009900:	f7f7 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009904:	2800      	cmp	r0, #0
 8009906:	d09f      	beq.n	8009848 <_dtoa_r+0x638>
 8009908:	e7d1      	b.n	80098ae <_dtoa_r+0x69e>
 800990a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800990c:	2a00      	cmp	r2, #0
 800990e:	f000 80ea 	beq.w	8009ae6 <_dtoa_r+0x8d6>
 8009912:	9a07      	ldr	r2, [sp, #28]
 8009914:	2a01      	cmp	r2, #1
 8009916:	f300 80cd 	bgt.w	8009ab4 <_dtoa_r+0x8a4>
 800991a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800991c:	2a00      	cmp	r2, #0
 800991e:	f000 80c1 	beq.w	8009aa4 <_dtoa_r+0x894>
 8009922:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009926:	9c08      	ldr	r4, [sp, #32]
 8009928:	9e00      	ldr	r6, [sp, #0]
 800992a:	9a00      	ldr	r2, [sp, #0]
 800992c:	441a      	add	r2, r3
 800992e:	9200      	str	r2, [sp, #0]
 8009930:	9a06      	ldr	r2, [sp, #24]
 8009932:	2101      	movs	r1, #1
 8009934:	441a      	add	r2, r3
 8009936:	4648      	mov	r0, r9
 8009938:	9206      	str	r2, [sp, #24]
 800993a:	f000 fc77 	bl	800a22c <__i2b>
 800993e:	4605      	mov	r5, r0
 8009940:	b166      	cbz	r6, 800995c <_dtoa_r+0x74c>
 8009942:	9b06      	ldr	r3, [sp, #24]
 8009944:	2b00      	cmp	r3, #0
 8009946:	dd09      	ble.n	800995c <_dtoa_r+0x74c>
 8009948:	42b3      	cmp	r3, r6
 800994a:	9a00      	ldr	r2, [sp, #0]
 800994c:	bfa8      	it	ge
 800994e:	4633      	movge	r3, r6
 8009950:	1ad2      	subs	r2, r2, r3
 8009952:	9200      	str	r2, [sp, #0]
 8009954:	9a06      	ldr	r2, [sp, #24]
 8009956:	1af6      	subs	r6, r6, r3
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	9306      	str	r3, [sp, #24]
 800995c:	9b08      	ldr	r3, [sp, #32]
 800995e:	b30b      	cbz	r3, 80099a4 <_dtoa_r+0x794>
 8009960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 80c6 	beq.w	8009af4 <_dtoa_r+0x8e4>
 8009968:	2c00      	cmp	r4, #0
 800996a:	f000 80c0 	beq.w	8009aee <_dtoa_r+0x8de>
 800996e:	4629      	mov	r1, r5
 8009970:	4622      	mov	r2, r4
 8009972:	4648      	mov	r0, r9
 8009974:	f000 fd12 	bl	800a39c <__pow5mult>
 8009978:	9a02      	ldr	r2, [sp, #8]
 800997a:	4601      	mov	r1, r0
 800997c:	4605      	mov	r5, r0
 800997e:	4648      	mov	r0, r9
 8009980:	f000 fc6a 	bl	800a258 <__multiply>
 8009984:	9902      	ldr	r1, [sp, #8]
 8009986:	4680      	mov	r8, r0
 8009988:	4648      	mov	r0, r9
 800998a:	f000 fb51 	bl	800a030 <_Bfree>
 800998e:	9b08      	ldr	r3, [sp, #32]
 8009990:	1b1b      	subs	r3, r3, r4
 8009992:	9308      	str	r3, [sp, #32]
 8009994:	f000 80b1 	beq.w	8009afa <_dtoa_r+0x8ea>
 8009998:	9a08      	ldr	r2, [sp, #32]
 800999a:	4641      	mov	r1, r8
 800999c:	4648      	mov	r0, r9
 800999e:	f000 fcfd 	bl	800a39c <__pow5mult>
 80099a2:	9002      	str	r0, [sp, #8]
 80099a4:	2101      	movs	r1, #1
 80099a6:	4648      	mov	r0, r9
 80099a8:	f000 fc40 	bl	800a22c <__i2b>
 80099ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099ae:	4604      	mov	r4, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 81d8 	beq.w	8009d66 <_dtoa_r+0xb56>
 80099b6:	461a      	mov	r2, r3
 80099b8:	4601      	mov	r1, r0
 80099ba:	4648      	mov	r0, r9
 80099bc:	f000 fcee 	bl	800a39c <__pow5mult>
 80099c0:	9b07      	ldr	r3, [sp, #28]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	4604      	mov	r4, r0
 80099c6:	f300 809f 	bgt.w	8009b08 <_dtoa_r+0x8f8>
 80099ca:	9b04      	ldr	r3, [sp, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f040 8097 	bne.w	8009b00 <_dtoa_r+0x8f0>
 80099d2:	9b05      	ldr	r3, [sp, #20]
 80099d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f040 8093 	bne.w	8009b04 <_dtoa_r+0x8f4>
 80099de:	9b05      	ldr	r3, [sp, #20]
 80099e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099e4:	0d1b      	lsrs	r3, r3, #20
 80099e6:	051b      	lsls	r3, r3, #20
 80099e8:	b133      	cbz	r3, 80099f8 <_dtoa_r+0x7e8>
 80099ea:	9b00      	ldr	r3, [sp, #0]
 80099ec:	3301      	adds	r3, #1
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	9b06      	ldr	r3, [sp, #24]
 80099f2:	3301      	adds	r3, #1
 80099f4:	9306      	str	r3, [sp, #24]
 80099f6:	2301      	movs	r3, #1
 80099f8:	9308      	str	r3, [sp, #32]
 80099fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 81b8 	beq.w	8009d72 <_dtoa_r+0xb62>
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a08:	6918      	ldr	r0, [r3, #16]
 8009a0a:	f000 fbc3 	bl	800a194 <__hi0bits>
 8009a0e:	f1c0 0020 	rsb	r0, r0, #32
 8009a12:	9b06      	ldr	r3, [sp, #24]
 8009a14:	4418      	add	r0, r3
 8009a16:	f010 001f 	ands.w	r0, r0, #31
 8009a1a:	f000 8082 	beq.w	8009b22 <_dtoa_r+0x912>
 8009a1e:	f1c0 0320 	rsb	r3, r0, #32
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	dd73      	ble.n	8009b0e <_dtoa_r+0x8fe>
 8009a26:	9b00      	ldr	r3, [sp, #0]
 8009a28:	f1c0 001c 	rsb	r0, r0, #28
 8009a2c:	4403      	add	r3, r0
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	9b06      	ldr	r3, [sp, #24]
 8009a32:	4403      	add	r3, r0
 8009a34:	4406      	add	r6, r0
 8009a36:	9306      	str	r3, [sp, #24]
 8009a38:	9b00      	ldr	r3, [sp, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	dd05      	ble.n	8009a4a <_dtoa_r+0x83a>
 8009a3e:	9902      	ldr	r1, [sp, #8]
 8009a40:	461a      	mov	r2, r3
 8009a42:	4648      	mov	r0, r9
 8009a44:	f000 fd04 	bl	800a450 <__lshift>
 8009a48:	9002      	str	r0, [sp, #8]
 8009a4a:	9b06      	ldr	r3, [sp, #24]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dd05      	ble.n	8009a5c <_dtoa_r+0x84c>
 8009a50:	4621      	mov	r1, r4
 8009a52:	461a      	mov	r2, r3
 8009a54:	4648      	mov	r0, r9
 8009a56:	f000 fcfb 	bl	800a450 <__lshift>
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d061      	beq.n	8009b26 <_dtoa_r+0x916>
 8009a62:	9802      	ldr	r0, [sp, #8]
 8009a64:	4621      	mov	r1, r4
 8009a66:	f000 fd5f 	bl	800a528 <__mcmp>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	da5b      	bge.n	8009b26 <_dtoa_r+0x916>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	9902      	ldr	r1, [sp, #8]
 8009a72:	220a      	movs	r2, #10
 8009a74:	4648      	mov	r0, r9
 8009a76:	f000 fafd 	bl	800a074 <__multadd>
 8009a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a7c:	9002      	str	r0, [sp, #8]
 8009a7e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 8177 	beq.w	8009d76 <_dtoa_r+0xb66>
 8009a88:	4629      	mov	r1, r5
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	220a      	movs	r2, #10
 8009a8e:	4648      	mov	r0, r9
 8009a90:	f000 faf0 	bl	800a074 <__multadd>
 8009a94:	f1bb 0f00 	cmp.w	fp, #0
 8009a98:	4605      	mov	r5, r0
 8009a9a:	dc6f      	bgt.n	8009b7c <_dtoa_r+0x96c>
 8009a9c:	9b07      	ldr	r3, [sp, #28]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	dc49      	bgt.n	8009b36 <_dtoa_r+0x926>
 8009aa2:	e06b      	b.n	8009b7c <_dtoa_r+0x96c>
 8009aa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009aa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009aaa:	e73c      	b.n	8009926 <_dtoa_r+0x716>
 8009aac:	3fe00000 	.word	0x3fe00000
 8009ab0:	40240000 	.word	0x40240000
 8009ab4:	9b03      	ldr	r3, [sp, #12]
 8009ab6:	1e5c      	subs	r4, r3, #1
 8009ab8:	9b08      	ldr	r3, [sp, #32]
 8009aba:	42a3      	cmp	r3, r4
 8009abc:	db09      	blt.n	8009ad2 <_dtoa_r+0x8c2>
 8009abe:	1b1c      	subs	r4, r3, r4
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f6bf af30 	bge.w	8009928 <_dtoa_r+0x718>
 8009ac8:	9b00      	ldr	r3, [sp, #0]
 8009aca:	9a03      	ldr	r2, [sp, #12]
 8009acc:	1a9e      	subs	r6, r3, r2
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e72b      	b.n	800992a <_dtoa_r+0x71a>
 8009ad2:	9b08      	ldr	r3, [sp, #32]
 8009ad4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ad6:	9408      	str	r4, [sp, #32]
 8009ad8:	1ae3      	subs	r3, r4, r3
 8009ada:	441a      	add	r2, r3
 8009adc:	9e00      	ldr	r6, [sp, #0]
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	920d      	str	r2, [sp, #52]	@ 0x34
 8009ae2:	2400      	movs	r4, #0
 8009ae4:	e721      	b.n	800992a <_dtoa_r+0x71a>
 8009ae6:	9c08      	ldr	r4, [sp, #32]
 8009ae8:	9e00      	ldr	r6, [sp, #0]
 8009aea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009aec:	e728      	b.n	8009940 <_dtoa_r+0x730>
 8009aee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009af2:	e751      	b.n	8009998 <_dtoa_r+0x788>
 8009af4:	9a08      	ldr	r2, [sp, #32]
 8009af6:	9902      	ldr	r1, [sp, #8]
 8009af8:	e750      	b.n	800999c <_dtoa_r+0x78c>
 8009afa:	f8cd 8008 	str.w	r8, [sp, #8]
 8009afe:	e751      	b.n	80099a4 <_dtoa_r+0x794>
 8009b00:	2300      	movs	r3, #0
 8009b02:	e779      	b.n	80099f8 <_dtoa_r+0x7e8>
 8009b04:	9b04      	ldr	r3, [sp, #16]
 8009b06:	e777      	b.n	80099f8 <_dtoa_r+0x7e8>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	9308      	str	r3, [sp, #32]
 8009b0c:	e779      	b.n	8009a02 <_dtoa_r+0x7f2>
 8009b0e:	d093      	beq.n	8009a38 <_dtoa_r+0x828>
 8009b10:	9a00      	ldr	r2, [sp, #0]
 8009b12:	331c      	adds	r3, #28
 8009b14:	441a      	add	r2, r3
 8009b16:	9200      	str	r2, [sp, #0]
 8009b18:	9a06      	ldr	r2, [sp, #24]
 8009b1a:	441a      	add	r2, r3
 8009b1c:	441e      	add	r6, r3
 8009b1e:	9206      	str	r2, [sp, #24]
 8009b20:	e78a      	b.n	8009a38 <_dtoa_r+0x828>
 8009b22:	4603      	mov	r3, r0
 8009b24:	e7f4      	b.n	8009b10 <_dtoa_r+0x900>
 8009b26:	9b03      	ldr	r3, [sp, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	46b8      	mov	r8, r7
 8009b2c:	dc20      	bgt.n	8009b70 <_dtoa_r+0x960>
 8009b2e:	469b      	mov	fp, r3
 8009b30:	9b07      	ldr	r3, [sp, #28]
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	dd1e      	ble.n	8009b74 <_dtoa_r+0x964>
 8009b36:	f1bb 0f00 	cmp.w	fp, #0
 8009b3a:	f47f adb1 	bne.w	80096a0 <_dtoa_r+0x490>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	465b      	mov	r3, fp
 8009b42:	2205      	movs	r2, #5
 8009b44:	4648      	mov	r0, r9
 8009b46:	f000 fa95 	bl	800a074 <__multadd>
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	9802      	ldr	r0, [sp, #8]
 8009b50:	f000 fcea 	bl	800a528 <__mcmp>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	f77f ada3 	ble.w	80096a0 <_dtoa_r+0x490>
 8009b5a:	4656      	mov	r6, sl
 8009b5c:	2331      	movs	r3, #49	@ 0x31
 8009b5e:	f806 3b01 	strb.w	r3, [r6], #1
 8009b62:	f108 0801 	add.w	r8, r8, #1
 8009b66:	e59f      	b.n	80096a8 <_dtoa_r+0x498>
 8009b68:	9c03      	ldr	r4, [sp, #12]
 8009b6a:	46b8      	mov	r8, r7
 8009b6c:	4625      	mov	r5, r4
 8009b6e:	e7f4      	b.n	8009b5a <_dtoa_r+0x94a>
 8009b70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 8101 	beq.w	8009d7e <_dtoa_r+0xb6e>
 8009b7c:	2e00      	cmp	r6, #0
 8009b7e:	dd05      	ble.n	8009b8c <_dtoa_r+0x97c>
 8009b80:	4629      	mov	r1, r5
 8009b82:	4632      	mov	r2, r6
 8009b84:	4648      	mov	r0, r9
 8009b86:	f000 fc63 	bl	800a450 <__lshift>
 8009b8a:	4605      	mov	r5, r0
 8009b8c:	9b08      	ldr	r3, [sp, #32]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d05c      	beq.n	8009c4c <_dtoa_r+0xa3c>
 8009b92:	6869      	ldr	r1, [r5, #4]
 8009b94:	4648      	mov	r0, r9
 8009b96:	f000 fa0b 	bl	8009fb0 <_Balloc>
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	b928      	cbnz	r0, 8009baa <_dtoa_r+0x99a>
 8009b9e:	4b82      	ldr	r3, [pc, #520]	@ (8009da8 <_dtoa_r+0xb98>)
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ba6:	f7ff bb4a 	b.w	800923e <_dtoa_r+0x2e>
 8009baa:	692a      	ldr	r2, [r5, #16]
 8009bac:	3202      	adds	r2, #2
 8009bae:	0092      	lsls	r2, r2, #2
 8009bb0:	f105 010c 	add.w	r1, r5, #12
 8009bb4:	300c      	adds	r0, #12
 8009bb6:	f7ff fa70 	bl	800909a <memcpy>
 8009bba:	2201      	movs	r2, #1
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4648      	mov	r0, r9
 8009bc0:	f000 fc46 	bl	800a450 <__lshift>
 8009bc4:	f10a 0301 	add.w	r3, sl, #1
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	eb0a 030b 	add.w	r3, sl, fp
 8009bce:	9308      	str	r3, [sp, #32]
 8009bd0:	9b04      	ldr	r3, [sp, #16]
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	462f      	mov	r7, r5
 8009bd8:	9306      	str	r3, [sp, #24]
 8009bda:	4605      	mov	r5, r0
 8009bdc:	9b00      	ldr	r3, [sp, #0]
 8009bde:	9802      	ldr	r0, [sp, #8]
 8009be0:	4621      	mov	r1, r4
 8009be2:	f103 3bff 	add.w	fp, r3, #4294967295
 8009be6:	f7ff fa8b 	bl	8009100 <quorem>
 8009bea:	4603      	mov	r3, r0
 8009bec:	3330      	adds	r3, #48	@ 0x30
 8009bee:	9003      	str	r0, [sp, #12]
 8009bf0:	4639      	mov	r1, r7
 8009bf2:	9802      	ldr	r0, [sp, #8]
 8009bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bf6:	f000 fc97 	bl	800a528 <__mcmp>
 8009bfa:	462a      	mov	r2, r5
 8009bfc:	9004      	str	r0, [sp, #16]
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4648      	mov	r0, r9
 8009c02:	f000 fcad 	bl	800a560 <__mdiff>
 8009c06:	68c2      	ldr	r2, [r0, #12]
 8009c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	bb02      	cbnz	r2, 8009c50 <_dtoa_r+0xa40>
 8009c0e:	4601      	mov	r1, r0
 8009c10:	9802      	ldr	r0, [sp, #8]
 8009c12:	f000 fc89 	bl	800a528 <__mcmp>
 8009c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c18:	4602      	mov	r2, r0
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4648      	mov	r0, r9
 8009c1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c22:	f000 fa05 	bl	800a030 <_Bfree>
 8009c26:	9b07      	ldr	r3, [sp, #28]
 8009c28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c2a:	9e00      	ldr	r6, [sp, #0]
 8009c2c:	ea42 0103 	orr.w	r1, r2, r3
 8009c30:	9b06      	ldr	r3, [sp, #24]
 8009c32:	4319      	orrs	r1, r3
 8009c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c36:	d10d      	bne.n	8009c54 <_dtoa_r+0xa44>
 8009c38:	2b39      	cmp	r3, #57	@ 0x39
 8009c3a:	d027      	beq.n	8009c8c <_dtoa_r+0xa7c>
 8009c3c:	9a04      	ldr	r2, [sp, #16]
 8009c3e:	2a00      	cmp	r2, #0
 8009c40:	dd01      	ble.n	8009c46 <_dtoa_r+0xa36>
 8009c42:	9b03      	ldr	r3, [sp, #12]
 8009c44:	3331      	adds	r3, #49	@ 0x31
 8009c46:	f88b 3000 	strb.w	r3, [fp]
 8009c4a:	e52e      	b.n	80096aa <_dtoa_r+0x49a>
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	e7b9      	b.n	8009bc4 <_dtoa_r+0x9b4>
 8009c50:	2201      	movs	r2, #1
 8009c52:	e7e2      	b.n	8009c1a <_dtoa_r+0xa0a>
 8009c54:	9904      	ldr	r1, [sp, #16]
 8009c56:	2900      	cmp	r1, #0
 8009c58:	db04      	blt.n	8009c64 <_dtoa_r+0xa54>
 8009c5a:	9807      	ldr	r0, [sp, #28]
 8009c5c:	4301      	orrs	r1, r0
 8009c5e:	9806      	ldr	r0, [sp, #24]
 8009c60:	4301      	orrs	r1, r0
 8009c62:	d120      	bne.n	8009ca6 <_dtoa_r+0xa96>
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	ddee      	ble.n	8009c46 <_dtoa_r+0xa36>
 8009c68:	9902      	ldr	r1, [sp, #8]
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	4648      	mov	r0, r9
 8009c70:	f000 fbee 	bl	800a450 <__lshift>
 8009c74:	4621      	mov	r1, r4
 8009c76:	9002      	str	r0, [sp, #8]
 8009c78:	f000 fc56 	bl	800a528 <__mcmp>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	9b00      	ldr	r3, [sp, #0]
 8009c80:	dc02      	bgt.n	8009c88 <_dtoa_r+0xa78>
 8009c82:	d1e0      	bne.n	8009c46 <_dtoa_r+0xa36>
 8009c84:	07da      	lsls	r2, r3, #31
 8009c86:	d5de      	bpl.n	8009c46 <_dtoa_r+0xa36>
 8009c88:	2b39      	cmp	r3, #57	@ 0x39
 8009c8a:	d1da      	bne.n	8009c42 <_dtoa_r+0xa32>
 8009c8c:	2339      	movs	r3, #57	@ 0x39
 8009c8e:	f88b 3000 	strb.w	r3, [fp]
 8009c92:	4633      	mov	r3, r6
 8009c94:	461e      	mov	r6, r3
 8009c96:	3b01      	subs	r3, #1
 8009c98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c9c:	2a39      	cmp	r2, #57	@ 0x39
 8009c9e:	d04e      	beq.n	8009d3e <_dtoa_r+0xb2e>
 8009ca0:	3201      	adds	r2, #1
 8009ca2:	701a      	strb	r2, [r3, #0]
 8009ca4:	e501      	b.n	80096aa <_dtoa_r+0x49a>
 8009ca6:	2a00      	cmp	r2, #0
 8009ca8:	dd03      	ble.n	8009cb2 <_dtoa_r+0xaa2>
 8009caa:	2b39      	cmp	r3, #57	@ 0x39
 8009cac:	d0ee      	beq.n	8009c8c <_dtoa_r+0xa7c>
 8009cae:	3301      	adds	r3, #1
 8009cb0:	e7c9      	b.n	8009c46 <_dtoa_r+0xa36>
 8009cb2:	9a00      	ldr	r2, [sp, #0]
 8009cb4:	9908      	ldr	r1, [sp, #32]
 8009cb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009cba:	428a      	cmp	r2, r1
 8009cbc:	d028      	beq.n	8009d10 <_dtoa_r+0xb00>
 8009cbe:	9902      	ldr	r1, [sp, #8]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	220a      	movs	r2, #10
 8009cc4:	4648      	mov	r0, r9
 8009cc6:	f000 f9d5 	bl	800a074 <__multadd>
 8009cca:	42af      	cmp	r7, r5
 8009ccc:	9002      	str	r0, [sp, #8]
 8009cce:	f04f 0300 	mov.w	r3, #0
 8009cd2:	f04f 020a 	mov.w	r2, #10
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	4648      	mov	r0, r9
 8009cda:	d107      	bne.n	8009cec <_dtoa_r+0xadc>
 8009cdc:	f000 f9ca 	bl	800a074 <__multadd>
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	9b00      	ldr	r3, [sp, #0]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	e777      	b.n	8009bdc <_dtoa_r+0x9cc>
 8009cec:	f000 f9c2 	bl	800a074 <__multadd>
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	4607      	mov	r7, r0
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	220a      	movs	r2, #10
 8009cf8:	4648      	mov	r0, r9
 8009cfa:	f000 f9bb 	bl	800a074 <__multadd>
 8009cfe:	4605      	mov	r5, r0
 8009d00:	e7f0      	b.n	8009ce4 <_dtoa_r+0xad4>
 8009d02:	f1bb 0f00 	cmp.w	fp, #0
 8009d06:	bfcc      	ite	gt
 8009d08:	465e      	movgt	r6, fp
 8009d0a:	2601      	movle	r6, #1
 8009d0c:	4456      	add	r6, sl
 8009d0e:	2700      	movs	r7, #0
 8009d10:	9902      	ldr	r1, [sp, #8]
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	2201      	movs	r2, #1
 8009d16:	4648      	mov	r0, r9
 8009d18:	f000 fb9a 	bl	800a450 <__lshift>
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	9002      	str	r0, [sp, #8]
 8009d20:	f000 fc02 	bl	800a528 <__mcmp>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	dcb4      	bgt.n	8009c92 <_dtoa_r+0xa82>
 8009d28:	d102      	bne.n	8009d30 <_dtoa_r+0xb20>
 8009d2a:	9b00      	ldr	r3, [sp, #0]
 8009d2c:	07db      	lsls	r3, r3, #31
 8009d2e:	d4b0      	bmi.n	8009c92 <_dtoa_r+0xa82>
 8009d30:	4633      	mov	r3, r6
 8009d32:	461e      	mov	r6, r3
 8009d34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d38:	2a30      	cmp	r2, #48	@ 0x30
 8009d3a:	d0fa      	beq.n	8009d32 <_dtoa_r+0xb22>
 8009d3c:	e4b5      	b.n	80096aa <_dtoa_r+0x49a>
 8009d3e:	459a      	cmp	sl, r3
 8009d40:	d1a8      	bne.n	8009c94 <_dtoa_r+0xa84>
 8009d42:	2331      	movs	r3, #49	@ 0x31
 8009d44:	f108 0801 	add.w	r8, r8, #1
 8009d48:	f88a 3000 	strb.w	r3, [sl]
 8009d4c:	e4ad      	b.n	80096aa <_dtoa_r+0x49a>
 8009d4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009dac <_dtoa_r+0xb9c>
 8009d54:	b11b      	cbz	r3, 8009d5e <_dtoa_r+0xb4e>
 8009d56:	f10a 0308 	add.w	r3, sl, #8
 8009d5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	4650      	mov	r0, sl
 8009d60:	b017      	add	sp, #92	@ 0x5c
 8009d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d66:	9b07      	ldr	r3, [sp, #28]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	f77f ae2e 	ble.w	80099ca <_dtoa_r+0x7ba>
 8009d6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d70:	9308      	str	r3, [sp, #32]
 8009d72:	2001      	movs	r0, #1
 8009d74:	e64d      	b.n	8009a12 <_dtoa_r+0x802>
 8009d76:	f1bb 0f00 	cmp.w	fp, #0
 8009d7a:	f77f aed9 	ble.w	8009b30 <_dtoa_r+0x920>
 8009d7e:	4656      	mov	r6, sl
 8009d80:	9802      	ldr	r0, [sp, #8]
 8009d82:	4621      	mov	r1, r4
 8009d84:	f7ff f9bc 	bl	8009100 <quorem>
 8009d88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009d8c:	f806 3b01 	strb.w	r3, [r6], #1
 8009d90:	eba6 020a 	sub.w	r2, r6, sl
 8009d94:	4593      	cmp	fp, r2
 8009d96:	ddb4      	ble.n	8009d02 <_dtoa_r+0xaf2>
 8009d98:	9902      	ldr	r1, [sp, #8]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	220a      	movs	r2, #10
 8009d9e:	4648      	mov	r0, r9
 8009da0:	f000 f968 	bl	800a074 <__multadd>
 8009da4:	9002      	str	r0, [sp, #8]
 8009da6:	e7eb      	b.n	8009d80 <_dtoa_r+0xb70>
 8009da8:	0800d07f 	.word	0x0800d07f
 8009dac:	0800d01a 	.word	0x0800d01a

08009db0 <_free_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4605      	mov	r5, r0
 8009db4:	2900      	cmp	r1, #0
 8009db6:	d041      	beq.n	8009e3c <_free_r+0x8c>
 8009db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dbc:	1f0c      	subs	r4, r1, #4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	bfb8      	it	lt
 8009dc2:	18e4      	addlt	r4, r4, r3
 8009dc4:	f000 f8e8 	bl	8009f98 <__malloc_lock>
 8009dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e40 <_free_r+0x90>)
 8009dca:	6813      	ldr	r3, [r2, #0]
 8009dcc:	b933      	cbnz	r3, 8009ddc <_free_r+0x2c>
 8009dce:	6063      	str	r3, [r4, #4]
 8009dd0:	6014      	str	r4, [r2, #0]
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dd8:	f000 b8e4 	b.w	8009fa4 <__malloc_unlock>
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	d908      	bls.n	8009df2 <_free_r+0x42>
 8009de0:	6820      	ldr	r0, [r4, #0]
 8009de2:	1821      	adds	r1, r4, r0
 8009de4:	428b      	cmp	r3, r1
 8009de6:	bf01      	itttt	eq
 8009de8:	6819      	ldreq	r1, [r3, #0]
 8009dea:	685b      	ldreq	r3, [r3, #4]
 8009dec:	1809      	addeq	r1, r1, r0
 8009dee:	6021      	streq	r1, [r4, #0]
 8009df0:	e7ed      	b.n	8009dce <_free_r+0x1e>
 8009df2:	461a      	mov	r2, r3
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	b10b      	cbz	r3, 8009dfc <_free_r+0x4c>
 8009df8:	42a3      	cmp	r3, r4
 8009dfa:	d9fa      	bls.n	8009df2 <_free_r+0x42>
 8009dfc:	6811      	ldr	r1, [r2, #0]
 8009dfe:	1850      	adds	r0, r2, r1
 8009e00:	42a0      	cmp	r0, r4
 8009e02:	d10b      	bne.n	8009e1c <_free_r+0x6c>
 8009e04:	6820      	ldr	r0, [r4, #0]
 8009e06:	4401      	add	r1, r0
 8009e08:	1850      	adds	r0, r2, r1
 8009e0a:	4283      	cmp	r3, r0
 8009e0c:	6011      	str	r1, [r2, #0]
 8009e0e:	d1e0      	bne.n	8009dd2 <_free_r+0x22>
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	6053      	str	r3, [r2, #4]
 8009e16:	4408      	add	r0, r1
 8009e18:	6010      	str	r0, [r2, #0]
 8009e1a:	e7da      	b.n	8009dd2 <_free_r+0x22>
 8009e1c:	d902      	bls.n	8009e24 <_free_r+0x74>
 8009e1e:	230c      	movs	r3, #12
 8009e20:	602b      	str	r3, [r5, #0]
 8009e22:	e7d6      	b.n	8009dd2 <_free_r+0x22>
 8009e24:	6820      	ldr	r0, [r4, #0]
 8009e26:	1821      	adds	r1, r4, r0
 8009e28:	428b      	cmp	r3, r1
 8009e2a:	bf04      	itt	eq
 8009e2c:	6819      	ldreq	r1, [r3, #0]
 8009e2e:	685b      	ldreq	r3, [r3, #4]
 8009e30:	6063      	str	r3, [r4, #4]
 8009e32:	bf04      	itt	eq
 8009e34:	1809      	addeq	r1, r1, r0
 8009e36:	6021      	streq	r1, [r4, #0]
 8009e38:	6054      	str	r4, [r2, #4]
 8009e3a:	e7ca      	b.n	8009dd2 <_free_r+0x22>
 8009e3c:	bd38      	pop	{r3, r4, r5, pc}
 8009e3e:	bf00      	nop
 8009e40:	20000e40 	.word	0x20000e40

08009e44 <malloc>:
 8009e44:	4b02      	ldr	r3, [pc, #8]	@ (8009e50 <malloc+0xc>)
 8009e46:	4601      	mov	r1, r0
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	f000 b825 	b.w	8009e98 <_malloc_r>
 8009e4e:	bf00      	nop
 8009e50:	20000060 	.word	0x20000060

08009e54 <sbrk_aligned>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	4e0f      	ldr	r6, [pc, #60]	@ (8009e94 <sbrk_aligned+0x40>)
 8009e58:	460c      	mov	r4, r1
 8009e5a:	6831      	ldr	r1, [r6, #0]
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	b911      	cbnz	r1, 8009e66 <sbrk_aligned+0x12>
 8009e60:	f001 ffca 	bl	800bdf8 <_sbrk_r>
 8009e64:	6030      	str	r0, [r6, #0]
 8009e66:	4621      	mov	r1, r4
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f001 ffc5 	bl	800bdf8 <_sbrk_r>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	d103      	bne.n	8009e7a <sbrk_aligned+0x26>
 8009e72:	f04f 34ff 	mov.w	r4, #4294967295
 8009e76:	4620      	mov	r0, r4
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
 8009e7a:	1cc4      	adds	r4, r0, #3
 8009e7c:	f024 0403 	bic.w	r4, r4, #3
 8009e80:	42a0      	cmp	r0, r4
 8009e82:	d0f8      	beq.n	8009e76 <sbrk_aligned+0x22>
 8009e84:	1a21      	subs	r1, r4, r0
 8009e86:	4628      	mov	r0, r5
 8009e88:	f001 ffb6 	bl	800bdf8 <_sbrk_r>
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	d1f2      	bne.n	8009e76 <sbrk_aligned+0x22>
 8009e90:	e7ef      	b.n	8009e72 <sbrk_aligned+0x1e>
 8009e92:	bf00      	nop
 8009e94:	20000e3c 	.word	0x20000e3c

08009e98 <_malloc_r>:
 8009e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	1ccd      	adds	r5, r1, #3
 8009e9e:	f025 0503 	bic.w	r5, r5, #3
 8009ea2:	3508      	adds	r5, #8
 8009ea4:	2d0c      	cmp	r5, #12
 8009ea6:	bf38      	it	cc
 8009ea8:	250c      	movcc	r5, #12
 8009eaa:	2d00      	cmp	r5, #0
 8009eac:	4606      	mov	r6, r0
 8009eae:	db01      	blt.n	8009eb4 <_malloc_r+0x1c>
 8009eb0:	42a9      	cmp	r1, r5
 8009eb2:	d904      	bls.n	8009ebe <_malloc_r+0x26>
 8009eb4:	230c      	movs	r3, #12
 8009eb6:	6033      	str	r3, [r6, #0]
 8009eb8:	2000      	movs	r0, #0
 8009eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f94 <_malloc_r+0xfc>
 8009ec2:	f000 f869 	bl	8009f98 <__malloc_lock>
 8009ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8009eca:	461c      	mov	r4, r3
 8009ecc:	bb44      	cbnz	r4, 8009f20 <_malloc_r+0x88>
 8009ece:	4629      	mov	r1, r5
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff ffbf 	bl	8009e54 <sbrk_aligned>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	4604      	mov	r4, r0
 8009eda:	d158      	bne.n	8009f8e <_malloc_r+0xf6>
 8009edc:	f8d8 4000 	ldr.w	r4, [r8]
 8009ee0:	4627      	mov	r7, r4
 8009ee2:	2f00      	cmp	r7, #0
 8009ee4:	d143      	bne.n	8009f6e <_malloc_r+0xd6>
 8009ee6:	2c00      	cmp	r4, #0
 8009ee8:	d04b      	beq.n	8009f82 <_malloc_r+0xea>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	4639      	mov	r1, r7
 8009eee:	4630      	mov	r0, r6
 8009ef0:	eb04 0903 	add.w	r9, r4, r3
 8009ef4:	f001 ff80 	bl	800bdf8 <_sbrk_r>
 8009ef8:	4581      	cmp	r9, r0
 8009efa:	d142      	bne.n	8009f82 <_malloc_r+0xea>
 8009efc:	6821      	ldr	r1, [r4, #0]
 8009efe:	1a6d      	subs	r5, r5, r1
 8009f00:	4629      	mov	r1, r5
 8009f02:	4630      	mov	r0, r6
 8009f04:	f7ff ffa6 	bl	8009e54 <sbrk_aligned>
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d03a      	beq.n	8009f82 <_malloc_r+0xea>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	442b      	add	r3, r5
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	f8d8 3000 	ldr.w	r3, [r8]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	bb62      	cbnz	r2, 8009f74 <_malloc_r+0xdc>
 8009f1a:	f8c8 7000 	str.w	r7, [r8]
 8009f1e:	e00f      	b.n	8009f40 <_malloc_r+0xa8>
 8009f20:	6822      	ldr	r2, [r4, #0]
 8009f22:	1b52      	subs	r2, r2, r5
 8009f24:	d420      	bmi.n	8009f68 <_malloc_r+0xd0>
 8009f26:	2a0b      	cmp	r2, #11
 8009f28:	d917      	bls.n	8009f5a <_malloc_r+0xc2>
 8009f2a:	1961      	adds	r1, r4, r5
 8009f2c:	42a3      	cmp	r3, r4
 8009f2e:	6025      	str	r5, [r4, #0]
 8009f30:	bf18      	it	ne
 8009f32:	6059      	strne	r1, [r3, #4]
 8009f34:	6863      	ldr	r3, [r4, #4]
 8009f36:	bf08      	it	eq
 8009f38:	f8c8 1000 	streq.w	r1, [r8]
 8009f3c:	5162      	str	r2, [r4, r5]
 8009f3e:	604b      	str	r3, [r1, #4]
 8009f40:	4630      	mov	r0, r6
 8009f42:	f000 f82f 	bl	8009fa4 <__malloc_unlock>
 8009f46:	f104 000b 	add.w	r0, r4, #11
 8009f4a:	1d23      	adds	r3, r4, #4
 8009f4c:	f020 0007 	bic.w	r0, r0, #7
 8009f50:	1ac2      	subs	r2, r0, r3
 8009f52:	bf1c      	itt	ne
 8009f54:	1a1b      	subne	r3, r3, r0
 8009f56:	50a3      	strne	r3, [r4, r2]
 8009f58:	e7af      	b.n	8009eba <_malloc_r+0x22>
 8009f5a:	6862      	ldr	r2, [r4, #4]
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	bf0c      	ite	eq
 8009f60:	f8c8 2000 	streq.w	r2, [r8]
 8009f64:	605a      	strne	r2, [r3, #4]
 8009f66:	e7eb      	b.n	8009f40 <_malloc_r+0xa8>
 8009f68:	4623      	mov	r3, r4
 8009f6a:	6864      	ldr	r4, [r4, #4]
 8009f6c:	e7ae      	b.n	8009ecc <_malloc_r+0x34>
 8009f6e:	463c      	mov	r4, r7
 8009f70:	687f      	ldr	r7, [r7, #4]
 8009f72:	e7b6      	b.n	8009ee2 <_malloc_r+0x4a>
 8009f74:	461a      	mov	r2, r3
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	42a3      	cmp	r3, r4
 8009f7a:	d1fb      	bne.n	8009f74 <_malloc_r+0xdc>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	6053      	str	r3, [r2, #4]
 8009f80:	e7de      	b.n	8009f40 <_malloc_r+0xa8>
 8009f82:	230c      	movs	r3, #12
 8009f84:	6033      	str	r3, [r6, #0]
 8009f86:	4630      	mov	r0, r6
 8009f88:	f000 f80c 	bl	8009fa4 <__malloc_unlock>
 8009f8c:	e794      	b.n	8009eb8 <_malloc_r+0x20>
 8009f8e:	6005      	str	r5, [r0, #0]
 8009f90:	e7d6      	b.n	8009f40 <_malloc_r+0xa8>
 8009f92:	bf00      	nop
 8009f94:	20000e40 	.word	0x20000e40

08009f98 <__malloc_lock>:
 8009f98:	4801      	ldr	r0, [pc, #4]	@ (8009fa0 <__malloc_lock+0x8>)
 8009f9a:	f7ff b87c 	b.w	8009096 <__retarget_lock_acquire_recursive>
 8009f9e:	bf00      	nop
 8009fa0:	20000e38 	.word	0x20000e38

08009fa4 <__malloc_unlock>:
 8009fa4:	4801      	ldr	r0, [pc, #4]	@ (8009fac <__malloc_unlock+0x8>)
 8009fa6:	f7ff b877 	b.w	8009098 <__retarget_lock_release_recursive>
 8009faa:	bf00      	nop
 8009fac:	20000e38 	.word	0x20000e38

08009fb0 <_Balloc>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	69c6      	ldr	r6, [r0, #28]
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	460d      	mov	r5, r1
 8009fb8:	b976      	cbnz	r6, 8009fd8 <_Balloc+0x28>
 8009fba:	2010      	movs	r0, #16
 8009fbc:	f7ff ff42 	bl	8009e44 <malloc>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	61e0      	str	r0, [r4, #28]
 8009fc4:	b920      	cbnz	r0, 8009fd0 <_Balloc+0x20>
 8009fc6:	4b18      	ldr	r3, [pc, #96]	@ (800a028 <_Balloc+0x78>)
 8009fc8:	4818      	ldr	r0, [pc, #96]	@ (800a02c <_Balloc+0x7c>)
 8009fca:	216b      	movs	r1, #107	@ 0x6b
 8009fcc:	f7ff f87a 	bl	80090c4 <__assert_func>
 8009fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fd4:	6006      	str	r6, [r0, #0]
 8009fd6:	60c6      	str	r6, [r0, #12]
 8009fd8:	69e6      	ldr	r6, [r4, #28]
 8009fda:	68f3      	ldr	r3, [r6, #12]
 8009fdc:	b183      	cbz	r3, 800a000 <_Balloc+0x50>
 8009fde:	69e3      	ldr	r3, [r4, #28]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fe6:	b9b8      	cbnz	r0, 800a018 <_Balloc+0x68>
 8009fe8:	2101      	movs	r1, #1
 8009fea:	fa01 f605 	lsl.w	r6, r1, r5
 8009fee:	1d72      	adds	r2, r6, #5
 8009ff0:	0092      	lsls	r2, r2, #2
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f001 ff1f 	bl	800be36 <_calloc_r>
 8009ff8:	b160      	cbz	r0, 800a014 <_Balloc+0x64>
 8009ffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ffe:	e00e      	b.n	800a01e <_Balloc+0x6e>
 800a000:	2221      	movs	r2, #33	@ 0x21
 800a002:	2104      	movs	r1, #4
 800a004:	4620      	mov	r0, r4
 800a006:	f001 ff16 	bl	800be36 <_calloc_r>
 800a00a:	69e3      	ldr	r3, [r4, #28]
 800a00c:	60f0      	str	r0, [r6, #12]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1e4      	bne.n	8009fde <_Balloc+0x2e>
 800a014:	2000      	movs	r0, #0
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	6802      	ldr	r2, [r0, #0]
 800a01a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a01e:	2300      	movs	r3, #0
 800a020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a024:	e7f7      	b.n	800a016 <_Balloc+0x66>
 800a026:	bf00      	nop
 800a028:	0800cf6d 	.word	0x0800cf6d
 800a02c:	0800d090 	.word	0x0800d090

0800a030 <_Bfree>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	69c6      	ldr	r6, [r0, #28]
 800a034:	4605      	mov	r5, r0
 800a036:	460c      	mov	r4, r1
 800a038:	b976      	cbnz	r6, 800a058 <_Bfree+0x28>
 800a03a:	2010      	movs	r0, #16
 800a03c:	f7ff ff02 	bl	8009e44 <malloc>
 800a040:	4602      	mov	r2, r0
 800a042:	61e8      	str	r0, [r5, #28]
 800a044:	b920      	cbnz	r0, 800a050 <_Bfree+0x20>
 800a046:	4b09      	ldr	r3, [pc, #36]	@ (800a06c <_Bfree+0x3c>)
 800a048:	4809      	ldr	r0, [pc, #36]	@ (800a070 <_Bfree+0x40>)
 800a04a:	218f      	movs	r1, #143	@ 0x8f
 800a04c:	f7ff f83a 	bl	80090c4 <__assert_func>
 800a050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a054:	6006      	str	r6, [r0, #0]
 800a056:	60c6      	str	r6, [r0, #12]
 800a058:	b13c      	cbz	r4, 800a06a <_Bfree+0x3a>
 800a05a:	69eb      	ldr	r3, [r5, #28]
 800a05c:	6862      	ldr	r2, [r4, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a064:	6021      	str	r1, [r4, #0]
 800a066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	0800cf6d 	.word	0x0800cf6d
 800a070:	0800d090 	.word	0x0800d090

0800a074 <__multadd>:
 800a074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a078:	690d      	ldr	r5, [r1, #16]
 800a07a:	4607      	mov	r7, r0
 800a07c:	460c      	mov	r4, r1
 800a07e:	461e      	mov	r6, r3
 800a080:	f101 0c14 	add.w	ip, r1, #20
 800a084:	2000      	movs	r0, #0
 800a086:	f8dc 3000 	ldr.w	r3, [ip]
 800a08a:	b299      	uxth	r1, r3
 800a08c:	fb02 6101 	mla	r1, r2, r1, r6
 800a090:	0c1e      	lsrs	r6, r3, #16
 800a092:	0c0b      	lsrs	r3, r1, #16
 800a094:	fb02 3306 	mla	r3, r2, r6, r3
 800a098:	b289      	uxth	r1, r1
 800a09a:	3001      	adds	r0, #1
 800a09c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0a0:	4285      	cmp	r5, r0
 800a0a2:	f84c 1b04 	str.w	r1, [ip], #4
 800a0a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0aa:	dcec      	bgt.n	800a086 <__multadd+0x12>
 800a0ac:	b30e      	cbz	r6, 800a0f2 <__multadd+0x7e>
 800a0ae:	68a3      	ldr	r3, [r4, #8]
 800a0b0:	42ab      	cmp	r3, r5
 800a0b2:	dc19      	bgt.n	800a0e8 <__multadd+0x74>
 800a0b4:	6861      	ldr	r1, [r4, #4]
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	3101      	adds	r1, #1
 800a0ba:	f7ff ff79 	bl	8009fb0 <_Balloc>
 800a0be:	4680      	mov	r8, r0
 800a0c0:	b928      	cbnz	r0, 800a0ce <__multadd+0x5a>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f8 <__multadd+0x84>)
 800a0c6:	480d      	ldr	r0, [pc, #52]	@ (800a0fc <__multadd+0x88>)
 800a0c8:	21ba      	movs	r1, #186	@ 0xba
 800a0ca:	f7fe fffb 	bl	80090c4 <__assert_func>
 800a0ce:	6922      	ldr	r2, [r4, #16]
 800a0d0:	3202      	adds	r2, #2
 800a0d2:	f104 010c 	add.w	r1, r4, #12
 800a0d6:	0092      	lsls	r2, r2, #2
 800a0d8:	300c      	adds	r0, #12
 800a0da:	f7fe ffde 	bl	800909a <memcpy>
 800a0de:	4621      	mov	r1, r4
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7ff ffa5 	bl	800a030 <_Bfree>
 800a0e6:	4644      	mov	r4, r8
 800a0e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0ec:	3501      	adds	r5, #1
 800a0ee:	615e      	str	r6, [r3, #20]
 800a0f0:	6125      	str	r5, [r4, #16]
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f8:	0800d07f 	.word	0x0800d07f
 800a0fc:	0800d090 	.word	0x0800d090

0800a100 <__s2b>:
 800a100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a104:	460c      	mov	r4, r1
 800a106:	4615      	mov	r5, r2
 800a108:	461f      	mov	r7, r3
 800a10a:	2209      	movs	r2, #9
 800a10c:	3308      	adds	r3, #8
 800a10e:	4606      	mov	r6, r0
 800a110:	fb93 f3f2 	sdiv	r3, r3, r2
 800a114:	2100      	movs	r1, #0
 800a116:	2201      	movs	r2, #1
 800a118:	429a      	cmp	r2, r3
 800a11a:	db09      	blt.n	800a130 <__s2b+0x30>
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7ff ff47 	bl	8009fb0 <_Balloc>
 800a122:	b940      	cbnz	r0, 800a136 <__s2b+0x36>
 800a124:	4602      	mov	r2, r0
 800a126:	4b19      	ldr	r3, [pc, #100]	@ (800a18c <__s2b+0x8c>)
 800a128:	4819      	ldr	r0, [pc, #100]	@ (800a190 <__s2b+0x90>)
 800a12a:	21d3      	movs	r1, #211	@ 0xd3
 800a12c:	f7fe ffca 	bl	80090c4 <__assert_func>
 800a130:	0052      	lsls	r2, r2, #1
 800a132:	3101      	adds	r1, #1
 800a134:	e7f0      	b.n	800a118 <__s2b+0x18>
 800a136:	9b08      	ldr	r3, [sp, #32]
 800a138:	6143      	str	r3, [r0, #20]
 800a13a:	2d09      	cmp	r5, #9
 800a13c:	f04f 0301 	mov.w	r3, #1
 800a140:	6103      	str	r3, [r0, #16]
 800a142:	dd16      	ble.n	800a172 <__s2b+0x72>
 800a144:	f104 0909 	add.w	r9, r4, #9
 800a148:	46c8      	mov	r8, r9
 800a14a:	442c      	add	r4, r5
 800a14c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a150:	4601      	mov	r1, r0
 800a152:	3b30      	subs	r3, #48	@ 0x30
 800a154:	220a      	movs	r2, #10
 800a156:	4630      	mov	r0, r6
 800a158:	f7ff ff8c 	bl	800a074 <__multadd>
 800a15c:	45a0      	cmp	r8, r4
 800a15e:	d1f5      	bne.n	800a14c <__s2b+0x4c>
 800a160:	f1a5 0408 	sub.w	r4, r5, #8
 800a164:	444c      	add	r4, r9
 800a166:	1b2d      	subs	r5, r5, r4
 800a168:	1963      	adds	r3, r4, r5
 800a16a:	42bb      	cmp	r3, r7
 800a16c:	db04      	blt.n	800a178 <__s2b+0x78>
 800a16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a172:	340a      	adds	r4, #10
 800a174:	2509      	movs	r5, #9
 800a176:	e7f6      	b.n	800a166 <__s2b+0x66>
 800a178:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a17c:	4601      	mov	r1, r0
 800a17e:	3b30      	subs	r3, #48	@ 0x30
 800a180:	220a      	movs	r2, #10
 800a182:	4630      	mov	r0, r6
 800a184:	f7ff ff76 	bl	800a074 <__multadd>
 800a188:	e7ee      	b.n	800a168 <__s2b+0x68>
 800a18a:	bf00      	nop
 800a18c:	0800d07f 	.word	0x0800d07f
 800a190:	0800d090 	.word	0x0800d090

0800a194 <__hi0bits>:
 800a194:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a198:	4603      	mov	r3, r0
 800a19a:	bf36      	itet	cc
 800a19c:	0403      	lslcc	r3, r0, #16
 800a19e:	2000      	movcs	r0, #0
 800a1a0:	2010      	movcc	r0, #16
 800a1a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1a6:	bf3c      	itt	cc
 800a1a8:	021b      	lslcc	r3, r3, #8
 800a1aa:	3008      	addcc	r0, #8
 800a1ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1b0:	bf3c      	itt	cc
 800a1b2:	011b      	lslcc	r3, r3, #4
 800a1b4:	3004      	addcc	r0, #4
 800a1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ba:	bf3c      	itt	cc
 800a1bc:	009b      	lslcc	r3, r3, #2
 800a1be:	3002      	addcc	r0, #2
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	db05      	blt.n	800a1d0 <__hi0bits+0x3c>
 800a1c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1c8:	f100 0001 	add.w	r0, r0, #1
 800a1cc:	bf08      	it	eq
 800a1ce:	2020      	moveq	r0, #32
 800a1d0:	4770      	bx	lr

0800a1d2 <__lo0bits>:
 800a1d2:	6803      	ldr	r3, [r0, #0]
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	f013 0007 	ands.w	r0, r3, #7
 800a1da:	d00b      	beq.n	800a1f4 <__lo0bits+0x22>
 800a1dc:	07d9      	lsls	r1, r3, #31
 800a1de:	d421      	bmi.n	800a224 <__lo0bits+0x52>
 800a1e0:	0798      	lsls	r0, r3, #30
 800a1e2:	bf49      	itett	mi
 800a1e4:	085b      	lsrmi	r3, r3, #1
 800a1e6:	089b      	lsrpl	r3, r3, #2
 800a1e8:	2001      	movmi	r0, #1
 800a1ea:	6013      	strmi	r3, [r2, #0]
 800a1ec:	bf5c      	itt	pl
 800a1ee:	6013      	strpl	r3, [r2, #0]
 800a1f0:	2002      	movpl	r0, #2
 800a1f2:	4770      	bx	lr
 800a1f4:	b299      	uxth	r1, r3
 800a1f6:	b909      	cbnz	r1, 800a1fc <__lo0bits+0x2a>
 800a1f8:	0c1b      	lsrs	r3, r3, #16
 800a1fa:	2010      	movs	r0, #16
 800a1fc:	b2d9      	uxtb	r1, r3
 800a1fe:	b909      	cbnz	r1, 800a204 <__lo0bits+0x32>
 800a200:	3008      	adds	r0, #8
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	0719      	lsls	r1, r3, #28
 800a206:	bf04      	itt	eq
 800a208:	091b      	lsreq	r3, r3, #4
 800a20a:	3004      	addeq	r0, #4
 800a20c:	0799      	lsls	r1, r3, #30
 800a20e:	bf04      	itt	eq
 800a210:	089b      	lsreq	r3, r3, #2
 800a212:	3002      	addeq	r0, #2
 800a214:	07d9      	lsls	r1, r3, #31
 800a216:	d403      	bmi.n	800a220 <__lo0bits+0x4e>
 800a218:	085b      	lsrs	r3, r3, #1
 800a21a:	f100 0001 	add.w	r0, r0, #1
 800a21e:	d003      	beq.n	800a228 <__lo0bits+0x56>
 800a220:	6013      	str	r3, [r2, #0]
 800a222:	4770      	bx	lr
 800a224:	2000      	movs	r0, #0
 800a226:	4770      	bx	lr
 800a228:	2020      	movs	r0, #32
 800a22a:	4770      	bx	lr

0800a22c <__i2b>:
 800a22c:	b510      	push	{r4, lr}
 800a22e:	460c      	mov	r4, r1
 800a230:	2101      	movs	r1, #1
 800a232:	f7ff febd 	bl	8009fb0 <_Balloc>
 800a236:	4602      	mov	r2, r0
 800a238:	b928      	cbnz	r0, 800a246 <__i2b+0x1a>
 800a23a:	4b05      	ldr	r3, [pc, #20]	@ (800a250 <__i2b+0x24>)
 800a23c:	4805      	ldr	r0, [pc, #20]	@ (800a254 <__i2b+0x28>)
 800a23e:	f240 1145 	movw	r1, #325	@ 0x145
 800a242:	f7fe ff3f 	bl	80090c4 <__assert_func>
 800a246:	2301      	movs	r3, #1
 800a248:	6144      	str	r4, [r0, #20]
 800a24a:	6103      	str	r3, [r0, #16]
 800a24c:	bd10      	pop	{r4, pc}
 800a24e:	bf00      	nop
 800a250:	0800d07f 	.word	0x0800d07f
 800a254:	0800d090 	.word	0x0800d090

0800a258 <__multiply>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	4617      	mov	r7, r2
 800a25e:	690a      	ldr	r2, [r1, #16]
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	429a      	cmp	r2, r3
 800a264:	bfa8      	it	ge
 800a266:	463b      	movge	r3, r7
 800a268:	4689      	mov	r9, r1
 800a26a:	bfa4      	itt	ge
 800a26c:	460f      	movge	r7, r1
 800a26e:	4699      	movge	r9, r3
 800a270:	693d      	ldr	r5, [r7, #16]
 800a272:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	6879      	ldr	r1, [r7, #4]
 800a27a:	eb05 060a 	add.w	r6, r5, sl
 800a27e:	42b3      	cmp	r3, r6
 800a280:	b085      	sub	sp, #20
 800a282:	bfb8      	it	lt
 800a284:	3101      	addlt	r1, #1
 800a286:	f7ff fe93 	bl	8009fb0 <_Balloc>
 800a28a:	b930      	cbnz	r0, 800a29a <__multiply+0x42>
 800a28c:	4602      	mov	r2, r0
 800a28e:	4b41      	ldr	r3, [pc, #260]	@ (800a394 <__multiply+0x13c>)
 800a290:	4841      	ldr	r0, [pc, #260]	@ (800a398 <__multiply+0x140>)
 800a292:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a296:	f7fe ff15 	bl	80090c4 <__assert_func>
 800a29a:	f100 0414 	add.w	r4, r0, #20
 800a29e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a2a2:	4623      	mov	r3, r4
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	4573      	cmp	r3, lr
 800a2a8:	d320      	bcc.n	800a2ec <__multiply+0x94>
 800a2aa:	f107 0814 	add.w	r8, r7, #20
 800a2ae:	f109 0114 	add.w	r1, r9, #20
 800a2b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a2b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a2ba:	9302      	str	r3, [sp, #8]
 800a2bc:	1beb      	subs	r3, r5, r7
 800a2be:	3b15      	subs	r3, #21
 800a2c0:	f023 0303 	bic.w	r3, r3, #3
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	3715      	adds	r7, #21
 800a2c8:	42bd      	cmp	r5, r7
 800a2ca:	bf38      	it	cc
 800a2cc:	2304      	movcc	r3, #4
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	9b02      	ldr	r3, [sp, #8]
 800a2d2:	9103      	str	r1, [sp, #12]
 800a2d4:	428b      	cmp	r3, r1
 800a2d6:	d80c      	bhi.n	800a2f2 <__multiply+0x9a>
 800a2d8:	2e00      	cmp	r6, #0
 800a2da:	dd03      	ble.n	800a2e4 <__multiply+0x8c>
 800a2dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d055      	beq.n	800a390 <__multiply+0x138>
 800a2e4:	6106      	str	r6, [r0, #16]
 800a2e6:	b005      	add	sp, #20
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	f843 2b04 	str.w	r2, [r3], #4
 800a2f0:	e7d9      	b.n	800a2a6 <__multiply+0x4e>
 800a2f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a2f6:	f1ba 0f00 	cmp.w	sl, #0
 800a2fa:	d01f      	beq.n	800a33c <__multiply+0xe4>
 800a2fc:	46c4      	mov	ip, r8
 800a2fe:	46a1      	mov	r9, r4
 800a300:	2700      	movs	r7, #0
 800a302:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a306:	f8d9 3000 	ldr.w	r3, [r9]
 800a30a:	fa1f fb82 	uxth.w	fp, r2
 800a30e:	b29b      	uxth	r3, r3
 800a310:	fb0a 330b 	mla	r3, sl, fp, r3
 800a314:	443b      	add	r3, r7
 800a316:	f8d9 7000 	ldr.w	r7, [r9]
 800a31a:	0c12      	lsrs	r2, r2, #16
 800a31c:	0c3f      	lsrs	r7, r7, #16
 800a31e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a322:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a326:	b29b      	uxth	r3, r3
 800a328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a32c:	4565      	cmp	r5, ip
 800a32e:	f849 3b04 	str.w	r3, [r9], #4
 800a332:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a336:	d8e4      	bhi.n	800a302 <__multiply+0xaa>
 800a338:	9b01      	ldr	r3, [sp, #4]
 800a33a:	50e7      	str	r7, [r4, r3]
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a342:	3104      	adds	r1, #4
 800a344:	f1b9 0f00 	cmp.w	r9, #0
 800a348:	d020      	beq.n	800a38c <__multiply+0x134>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	4647      	mov	r7, r8
 800a34e:	46a4      	mov	ip, r4
 800a350:	f04f 0a00 	mov.w	sl, #0
 800a354:	f8b7 b000 	ldrh.w	fp, [r7]
 800a358:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a35c:	fb09 220b 	mla	r2, r9, fp, r2
 800a360:	4452      	add	r2, sl
 800a362:	b29b      	uxth	r3, r3
 800a364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a368:	f84c 3b04 	str.w	r3, [ip], #4
 800a36c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a370:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a374:	f8bc 3000 	ldrh.w	r3, [ip]
 800a378:	fb09 330a 	mla	r3, r9, sl, r3
 800a37c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a380:	42bd      	cmp	r5, r7
 800a382:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a386:	d8e5      	bhi.n	800a354 <__multiply+0xfc>
 800a388:	9a01      	ldr	r2, [sp, #4]
 800a38a:	50a3      	str	r3, [r4, r2]
 800a38c:	3404      	adds	r4, #4
 800a38e:	e79f      	b.n	800a2d0 <__multiply+0x78>
 800a390:	3e01      	subs	r6, #1
 800a392:	e7a1      	b.n	800a2d8 <__multiply+0x80>
 800a394:	0800d07f 	.word	0x0800d07f
 800a398:	0800d090 	.word	0x0800d090

0800a39c <__pow5mult>:
 800a39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a0:	4615      	mov	r5, r2
 800a3a2:	f012 0203 	ands.w	r2, r2, #3
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	460e      	mov	r6, r1
 800a3aa:	d007      	beq.n	800a3bc <__pow5mult+0x20>
 800a3ac:	4c25      	ldr	r4, [pc, #148]	@ (800a444 <__pow5mult+0xa8>)
 800a3ae:	3a01      	subs	r2, #1
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3b6:	f7ff fe5d 	bl	800a074 <__multadd>
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	10ad      	asrs	r5, r5, #2
 800a3be:	d03d      	beq.n	800a43c <__pow5mult+0xa0>
 800a3c0:	69fc      	ldr	r4, [r7, #28]
 800a3c2:	b97c      	cbnz	r4, 800a3e4 <__pow5mult+0x48>
 800a3c4:	2010      	movs	r0, #16
 800a3c6:	f7ff fd3d 	bl	8009e44 <malloc>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	61f8      	str	r0, [r7, #28]
 800a3ce:	b928      	cbnz	r0, 800a3dc <__pow5mult+0x40>
 800a3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a448 <__pow5mult+0xac>)
 800a3d2:	481e      	ldr	r0, [pc, #120]	@ (800a44c <__pow5mult+0xb0>)
 800a3d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a3d8:	f7fe fe74 	bl	80090c4 <__assert_func>
 800a3dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3e0:	6004      	str	r4, [r0, #0]
 800a3e2:	60c4      	str	r4, [r0, #12]
 800a3e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a3e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3ec:	b94c      	cbnz	r4, 800a402 <__pow5mult+0x66>
 800a3ee:	f240 2171 	movw	r1, #625	@ 0x271
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	f7ff ff1a 	bl	800a22c <__i2b>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3fe:	4604      	mov	r4, r0
 800a400:	6003      	str	r3, [r0, #0]
 800a402:	f04f 0900 	mov.w	r9, #0
 800a406:	07eb      	lsls	r3, r5, #31
 800a408:	d50a      	bpl.n	800a420 <__pow5mult+0x84>
 800a40a:	4631      	mov	r1, r6
 800a40c:	4622      	mov	r2, r4
 800a40e:	4638      	mov	r0, r7
 800a410:	f7ff ff22 	bl	800a258 <__multiply>
 800a414:	4631      	mov	r1, r6
 800a416:	4680      	mov	r8, r0
 800a418:	4638      	mov	r0, r7
 800a41a:	f7ff fe09 	bl	800a030 <_Bfree>
 800a41e:	4646      	mov	r6, r8
 800a420:	106d      	asrs	r5, r5, #1
 800a422:	d00b      	beq.n	800a43c <__pow5mult+0xa0>
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	b938      	cbnz	r0, 800a438 <__pow5mult+0x9c>
 800a428:	4622      	mov	r2, r4
 800a42a:	4621      	mov	r1, r4
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7ff ff13 	bl	800a258 <__multiply>
 800a432:	6020      	str	r0, [r4, #0]
 800a434:	f8c0 9000 	str.w	r9, [r0]
 800a438:	4604      	mov	r4, r0
 800a43a:	e7e4      	b.n	800a406 <__pow5mult+0x6a>
 800a43c:	4630      	mov	r0, r6
 800a43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a442:	bf00      	nop
 800a444:	0800d164 	.word	0x0800d164
 800a448:	0800cf6d 	.word	0x0800cf6d
 800a44c:	0800d090 	.word	0x0800d090

0800a450 <__lshift>:
 800a450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a454:	460c      	mov	r4, r1
 800a456:	6849      	ldr	r1, [r1, #4]
 800a458:	6923      	ldr	r3, [r4, #16]
 800a45a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a45e:	68a3      	ldr	r3, [r4, #8]
 800a460:	4607      	mov	r7, r0
 800a462:	4691      	mov	r9, r2
 800a464:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a468:	f108 0601 	add.w	r6, r8, #1
 800a46c:	42b3      	cmp	r3, r6
 800a46e:	db0b      	blt.n	800a488 <__lshift+0x38>
 800a470:	4638      	mov	r0, r7
 800a472:	f7ff fd9d 	bl	8009fb0 <_Balloc>
 800a476:	4605      	mov	r5, r0
 800a478:	b948      	cbnz	r0, 800a48e <__lshift+0x3e>
 800a47a:	4602      	mov	r2, r0
 800a47c:	4b28      	ldr	r3, [pc, #160]	@ (800a520 <__lshift+0xd0>)
 800a47e:	4829      	ldr	r0, [pc, #164]	@ (800a524 <__lshift+0xd4>)
 800a480:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a484:	f7fe fe1e 	bl	80090c4 <__assert_func>
 800a488:	3101      	adds	r1, #1
 800a48a:	005b      	lsls	r3, r3, #1
 800a48c:	e7ee      	b.n	800a46c <__lshift+0x1c>
 800a48e:	2300      	movs	r3, #0
 800a490:	f100 0114 	add.w	r1, r0, #20
 800a494:	f100 0210 	add.w	r2, r0, #16
 800a498:	4618      	mov	r0, r3
 800a49a:	4553      	cmp	r3, sl
 800a49c:	db33      	blt.n	800a506 <__lshift+0xb6>
 800a49e:	6920      	ldr	r0, [r4, #16]
 800a4a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4a4:	f104 0314 	add.w	r3, r4, #20
 800a4a8:	f019 091f 	ands.w	r9, r9, #31
 800a4ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4b4:	d02b      	beq.n	800a50e <__lshift+0xbe>
 800a4b6:	f1c9 0e20 	rsb	lr, r9, #32
 800a4ba:	468a      	mov	sl, r1
 800a4bc:	2200      	movs	r2, #0
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	fa00 f009 	lsl.w	r0, r0, r9
 800a4c4:	4310      	orrs	r0, r2
 800a4c6:	f84a 0b04 	str.w	r0, [sl], #4
 800a4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ce:	459c      	cmp	ip, r3
 800a4d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4d4:	d8f3      	bhi.n	800a4be <__lshift+0x6e>
 800a4d6:	ebac 0304 	sub.w	r3, ip, r4
 800a4da:	3b15      	subs	r3, #21
 800a4dc:	f023 0303 	bic.w	r3, r3, #3
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	f104 0015 	add.w	r0, r4, #21
 800a4e6:	4560      	cmp	r0, ip
 800a4e8:	bf88      	it	hi
 800a4ea:	2304      	movhi	r3, #4
 800a4ec:	50ca      	str	r2, [r1, r3]
 800a4ee:	b10a      	cbz	r2, 800a4f4 <__lshift+0xa4>
 800a4f0:	f108 0602 	add.w	r6, r8, #2
 800a4f4:	3e01      	subs	r6, #1
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	612e      	str	r6, [r5, #16]
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	f7ff fd98 	bl	800a030 <_Bfree>
 800a500:	4628      	mov	r0, r5
 800a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a506:	f842 0f04 	str.w	r0, [r2, #4]!
 800a50a:	3301      	adds	r3, #1
 800a50c:	e7c5      	b.n	800a49a <__lshift+0x4a>
 800a50e:	3904      	subs	r1, #4
 800a510:	f853 2b04 	ldr.w	r2, [r3], #4
 800a514:	f841 2f04 	str.w	r2, [r1, #4]!
 800a518:	459c      	cmp	ip, r3
 800a51a:	d8f9      	bhi.n	800a510 <__lshift+0xc0>
 800a51c:	e7ea      	b.n	800a4f4 <__lshift+0xa4>
 800a51e:	bf00      	nop
 800a520:	0800d07f 	.word	0x0800d07f
 800a524:	0800d090 	.word	0x0800d090

0800a528 <__mcmp>:
 800a528:	690a      	ldr	r2, [r1, #16]
 800a52a:	4603      	mov	r3, r0
 800a52c:	6900      	ldr	r0, [r0, #16]
 800a52e:	1a80      	subs	r0, r0, r2
 800a530:	b530      	push	{r4, r5, lr}
 800a532:	d10e      	bne.n	800a552 <__mcmp+0x2a>
 800a534:	3314      	adds	r3, #20
 800a536:	3114      	adds	r1, #20
 800a538:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a53c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a540:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a544:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a548:	4295      	cmp	r5, r2
 800a54a:	d003      	beq.n	800a554 <__mcmp+0x2c>
 800a54c:	d205      	bcs.n	800a55a <__mcmp+0x32>
 800a54e:	f04f 30ff 	mov.w	r0, #4294967295
 800a552:	bd30      	pop	{r4, r5, pc}
 800a554:	42a3      	cmp	r3, r4
 800a556:	d3f3      	bcc.n	800a540 <__mcmp+0x18>
 800a558:	e7fb      	b.n	800a552 <__mcmp+0x2a>
 800a55a:	2001      	movs	r0, #1
 800a55c:	e7f9      	b.n	800a552 <__mcmp+0x2a>
	...

0800a560 <__mdiff>:
 800a560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	4689      	mov	r9, r1
 800a566:	4606      	mov	r6, r0
 800a568:	4611      	mov	r1, r2
 800a56a:	4648      	mov	r0, r9
 800a56c:	4614      	mov	r4, r2
 800a56e:	f7ff ffdb 	bl	800a528 <__mcmp>
 800a572:	1e05      	subs	r5, r0, #0
 800a574:	d112      	bne.n	800a59c <__mdiff+0x3c>
 800a576:	4629      	mov	r1, r5
 800a578:	4630      	mov	r0, r6
 800a57a:	f7ff fd19 	bl	8009fb0 <_Balloc>
 800a57e:	4602      	mov	r2, r0
 800a580:	b928      	cbnz	r0, 800a58e <__mdiff+0x2e>
 800a582:	4b3f      	ldr	r3, [pc, #252]	@ (800a680 <__mdiff+0x120>)
 800a584:	f240 2137 	movw	r1, #567	@ 0x237
 800a588:	483e      	ldr	r0, [pc, #248]	@ (800a684 <__mdiff+0x124>)
 800a58a:	f7fe fd9b 	bl	80090c4 <__assert_func>
 800a58e:	2301      	movs	r3, #1
 800a590:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a594:	4610      	mov	r0, r2
 800a596:	b003      	add	sp, #12
 800a598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59c:	bfbc      	itt	lt
 800a59e:	464b      	movlt	r3, r9
 800a5a0:	46a1      	movlt	r9, r4
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5a8:	bfba      	itte	lt
 800a5aa:	461c      	movlt	r4, r3
 800a5ac:	2501      	movlt	r5, #1
 800a5ae:	2500      	movge	r5, #0
 800a5b0:	f7ff fcfe 	bl	8009fb0 <_Balloc>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	b918      	cbnz	r0, 800a5c0 <__mdiff+0x60>
 800a5b8:	4b31      	ldr	r3, [pc, #196]	@ (800a680 <__mdiff+0x120>)
 800a5ba:	f240 2145 	movw	r1, #581	@ 0x245
 800a5be:	e7e3      	b.n	800a588 <__mdiff+0x28>
 800a5c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a5c4:	6926      	ldr	r6, [r4, #16]
 800a5c6:	60c5      	str	r5, [r0, #12]
 800a5c8:	f109 0310 	add.w	r3, r9, #16
 800a5cc:	f109 0514 	add.w	r5, r9, #20
 800a5d0:	f104 0e14 	add.w	lr, r4, #20
 800a5d4:	f100 0b14 	add.w	fp, r0, #20
 800a5d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a5dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	46d9      	mov	r9, fp
 800a5e4:	f04f 0c00 	mov.w	ip, #0
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a5ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a5f2:	9301      	str	r3, [sp, #4]
 800a5f4:	fa1f f38a 	uxth.w	r3, sl
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	b283      	uxth	r3, r0
 800a5fc:	1acb      	subs	r3, r1, r3
 800a5fe:	0c00      	lsrs	r0, r0, #16
 800a600:	4463      	add	r3, ip
 800a602:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a606:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a610:	4576      	cmp	r6, lr
 800a612:	f849 3b04 	str.w	r3, [r9], #4
 800a616:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a61a:	d8e5      	bhi.n	800a5e8 <__mdiff+0x88>
 800a61c:	1b33      	subs	r3, r6, r4
 800a61e:	3b15      	subs	r3, #21
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	3415      	adds	r4, #21
 800a626:	3304      	adds	r3, #4
 800a628:	42a6      	cmp	r6, r4
 800a62a:	bf38      	it	cc
 800a62c:	2304      	movcc	r3, #4
 800a62e:	441d      	add	r5, r3
 800a630:	445b      	add	r3, fp
 800a632:	461e      	mov	r6, r3
 800a634:	462c      	mov	r4, r5
 800a636:	4544      	cmp	r4, r8
 800a638:	d30e      	bcc.n	800a658 <__mdiff+0xf8>
 800a63a:	f108 0103 	add.w	r1, r8, #3
 800a63e:	1b49      	subs	r1, r1, r5
 800a640:	f021 0103 	bic.w	r1, r1, #3
 800a644:	3d03      	subs	r5, #3
 800a646:	45a8      	cmp	r8, r5
 800a648:	bf38      	it	cc
 800a64a:	2100      	movcc	r1, #0
 800a64c:	440b      	add	r3, r1
 800a64e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a652:	b191      	cbz	r1, 800a67a <__mdiff+0x11a>
 800a654:	6117      	str	r7, [r2, #16]
 800a656:	e79d      	b.n	800a594 <__mdiff+0x34>
 800a658:	f854 1b04 	ldr.w	r1, [r4], #4
 800a65c:	46e6      	mov	lr, ip
 800a65e:	0c08      	lsrs	r0, r1, #16
 800a660:	fa1c fc81 	uxtah	ip, ip, r1
 800a664:	4471      	add	r1, lr
 800a666:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a66a:	b289      	uxth	r1, r1
 800a66c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a670:	f846 1b04 	str.w	r1, [r6], #4
 800a674:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a678:	e7dd      	b.n	800a636 <__mdiff+0xd6>
 800a67a:	3f01      	subs	r7, #1
 800a67c:	e7e7      	b.n	800a64e <__mdiff+0xee>
 800a67e:	bf00      	nop
 800a680:	0800d07f 	.word	0x0800d07f
 800a684:	0800d090 	.word	0x0800d090

0800a688 <__ulp>:
 800a688:	b082      	sub	sp, #8
 800a68a:	ed8d 0b00 	vstr	d0, [sp]
 800a68e:	9a01      	ldr	r2, [sp, #4]
 800a690:	4b0f      	ldr	r3, [pc, #60]	@ (800a6d0 <__ulp+0x48>)
 800a692:	4013      	ands	r3, r2
 800a694:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	dc08      	bgt.n	800a6ae <__ulp+0x26>
 800a69c:	425b      	negs	r3, r3
 800a69e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a6a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6a6:	da04      	bge.n	800a6b2 <__ulp+0x2a>
 800a6a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6ac:	4113      	asrs	r3, r2
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	e008      	b.n	800a6c4 <__ulp+0x3c>
 800a6b2:	f1a2 0314 	sub.w	r3, r2, #20
 800a6b6:	2b1e      	cmp	r3, #30
 800a6b8:	bfda      	itte	le
 800a6ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a6be:	40da      	lsrle	r2, r3
 800a6c0:	2201      	movgt	r2, #1
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	ec41 0b10 	vmov	d0, r0, r1
 800a6cc:	b002      	add	sp, #8
 800a6ce:	4770      	bx	lr
 800a6d0:	7ff00000 	.word	0x7ff00000

0800a6d4 <__b2d>:
 800a6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d8:	6906      	ldr	r6, [r0, #16]
 800a6da:	f100 0814 	add.w	r8, r0, #20
 800a6de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a6e2:	1f37      	subs	r7, r6, #4
 800a6e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	f7ff fd53 	bl	800a194 <__hi0bits>
 800a6ee:	f1c0 0320 	rsb	r3, r0, #32
 800a6f2:	280a      	cmp	r0, #10
 800a6f4:	600b      	str	r3, [r1, #0]
 800a6f6:	491b      	ldr	r1, [pc, #108]	@ (800a764 <__b2d+0x90>)
 800a6f8:	dc15      	bgt.n	800a726 <__b2d+0x52>
 800a6fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800a6fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800a702:	45b8      	cmp	r8, r7
 800a704:	ea43 0501 	orr.w	r5, r3, r1
 800a708:	bf34      	ite	cc
 800a70a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a70e:	2300      	movcs	r3, #0
 800a710:	3015      	adds	r0, #21
 800a712:	fa02 f000 	lsl.w	r0, r2, r0
 800a716:	fa23 f30c 	lsr.w	r3, r3, ip
 800a71a:	4303      	orrs	r3, r0
 800a71c:	461c      	mov	r4, r3
 800a71e:	ec45 4b10 	vmov	d0, r4, r5
 800a722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a726:	45b8      	cmp	r8, r7
 800a728:	bf3a      	itte	cc
 800a72a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a72e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a732:	2300      	movcs	r3, #0
 800a734:	380b      	subs	r0, #11
 800a736:	d012      	beq.n	800a75e <__b2d+0x8a>
 800a738:	f1c0 0120 	rsb	r1, r0, #32
 800a73c:	fa23 f401 	lsr.w	r4, r3, r1
 800a740:	4082      	lsls	r2, r0
 800a742:	4322      	orrs	r2, r4
 800a744:	4547      	cmp	r7, r8
 800a746:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a74a:	bf8c      	ite	hi
 800a74c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a750:	2200      	movls	r2, #0
 800a752:	4083      	lsls	r3, r0
 800a754:	40ca      	lsrs	r2, r1
 800a756:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a75a:	4313      	orrs	r3, r2
 800a75c:	e7de      	b.n	800a71c <__b2d+0x48>
 800a75e:	ea42 0501 	orr.w	r5, r2, r1
 800a762:	e7db      	b.n	800a71c <__b2d+0x48>
 800a764:	3ff00000 	.word	0x3ff00000

0800a768 <__d2b>:
 800a768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a76c:	460f      	mov	r7, r1
 800a76e:	2101      	movs	r1, #1
 800a770:	ec59 8b10 	vmov	r8, r9, d0
 800a774:	4616      	mov	r6, r2
 800a776:	f7ff fc1b 	bl	8009fb0 <_Balloc>
 800a77a:	4604      	mov	r4, r0
 800a77c:	b930      	cbnz	r0, 800a78c <__d2b+0x24>
 800a77e:	4602      	mov	r2, r0
 800a780:	4b23      	ldr	r3, [pc, #140]	@ (800a810 <__d2b+0xa8>)
 800a782:	4824      	ldr	r0, [pc, #144]	@ (800a814 <__d2b+0xac>)
 800a784:	f240 310f 	movw	r1, #783	@ 0x30f
 800a788:	f7fe fc9c 	bl	80090c4 <__assert_func>
 800a78c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a794:	b10d      	cbz	r5, 800a79a <__d2b+0x32>
 800a796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a79a:	9301      	str	r3, [sp, #4]
 800a79c:	f1b8 0300 	subs.w	r3, r8, #0
 800a7a0:	d023      	beq.n	800a7ea <__d2b+0x82>
 800a7a2:	4668      	mov	r0, sp
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	f7ff fd14 	bl	800a1d2 <__lo0bits>
 800a7aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7ae:	b1d0      	cbz	r0, 800a7e6 <__d2b+0x7e>
 800a7b0:	f1c0 0320 	rsb	r3, r0, #32
 800a7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b8:	430b      	orrs	r3, r1
 800a7ba:	40c2      	lsrs	r2, r0
 800a7bc:	6163      	str	r3, [r4, #20]
 800a7be:	9201      	str	r2, [sp, #4]
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	61a3      	str	r3, [r4, #24]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	bf0c      	ite	eq
 800a7c8:	2201      	moveq	r2, #1
 800a7ca:	2202      	movne	r2, #2
 800a7cc:	6122      	str	r2, [r4, #16]
 800a7ce:	b1a5      	cbz	r5, 800a7fa <__d2b+0x92>
 800a7d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7d4:	4405      	add	r5, r0
 800a7d6:	603d      	str	r5, [r7, #0]
 800a7d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7dc:	6030      	str	r0, [r6, #0]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	b003      	add	sp, #12
 800a7e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7e6:	6161      	str	r1, [r4, #20]
 800a7e8:	e7ea      	b.n	800a7c0 <__d2b+0x58>
 800a7ea:	a801      	add	r0, sp, #4
 800a7ec:	f7ff fcf1 	bl	800a1d2 <__lo0bits>
 800a7f0:	9b01      	ldr	r3, [sp, #4]
 800a7f2:	6163      	str	r3, [r4, #20]
 800a7f4:	3020      	adds	r0, #32
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	e7e8      	b.n	800a7cc <__d2b+0x64>
 800a7fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a802:	6038      	str	r0, [r7, #0]
 800a804:	6918      	ldr	r0, [r3, #16]
 800a806:	f7ff fcc5 	bl	800a194 <__hi0bits>
 800a80a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a80e:	e7e5      	b.n	800a7dc <__d2b+0x74>
 800a810:	0800d07f 	.word	0x0800d07f
 800a814:	0800d090 	.word	0x0800d090

0800a818 <__ratio>:
 800a818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81c:	b085      	sub	sp, #20
 800a81e:	e9cd 1000 	strd	r1, r0, [sp]
 800a822:	a902      	add	r1, sp, #8
 800a824:	f7ff ff56 	bl	800a6d4 <__b2d>
 800a828:	9800      	ldr	r0, [sp, #0]
 800a82a:	a903      	add	r1, sp, #12
 800a82c:	ec55 4b10 	vmov	r4, r5, d0
 800a830:	f7ff ff50 	bl	800a6d4 <__b2d>
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	6919      	ldr	r1, [r3, #16]
 800a838:	9b00      	ldr	r3, [sp, #0]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	1ac9      	subs	r1, r1, r3
 800a83e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a842:	1a9b      	subs	r3, r3, r2
 800a844:	ec5b ab10 	vmov	sl, fp, d0
 800a848:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	bfce      	itee	gt
 800a850:	462a      	movgt	r2, r5
 800a852:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a856:	465a      	movle	r2, fp
 800a858:	462f      	mov	r7, r5
 800a85a:	46d9      	mov	r9, fp
 800a85c:	bfcc      	ite	gt
 800a85e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a862:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a866:	464b      	mov	r3, r9
 800a868:	4652      	mov	r2, sl
 800a86a:	4620      	mov	r0, r4
 800a86c:	4639      	mov	r1, r7
 800a86e:	f7f5 ffed 	bl	800084c <__aeabi_ddiv>
 800a872:	ec41 0b10 	vmov	d0, r0, r1
 800a876:	b005      	add	sp, #20
 800a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a87c <__copybits>:
 800a87c:	3901      	subs	r1, #1
 800a87e:	b570      	push	{r4, r5, r6, lr}
 800a880:	1149      	asrs	r1, r1, #5
 800a882:	6914      	ldr	r4, [r2, #16]
 800a884:	3101      	adds	r1, #1
 800a886:	f102 0314 	add.w	r3, r2, #20
 800a88a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a88e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a892:	1f05      	subs	r5, r0, #4
 800a894:	42a3      	cmp	r3, r4
 800a896:	d30c      	bcc.n	800a8b2 <__copybits+0x36>
 800a898:	1aa3      	subs	r3, r4, r2
 800a89a:	3b11      	subs	r3, #17
 800a89c:	f023 0303 	bic.w	r3, r3, #3
 800a8a0:	3211      	adds	r2, #17
 800a8a2:	42a2      	cmp	r2, r4
 800a8a4:	bf88      	it	hi
 800a8a6:	2300      	movhi	r3, #0
 800a8a8:	4418      	add	r0, r3
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	4288      	cmp	r0, r1
 800a8ae:	d305      	bcc.n	800a8bc <__copybits+0x40>
 800a8b0:	bd70      	pop	{r4, r5, r6, pc}
 800a8b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8ba:	e7eb      	b.n	800a894 <__copybits+0x18>
 800a8bc:	f840 3b04 	str.w	r3, [r0], #4
 800a8c0:	e7f4      	b.n	800a8ac <__copybits+0x30>

0800a8c2 <__any_on>:
 800a8c2:	f100 0214 	add.w	r2, r0, #20
 800a8c6:	6900      	ldr	r0, [r0, #16]
 800a8c8:	114b      	asrs	r3, r1, #5
 800a8ca:	4298      	cmp	r0, r3
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	db11      	blt.n	800a8f4 <__any_on+0x32>
 800a8d0:	dd0a      	ble.n	800a8e8 <__any_on+0x26>
 800a8d2:	f011 011f 	ands.w	r1, r1, #31
 800a8d6:	d007      	beq.n	800a8e8 <__any_on+0x26>
 800a8d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8dc:	fa24 f001 	lsr.w	r0, r4, r1
 800a8e0:	fa00 f101 	lsl.w	r1, r0, r1
 800a8e4:	428c      	cmp	r4, r1
 800a8e6:	d10b      	bne.n	800a900 <__any_on+0x3e>
 800a8e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d803      	bhi.n	800a8f8 <__any_on+0x36>
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	bd10      	pop	{r4, pc}
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	e7f7      	b.n	800a8e8 <__any_on+0x26>
 800a8f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8fc:	2900      	cmp	r1, #0
 800a8fe:	d0f5      	beq.n	800a8ec <__any_on+0x2a>
 800a900:	2001      	movs	r0, #1
 800a902:	e7f6      	b.n	800a8f2 <__any_on+0x30>

0800a904 <sulp>:
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	4604      	mov	r4, r0
 800a908:	460d      	mov	r5, r1
 800a90a:	ec45 4b10 	vmov	d0, r4, r5
 800a90e:	4616      	mov	r6, r2
 800a910:	f7ff feba 	bl	800a688 <__ulp>
 800a914:	ec51 0b10 	vmov	r0, r1, d0
 800a918:	b17e      	cbz	r6, 800a93a <sulp+0x36>
 800a91a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a91e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a922:	2b00      	cmp	r3, #0
 800a924:	dd09      	ble.n	800a93a <sulp+0x36>
 800a926:	051b      	lsls	r3, r3, #20
 800a928:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a92c:	2400      	movs	r4, #0
 800a92e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a932:	4622      	mov	r2, r4
 800a934:	462b      	mov	r3, r5
 800a936:	f7f5 fe5f 	bl	80005f8 <__aeabi_dmul>
 800a93a:	ec41 0b10 	vmov	d0, r0, r1
 800a93e:	bd70      	pop	{r4, r5, r6, pc}

0800a940 <_strtod_l>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	b09f      	sub	sp, #124	@ 0x7c
 800a946:	460c      	mov	r4, r1
 800a948:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a94a:	2200      	movs	r2, #0
 800a94c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a94e:	9005      	str	r0, [sp, #20]
 800a950:	f04f 0a00 	mov.w	sl, #0
 800a954:	f04f 0b00 	mov.w	fp, #0
 800a958:	460a      	mov	r2, r1
 800a95a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a95c:	7811      	ldrb	r1, [r2, #0]
 800a95e:	292b      	cmp	r1, #43	@ 0x2b
 800a960:	d04a      	beq.n	800a9f8 <_strtod_l+0xb8>
 800a962:	d838      	bhi.n	800a9d6 <_strtod_l+0x96>
 800a964:	290d      	cmp	r1, #13
 800a966:	d832      	bhi.n	800a9ce <_strtod_l+0x8e>
 800a968:	2908      	cmp	r1, #8
 800a96a:	d832      	bhi.n	800a9d2 <_strtod_l+0x92>
 800a96c:	2900      	cmp	r1, #0
 800a96e:	d03b      	beq.n	800a9e8 <_strtod_l+0xa8>
 800a970:	2200      	movs	r2, #0
 800a972:	920e      	str	r2, [sp, #56]	@ 0x38
 800a974:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a976:	782a      	ldrb	r2, [r5, #0]
 800a978:	2a30      	cmp	r2, #48	@ 0x30
 800a97a:	f040 80b2 	bne.w	800aae2 <_strtod_l+0x1a2>
 800a97e:	786a      	ldrb	r2, [r5, #1]
 800a980:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a984:	2a58      	cmp	r2, #88	@ 0x58
 800a986:	d16e      	bne.n	800aa66 <_strtod_l+0x126>
 800a988:	9302      	str	r3, [sp, #8]
 800a98a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	4a8f      	ldr	r2, [pc, #572]	@ (800abd0 <_strtod_l+0x290>)
 800a994:	9805      	ldr	r0, [sp, #20]
 800a996:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a998:	a919      	add	r1, sp, #100	@ 0x64
 800a99a:	f001 fac7 	bl	800bf2c <__gethex>
 800a99e:	f010 060f 	ands.w	r6, r0, #15
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	d005      	beq.n	800a9b2 <_strtod_l+0x72>
 800a9a6:	2e06      	cmp	r6, #6
 800a9a8:	d128      	bne.n	800a9fc <_strtod_l+0xbc>
 800a9aa:	3501      	adds	r5, #1
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800a9b0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f040 858e 	bne.w	800b4d6 <_strtod_l+0xb96>
 800a9ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9bc:	b1cb      	cbz	r3, 800a9f2 <_strtod_l+0xb2>
 800a9be:	4652      	mov	r2, sl
 800a9c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a9c4:	ec43 2b10 	vmov	d0, r2, r3
 800a9c8:	b01f      	add	sp, #124	@ 0x7c
 800a9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ce:	2920      	cmp	r1, #32
 800a9d0:	d1ce      	bne.n	800a970 <_strtod_l+0x30>
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	e7c1      	b.n	800a95a <_strtod_l+0x1a>
 800a9d6:	292d      	cmp	r1, #45	@ 0x2d
 800a9d8:	d1ca      	bne.n	800a970 <_strtod_l+0x30>
 800a9da:	2101      	movs	r1, #1
 800a9dc:	910e      	str	r1, [sp, #56]	@ 0x38
 800a9de:	1c51      	adds	r1, r2, #1
 800a9e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a9e2:	7852      	ldrb	r2, [r2, #1]
 800a9e4:	2a00      	cmp	r2, #0
 800a9e6:	d1c5      	bne.n	800a974 <_strtod_l+0x34>
 800a9e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f040 8570 	bne.w	800b4d2 <_strtod_l+0xb92>
 800a9f2:	4652      	mov	r2, sl
 800a9f4:	465b      	mov	r3, fp
 800a9f6:	e7e5      	b.n	800a9c4 <_strtod_l+0x84>
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	e7ef      	b.n	800a9dc <_strtod_l+0x9c>
 800a9fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a9fe:	b13a      	cbz	r2, 800aa10 <_strtod_l+0xd0>
 800aa00:	2135      	movs	r1, #53	@ 0x35
 800aa02:	a81c      	add	r0, sp, #112	@ 0x70
 800aa04:	f7ff ff3a 	bl	800a87c <__copybits>
 800aa08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa0a:	9805      	ldr	r0, [sp, #20]
 800aa0c:	f7ff fb10 	bl	800a030 <_Bfree>
 800aa10:	3e01      	subs	r6, #1
 800aa12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa14:	2e04      	cmp	r6, #4
 800aa16:	d806      	bhi.n	800aa26 <_strtod_l+0xe6>
 800aa18:	e8df f006 	tbb	[pc, r6]
 800aa1c:	201d0314 	.word	0x201d0314
 800aa20:	14          	.byte	0x14
 800aa21:	00          	.byte	0x00
 800aa22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aa26:	05e1      	lsls	r1, r4, #23
 800aa28:	bf48      	it	mi
 800aa2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa32:	0d1b      	lsrs	r3, r3, #20
 800aa34:	051b      	lsls	r3, r3, #20
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1bb      	bne.n	800a9b2 <_strtod_l+0x72>
 800aa3a:	f7fe fb01 	bl	8009040 <__errno>
 800aa3e:	2322      	movs	r3, #34	@ 0x22
 800aa40:	6003      	str	r3, [r0, #0]
 800aa42:	e7b6      	b.n	800a9b2 <_strtod_l+0x72>
 800aa44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aa48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aa4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aa50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa54:	e7e7      	b.n	800aa26 <_strtod_l+0xe6>
 800aa56:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800abd8 <_strtod_l+0x298>
 800aa5a:	e7e4      	b.n	800aa26 <_strtod_l+0xe6>
 800aa5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aa60:	f04f 3aff 	mov.w	sl, #4294967295
 800aa64:	e7df      	b.n	800aa26 <_strtod_l+0xe6>
 800aa66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa6c:	785b      	ldrb	r3, [r3, #1]
 800aa6e:	2b30      	cmp	r3, #48	@ 0x30
 800aa70:	d0f9      	beq.n	800aa66 <_strtod_l+0x126>
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d09d      	beq.n	800a9b2 <_strtod_l+0x72>
 800aa76:	2301      	movs	r3, #1
 800aa78:	2700      	movs	r7, #0
 800aa7a:	9308      	str	r3, [sp, #32]
 800aa7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa7e:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa80:	970b      	str	r7, [sp, #44]	@ 0x2c
 800aa82:	46b9      	mov	r9, r7
 800aa84:	220a      	movs	r2, #10
 800aa86:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aa88:	7805      	ldrb	r5, [r0, #0]
 800aa8a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aa8e:	b2d9      	uxtb	r1, r3
 800aa90:	2909      	cmp	r1, #9
 800aa92:	d928      	bls.n	800aae6 <_strtod_l+0x1a6>
 800aa94:	494f      	ldr	r1, [pc, #316]	@ (800abd4 <_strtod_l+0x294>)
 800aa96:	2201      	movs	r2, #1
 800aa98:	f7fe f9f0 	bl	8008e7c <strncmp>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d032      	beq.n	800ab06 <_strtod_l+0x1c6>
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	462a      	mov	r2, r5
 800aaa4:	900a      	str	r0, [sp, #40]	@ 0x28
 800aaa6:	464d      	mov	r5, r9
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2a65      	cmp	r2, #101	@ 0x65
 800aaac:	d001      	beq.n	800aab2 <_strtod_l+0x172>
 800aaae:	2a45      	cmp	r2, #69	@ 0x45
 800aab0:	d114      	bne.n	800aadc <_strtod_l+0x19c>
 800aab2:	b91d      	cbnz	r5, 800aabc <_strtod_l+0x17c>
 800aab4:	9a08      	ldr	r2, [sp, #32]
 800aab6:	4302      	orrs	r2, r0
 800aab8:	d096      	beq.n	800a9e8 <_strtod_l+0xa8>
 800aaba:	2500      	movs	r5, #0
 800aabc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aabe:	1c62      	adds	r2, r4, #1
 800aac0:	9219      	str	r2, [sp, #100]	@ 0x64
 800aac2:	7862      	ldrb	r2, [r4, #1]
 800aac4:	2a2b      	cmp	r2, #43	@ 0x2b
 800aac6:	d07a      	beq.n	800abbe <_strtod_l+0x27e>
 800aac8:	2a2d      	cmp	r2, #45	@ 0x2d
 800aaca:	d07e      	beq.n	800abca <_strtod_l+0x28a>
 800aacc:	f04f 0c00 	mov.w	ip, #0
 800aad0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aad4:	2909      	cmp	r1, #9
 800aad6:	f240 8085 	bls.w	800abe4 <_strtod_l+0x2a4>
 800aada:	9419      	str	r4, [sp, #100]	@ 0x64
 800aadc:	f04f 0800 	mov.w	r8, #0
 800aae0:	e0a5      	b.n	800ac2e <_strtod_l+0x2ee>
 800aae2:	2300      	movs	r3, #0
 800aae4:	e7c8      	b.n	800aa78 <_strtod_l+0x138>
 800aae6:	f1b9 0f08 	cmp.w	r9, #8
 800aaea:	bfd8      	it	le
 800aaec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800aaee:	f100 0001 	add.w	r0, r0, #1
 800aaf2:	bfda      	itte	le
 800aaf4:	fb02 3301 	mlale	r3, r2, r1, r3
 800aaf8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800aafa:	fb02 3707 	mlagt	r7, r2, r7, r3
 800aafe:	f109 0901 	add.w	r9, r9, #1
 800ab02:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab04:	e7bf      	b.n	800aa86 <_strtod_l+0x146>
 800ab06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab0c:	785a      	ldrb	r2, [r3, #1]
 800ab0e:	f1b9 0f00 	cmp.w	r9, #0
 800ab12:	d03b      	beq.n	800ab8c <_strtod_l+0x24c>
 800ab14:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab16:	464d      	mov	r5, r9
 800ab18:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab1c:	2b09      	cmp	r3, #9
 800ab1e:	d912      	bls.n	800ab46 <_strtod_l+0x206>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e7c2      	b.n	800aaaa <_strtod_l+0x16a>
 800ab24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab2a:	785a      	ldrb	r2, [r3, #1]
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	2a30      	cmp	r2, #48	@ 0x30
 800ab30:	d0f8      	beq.n	800ab24 <_strtod_l+0x1e4>
 800ab32:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ab36:	2b08      	cmp	r3, #8
 800ab38:	f200 84d2 	bhi.w	800b4e0 <_strtod_l+0xba0>
 800ab3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab3e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab40:	2000      	movs	r0, #0
 800ab42:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab44:	4605      	mov	r5, r0
 800ab46:	3a30      	subs	r2, #48	@ 0x30
 800ab48:	f100 0301 	add.w	r3, r0, #1
 800ab4c:	d018      	beq.n	800ab80 <_strtod_l+0x240>
 800ab4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab50:	4419      	add	r1, r3
 800ab52:	910a      	str	r1, [sp, #40]	@ 0x28
 800ab54:	462e      	mov	r6, r5
 800ab56:	f04f 0e0a 	mov.w	lr, #10
 800ab5a:	1c71      	adds	r1, r6, #1
 800ab5c:	eba1 0c05 	sub.w	ip, r1, r5
 800ab60:	4563      	cmp	r3, ip
 800ab62:	dc15      	bgt.n	800ab90 <_strtod_l+0x250>
 800ab64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ab68:	182b      	adds	r3, r5, r0
 800ab6a:	2b08      	cmp	r3, #8
 800ab6c:	f105 0501 	add.w	r5, r5, #1
 800ab70:	4405      	add	r5, r0
 800ab72:	dc1a      	bgt.n	800abaa <_strtod_l+0x26a>
 800ab74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab76:	230a      	movs	r3, #10
 800ab78:	fb03 2301 	mla	r3, r3, r1, r2
 800ab7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab82:	1c51      	adds	r1, r2, #1
 800ab84:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab86:	7852      	ldrb	r2, [r2, #1]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	e7c5      	b.n	800ab18 <_strtod_l+0x1d8>
 800ab8c:	4648      	mov	r0, r9
 800ab8e:	e7ce      	b.n	800ab2e <_strtod_l+0x1ee>
 800ab90:	2e08      	cmp	r6, #8
 800ab92:	dc05      	bgt.n	800aba0 <_strtod_l+0x260>
 800ab94:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ab96:	fb0e f606 	mul.w	r6, lr, r6
 800ab9a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ab9c:	460e      	mov	r6, r1
 800ab9e:	e7dc      	b.n	800ab5a <_strtod_l+0x21a>
 800aba0:	2910      	cmp	r1, #16
 800aba2:	bfd8      	it	le
 800aba4:	fb0e f707 	mulle.w	r7, lr, r7
 800aba8:	e7f8      	b.n	800ab9c <_strtod_l+0x25c>
 800abaa:	2b0f      	cmp	r3, #15
 800abac:	bfdc      	itt	le
 800abae:	230a      	movle	r3, #10
 800abb0:	fb03 2707 	mlale	r7, r3, r7, r2
 800abb4:	e7e3      	b.n	800ab7e <_strtod_l+0x23e>
 800abb6:	2300      	movs	r3, #0
 800abb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800abba:	2301      	movs	r3, #1
 800abbc:	e77a      	b.n	800aab4 <_strtod_l+0x174>
 800abbe:	f04f 0c00 	mov.w	ip, #0
 800abc2:	1ca2      	adds	r2, r4, #2
 800abc4:	9219      	str	r2, [sp, #100]	@ 0x64
 800abc6:	78a2      	ldrb	r2, [r4, #2]
 800abc8:	e782      	b.n	800aad0 <_strtod_l+0x190>
 800abca:	f04f 0c01 	mov.w	ip, #1
 800abce:	e7f8      	b.n	800abc2 <_strtod_l+0x282>
 800abd0:	0800d274 	.word	0x0800d274
 800abd4:	0800d0e9 	.word	0x0800d0e9
 800abd8:	7ff00000 	.word	0x7ff00000
 800abdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abde:	1c51      	adds	r1, r2, #1
 800abe0:	9119      	str	r1, [sp, #100]	@ 0x64
 800abe2:	7852      	ldrb	r2, [r2, #1]
 800abe4:	2a30      	cmp	r2, #48	@ 0x30
 800abe6:	d0f9      	beq.n	800abdc <_strtod_l+0x29c>
 800abe8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800abec:	2908      	cmp	r1, #8
 800abee:	f63f af75 	bhi.w	800aadc <_strtod_l+0x19c>
 800abf2:	3a30      	subs	r2, #48	@ 0x30
 800abf4:	9209      	str	r2, [sp, #36]	@ 0x24
 800abf6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abf8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800abfa:	f04f 080a 	mov.w	r8, #10
 800abfe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac00:	1c56      	adds	r6, r2, #1
 800ac02:	9619      	str	r6, [sp, #100]	@ 0x64
 800ac04:	7852      	ldrb	r2, [r2, #1]
 800ac06:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ac0a:	f1be 0f09 	cmp.w	lr, #9
 800ac0e:	d939      	bls.n	800ac84 <_strtod_l+0x344>
 800ac10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac12:	1a76      	subs	r6, r6, r1
 800ac14:	2e08      	cmp	r6, #8
 800ac16:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac1a:	dc03      	bgt.n	800ac24 <_strtod_l+0x2e4>
 800ac1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac1e:	4588      	cmp	r8, r1
 800ac20:	bfa8      	it	ge
 800ac22:	4688      	movge	r8, r1
 800ac24:	f1bc 0f00 	cmp.w	ip, #0
 800ac28:	d001      	beq.n	800ac2e <_strtod_l+0x2ee>
 800ac2a:	f1c8 0800 	rsb	r8, r8, #0
 800ac2e:	2d00      	cmp	r5, #0
 800ac30:	d14e      	bne.n	800acd0 <_strtod_l+0x390>
 800ac32:	9908      	ldr	r1, [sp, #32]
 800ac34:	4308      	orrs	r0, r1
 800ac36:	f47f aebc 	bne.w	800a9b2 <_strtod_l+0x72>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f47f aed4 	bne.w	800a9e8 <_strtod_l+0xa8>
 800ac40:	2a69      	cmp	r2, #105	@ 0x69
 800ac42:	d028      	beq.n	800ac96 <_strtod_l+0x356>
 800ac44:	dc25      	bgt.n	800ac92 <_strtod_l+0x352>
 800ac46:	2a49      	cmp	r2, #73	@ 0x49
 800ac48:	d025      	beq.n	800ac96 <_strtod_l+0x356>
 800ac4a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ac4c:	f47f aecc 	bne.w	800a9e8 <_strtod_l+0xa8>
 800ac50:	499a      	ldr	r1, [pc, #616]	@ (800aebc <_strtod_l+0x57c>)
 800ac52:	a819      	add	r0, sp, #100	@ 0x64
 800ac54:	f001 fb8c 	bl	800c370 <__match>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	f43f aec5 	beq.w	800a9e8 <_strtod_l+0xa8>
 800ac5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	2b28      	cmp	r3, #40	@ 0x28
 800ac64:	d12e      	bne.n	800acc4 <_strtod_l+0x384>
 800ac66:	4996      	ldr	r1, [pc, #600]	@ (800aec0 <_strtod_l+0x580>)
 800ac68:	aa1c      	add	r2, sp, #112	@ 0x70
 800ac6a:	a819      	add	r0, sp, #100	@ 0x64
 800ac6c:	f001 fb94 	bl	800c398 <__hexnan>
 800ac70:	2805      	cmp	r0, #5
 800ac72:	d127      	bne.n	800acc4 <_strtod_l+0x384>
 800ac74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac76:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ac7a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ac7e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ac82:	e696      	b.n	800a9b2 <_strtod_l+0x72>
 800ac84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac86:	fb08 2101 	mla	r1, r8, r1, r2
 800ac8a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ac8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac90:	e7b5      	b.n	800abfe <_strtod_l+0x2be>
 800ac92:	2a6e      	cmp	r2, #110	@ 0x6e
 800ac94:	e7da      	b.n	800ac4c <_strtod_l+0x30c>
 800ac96:	498b      	ldr	r1, [pc, #556]	@ (800aec4 <_strtod_l+0x584>)
 800ac98:	a819      	add	r0, sp, #100	@ 0x64
 800ac9a:	f001 fb69 	bl	800c370 <__match>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f43f aea2 	beq.w	800a9e8 <_strtod_l+0xa8>
 800aca4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aca6:	4988      	ldr	r1, [pc, #544]	@ (800aec8 <_strtod_l+0x588>)
 800aca8:	3b01      	subs	r3, #1
 800acaa:	a819      	add	r0, sp, #100	@ 0x64
 800acac:	9319      	str	r3, [sp, #100]	@ 0x64
 800acae:	f001 fb5f 	bl	800c370 <__match>
 800acb2:	b910      	cbnz	r0, 800acba <_strtod_l+0x37a>
 800acb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acb6:	3301      	adds	r3, #1
 800acb8:	9319      	str	r3, [sp, #100]	@ 0x64
 800acba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800aed8 <_strtod_l+0x598>
 800acbe:	f04f 0a00 	mov.w	sl, #0
 800acc2:	e676      	b.n	800a9b2 <_strtod_l+0x72>
 800acc4:	4881      	ldr	r0, [pc, #516]	@ (800aecc <_strtod_l+0x58c>)
 800acc6:	f001 f8a7 	bl	800be18 <nan>
 800acca:	ec5b ab10 	vmov	sl, fp, d0
 800acce:	e670      	b.n	800a9b2 <_strtod_l+0x72>
 800acd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acd2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800acd4:	eba8 0303 	sub.w	r3, r8, r3
 800acd8:	f1b9 0f00 	cmp.w	r9, #0
 800acdc:	bf08      	it	eq
 800acde:	46a9      	moveq	r9, r5
 800ace0:	2d10      	cmp	r5, #16
 800ace2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ace4:	462c      	mov	r4, r5
 800ace6:	bfa8      	it	ge
 800ace8:	2410      	movge	r4, #16
 800acea:	f7f5 fc0b 	bl	8000504 <__aeabi_ui2d>
 800acee:	2d09      	cmp	r5, #9
 800acf0:	4682      	mov	sl, r0
 800acf2:	468b      	mov	fp, r1
 800acf4:	dc13      	bgt.n	800ad1e <_strtod_l+0x3de>
 800acf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f43f ae5a 	beq.w	800a9b2 <_strtod_l+0x72>
 800acfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad00:	dd78      	ble.n	800adf4 <_strtod_l+0x4b4>
 800ad02:	2b16      	cmp	r3, #22
 800ad04:	dc5f      	bgt.n	800adc6 <_strtod_l+0x486>
 800ad06:	4972      	ldr	r1, [pc, #456]	@ (800aed0 <_strtod_l+0x590>)
 800ad08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad10:	4652      	mov	r2, sl
 800ad12:	465b      	mov	r3, fp
 800ad14:	f7f5 fc70 	bl	80005f8 <__aeabi_dmul>
 800ad18:	4682      	mov	sl, r0
 800ad1a:	468b      	mov	fp, r1
 800ad1c:	e649      	b.n	800a9b2 <_strtod_l+0x72>
 800ad1e:	4b6c      	ldr	r3, [pc, #432]	@ (800aed0 <_strtod_l+0x590>)
 800ad20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ad28:	f7f5 fc66 	bl	80005f8 <__aeabi_dmul>
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	4638      	mov	r0, r7
 800ad30:	468b      	mov	fp, r1
 800ad32:	f7f5 fbe7 	bl	8000504 <__aeabi_ui2d>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4650      	mov	r0, sl
 800ad3c:	4659      	mov	r1, fp
 800ad3e:	f7f5 faa5 	bl	800028c <__adddf3>
 800ad42:	2d0f      	cmp	r5, #15
 800ad44:	4682      	mov	sl, r0
 800ad46:	468b      	mov	fp, r1
 800ad48:	ddd5      	ble.n	800acf6 <_strtod_l+0x3b6>
 800ad4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad4c:	1b2c      	subs	r4, r5, r4
 800ad4e:	441c      	add	r4, r3
 800ad50:	2c00      	cmp	r4, #0
 800ad52:	f340 8093 	ble.w	800ae7c <_strtod_l+0x53c>
 800ad56:	f014 030f 	ands.w	r3, r4, #15
 800ad5a:	d00a      	beq.n	800ad72 <_strtod_l+0x432>
 800ad5c:	495c      	ldr	r1, [pc, #368]	@ (800aed0 <_strtod_l+0x590>)
 800ad5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad62:	4652      	mov	r2, sl
 800ad64:	465b      	mov	r3, fp
 800ad66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad6a:	f7f5 fc45 	bl	80005f8 <__aeabi_dmul>
 800ad6e:	4682      	mov	sl, r0
 800ad70:	468b      	mov	fp, r1
 800ad72:	f034 040f 	bics.w	r4, r4, #15
 800ad76:	d073      	beq.n	800ae60 <_strtod_l+0x520>
 800ad78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ad7c:	dd49      	ble.n	800ae12 <_strtod_l+0x4d2>
 800ad7e:	2400      	movs	r4, #0
 800ad80:	46a0      	mov	r8, r4
 800ad82:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ad84:	46a1      	mov	r9, r4
 800ad86:	9a05      	ldr	r2, [sp, #20]
 800ad88:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800aed8 <_strtod_l+0x598>
 800ad8c:	2322      	movs	r3, #34	@ 0x22
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	f04f 0a00 	mov.w	sl, #0
 800ad94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f43f ae0b 	beq.w	800a9b2 <_strtod_l+0x72>
 800ad9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad9e:	9805      	ldr	r0, [sp, #20]
 800ada0:	f7ff f946 	bl	800a030 <_Bfree>
 800ada4:	9805      	ldr	r0, [sp, #20]
 800ada6:	4649      	mov	r1, r9
 800ada8:	f7ff f942 	bl	800a030 <_Bfree>
 800adac:	9805      	ldr	r0, [sp, #20]
 800adae:	4641      	mov	r1, r8
 800adb0:	f7ff f93e 	bl	800a030 <_Bfree>
 800adb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adb6:	9805      	ldr	r0, [sp, #20]
 800adb8:	f7ff f93a 	bl	800a030 <_Bfree>
 800adbc:	9805      	ldr	r0, [sp, #20]
 800adbe:	4621      	mov	r1, r4
 800adc0:	f7ff f936 	bl	800a030 <_Bfree>
 800adc4:	e5f5      	b.n	800a9b2 <_strtod_l+0x72>
 800adc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800adcc:	4293      	cmp	r3, r2
 800adce:	dbbc      	blt.n	800ad4a <_strtod_l+0x40a>
 800add0:	4c3f      	ldr	r4, [pc, #252]	@ (800aed0 <_strtod_l+0x590>)
 800add2:	f1c5 050f 	rsb	r5, r5, #15
 800add6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800adda:	4652      	mov	r2, sl
 800addc:	465b      	mov	r3, fp
 800adde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ade2:	f7f5 fc09 	bl	80005f8 <__aeabi_dmul>
 800ade6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade8:	1b5d      	subs	r5, r3, r5
 800adea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800adee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800adf2:	e78f      	b.n	800ad14 <_strtod_l+0x3d4>
 800adf4:	3316      	adds	r3, #22
 800adf6:	dba8      	blt.n	800ad4a <_strtod_l+0x40a>
 800adf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adfa:	eba3 0808 	sub.w	r8, r3, r8
 800adfe:	4b34      	ldr	r3, [pc, #208]	@ (800aed0 <_strtod_l+0x590>)
 800ae00:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ae04:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ae08:	4650      	mov	r0, sl
 800ae0a:	4659      	mov	r1, fp
 800ae0c:	f7f5 fd1e 	bl	800084c <__aeabi_ddiv>
 800ae10:	e782      	b.n	800ad18 <_strtod_l+0x3d8>
 800ae12:	2300      	movs	r3, #0
 800ae14:	4f2f      	ldr	r7, [pc, #188]	@ (800aed4 <_strtod_l+0x594>)
 800ae16:	1124      	asrs	r4, r4, #4
 800ae18:	4650      	mov	r0, sl
 800ae1a:	4659      	mov	r1, fp
 800ae1c:	461e      	mov	r6, r3
 800ae1e:	2c01      	cmp	r4, #1
 800ae20:	dc21      	bgt.n	800ae66 <_strtod_l+0x526>
 800ae22:	b10b      	cbz	r3, 800ae28 <_strtod_l+0x4e8>
 800ae24:	4682      	mov	sl, r0
 800ae26:	468b      	mov	fp, r1
 800ae28:	492a      	ldr	r1, [pc, #168]	@ (800aed4 <_strtod_l+0x594>)
 800ae2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae32:	4652      	mov	r2, sl
 800ae34:	465b      	mov	r3, fp
 800ae36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae3a:	f7f5 fbdd 	bl	80005f8 <__aeabi_dmul>
 800ae3e:	4b26      	ldr	r3, [pc, #152]	@ (800aed8 <_strtod_l+0x598>)
 800ae40:	460a      	mov	r2, r1
 800ae42:	400b      	ands	r3, r1
 800ae44:	4925      	ldr	r1, [pc, #148]	@ (800aedc <_strtod_l+0x59c>)
 800ae46:	428b      	cmp	r3, r1
 800ae48:	4682      	mov	sl, r0
 800ae4a:	d898      	bhi.n	800ad7e <_strtod_l+0x43e>
 800ae4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ae50:	428b      	cmp	r3, r1
 800ae52:	bf86      	itte	hi
 800ae54:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800aee0 <_strtod_l+0x5a0>
 800ae58:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ae60:	2300      	movs	r3, #0
 800ae62:	9308      	str	r3, [sp, #32]
 800ae64:	e076      	b.n	800af54 <_strtod_l+0x614>
 800ae66:	07e2      	lsls	r2, r4, #31
 800ae68:	d504      	bpl.n	800ae74 <_strtod_l+0x534>
 800ae6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae6e:	f7f5 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ae72:	2301      	movs	r3, #1
 800ae74:	3601      	adds	r6, #1
 800ae76:	1064      	asrs	r4, r4, #1
 800ae78:	3708      	adds	r7, #8
 800ae7a:	e7d0      	b.n	800ae1e <_strtod_l+0x4de>
 800ae7c:	d0f0      	beq.n	800ae60 <_strtod_l+0x520>
 800ae7e:	4264      	negs	r4, r4
 800ae80:	f014 020f 	ands.w	r2, r4, #15
 800ae84:	d00a      	beq.n	800ae9c <_strtod_l+0x55c>
 800ae86:	4b12      	ldr	r3, [pc, #72]	@ (800aed0 <_strtod_l+0x590>)
 800ae88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae8c:	4650      	mov	r0, sl
 800ae8e:	4659      	mov	r1, fp
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	f7f5 fcda 	bl	800084c <__aeabi_ddiv>
 800ae98:	4682      	mov	sl, r0
 800ae9a:	468b      	mov	fp, r1
 800ae9c:	1124      	asrs	r4, r4, #4
 800ae9e:	d0df      	beq.n	800ae60 <_strtod_l+0x520>
 800aea0:	2c1f      	cmp	r4, #31
 800aea2:	dd1f      	ble.n	800aee4 <_strtod_l+0x5a4>
 800aea4:	2400      	movs	r4, #0
 800aea6:	46a0      	mov	r8, r4
 800aea8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aeaa:	46a1      	mov	r9, r4
 800aeac:	9a05      	ldr	r2, [sp, #20]
 800aeae:	2322      	movs	r3, #34	@ 0x22
 800aeb0:	f04f 0a00 	mov.w	sl, #0
 800aeb4:	f04f 0b00 	mov.w	fp, #0
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	e76b      	b.n	800ad94 <_strtod_l+0x454>
 800aebc:	0800cf41 	.word	0x0800cf41
 800aec0:	0800d260 	.word	0x0800d260
 800aec4:	0800cf39 	.word	0x0800cf39
 800aec8:	0800d01d 	.word	0x0800d01d
 800aecc:	0800d019 	.word	0x0800d019
 800aed0:	0800d198 	.word	0x0800d198
 800aed4:	0800d170 	.word	0x0800d170
 800aed8:	7ff00000 	.word	0x7ff00000
 800aedc:	7ca00000 	.word	0x7ca00000
 800aee0:	7fefffff 	.word	0x7fefffff
 800aee4:	f014 0310 	ands.w	r3, r4, #16
 800aee8:	bf18      	it	ne
 800aeea:	236a      	movne	r3, #106	@ 0x6a
 800aeec:	4ea9      	ldr	r6, [pc, #676]	@ (800b194 <_strtod_l+0x854>)
 800aeee:	9308      	str	r3, [sp, #32]
 800aef0:	4650      	mov	r0, sl
 800aef2:	4659      	mov	r1, fp
 800aef4:	2300      	movs	r3, #0
 800aef6:	07e7      	lsls	r7, r4, #31
 800aef8:	d504      	bpl.n	800af04 <_strtod_l+0x5c4>
 800aefa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aefe:	f7f5 fb7b 	bl	80005f8 <__aeabi_dmul>
 800af02:	2301      	movs	r3, #1
 800af04:	1064      	asrs	r4, r4, #1
 800af06:	f106 0608 	add.w	r6, r6, #8
 800af0a:	d1f4      	bne.n	800aef6 <_strtod_l+0x5b6>
 800af0c:	b10b      	cbz	r3, 800af12 <_strtod_l+0x5d2>
 800af0e:	4682      	mov	sl, r0
 800af10:	468b      	mov	fp, r1
 800af12:	9b08      	ldr	r3, [sp, #32]
 800af14:	b1b3      	cbz	r3, 800af44 <_strtod_l+0x604>
 800af16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af1e:	2b00      	cmp	r3, #0
 800af20:	4659      	mov	r1, fp
 800af22:	dd0f      	ble.n	800af44 <_strtod_l+0x604>
 800af24:	2b1f      	cmp	r3, #31
 800af26:	dd56      	ble.n	800afd6 <_strtod_l+0x696>
 800af28:	2b34      	cmp	r3, #52	@ 0x34
 800af2a:	bfde      	ittt	le
 800af2c:	f04f 33ff 	movle.w	r3, #4294967295
 800af30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800af34:	4093      	lslle	r3, r2
 800af36:	f04f 0a00 	mov.w	sl, #0
 800af3a:	bfcc      	ite	gt
 800af3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800af40:	ea03 0b01 	andle.w	fp, r3, r1
 800af44:	2200      	movs	r2, #0
 800af46:	2300      	movs	r3, #0
 800af48:	4650      	mov	r0, sl
 800af4a:	4659      	mov	r1, fp
 800af4c:	f7f5 fdbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800af50:	2800      	cmp	r0, #0
 800af52:	d1a7      	bne.n	800aea4 <_strtod_l+0x564>
 800af54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af5a:	9805      	ldr	r0, [sp, #20]
 800af5c:	462b      	mov	r3, r5
 800af5e:	464a      	mov	r2, r9
 800af60:	f7ff f8ce 	bl	800a100 <__s2b>
 800af64:	900b      	str	r0, [sp, #44]	@ 0x2c
 800af66:	2800      	cmp	r0, #0
 800af68:	f43f af09 	beq.w	800ad7e <_strtod_l+0x43e>
 800af6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af70:	2a00      	cmp	r2, #0
 800af72:	eba3 0308 	sub.w	r3, r3, r8
 800af76:	bfa8      	it	ge
 800af78:	2300      	movge	r3, #0
 800af7a:	9312      	str	r3, [sp, #72]	@ 0x48
 800af7c:	2400      	movs	r4, #0
 800af7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af82:	9316      	str	r3, [sp, #88]	@ 0x58
 800af84:	46a0      	mov	r8, r4
 800af86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af88:	9805      	ldr	r0, [sp, #20]
 800af8a:	6859      	ldr	r1, [r3, #4]
 800af8c:	f7ff f810 	bl	8009fb0 <_Balloc>
 800af90:	4681      	mov	r9, r0
 800af92:	2800      	cmp	r0, #0
 800af94:	f43f aef7 	beq.w	800ad86 <_strtod_l+0x446>
 800af98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af9a:	691a      	ldr	r2, [r3, #16]
 800af9c:	3202      	adds	r2, #2
 800af9e:	f103 010c 	add.w	r1, r3, #12
 800afa2:	0092      	lsls	r2, r2, #2
 800afa4:	300c      	adds	r0, #12
 800afa6:	f7fe f878 	bl	800909a <memcpy>
 800afaa:	ec4b ab10 	vmov	d0, sl, fp
 800afae:	9805      	ldr	r0, [sp, #20]
 800afb0:	aa1c      	add	r2, sp, #112	@ 0x70
 800afb2:	a91b      	add	r1, sp, #108	@ 0x6c
 800afb4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800afb8:	f7ff fbd6 	bl	800a768 <__d2b>
 800afbc:	901a      	str	r0, [sp, #104]	@ 0x68
 800afbe:	2800      	cmp	r0, #0
 800afc0:	f43f aee1 	beq.w	800ad86 <_strtod_l+0x446>
 800afc4:	9805      	ldr	r0, [sp, #20]
 800afc6:	2101      	movs	r1, #1
 800afc8:	f7ff f930 	bl	800a22c <__i2b>
 800afcc:	4680      	mov	r8, r0
 800afce:	b948      	cbnz	r0, 800afe4 <_strtod_l+0x6a4>
 800afd0:	f04f 0800 	mov.w	r8, #0
 800afd4:	e6d7      	b.n	800ad86 <_strtod_l+0x446>
 800afd6:	f04f 32ff 	mov.w	r2, #4294967295
 800afda:	fa02 f303 	lsl.w	r3, r2, r3
 800afde:	ea03 0a0a 	and.w	sl, r3, sl
 800afe2:	e7af      	b.n	800af44 <_strtod_l+0x604>
 800afe4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800afe6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800afe8:	2d00      	cmp	r5, #0
 800afea:	bfab      	itete	ge
 800afec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800afee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aff0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aff2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aff4:	bfac      	ite	ge
 800aff6:	18ef      	addge	r7, r5, r3
 800aff8:	1b5e      	sublt	r6, r3, r5
 800affa:	9b08      	ldr	r3, [sp, #32]
 800affc:	1aed      	subs	r5, r5, r3
 800affe:	4415      	add	r5, r2
 800b000:	4b65      	ldr	r3, [pc, #404]	@ (800b198 <_strtod_l+0x858>)
 800b002:	3d01      	subs	r5, #1
 800b004:	429d      	cmp	r5, r3
 800b006:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b00a:	da50      	bge.n	800b0ae <_strtod_l+0x76e>
 800b00c:	1b5b      	subs	r3, r3, r5
 800b00e:	2b1f      	cmp	r3, #31
 800b010:	eba2 0203 	sub.w	r2, r2, r3
 800b014:	f04f 0101 	mov.w	r1, #1
 800b018:	dc3d      	bgt.n	800b096 <_strtod_l+0x756>
 800b01a:	fa01 f303 	lsl.w	r3, r1, r3
 800b01e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b020:	2300      	movs	r3, #0
 800b022:	9310      	str	r3, [sp, #64]	@ 0x40
 800b024:	18bd      	adds	r5, r7, r2
 800b026:	9b08      	ldr	r3, [sp, #32]
 800b028:	42af      	cmp	r7, r5
 800b02a:	4416      	add	r6, r2
 800b02c:	441e      	add	r6, r3
 800b02e:	463b      	mov	r3, r7
 800b030:	bfa8      	it	ge
 800b032:	462b      	movge	r3, r5
 800b034:	42b3      	cmp	r3, r6
 800b036:	bfa8      	it	ge
 800b038:	4633      	movge	r3, r6
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bfc2      	ittt	gt
 800b03e:	1aed      	subgt	r5, r5, r3
 800b040:	1af6      	subgt	r6, r6, r3
 800b042:	1aff      	subgt	r7, r7, r3
 800b044:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b046:	2b00      	cmp	r3, #0
 800b048:	dd16      	ble.n	800b078 <_strtod_l+0x738>
 800b04a:	4641      	mov	r1, r8
 800b04c:	9805      	ldr	r0, [sp, #20]
 800b04e:	461a      	mov	r2, r3
 800b050:	f7ff f9a4 	bl	800a39c <__pow5mult>
 800b054:	4680      	mov	r8, r0
 800b056:	2800      	cmp	r0, #0
 800b058:	d0ba      	beq.n	800afd0 <_strtod_l+0x690>
 800b05a:	4601      	mov	r1, r0
 800b05c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b05e:	9805      	ldr	r0, [sp, #20]
 800b060:	f7ff f8fa 	bl	800a258 <__multiply>
 800b064:	900a      	str	r0, [sp, #40]	@ 0x28
 800b066:	2800      	cmp	r0, #0
 800b068:	f43f ae8d 	beq.w	800ad86 <_strtod_l+0x446>
 800b06c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b06e:	9805      	ldr	r0, [sp, #20]
 800b070:	f7fe ffde 	bl	800a030 <_Bfree>
 800b074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b076:	931a      	str	r3, [sp, #104]	@ 0x68
 800b078:	2d00      	cmp	r5, #0
 800b07a:	dc1d      	bgt.n	800b0b8 <_strtod_l+0x778>
 800b07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b07e:	2b00      	cmp	r3, #0
 800b080:	dd23      	ble.n	800b0ca <_strtod_l+0x78a>
 800b082:	4649      	mov	r1, r9
 800b084:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b086:	9805      	ldr	r0, [sp, #20]
 800b088:	f7ff f988 	bl	800a39c <__pow5mult>
 800b08c:	4681      	mov	r9, r0
 800b08e:	b9e0      	cbnz	r0, 800b0ca <_strtod_l+0x78a>
 800b090:	f04f 0900 	mov.w	r9, #0
 800b094:	e677      	b.n	800ad86 <_strtod_l+0x446>
 800b096:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b09a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b09e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b0a2:	35e2      	adds	r5, #226	@ 0xe2
 800b0a4:	fa01 f305 	lsl.w	r3, r1, r5
 800b0a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b0ac:	e7ba      	b.n	800b024 <_strtod_l+0x6e4>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0b6:	e7b5      	b.n	800b024 <_strtod_l+0x6e4>
 800b0b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0ba:	9805      	ldr	r0, [sp, #20]
 800b0bc:	462a      	mov	r2, r5
 800b0be:	f7ff f9c7 	bl	800a450 <__lshift>
 800b0c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d1d9      	bne.n	800b07c <_strtod_l+0x73c>
 800b0c8:	e65d      	b.n	800ad86 <_strtod_l+0x446>
 800b0ca:	2e00      	cmp	r6, #0
 800b0cc:	dd07      	ble.n	800b0de <_strtod_l+0x79e>
 800b0ce:	4649      	mov	r1, r9
 800b0d0:	9805      	ldr	r0, [sp, #20]
 800b0d2:	4632      	mov	r2, r6
 800b0d4:	f7ff f9bc 	bl	800a450 <__lshift>
 800b0d8:	4681      	mov	r9, r0
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d0d8      	beq.n	800b090 <_strtod_l+0x750>
 800b0de:	2f00      	cmp	r7, #0
 800b0e0:	dd08      	ble.n	800b0f4 <_strtod_l+0x7b4>
 800b0e2:	4641      	mov	r1, r8
 800b0e4:	9805      	ldr	r0, [sp, #20]
 800b0e6:	463a      	mov	r2, r7
 800b0e8:	f7ff f9b2 	bl	800a450 <__lshift>
 800b0ec:	4680      	mov	r8, r0
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f43f ae49 	beq.w	800ad86 <_strtod_l+0x446>
 800b0f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0f6:	9805      	ldr	r0, [sp, #20]
 800b0f8:	464a      	mov	r2, r9
 800b0fa:	f7ff fa31 	bl	800a560 <__mdiff>
 800b0fe:	4604      	mov	r4, r0
 800b100:	2800      	cmp	r0, #0
 800b102:	f43f ae40 	beq.w	800ad86 <_strtod_l+0x446>
 800b106:	68c3      	ldr	r3, [r0, #12]
 800b108:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b10a:	2300      	movs	r3, #0
 800b10c:	60c3      	str	r3, [r0, #12]
 800b10e:	4641      	mov	r1, r8
 800b110:	f7ff fa0a 	bl	800a528 <__mcmp>
 800b114:	2800      	cmp	r0, #0
 800b116:	da45      	bge.n	800b1a4 <_strtod_l+0x864>
 800b118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b11a:	ea53 030a 	orrs.w	r3, r3, sl
 800b11e:	d16b      	bne.n	800b1f8 <_strtod_l+0x8b8>
 800b120:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b124:	2b00      	cmp	r3, #0
 800b126:	d167      	bne.n	800b1f8 <_strtod_l+0x8b8>
 800b128:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b12c:	0d1b      	lsrs	r3, r3, #20
 800b12e:	051b      	lsls	r3, r3, #20
 800b130:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b134:	d960      	bls.n	800b1f8 <_strtod_l+0x8b8>
 800b136:	6963      	ldr	r3, [r4, #20]
 800b138:	b913      	cbnz	r3, 800b140 <_strtod_l+0x800>
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	dd5b      	ble.n	800b1f8 <_strtod_l+0x8b8>
 800b140:	4621      	mov	r1, r4
 800b142:	2201      	movs	r2, #1
 800b144:	9805      	ldr	r0, [sp, #20]
 800b146:	f7ff f983 	bl	800a450 <__lshift>
 800b14a:	4641      	mov	r1, r8
 800b14c:	4604      	mov	r4, r0
 800b14e:	f7ff f9eb 	bl	800a528 <__mcmp>
 800b152:	2800      	cmp	r0, #0
 800b154:	dd50      	ble.n	800b1f8 <_strtod_l+0x8b8>
 800b156:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b15a:	9a08      	ldr	r2, [sp, #32]
 800b15c:	0d1b      	lsrs	r3, r3, #20
 800b15e:	051b      	lsls	r3, r3, #20
 800b160:	2a00      	cmp	r2, #0
 800b162:	d06a      	beq.n	800b23a <_strtod_l+0x8fa>
 800b164:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b168:	d867      	bhi.n	800b23a <_strtod_l+0x8fa>
 800b16a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b16e:	f67f ae9d 	bls.w	800aeac <_strtod_l+0x56c>
 800b172:	4b0a      	ldr	r3, [pc, #40]	@ (800b19c <_strtod_l+0x85c>)
 800b174:	4650      	mov	r0, sl
 800b176:	4659      	mov	r1, fp
 800b178:	2200      	movs	r2, #0
 800b17a:	f7f5 fa3d 	bl	80005f8 <__aeabi_dmul>
 800b17e:	4b08      	ldr	r3, [pc, #32]	@ (800b1a0 <_strtod_l+0x860>)
 800b180:	400b      	ands	r3, r1
 800b182:	4682      	mov	sl, r0
 800b184:	468b      	mov	fp, r1
 800b186:	2b00      	cmp	r3, #0
 800b188:	f47f ae08 	bne.w	800ad9c <_strtod_l+0x45c>
 800b18c:	9a05      	ldr	r2, [sp, #20]
 800b18e:	2322      	movs	r3, #34	@ 0x22
 800b190:	6013      	str	r3, [r2, #0]
 800b192:	e603      	b.n	800ad9c <_strtod_l+0x45c>
 800b194:	0800d288 	.word	0x0800d288
 800b198:	fffffc02 	.word	0xfffffc02
 800b19c:	39500000 	.word	0x39500000
 800b1a0:	7ff00000 	.word	0x7ff00000
 800b1a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b1a8:	d165      	bne.n	800b276 <_strtod_l+0x936>
 800b1aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b1ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1b0:	b35a      	cbz	r2, 800b20a <_strtod_l+0x8ca>
 800b1b2:	4a9f      	ldr	r2, [pc, #636]	@ (800b430 <_strtod_l+0xaf0>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d12b      	bne.n	800b210 <_strtod_l+0x8d0>
 800b1b8:	9b08      	ldr	r3, [sp, #32]
 800b1ba:	4651      	mov	r1, sl
 800b1bc:	b303      	cbz	r3, 800b200 <_strtod_l+0x8c0>
 800b1be:	4b9d      	ldr	r3, [pc, #628]	@ (800b434 <_strtod_l+0xaf4>)
 800b1c0:	465a      	mov	r2, fp
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1cc:	d81b      	bhi.n	800b206 <_strtod_l+0x8c6>
 800b1ce:	0d1b      	lsrs	r3, r3, #20
 800b1d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d8:	4299      	cmp	r1, r3
 800b1da:	d119      	bne.n	800b210 <_strtod_l+0x8d0>
 800b1dc:	4b96      	ldr	r3, [pc, #600]	@ (800b438 <_strtod_l+0xaf8>)
 800b1de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d102      	bne.n	800b1ea <_strtod_l+0x8aa>
 800b1e4:	3101      	adds	r1, #1
 800b1e6:	f43f adce 	beq.w	800ad86 <_strtod_l+0x446>
 800b1ea:	4b92      	ldr	r3, [pc, #584]	@ (800b434 <_strtod_l+0xaf4>)
 800b1ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1ee:	401a      	ands	r2, r3
 800b1f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b1f4:	f04f 0a00 	mov.w	sl, #0
 800b1f8:	9b08      	ldr	r3, [sp, #32]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1b9      	bne.n	800b172 <_strtod_l+0x832>
 800b1fe:	e5cd      	b.n	800ad9c <_strtod_l+0x45c>
 800b200:	f04f 33ff 	mov.w	r3, #4294967295
 800b204:	e7e8      	b.n	800b1d8 <_strtod_l+0x898>
 800b206:	4613      	mov	r3, r2
 800b208:	e7e6      	b.n	800b1d8 <_strtod_l+0x898>
 800b20a:	ea53 030a 	orrs.w	r3, r3, sl
 800b20e:	d0a2      	beq.n	800b156 <_strtod_l+0x816>
 800b210:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b212:	b1db      	cbz	r3, 800b24c <_strtod_l+0x90c>
 800b214:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b216:	4213      	tst	r3, r2
 800b218:	d0ee      	beq.n	800b1f8 <_strtod_l+0x8b8>
 800b21a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b21c:	9a08      	ldr	r2, [sp, #32]
 800b21e:	4650      	mov	r0, sl
 800b220:	4659      	mov	r1, fp
 800b222:	b1bb      	cbz	r3, 800b254 <_strtod_l+0x914>
 800b224:	f7ff fb6e 	bl	800a904 <sulp>
 800b228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b22c:	ec53 2b10 	vmov	r2, r3, d0
 800b230:	f7f5 f82c 	bl	800028c <__adddf3>
 800b234:	4682      	mov	sl, r0
 800b236:	468b      	mov	fp, r1
 800b238:	e7de      	b.n	800b1f8 <_strtod_l+0x8b8>
 800b23a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b23e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b242:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b246:	f04f 3aff 	mov.w	sl, #4294967295
 800b24a:	e7d5      	b.n	800b1f8 <_strtod_l+0x8b8>
 800b24c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b24e:	ea13 0f0a 	tst.w	r3, sl
 800b252:	e7e1      	b.n	800b218 <_strtod_l+0x8d8>
 800b254:	f7ff fb56 	bl	800a904 <sulp>
 800b258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b25c:	ec53 2b10 	vmov	r2, r3, d0
 800b260:	f7f5 f812 	bl	8000288 <__aeabi_dsub>
 800b264:	2200      	movs	r2, #0
 800b266:	2300      	movs	r3, #0
 800b268:	4682      	mov	sl, r0
 800b26a:	468b      	mov	fp, r1
 800b26c:	f7f5 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b270:	2800      	cmp	r0, #0
 800b272:	d0c1      	beq.n	800b1f8 <_strtod_l+0x8b8>
 800b274:	e61a      	b.n	800aeac <_strtod_l+0x56c>
 800b276:	4641      	mov	r1, r8
 800b278:	4620      	mov	r0, r4
 800b27a:	f7ff facd 	bl	800a818 <__ratio>
 800b27e:	ec57 6b10 	vmov	r6, r7, d0
 800b282:	2200      	movs	r2, #0
 800b284:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b288:	4630      	mov	r0, r6
 800b28a:	4639      	mov	r1, r7
 800b28c:	f7f5 fc30 	bl	8000af0 <__aeabi_dcmple>
 800b290:	2800      	cmp	r0, #0
 800b292:	d06f      	beq.n	800b374 <_strtod_l+0xa34>
 800b294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b296:	2b00      	cmp	r3, #0
 800b298:	d17a      	bne.n	800b390 <_strtod_l+0xa50>
 800b29a:	f1ba 0f00 	cmp.w	sl, #0
 800b29e:	d158      	bne.n	800b352 <_strtod_l+0xa12>
 800b2a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d15a      	bne.n	800b360 <_strtod_l+0xa20>
 800b2aa:	4b64      	ldr	r3, [pc, #400]	@ (800b43c <_strtod_l+0xafc>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f5 fc13 	bl	8000adc <__aeabi_dcmplt>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d159      	bne.n	800b36e <_strtod_l+0xa2e>
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	4639      	mov	r1, r7
 800b2be:	4b60      	ldr	r3, [pc, #384]	@ (800b440 <_strtod_l+0xb00>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f7f5 f999 	bl	80005f8 <__aeabi_dmul>
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	460f      	mov	r7, r1
 800b2ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b2ce:	9606      	str	r6, [sp, #24]
 800b2d0:	9307      	str	r3, [sp, #28]
 800b2d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2d6:	4d57      	ldr	r5, [pc, #348]	@ (800b434 <_strtod_l+0xaf4>)
 800b2d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b2dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2de:	401d      	ands	r5, r3
 800b2e0:	4b58      	ldr	r3, [pc, #352]	@ (800b444 <_strtod_l+0xb04>)
 800b2e2:	429d      	cmp	r5, r3
 800b2e4:	f040 80b2 	bne.w	800b44c <_strtod_l+0xb0c>
 800b2e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b2ee:	ec4b ab10 	vmov	d0, sl, fp
 800b2f2:	f7ff f9c9 	bl	800a688 <__ulp>
 800b2f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2fa:	ec51 0b10 	vmov	r0, r1, d0
 800b2fe:	f7f5 f97b 	bl	80005f8 <__aeabi_dmul>
 800b302:	4652      	mov	r2, sl
 800b304:	465b      	mov	r3, fp
 800b306:	f7f4 ffc1 	bl	800028c <__adddf3>
 800b30a:	460b      	mov	r3, r1
 800b30c:	4949      	ldr	r1, [pc, #292]	@ (800b434 <_strtod_l+0xaf4>)
 800b30e:	4a4e      	ldr	r2, [pc, #312]	@ (800b448 <_strtod_l+0xb08>)
 800b310:	4019      	ands	r1, r3
 800b312:	4291      	cmp	r1, r2
 800b314:	4682      	mov	sl, r0
 800b316:	d942      	bls.n	800b39e <_strtod_l+0xa5e>
 800b318:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b31a:	4b47      	ldr	r3, [pc, #284]	@ (800b438 <_strtod_l+0xaf8>)
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d103      	bne.n	800b328 <_strtod_l+0x9e8>
 800b320:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b322:	3301      	adds	r3, #1
 800b324:	f43f ad2f 	beq.w	800ad86 <_strtod_l+0x446>
 800b328:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b438 <_strtod_l+0xaf8>
 800b32c:	f04f 3aff 	mov.w	sl, #4294967295
 800b330:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b332:	9805      	ldr	r0, [sp, #20]
 800b334:	f7fe fe7c 	bl	800a030 <_Bfree>
 800b338:	9805      	ldr	r0, [sp, #20]
 800b33a:	4649      	mov	r1, r9
 800b33c:	f7fe fe78 	bl	800a030 <_Bfree>
 800b340:	9805      	ldr	r0, [sp, #20]
 800b342:	4641      	mov	r1, r8
 800b344:	f7fe fe74 	bl	800a030 <_Bfree>
 800b348:	9805      	ldr	r0, [sp, #20]
 800b34a:	4621      	mov	r1, r4
 800b34c:	f7fe fe70 	bl	800a030 <_Bfree>
 800b350:	e619      	b.n	800af86 <_strtod_l+0x646>
 800b352:	f1ba 0f01 	cmp.w	sl, #1
 800b356:	d103      	bne.n	800b360 <_strtod_l+0xa20>
 800b358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f43f ada6 	beq.w	800aeac <_strtod_l+0x56c>
 800b360:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b410 <_strtod_l+0xad0>
 800b364:	4f35      	ldr	r7, [pc, #212]	@ (800b43c <_strtod_l+0xafc>)
 800b366:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b36a:	2600      	movs	r6, #0
 800b36c:	e7b1      	b.n	800b2d2 <_strtod_l+0x992>
 800b36e:	4f34      	ldr	r7, [pc, #208]	@ (800b440 <_strtod_l+0xb00>)
 800b370:	2600      	movs	r6, #0
 800b372:	e7aa      	b.n	800b2ca <_strtod_l+0x98a>
 800b374:	4b32      	ldr	r3, [pc, #200]	@ (800b440 <_strtod_l+0xb00>)
 800b376:	4630      	mov	r0, r6
 800b378:	4639      	mov	r1, r7
 800b37a:	2200      	movs	r2, #0
 800b37c:	f7f5 f93c 	bl	80005f8 <__aeabi_dmul>
 800b380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b382:	4606      	mov	r6, r0
 800b384:	460f      	mov	r7, r1
 800b386:	2b00      	cmp	r3, #0
 800b388:	d09f      	beq.n	800b2ca <_strtod_l+0x98a>
 800b38a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b38e:	e7a0      	b.n	800b2d2 <_strtod_l+0x992>
 800b390:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b418 <_strtod_l+0xad8>
 800b394:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b398:	ec57 6b17 	vmov	r6, r7, d7
 800b39c:	e799      	b.n	800b2d2 <_strtod_l+0x992>
 800b39e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b3a2:	9b08      	ldr	r3, [sp, #32]
 800b3a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1c1      	bne.n	800b330 <_strtod_l+0x9f0>
 800b3ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3b0:	0d1b      	lsrs	r3, r3, #20
 800b3b2:	051b      	lsls	r3, r3, #20
 800b3b4:	429d      	cmp	r5, r3
 800b3b6:	d1bb      	bne.n	800b330 <_strtod_l+0x9f0>
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	f7f5 fc7c 	bl	8000cb8 <__aeabi_d2lz>
 800b3c0:	f7f5 f8ec 	bl	800059c <__aeabi_l2d>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	f7f4 ff5c 	bl	8000288 <__aeabi_dsub>
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b3d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3de:	ea46 060a 	orr.w	r6, r6, sl
 800b3e2:	431e      	orrs	r6, r3
 800b3e4:	d06f      	beq.n	800b4c6 <_strtod_l+0xb86>
 800b3e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b420 <_strtod_l+0xae0>)
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	f7f5 fb76 	bl	8000adc <__aeabi_dcmplt>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	f47f acd3 	bne.w	800ad9c <_strtod_l+0x45c>
 800b3f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b428 <_strtod_l+0xae8>)
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b400:	f7f5 fb8a 	bl	8000b18 <__aeabi_dcmpgt>
 800b404:	2800      	cmp	r0, #0
 800b406:	d093      	beq.n	800b330 <_strtod_l+0x9f0>
 800b408:	e4c8      	b.n	800ad9c <_strtod_l+0x45c>
 800b40a:	bf00      	nop
 800b40c:	f3af 8000 	nop.w
 800b410:	00000000 	.word	0x00000000
 800b414:	bff00000 	.word	0xbff00000
 800b418:	00000000 	.word	0x00000000
 800b41c:	3ff00000 	.word	0x3ff00000
 800b420:	94a03595 	.word	0x94a03595
 800b424:	3fdfffff 	.word	0x3fdfffff
 800b428:	35afe535 	.word	0x35afe535
 800b42c:	3fe00000 	.word	0x3fe00000
 800b430:	000fffff 	.word	0x000fffff
 800b434:	7ff00000 	.word	0x7ff00000
 800b438:	7fefffff 	.word	0x7fefffff
 800b43c:	3ff00000 	.word	0x3ff00000
 800b440:	3fe00000 	.word	0x3fe00000
 800b444:	7fe00000 	.word	0x7fe00000
 800b448:	7c9fffff 	.word	0x7c9fffff
 800b44c:	9b08      	ldr	r3, [sp, #32]
 800b44e:	b323      	cbz	r3, 800b49a <_strtod_l+0xb5a>
 800b450:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b454:	d821      	bhi.n	800b49a <_strtod_l+0xb5a>
 800b456:	a328      	add	r3, pc, #160	@ (adr r3, 800b4f8 <_strtod_l+0xbb8>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	f7f5 fb46 	bl	8000af0 <__aeabi_dcmple>
 800b464:	b1a0      	cbz	r0, 800b490 <_strtod_l+0xb50>
 800b466:	4639      	mov	r1, r7
 800b468:	4630      	mov	r0, r6
 800b46a:	f7f5 fb9d 	bl	8000ba8 <__aeabi_d2uiz>
 800b46e:	2801      	cmp	r0, #1
 800b470:	bf38      	it	cc
 800b472:	2001      	movcc	r0, #1
 800b474:	f7f5 f846 	bl	8000504 <__aeabi_ui2d>
 800b478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b47a:	4606      	mov	r6, r0
 800b47c:	460f      	mov	r7, r1
 800b47e:	b9fb      	cbnz	r3, 800b4c0 <_strtod_l+0xb80>
 800b480:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b484:	9014      	str	r0, [sp, #80]	@ 0x50
 800b486:	9315      	str	r3, [sp, #84]	@ 0x54
 800b488:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b48c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b490:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b492:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b496:	1b5b      	subs	r3, r3, r5
 800b498:	9311      	str	r3, [sp, #68]	@ 0x44
 800b49a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b49e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b4a2:	f7ff f8f1 	bl	800a688 <__ulp>
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	ec53 2b10 	vmov	r2, r3, d0
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	f7f5 f8a3 	bl	80005f8 <__aeabi_dmul>
 800b4b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b4b6:	f7f4 fee9 	bl	800028c <__adddf3>
 800b4ba:	4682      	mov	sl, r0
 800b4bc:	468b      	mov	fp, r1
 800b4be:	e770      	b.n	800b3a2 <_strtod_l+0xa62>
 800b4c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b4c4:	e7e0      	b.n	800b488 <_strtod_l+0xb48>
 800b4c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b500 <_strtod_l+0xbc0>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7f5 fb06 	bl	8000adc <__aeabi_dcmplt>
 800b4d0:	e798      	b.n	800b404 <_strtod_l+0xac4>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b4d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b4d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	f7ff ba6d 	b.w	800a9ba <_strtod_l+0x7a>
 800b4e0:	2a65      	cmp	r2, #101	@ 0x65
 800b4e2:	f43f ab68 	beq.w	800abb6 <_strtod_l+0x276>
 800b4e6:	2a45      	cmp	r2, #69	@ 0x45
 800b4e8:	f43f ab65 	beq.w	800abb6 <_strtod_l+0x276>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	f7ff bba0 	b.w	800ac32 <_strtod_l+0x2f2>
 800b4f2:	bf00      	nop
 800b4f4:	f3af 8000 	nop.w
 800b4f8:	ffc00000 	.word	0xffc00000
 800b4fc:	41dfffff 	.word	0x41dfffff
 800b500:	94a03595 	.word	0x94a03595
 800b504:	3fcfffff 	.word	0x3fcfffff

0800b508 <_strtod_r>:
 800b508:	4b01      	ldr	r3, [pc, #4]	@ (800b510 <_strtod_r+0x8>)
 800b50a:	f7ff ba19 	b.w	800a940 <_strtod_l>
 800b50e:	bf00      	nop
 800b510:	200000b0 	.word	0x200000b0

0800b514 <_strtol_l.isra.0>:
 800b514:	2b24      	cmp	r3, #36	@ 0x24
 800b516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b51a:	4686      	mov	lr, r0
 800b51c:	4690      	mov	r8, r2
 800b51e:	d801      	bhi.n	800b524 <_strtol_l.isra.0+0x10>
 800b520:	2b01      	cmp	r3, #1
 800b522:	d106      	bne.n	800b532 <_strtol_l.isra.0+0x1e>
 800b524:	f7fd fd8c 	bl	8009040 <__errno>
 800b528:	2316      	movs	r3, #22
 800b52a:	6003      	str	r3, [r0, #0]
 800b52c:	2000      	movs	r0, #0
 800b52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b532:	4834      	ldr	r0, [pc, #208]	@ (800b604 <_strtol_l.isra.0+0xf0>)
 800b534:	460d      	mov	r5, r1
 800b536:	462a      	mov	r2, r5
 800b538:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b53c:	5d06      	ldrb	r6, [r0, r4]
 800b53e:	f016 0608 	ands.w	r6, r6, #8
 800b542:	d1f8      	bne.n	800b536 <_strtol_l.isra.0+0x22>
 800b544:	2c2d      	cmp	r4, #45	@ 0x2d
 800b546:	d110      	bne.n	800b56a <_strtol_l.isra.0+0x56>
 800b548:	782c      	ldrb	r4, [r5, #0]
 800b54a:	2601      	movs	r6, #1
 800b54c:	1c95      	adds	r5, r2, #2
 800b54e:	f033 0210 	bics.w	r2, r3, #16
 800b552:	d115      	bne.n	800b580 <_strtol_l.isra.0+0x6c>
 800b554:	2c30      	cmp	r4, #48	@ 0x30
 800b556:	d10d      	bne.n	800b574 <_strtol_l.isra.0+0x60>
 800b558:	782a      	ldrb	r2, [r5, #0]
 800b55a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b55e:	2a58      	cmp	r2, #88	@ 0x58
 800b560:	d108      	bne.n	800b574 <_strtol_l.isra.0+0x60>
 800b562:	786c      	ldrb	r4, [r5, #1]
 800b564:	3502      	adds	r5, #2
 800b566:	2310      	movs	r3, #16
 800b568:	e00a      	b.n	800b580 <_strtol_l.isra.0+0x6c>
 800b56a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b56c:	bf04      	itt	eq
 800b56e:	782c      	ldrbeq	r4, [r5, #0]
 800b570:	1c95      	addeq	r5, r2, #2
 800b572:	e7ec      	b.n	800b54e <_strtol_l.isra.0+0x3a>
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1f6      	bne.n	800b566 <_strtol_l.isra.0+0x52>
 800b578:	2c30      	cmp	r4, #48	@ 0x30
 800b57a:	bf14      	ite	ne
 800b57c:	230a      	movne	r3, #10
 800b57e:	2308      	moveq	r3, #8
 800b580:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b584:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b588:	2200      	movs	r2, #0
 800b58a:	fbbc f9f3 	udiv	r9, ip, r3
 800b58e:	4610      	mov	r0, r2
 800b590:	fb03 ca19 	mls	sl, r3, r9, ip
 800b594:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b598:	2f09      	cmp	r7, #9
 800b59a:	d80f      	bhi.n	800b5bc <_strtol_l.isra.0+0xa8>
 800b59c:	463c      	mov	r4, r7
 800b59e:	42a3      	cmp	r3, r4
 800b5a0:	dd1b      	ble.n	800b5da <_strtol_l.isra.0+0xc6>
 800b5a2:	1c57      	adds	r7, r2, #1
 800b5a4:	d007      	beq.n	800b5b6 <_strtol_l.isra.0+0xa2>
 800b5a6:	4581      	cmp	r9, r0
 800b5a8:	d314      	bcc.n	800b5d4 <_strtol_l.isra.0+0xc0>
 800b5aa:	d101      	bne.n	800b5b0 <_strtol_l.isra.0+0x9c>
 800b5ac:	45a2      	cmp	sl, r4
 800b5ae:	db11      	blt.n	800b5d4 <_strtol_l.isra.0+0xc0>
 800b5b0:	fb00 4003 	mla	r0, r0, r3, r4
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5ba:	e7eb      	b.n	800b594 <_strtol_l.isra.0+0x80>
 800b5bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b5c0:	2f19      	cmp	r7, #25
 800b5c2:	d801      	bhi.n	800b5c8 <_strtol_l.isra.0+0xb4>
 800b5c4:	3c37      	subs	r4, #55	@ 0x37
 800b5c6:	e7ea      	b.n	800b59e <_strtol_l.isra.0+0x8a>
 800b5c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b5cc:	2f19      	cmp	r7, #25
 800b5ce:	d804      	bhi.n	800b5da <_strtol_l.isra.0+0xc6>
 800b5d0:	3c57      	subs	r4, #87	@ 0x57
 800b5d2:	e7e4      	b.n	800b59e <_strtol_l.isra.0+0x8a>
 800b5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d8:	e7ed      	b.n	800b5b6 <_strtol_l.isra.0+0xa2>
 800b5da:	1c53      	adds	r3, r2, #1
 800b5dc:	d108      	bne.n	800b5f0 <_strtol_l.isra.0+0xdc>
 800b5de:	2322      	movs	r3, #34	@ 0x22
 800b5e0:	f8ce 3000 	str.w	r3, [lr]
 800b5e4:	4660      	mov	r0, ip
 800b5e6:	f1b8 0f00 	cmp.w	r8, #0
 800b5ea:	d0a0      	beq.n	800b52e <_strtol_l.isra.0+0x1a>
 800b5ec:	1e69      	subs	r1, r5, #1
 800b5ee:	e006      	b.n	800b5fe <_strtol_l.isra.0+0xea>
 800b5f0:	b106      	cbz	r6, 800b5f4 <_strtol_l.isra.0+0xe0>
 800b5f2:	4240      	negs	r0, r0
 800b5f4:	f1b8 0f00 	cmp.w	r8, #0
 800b5f8:	d099      	beq.n	800b52e <_strtol_l.isra.0+0x1a>
 800b5fa:	2a00      	cmp	r2, #0
 800b5fc:	d1f6      	bne.n	800b5ec <_strtol_l.isra.0+0xd8>
 800b5fe:	f8c8 1000 	str.w	r1, [r8]
 800b602:	e794      	b.n	800b52e <_strtol_l.isra.0+0x1a>
 800b604:	0800d2b1 	.word	0x0800d2b1

0800b608 <_strtol_r>:
 800b608:	f7ff bf84 	b.w	800b514 <_strtol_l.isra.0>

0800b60c <__ssputs_r>:
 800b60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b610:	688e      	ldr	r6, [r1, #8]
 800b612:	461f      	mov	r7, r3
 800b614:	42be      	cmp	r6, r7
 800b616:	680b      	ldr	r3, [r1, #0]
 800b618:	4682      	mov	sl, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	4690      	mov	r8, r2
 800b61e:	d82d      	bhi.n	800b67c <__ssputs_r+0x70>
 800b620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b624:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b628:	d026      	beq.n	800b678 <__ssputs_r+0x6c>
 800b62a:	6965      	ldr	r5, [r4, #20]
 800b62c:	6909      	ldr	r1, [r1, #16]
 800b62e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b632:	eba3 0901 	sub.w	r9, r3, r1
 800b636:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b63a:	1c7b      	adds	r3, r7, #1
 800b63c:	444b      	add	r3, r9
 800b63e:	106d      	asrs	r5, r5, #1
 800b640:	429d      	cmp	r5, r3
 800b642:	bf38      	it	cc
 800b644:	461d      	movcc	r5, r3
 800b646:	0553      	lsls	r3, r2, #21
 800b648:	d527      	bpl.n	800b69a <__ssputs_r+0x8e>
 800b64a:	4629      	mov	r1, r5
 800b64c:	f7fe fc24 	bl	8009e98 <_malloc_r>
 800b650:	4606      	mov	r6, r0
 800b652:	b360      	cbz	r0, 800b6ae <__ssputs_r+0xa2>
 800b654:	6921      	ldr	r1, [r4, #16]
 800b656:	464a      	mov	r2, r9
 800b658:	f7fd fd1f 	bl	800909a <memcpy>
 800b65c:	89a3      	ldrh	r3, [r4, #12]
 800b65e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b666:	81a3      	strh	r3, [r4, #12]
 800b668:	6126      	str	r6, [r4, #16]
 800b66a:	6165      	str	r5, [r4, #20]
 800b66c:	444e      	add	r6, r9
 800b66e:	eba5 0509 	sub.w	r5, r5, r9
 800b672:	6026      	str	r6, [r4, #0]
 800b674:	60a5      	str	r5, [r4, #8]
 800b676:	463e      	mov	r6, r7
 800b678:	42be      	cmp	r6, r7
 800b67a:	d900      	bls.n	800b67e <__ssputs_r+0x72>
 800b67c:	463e      	mov	r6, r7
 800b67e:	6820      	ldr	r0, [r4, #0]
 800b680:	4632      	mov	r2, r6
 800b682:	4641      	mov	r1, r8
 800b684:	f000 fb7c 	bl	800bd80 <memmove>
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	1b9b      	subs	r3, r3, r6
 800b68c:	60a3      	str	r3, [r4, #8]
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	4433      	add	r3, r6
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	2000      	movs	r0, #0
 800b696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69a:	462a      	mov	r2, r5
 800b69c:	f000 ff29 	bl	800c4f2 <_realloc_r>
 800b6a0:	4606      	mov	r6, r0
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d1e0      	bne.n	800b668 <__ssputs_r+0x5c>
 800b6a6:	6921      	ldr	r1, [r4, #16]
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	f7fe fb81 	bl	8009db0 <_free_r>
 800b6ae:	230c      	movs	r3, #12
 800b6b0:	f8ca 3000 	str.w	r3, [sl]
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c0:	e7e9      	b.n	800b696 <__ssputs_r+0x8a>
	...

0800b6c4 <_svfiprintf_r>:
 800b6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c8:	4698      	mov	r8, r3
 800b6ca:	898b      	ldrh	r3, [r1, #12]
 800b6cc:	061b      	lsls	r3, r3, #24
 800b6ce:	b09d      	sub	sp, #116	@ 0x74
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	d510      	bpl.n	800b6fa <_svfiprintf_r+0x36>
 800b6d8:	690b      	ldr	r3, [r1, #16]
 800b6da:	b973      	cbnz	r3, 800b6fa <_svfiprintf_r+0x36>
 800b6dc:	2140      	movs	r1, #64	@ 0x40
 800b6de:	f7fe fbdb 	bl	8009e98 <_malloc_r>
 800b6e2:	6028      	str	r0, [r5, #0]
 800b6e4:	6128      	str	r0, [r5, #16]
 800b6e6:	b930      	cbnz	r0, 800b6f6 <_svfiprintf_r+0x32>
 800b6e8:	230c      	movs	r3, #12
 800b6ea:	603b      	str	r3, [r7, #0]
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	b01d      	add	sp, #116	@ 0x74
 800b6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f6:	2340      	movs	r3, #64	@ 0x40
 800b6f8:	616b      	str	r3, [r5, #20]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6fe:	2320      	movs	r3, #32
 800b700:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b704:	f8cd 800c 	str.w	r8, [sp, #12]
 800b708:	2330      	movs	r3, #48	@ 0x30
 800b70a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b8a8 <_svfiprintf_r+0x1e4>
 800b70e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b712:	f04f 0901 	mov.w	r9, #1
 800b716:	4623      	mov	r3, r4
 800b718:	469a      	mov	sl, r3
 800b71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71e:	b10a      	cbz	r2, 800b724 <_svfiprintf_r+0x60>
 800b720:	2a25      	cmp	r2, #37	@ 0x25
 800b722:	d1f9      	bne.n	800b718 <_svfiprintf_r+0x54>
 800b724:	ebba 0b04 	subs.w	fp, sl, r4
 800b728:	d00b      	beq.n	800b742 <_svfiprintf_r+0x7e>
 800b72a:	465b      	mov	r3, fp
 800b72c:	4622      	mov	r2, r4
 800b72e:	4629      	mov	r1, r5
 800b730:	4638      	mov	r0, r7
 800b732:	f7ff ff6b 	bl	800b60c <__ssputs_r>
 800b736:	3001      	adds	r0, #1
 800b738:	f000 80a7 	beq.w	800b88a <_svfiprintf_r+0x1c6>
 800b73c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b73e:	445a      	add	r2, fp
 800b740:	9209      	str	r2, [sp, #36]	@ 0x24
 800b742:	f89a 3000 	ldrb.w	r3, [sl]
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 809f 	beq.w	800b88a <_svfiprintf_r+0x1c6>
 800b74c:	2300      	movs	r3, #0
 800b74e:	f04f 32ff 	mov.w	r2, #4294967295
 800b752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b756:	f10a 0a01 	add.w	sl, sl, #1
 800b75a:	9304      	str	r3, [sp, #16]
 800b75c:	9307      	str	r3, [sp, #28]
 800b75e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b762:	931a      	str	r3, [sp, #104]	@ 0x68
 800b764:	4654      	mov	r4, sl
 800b766:	2205      	movs	r2, #5
 800b768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76c:	484e      	ldr	r0, [pc, #312]	@ (800b8a8 <_svfiprintf_r+0x1e4>)
 800b76e:	f7f4 fd2f 	bl	80001d0 <memchr>
 800b772:	9a04      	ldr	r2, [sp, #16]
 800b774:	b9d8      	cbnz	r0, 800b7ae <_svfiprintf_r+0xea>
 800b776:	06d0      	lsls	r0, r2, #27
 800b778:	bf44      	itt	mi
 800b77a:	2320      	movmi	r3, #32
 800b77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b780:	0711      	lsls	r1, r2, #28
 800b782:	bf44      	itt	mi
 800b784:	232b      	movmi	r3, #43	@ 0x2b
 800b786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b78a:	f89a 3000 	ldrb.w	r3, [sl]
 800b78e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b790:	d015      	beq.n	800b7be <_svfiprintf_r+0xfa>
 800b792:	9a07      	ldr	r2, [sp, #28]
 800b794:	4654      	mov	r4, sl
 800b796:	2000      	movs	r0, #0
 800b798:	f04f 0c0a 	mov.w	ip, #10
 800b79c:	4621      	mov	r1, r4
 800b79e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7a2:	3b30      	subs	r3, #48	@ 0x30
 800b7a4:	2b09      	cmp	r3, #9
 800b7a6:	d94b      	bls.n	800b840 <_svfiprintf_r+0x17c>
 800b7a8:	b1b0      	cbz	r0, 800b7d8 <_svfiprintf_r+0x114>
 800b7aa:	9207      	str	r2, [sp, #28]
 800b7ac:	e014      	b.n	800b7d8 <_svfiprintf_r+0x114>
 800b7ae:	eba0 0308 	sub.w	r3, r0, r8
 800b7b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	46a2      	mov	sl, r4
 800b7bc:	e7d2      	b.n	800b764 <_svfiprintf_r+0xa0>
 800b7be:	9b03      	ldr	r3, [sp, #12]
 800b7c0:	1d19      	adds	r1, r3, #4
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	9103      	str	r1, [sp, #12]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	bfbb      	ittet	lt
 800b7ca:	425b      	neglt	r3, r3
 800b7cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b7d0:	9307      	strge	r3, [sp, #28]
 800b7d2:	9307      	strlt	r3, [sp, #28]
 800b7d4:	bfb8      	it	lt
 800b7d6:	9204      	strlt	r2, [sp, #16]
 800b7d8:	7823      	ldrb	r3, [r4, #0]
 800b7da:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7dc:	d10a      	bne.n	800b7f4 <_svfiprintf_r+0x130>
 800b7de:	7863      	ldrb	r3, [r4, #1]
 800b7e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7e2:	d132      	bne.n	800b84a <_svfiprintf_r+0x186>
 800b7e4:	9b03      	ldr	r3, [sp, #12]
 800b7e6:	1d1a      	adds	r2, r3, #4
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	9203      	str	r2, [sp, #12]
 800b7ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7f0:	3402      	adds	r4, #2
 800b7f2:	9305      	str	r3, [sp, #20]
 800b7f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b8b8 <_svfiprintf_r+0x1f4>
 800b7f8:	7821      	ldrb	r1, [r4, #0]
 800b7fa:	2203      	movs	r2, #3
 800b7fc:	4650      	mov	r0, sl
 800b7fe:	f7f4 fce7 	bl	80001d0 <memchr>
 800b802:	b138      	cbz	r0, 800b814 <_svfiprintf_r+0x150>
 800b804:	9b04      	ldr	r3, [sp, #16]
 800b806:	eba0 000a 	sub.w	r0, r0, sl
 800b80a:	2240      	movs	r2, #64	@ 0x40
 800b80c:	4082      	lsls	r2, r0
 800b80e:	4313      	orrs	r3, r2
 800b810:	3401      	adds	r4, #1
 800b812:	9304      	str	r3, [sp, #16]
 800b814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b818:	4824      	ldr	r0, [pc, #144]	@ (800b8ac <_svfiprintf_r+0x1e8>)
 800b81a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b81e:	2206      	movs	r2, #6
 800b820:	f7f4 fcd6 	bl	80001d0 <memchr>
 800b824:	2800      	cmp	r0, #0
 800b826:	d036      	beq.n	800b896 <_svfiprintf_r+0x1d2>
 800b828:	4b21      	ldr	r3, [pc, #132]	@ (800b8b0 <_svfiprintf_r+0x1ec>)
 800b82a:	bb1b      	cbnz	r3, 800b874 <_svfiprintf_r+0x1b0>
 800b82c:	9b03      	ldr	r3, [sp, #12]
 800b82e:	3307      	adds	r3, #7
 800b830:	f023 0307 	bic.w	r3, r3, #7
 800b834:	3308      	adds	r3, #8
 800b836:	9303      	str	r3, [sp, #12]
 800b838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b83a:	4433      	add	r3, r6
 800b83c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b83e:	e76a      	b.n	800b716 <_svfiprintf_r+0x52>
 800b840:	fb0c 3202 	mla	r2, ip, r2, r3
 800b844:	460c      	mov	r4, r1
 800b846:	2001      	movs	r0, #1
 800b848:	e7a8      	b.n	800b79c <_svfiprintf_r+0xd8>
 800b84a:	2300      	movs	r3, #0
 800b84c:	3401      	adds	r4, #1
 800b84e:	9305      	str	r3, [sp, #20]
 800b850:	4619      	mov	r1, r3
 800b852:	f04f 0c0a 	mov.w	ip, #10
 800b856:	4620      	mov	r0, r4
 800b858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b85c:	3a30      	subs	r2, #48	@ 0x30
 800b85e:	2a09      	cmp	r2, #9
 800b860:	d903      	bls.n	800b86a <_svfiprintf_r+0x1a6>
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0c6      	beq.n	800b7f4 <_svfiprintf_r+0x130>
 800b866:	9105      	str	r1, [sp, #20]
 800b868:	e7c4      	b.n	800b7f4 <_svfiprintf_r+0x130>
 800b86a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b86e:	4604      	mov	r4, r0
 800b870:	2301      	movs	r3, #1
 800b872:	e7f0      	b.n	800b856 <_svfiprintf_r+0x192>
 800b874:	ab03      	add	r3, sp, #12
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	462a      	mov	r2, r5
 800b87a:	4b0e      	ldr	r3, [pc, #56]	@ (800b8b4 <_svfiprintf_r+0x1f0>)
 800b87c:	a904      	add	r1, sp, #16
 800b87e:	4638      	mov	r0, r7
 800b880:	f7fc face 	bl	8007e20 <_printf_float>
 800b884:	1c42      	adds	r2, r0, #1
 800b886:	4606      	mov	r6, r0
 800b888:	d1d6      	bne.n	800b838 <_svfiprintf_r+0x174>
 800b88a:	89ab      	ldrh	r3, [r5, #12]
 800b88c:	065b      	lsls	r3, r3, #25
 800b88e:	f53f af2d 	bmi.w	800b6ec <_svfiprintf_r+0x28>
 800b892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b894:	e72c      	b.n	800b6f0 <_svfiprintf_r+0x2c>
 800b896:	ab03      	add	r3, sp, #12
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	462a      	mov	r2, r5
 800b89c:	4b05      	ldr	r3, [pc, #20]	@ (800b8b4 <_svfiprintf_r+0x1f0>)
 800b89e:	a904      	add	r1, sp, #16
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	f7fc fd55 	bl	8008350 <_printf_i>
 800b8a6:	e7ed      	b.n	800b884 <_svfiprintf_r+0x1c0>
 800b8a8:	0800d0eb 	.word	0x0800d0eb
 800b8ac:	0800d0f5 	.word	0x0800d0f5
 800b8b0:	08007e21 	.word	0x08007e21
 800b8b4:	0800b60d 	.word	0x0800b60d
 800b8b8:	0800d0f1 	.word	0x0800d0f1

0800b8bc <__sfputc_r>:
 800b8bc:	6893      	ldr	r3, [r2, #8]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	b410      	push	{r4}
 800b8c4:	6093      	str	r3, [r2, #8]
 800b8c6:	da08      	bge.n	800b8da <__sfputc_r+0x1e>
 800b8c8:	6994      	ldr	r4, [r2, #24]
 800b8ca:	42a3      	cmp	r3, r4
 800b8cc:	db01      	blt.n	800b8d2 <__sfputc_r+0x16>
 800b8ce:	290a      	cmp	r1, #10
 800b8d0:	d103      	bne.n	800b8da <__sfputc_r+0x1e>
 800b8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d6:	f7fd ba34 	b.w	8008d42 <__swbuf_r>
 800b8da:	6813      	ldr	r3, [r2, #0]
 800b8dc:	1c58      	adds	r0, r3, #1
 800b8de:	6010      	str	r0, [r2, #0]
 800b8e0:	7019      	strb	r1, [r3, #0]
 800b8e2:	4608      	mov	r0, r1
 800b8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <__sfputs_r>:
 800b8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	460f      	mov	r7, r1
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	18d5      	adds	r5, r2, r3
 800b8f4:	42ac      	cmp	r4, r5
 800b8f6:	d101      	bne.n	800b8fc <__sfputs_r+0x12>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e007      	b.n	800b90c <__sfputs_r+0x22>
 800b8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b900:	463a      	mov	r2, r7
 800b902:	4630      	mov	r0, r6
 800b904:	f7ff ffda 	bl	800b8bc <__sfputc_r>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d1f3      	bne.n	800b8f4 <__sfputs_r+0xa>
 800b90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b910 <_vfiprintf_r>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	460d      	mov	r5, r1
 800b916:	b09d      	sub	sp, #116	@ 0x74
 800b918:	4614      	mov	r4, r2
 800b91a:	4698      	mov	r8, r3
 800b91c:	4606      	mov	r6, r0
 800b91e:	b118      	cbz	r0, 800b928 <_vfiprintf_r+0x18>
 800b920:	6a03      	ldr	r3, [r0, #32]
 800b922:	b90b      	cbnz	r3, 800b928 <_vfiprintf_r+0x18>
 800b924:	f7fd f8cc 	bl	8008ac0 <__sinit>
 800b928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b92a:	07d9      	lsls	r1, r3, #31
 800b92c:	d405      	bmi.n	800b93a <_vfiprintf_r+0x2a>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	059a      	lsls	r2, r3, #22
 800b932:	d402      	bmi.n	800b93a <_vfiprintf_r+0x2a>
 800b934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b936:	f7fd fbae 	bl	8009096 <__retarget_lock_acquire_recursive>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	071b      	lsls	r3, r3, #28
 800b93e:	d501      	bpl.n	800b944 <_vfiprintf_r+0x34>
 800b940:	692b      	ldr	r3, [r5, #16]
 800b942:	b99b      	cbnz	r3, 800b96c <_vfiprintf_r+0x5c>
 800b944:	4629      	mov	r1, r5
 800b946:	4630      	mov	r0, r6
 800b948:	f7fd fa3a 	bl	8008dc0 <__swsetup_r>
 800b94c:	b170      	cbz	r0, 800b96c <_vfiprintf_r+0x5c>
 800b94e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b950:	07dc      	lsls	r4, r3, #31
 800b952:	d504      	bpl.n	800b95e <_vfiprintf_r+0x4e>
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	b01d      	add	sp, #116	@ 0x74
 800b95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	0598      	lsls	r0, r3, #22
 800b962:	d4f7      	bmi.n	800b954 <_vfiprintf_r+0x44>
 800b964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b966:	f7fd fb97 	bl	8009098 <__retarget_lock_release_recursive>
 800b96a:	e7f3      	b.n	800b954 <_vfiprintf_r+0x44>
 800b96c:	2300      	movs	r3, #0
 800b96e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b970:	2320      	movs	r3, #32
 800b972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b976:	f8cd 800c 	str.w	r8, [sp, #12]
 800b97a:	2330      	movs	r3, #48	@ 0x30
 800b97c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb2c <_vfiprintf_r+0x21c>
 800b980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b984:	f04f 0901 	mov.w	r9, #1
 800b988:	4623      	mov	r3, r4
 800b98a:	469a      	mov	sl, r3
 800b98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b990:	b10a      	cbz	r2, 800b996 <_vfiprintf_r+0x86>
 800b992:	2a25      	cmp	r2, #37	@ 0x25
 800b994:	d1f9      	bne.n	800b98a <_vfiprintf_r+0x7a>
 800b996:	ebba 0b04 	subs.w	fp, sl, r4
 800b99a:	d00b      	beq.n	800b9b4 <_vfiprintf_r+0xa4>
 800b99c:	465b      	mov	r3, fp
 800b99e:	4622      	mov	r2, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7ff ffa1 	bl	800b8ea <__sfputs_r>
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	f000 80a7 	beq.w	800bafc <_vfiprintf_r+0x1ec>
 800b9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9b0:	445a      	add	r2, fp
 800b9b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 809f 	beq.w	800bafc <_vfiprintf_r+0x1ec>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c8:	f10a 0a01 	add.w	sl, sl, #1
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	9307      	str	r3, [sp, #28]
 800b9d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9d6:	4654      	mov	r4, sl
 800b9d8:	2205      	movs	r2, #5
 800b9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9de:	4853      	ldr	r0, [pc, #332]	@ (800bb2c <_vfiprintf_r+0x21c>)
 800b9e0:	f7f4 fbf6 	bl	80001d0 <memchr>
 800b9e4:	9a04      	ldr	r2, [sp, #16]
 800b9e6:	b9d8      	cbnz	r0, 800ba20 <_vfiprintf_r+0x110>
 800b9e8:	06d1      	lsls	r1, r2, #27
 800b9ea:	bf44      	itt	mi
 800b9ec:	2320      	movmi	r3, #32
 800b9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9f2:	0713      	lsls	r3, r2, #28
 800b9f4:	bf44      	itt	mi
 800b9f6:	232b      	movmi	r3, #43	@ 0x2b
 800b9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ba00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba02:	d015      	beq.n	800ba30 <_vfiprintf_r+0x120>
 800ba04:	9a07      	ldr	r2, [sp, #28]
 800ba06:	4654      	mov	r4, sl
 800ba08:	2000      	movs	r0, #0
 800ba0a:	f04f 0c0a 	mov.w	ip, #10
 800ba0e:	4621      	mov	r1, r4
 800ba10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba14:	3b30      	subs	r3, #48	@ 0x30
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d94b      	bls.n	800bab2 <_vfiprintf_r+0x1a2>
 800ba1a:	b1b0      	cbz	r0, 800ba4a <_vfiprintf_r+0x13a>
 800ba1c:	9207      	str	r2, [sp, #28]
 800ba1e:	e014      	b.n	800ba4a <_vfiprintf_r+0x13a>
 800ba20:	eba0 0308 	sub.w	r3, r0, r8
 800ba24:	fa09 f303 	lsl.w	r3, r9, r3
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	9304      	str	r3, [sp, #16]
 800ba2c:	46a2      	mov	sl, r4
 800ba2e:	e7d2      	b.n	800b9d6 <_vfiprintf_r+0xc6>
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	1d19      	adds	r1, r3, #4
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	9103      	str	r1, [sp, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bfbb      	ittet	lt
 800ba3c:	425b      	neglt	r3, r3
 800ba3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba42:	9307      	strge	r3, [sp, #28]
 800ba44:	9307      	strlt	r3, [sp, #28]
 800ba46:	bfb8      	it	lt
 800ba48:	9204      	strlt	r2, [sp, #16]
 800ba4a:	7823      	ldrb	r3, [r4, #0]
 800ba4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba4e:	d10a      	bne.n	800ba66 <_vfiprintf_r+0x156>
 800ba50:	7863      	ldrb	r3, [r4, #1]
 800ba52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba54:	d132      	bne.n	800babc <_vfiprintf_r+0x1ac>
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	1d1a      	adds	r2, r3, #4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	9203      	str	r2, [sp, #12]
 800ba5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba62:	3402      	adds	r4, #2
 800ba64:	9305      	str	r3, [sp, #20]
 800ba66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb3c <_vfiprintf_r+0x22c>
 800ba6a:	7821      	ldrb	r1, [r4, #0]
 800ba6c:	2203      	movs	r2, #3
 800ba6e:	4650      	mov	r0, sl
 800ba70:	f7f4 fbae 	bl	80001d0 <memchr>
 800ba74:	b138      	cbz	r0, 800ba86 <_vfiprintf_r+0x176>
 800ba76:	9b04      	ldr	r3, [sp, #16]
 800ba78:	eba0 000a 	sub.w	r0, r0, sl
 800ba7c:	2240      	movs	r2, #64	@ 0x40
 800ba7e:	4082      	lsls	r2, r0
 800ba80:	4313      	orrs	r3, r2
 800ba82:	3401      	adds	r4, #1
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba8a:	4829      	ldr	r0, [pc, #164]	@ (800bb30 <_vfiprintf_r+0x220>)
 800ba8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba90:	2206      	movs	r2, #6
 800ba92:	f7f4 fb9d 	bl	80001d0 <memchr>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d03f      	beq.n	800bb1a <_vfiprintf_r+0x20a>
 800ba9a:	4b26      	ldr	r3, [pc, #152]	@ (800bb34 <_vfiprintf_r+0x224>)
 800ba9c:	bb1b      	cbnz	r3, 800bae6 <_vfiprintf_r+0x1d6>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	3307      	adds	r3, #7
 800baa2:	f023 0307 	bic.w	r3, r3, #7
 800baa6:	3308      	adds	r3, #8
 800baa8:	9303      	str	r3, [sp, #12]
 800baaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baac:	443b      	add	r3, r7
 800baae:	9309      	str	r3, [sp, #36]	@ 0x24
 800bab0:	e76a      	b.n	800b988 <_vfiprintf_r+0x78>
 800bab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab6:	460c      	mov	r4, r1
 800bab8:	2001      	movs	r0, #1
 800baba:	e7a8      	b.n	800ba0e <_vfiprintf_r+0xfe>
 800babc:	2300      	movs	r3, #0
 800babe:	3401      	adds	r4, #1
 800bac0:	9305      	str	r3, [sp, #20]
 800bac2:	4619      	mov	r1, r3
 800bac4:	f04f 0c0a 	mov.w	ip, #10
 800bac8:	4620      	mov	r0, r4
 800baca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bace:	3a30      	subs	r2, #48	@ 0x30
 800bad0:	2a09      	cmp	r2, #9
 800bad2:	d903      	bls.n	800badc <_vfiprintf_r+0x1cc>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0c6      	beq.n	800ba66 <_vfiprintf_r+0x156>
 800bad8:	9105      	str	r1, [sp, #20]
 800bada:	e7c4      	b.n	800ba66 <_vfiprintf_r+0x156>
 800badc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bae0:	4604      	mov	r4, r0
 800bae2:	2301      	movs	r3, #1
 800bae4:	e7f0      	b.n	800bac8 <_vfiprintf_r+0x1b8>
 800bae6:	ab03      	add	r3, sp, #12
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	462a      	mov	r2, r5
 800baec:	4b12      	ldr	r3, [pc, #72]	@ (800bb38 <_vfiprintf_r+0x228>)
 800baee:	a904      	add	r1, sp, #16
 800baf0:	4630      	mov	r0, r6
 800baf2:	f7fc f995 	bl	8007e20 <_printf_float>
 800baf6:	4607      	mov	r7, r0
 800baf8:	1c78      	adds	r0, r7, #1
 800bafa:	d1d6      	bne.n	800baaa <_vfiprintf_r+0x19a>
 800bafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bafe:	07d9      	lsls	r1, r3, #31
 800bb00:	d405      	bmi.n	800bb0e <_vfiprintf_r+0x1fe>
 800bb02:	89ab      	ldrh	r3, [r5, #12]
 800bb04:	059a      	lsls	r2, r3, #22
 800bb06:	d402      	bmi.n	800bb0e <_vfiprintf_r+0x1fe>
 800bb08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb0a:	f7fd fac5 	bl	8009098 <__retarget_lock_release_recursive>
 800bb0e:	89ab      	ldrh	r3, [r5, #12]
 800bb10:	065b      	lsls	r3, r3, #25
 800bb12:	f53f af1f 	bmi.w	800b954 <_vfiprintf_r+0x44>
 800bb16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb18:	e71e      	b.n	800b958 <_vfiprintf_r+0x48>
 800bb1a:	ab03      	add	r3, sp, #12
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	462a      	mov	r2, r5
 800bb20:	4b05      	ldr	r3, [pc, #20]	@ (800bb38 <_vfiprintf_r+0x228>)
 800bb22:	a904      	add	r1, sp, #16
 800bb24:	4630      	mov	r0, r6
 800bb26:	f7fc fc13 	bl	8008350 <_printf_i>
 800bb2a:	e7e4      	b.n	800baf6 <_vfiprintf_r+0x1e6>
 800bb2c:	0800d0eb 	.word	0x0800d0eb
 800bb30:	0800d0f5 	.word	0x0800d0f5
 800bb34:	08007e21 	.word	0x08007e21
 800bb38:	0800b8eb 	.word	0x0800b8eb
 800bb3c:	0800d0f1 	.word	0x0800d0f1

0800bb40 <__sflush_r>:
 800bb40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb48:	0716      	lsls	r6, r2, #28
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	d454      	bmi.n	800bbfa <__sflush_r+0xba>
 800bb50:	684b      	ldr	r3, [r1, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dc02      	bgt.n	800bb5c <__sflush_r+0x1c>
 800bb56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dd48      	ble.n	800bbee <__sflush_r+0xae>
 800bb5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb5e:	2e00      	cmp	r6, #0
 800bb60:	d045      	beq.n	800bbee <__sflush_r+0xae>
 800bb62:	2300      	movs	r3, #0
 800bb64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb68:	682f      	ldr	r7, [r5, #0]
 800bb6a:	6a21      	ldr	r1, [r4, #32]
 800bb6c:	602b      	str	r3, [r5, #0]
 800bb6e:	d030      	beq.n	800bbd2 <__sflush_r+0x92>
 800bb70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	0759      	lsls	r1, r3, #29
 800bb76:	d505      	bpl.n	800bb84 <__sflush_r+0x44>
 800bb78:	6863      	ldr	r3, [r4, #4]
 800bb7a:	1ad2      	subs	r2, r2, r3
 800bb7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb7e:	b10b      	cbz	r3, 800bb84 <__sflush_r+0x44>
 800bb80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb82:	1ad2      	subs	r2, r2, r3
 800bb84:	2300      	movs	r3, #0
 800bb86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb88:	6a21      	ldr	r1, [r4, #32]
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	47b0      	blx	r6
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	d106      	bne.n	800bba2 <__sflush_r+0x62>
 800bb94:	6829      	ldr	r1, [r5, #0]
 800bb96:	291d      	cmp	r1, #29
 800bb98:	d82b      	bhi.n	800bbf2 <__sflush_r+0xb2>
 800bb9a:	4a2a      	ldr	r2, [pc, #168]	@ (800bc44 <__sflush_r+0x104>)
 800bb9c:	40ca      	lsrs	r2, r1
 800bb9e:	07d6      	lsls	r6, r2, #31
 800bba0:	d527      	bpl.n	800bbf2 <__sflush_r+0xb2>
 800bba2:	2200      	movs	r2, #0
 800bba4:	6062      	str	r2, [r4, #4]
 800bba6:	04d9      	lsls	r1, r3, #19
 800bba8:	6922      	ldr	r2, [r4, #16]
 800bbaa:	6022      	str	r2, [r4, #0]
 800bbac:	d504      	bpl.n	800bbb8 <__sflush_r+0x78>
 800bbae:	1c42      	adds	r2, r0, #1
 800bbb0:	d101      	bne.n	800bbb6 <__sflush_r+0x76>
 800bbb2:	682b      	ldr	r3, [r5, #0]
 800bbb4:	b903      	cbnz	r3, 800bbb8 <__sflush_r+0x78>
 800bbb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bbb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbba:	602f      	str	r7, [r5, #0]
 800bbbc:	b1b9      	cbz	r1, 800bbee <__sflush_r+0xae>
 800bbbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbc2:	4299      	cmp	r1, r3
 800bbc4:	d002      	beq.n	800bbcc <__sflush_r+0x8c>
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f7fe f8f2 	bl	8009db0 <_free_r>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbd0:	e00d      	b.n	800bbee <__sflush_r+0xae>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47b0      	blx	r6
 800bbd8:	4602      	mov	r2, r0
 800bbda:	1c50      	adds	r0, r2, #1
 800bbdc:	d1c9      	bne.n	800bb72 <__sflush_r+0x32>
 800bbde:	682b      	ldr	r3, [r5, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d0c6      	beq.n	800bb72 <__sflush_r+0x32>
 800bbe4:	2b1d      	cmp	r3, #29
 800bbe6:	d001      	beq.n	800bbec <__sflush_r+0xac>
 800bbe8:	2b16      	cmp	r3, #22
 800bbea:	d11e      	bne.n	800bc2a <__sflush_r+0xea>
 800bbec:	602f      	str	r7, [r5, #0]
 800bbee:	2000      	movs	r0, #0
 800bbf0:	e022      	b.n	800bc38 <__sflush_r+0xf8>
 800bbf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf6:	b21b      	sxth	r3, r3
 800bbf8:	e01b      	b.n	800bc32 <__sflush_r+0xf2>
 800bbfa:	690f      	ldr	r7, [r1, #16]
 800bbfc:	2f00      	cmp	r7, #0
 800bbfe:	d0f6      	beq.n	800bbee <__sflush_r+0xae>
 800bc00:	0793      	lsls	r3, r2, #30
 800bc02:	680e      	ldr	r6, [r1, #0]
 800bc04:	bf08      	it	eq
 800bc06:	694b      	ldreq	r3, [r1, #20]
 800bc08:	600f      	str	r7, [r1, #0]
 800bc0a:	bf18      	it	ne
 800bc0c:	2300      	movne	r3, #0
 800bc0e:	eba6 0807 	sub.w	r8, r6, r7
 800bc12:	608b      	str	r3, [r1, #8]
 800bc14:	f1b8 0f00 	cmp.w	r8, #0
 800bc18:	dde9      	ble.n	800bbee <__sflush_r+0xae>
 800bc1a:	6a21      	ldr	r1, [r4, #32]
 800bc1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc1e:	4643      	mov	r3, r8
 800bc20:	463a      	mov	r2, r7
 800bc22:	4628      	mov	r0, r5
 800bc24:	47b0      	blx	r6
 800bc26:	2800      	cmp	r0, #0
 800bc28:	dc08      	bgt.n	800bc3c <__sflush_r+0xfc>
 800bc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc32:	81a3      	strh	r3, [r4, #12]
 800bc34:	f04f 30ff 	mov.w	r0, #4294967295
 800bc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc3c:	4407      	add	r7, r0
 800bc3e:	eba8 0800 	sub.w	r8, r8, r0
 800bc42:	e7e7      	b.n	800bc14 <__sflush_r+0xd4>
 800bc44:	20400001 	.word	0x20400001

0800bc48 <_fflush_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	690b      	ldr	r3, [r1, #16]
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	460c      	mov	r4, r1
 800bc50:	b913      	cbnz	r3, 800bc58 <_fflush_r+0x10>
 800bc52:	2500      	movs	r5, #0
 800bc54:	4628      	mov	r0, r5
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	b118      	cbz	r0, 800bc62 <_fflush_r+0x1a>
 800bc5a:	6a03      	ldr	r3, [r0, #32]
 800bc5c:	b90b      	cbnz	r3, 800bc62 <_fflush_r+0x1a>
 800bc5e:	f7fc ff2f 	bl	8008ac0 <__sinit>
 800bc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0f3      	beq.n	800bc52 <_fflush_r+0xa>
 800bc6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc6c:	07d0      	lsls	r0, r2, #31
 800bc6e:	d404      	bmi.n	800bc7a <_fflush_r+0x32>
 800bc70:	0599      	lsls	r1, r3, #22
 800bc72:	d402      	bmi.n	800bc7a <_fflush_r+0x32>
 800bc74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc76:	f7fd fa0e 	bl	8009096 <__retarget_lock_acquire_recursive>
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	f7ff ff5f 	bl	800bb40 <__sflush_r>
 800bc82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc84:	07da      	lsls	r2, r3, #31
 800bc86:	4605      	mov	r5, r0
 800bc88:	d4e4      	bmi.n	800bc54 <_fflush_r+0xc>
 800bc8a:	89a3      	ldrh	r3, [r4, #12]
 800bc8c:	059b      	lsls	r3, r3, #22
 800bc8e:	d4e1      	bmi.n	800bc54 <_fflush_r+0xc>
 800bc90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc92:	f7fd fa01 	bl	8009098 <__retarget_lock_release_recursive>
 800bc96:	e7dd      	b.n	800bc54 <_fflush_r+0xc>

0800bc98 <fiprintf>:
 800bc98:	b40e      	push	{r1, r2, r3}
 800bc9a:	b503      	push	{r0, r1, lr}
 800bc9c:	4601      	mov	r1, r0
 800bc9e:	ab03      	add	r3, sp, #12
 800bca0:	4805      	ldr	r0, [pc, #20]	@ (800bcb8 <fiprintf+0x20>)
 800bca2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bca6:	6800      	ldr	r0, [r0, #0]
 800bca8:	9301      	str	r3, [sp, #4]
 800bcaa:	f7ff fe31 	bl	800b910 <_vfiprintf_r>
 800bcae:	b002      	add	sp, #8
 800bcb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcb4:	b003      	add	sp, #12
 800bcb6:	4770      	bx	lr
 800bcb8:	20000060 	.word	0x20000060

0800bcbc <__swhatbuf_r>:
 800bcbc:	b570      	push	{r4, r5, r6, lr}
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc4:	2900      	cmp	r1, #0
 800bcc6:	b096      	sub	sp, #88	@ 0x58
 800bcc8:	4615      	mov	r5, r2
 800bcca:	461e      	mov	r6, r3
 800bccc:	da0d      	bge.n	800bcea <__swhatbuf_r+0x2e>
 800bcce:	89a3      	ldrh	r3, [r4, #12]
 800bcd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bcd4:	f04f 0100 	mov.w	r1, #0
 800bcd8:	bf14      	ite	ne
 800bcda:	2340      	movne	r3, #64	@ 0x40
 800bcdc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bce0:	2000      	movs	r0, #0
 800bce2:	6031      	str	r1, [r6, #0]
 800bce4:	602b      	str	r3, [r5, #0]
 800bce6:	b016      	add	sp, #88	@ 0x58
 800bce8:	bd70      	pop	{r4, r5, r6, pc}
 800bcea:	466a      	mov	r2, sp
 800bcec:	f000 f862 	bl	800bdb4 <_fstat_r>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	dbec      	blt.n	800bcce <__swhatbuf_r+0x12>
 800bcf4:	9901      	ldr	r1, [sp, #4]
 800bcf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcfa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcfe:	4259      	negs	r1, r3
 800bd00:	4159      	adcs	r1, r3
 800bd02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd06:	e7eb      	b.n	800bce0 <__swhatbuf_r+0x24>

0800bd08 <__smakebuf_r>:
 800bd08:	898b      	ldrh	r3, [r1, #12]
 800bd0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd0c:	079d      	lsls	r5, r3, #30
 800bd0e:	4606      	mov	r6, r0
 800bd10:	460c      	mov	r4, r1
 800bd12:	d507      	bpl.n	800bd24 <__smakebuf_r+0x1c>
 800bd14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd18:	6023      	str	r3, [r4, #0]
 800bd1a:	6123      	str	r3, [r4, #16]
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	6163      	str	r3, [r4, #20]
 800bd20:	b003      	add	sp, #12
 800bd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd24:	ab01      	add	r3, sp, #4
 800bd26:	466a      	mov	r2, sp
 800bd28:	f7ff ffc8 	bl	800bcbc <__swhatbuf_r>
 800bd2c:	9f00      	ldr	r7, [sp, #0]
 800bd2e:	4605      	mov	r5, r0
 800bd30:	4639      	mov	r1, r7
 800bd32:	4630      	mov	r0, r6
 800bd34:	f7fe f8b0 	bl	8009e98 <_malloc_r>
 800bd38:	b948      	cbnz	r0, 800bd4e <__smakebuf_r+0x46>
 800bd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd3e:	059a      	lsls	r2, r3, #22
 800bd40:	d4ee      	bmi.n	800bd20 <__smakebuf_r+0x18>
 800bd42:	f023 0303 	bic.w	r3, r3, #3
 800bd46:	f043 0302 	orr.w	r3, r3, #2
 800bd4a:	81a3      	strh	r3, [r4, #12]
 800bd4c:	e7e2      	b.n	800bd14 <__smakebuf_r+0xc>
 800bd4e:	89a3      	ldrh	r3, [r4, #12]
 800bd50:	6020      	str	r0, [r4, #0]
 800bd52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd56:	81a3      	strh	r3, [r4, #12]
 800bd58:	9b01      	ldr	r3, [sp, #4]
 800bd5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd5e:	b15b      	cbz	r3, 800bd78 <__smakebuf_r+0x70>
 800bd60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd64:	4630      	mov	r0, r6
 800bd66:	f000 f837 	bl	800bdd8 <_isatty_r>
 800bd6a:	b128      	cbz	r0, 800bd78 <__smakebuf_r+0x70>
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	f023 0303 	bic.w	r3, r3, #3
 800bd72:	f043 0301 	orr.w	r3, r3, #1
 800bd76:	81a3      	strh	r3, [r4, #12]
 800bd78:	89a3      	ldrh	r3, [r4, #12]
 800bd7a:	431d      	orrs	r5, r3
 800bd7c:	81a5      	strh	r5, [r4, #12]
 800bd7e:	e7cf      	b.n	800bd20 <__smakebuf_r+0x18>

0800bd80 <memmove>:
 800bd80:	4288      	cmp	r0, r1
 800bd82:	b510      	push	{r4, lr}
 800bd84:	eb01 0402 	add.w	r4, r1, r2
 800bd88:	d902      	bls.n	800bd90 <memmove+0x10>
 800bd8a:	4284      	cmp	r4, r0
 800bd8c:	4623      	mov	r3, r4
 800bd8e:	d807      	bhi.n	800bda0 <memmove+0x20>
 800bd90:	1e43      	subs	r3, r0, #1
 800bd92:	42a1      	cmp	r1, r4
 800bd94:	d008      	beq.n	800bda8 <memmove+0x28>
 800bd96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd9e:	e7f8      	b.n	800bd92 <memmove+0x12>
 800bda0:	4402      	add	r2, r0
 800bda2:	4601      	mov	r1, r0
 800bda4:	428a      	cmp	r2, r1
 800bda6:	d100      	bne.n	800bdaa <memmove+0x2a>
 800bda8:	bd10      	pop	{r4, pc}
 800bdaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdb2:	e7f7      	b.n	800bda4 <memmove+0x24>

0800bdb4 <_fstat_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4d07      	ldr	r5, [pc, #28]	@ (800bdd4 <_fstat_r+0x20>)
 800bdb8:	2300      	movs	r3, #0
 800bdba:	4604      	mov	r4, r0
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	602b      	str	r3, [r5, #0]
 800bdc2:	f7f5 fbca 	bl	800155a <_fstat>
 800bdc6:	1c43      	adds	r3, r0, #1
 800bdc8:	d102      	bne.n	800bdd0 <_fstat_r+0x1c>
 800bdca:	682b      	ldr	r3, [r5, #0]
 800bdcc:	b103      	cbz	r3, 800bdd0 <_fstat_r+0x1c>
 800bdce:	6023      	str	r3, [r4, #0]
 800bdd0:	bd38      	pop	{r3, r4, r5, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20000e34 	.word	0x20000e34

0800bdd8 <_isatty_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4d06      	ldr	r5, [pc, #24]	@ (800bdf4 <_isatty_r+0x1c>)
 800bddc:	2300      	movs	r3, #0
 800bdde:	4604      	mov	r4, r0
 800bde0:	4608      	mov	r0, r1
 800bde2:	602b      	str	r3, [r5, #0]
 800bde4:	f7f5 fbc9 	bl	800157a <_isatty>
 800bde8:	1c43      	adds	r3, r0, #1
 800bdea:	d102      	bne.n	800bdf2 <_isatty_r+0x1a>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	b103      	cbz	r3, 800bdf2 <_isatty_r+0x1a>
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	bd38      	pop	{r3, r4, r5, pc}
 800bdf4:	20000e34 	.word	0x20000e34

0800bdf8 <_sbrk_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	4d06      	ldr	r5, [pc, #24]	@ (800be14 <_sbrk_r+0x1c>)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4604      	mov	r4, r0
 800be00:	4608      	mov	r0, r1
 800be02:	602b      	str	r3, [r5, #0]
 800be04:	f7f5 fbd2 	bl	80015ac <_sbrk>
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	d102      	bne.n	800be12 <_sbrk_r+0x1a>
 800be0c:	682b      	ldr	r3, [r5, #0]
 800be0e:	b103      	cbz	r3, 800be12 <_sbrk_r+0x1a>
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	20000e34 	.word	0x20000e34

0800be18 <nan>:
 800be18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be20 <nan+0x8>
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	00000000 	.word	0x00000000
 800be24:	7ff80000 	.word	0x7ff80000

0800be28 <abort>:
 800be28:	b508      	push	{r3, lr}
 800be2a:	2006      	movs	r0, #6
 800be2c:	f000 fbc4 	bl	800c5b8 <raise>
 800be30:	2001      	movs	r0, #1
 800be32:	f7f5 fb42 	bl	80014ba <_exit>

0800be36 <_calloc_r>:
 800be36:	b570      	push	{r4, r5, r6, lr}
 800be38:	fba1 5402 	umull	r5, r4, r1, r2
 800be3c:	b934      	cbnz	r4, 800be4c <_calloc_r+0x16>
 800be3e:	4629      	mov	r1, r5
 800be40:	f7fe f82a 	bl	8009e98 <_malloc_r>
 800be44:	4606      	mov	r6, r0
 800be46:	b928      	cbnz	r0, 800be54 <_calloc_r+0x1e>
 800be48:	4630      	mov	r0, r6
 800be4a:	bd70      	pop	{r4, r5, r6, pc}
 800be4c:	220c      	movs	r2, #12
 800be4e:	6002      	str	r2, [r0, #0]
 800be50:	2600      	movs	r6, #0
 800be52:	e7f9      	b.n	800be48 <_calloc_r+0x12>
 800be54:	462a      	mov	r2, r5
 800be56:	4621      	mov	r1, r4
 800be58:	f7fd f808 	bl	8008e6c <memset>
 800be5c:	e7f4      	b.n	800be48 <_calloc_r+0x12>

0800be5e <rshift>:
 800be5e:	6903      	ldr	r3, [r0, #16]
 800be60:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be68:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be6c:	f100 0414 	add.w	r4, r0, #20
 800be70:	dd45      	ble.n	800befe <rshift+0xa0>
 800be72:	f011 011f 	ands.w	r1, r1, #31
 800be76:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800be7a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800be7e:	d10c      	bne.n	800be9a <rshift+0x3c>
 800be80:	f100 0710 	add.w	r7, r0, #16
 800be84:	4629      	mov	r1, r5
 800be86:	42b1      	cmp	r1, r6
 800be88:	d334      	bcc.n	800bef4 <rshift+0x96>
 800be8a:	1a9b      	subs	r3, r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	1eea      	subs	r2, r5, #3
 800be90:	4296      	cmp	r6, r2
 800be92:	bf38      	it	cc
 800be94:	2300      	movcc	r3, #0
 800be96:	4423      	add	r3, r4
 800be98:	e015      	b.n	800bec6 <rshift+0x68>
 800be9a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800be9e:	f1c1 0820 	rsb	r8, r1, #32
 800bea2:	40cf      	lsrs	r7, r1
 800bea4:	f105 0e04 	add.w	lr, r5, #4
 800bea8:	46a1      	mov	r9, r4
 800beaa:	4576      	cmp	r6, lr
 800beac:	46f4      	mov	ip, lr
 800beae:	d815      	bhi.n	800bedc <rshift+0x7e>
 800beb0:	1a9a      	subs	r2, r3, r2
 800beb2:	0092      	lsls	r2, r2, #2
 800beb4:	3a04      	subs	r2, #4
 800beb6:	3501      	adds	r5, #1
 800beb8:	42ae      	cmp	r6, r5
 800beba:	bf38      	it	cc
 800bebc:	2200      	movcc	r2, #0
 800bebe:	18a3      	adds	r3, r4, r2
 800bec0:	50a7      	str	r7, [r4, r2]
 800bec2:	b107      	cbz	r7, 800bec6 <rshift+0x68>
 800bec4:	3304      	adds	r3, #4
 800bec6:	1b1a      	subs	r2, r3, r4
 800bec8:	42a3      	cmp	r3, r4
 800beca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bece:	bf08      	it	eq
 800bed0:	2300      	moveq	r3, #0
 800bed2:	6102      	str	r2, [r0, #16]
 800bed4:	bf08      	it	eq
 800bed6:	6143      	streq	r3, [r0, #20]
 800bed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bedc:	f8dc c000 	ldr.w	ip, [ip]
 800bee0:	fa0c fc08 	lsl.w	ip, ip, r8
 800bee4:	ea4c 0707 	orr.w	r7, ip, r7
 800bee8:	f849 7b04 	str.w	r7, [r9], #4
 800beec:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bef0:	40cf      	lsrs	r7, r1
 800bef2:	e7da      	b.n	800beaa <rshift+0x4c>
 800bef4:	f851 cb04 	ldr.w	ip, [r1], #4
 800bef8:	f847 cf04 	str.w	ip, [r7, #4]!
 800befc:	e7c3      	b.n	800be86 <rshift+0x28>
 800befe:	4623      	mov	r3, r4
 800bf00:	e7e1      	b.n	800bec6 <rshift+0x68>

0800bf02 <__hexdig_fun>:
 800bf02:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bf06:	2b09      	cmp	r3, #9
 800bf08:	d802      	bhi.n	800bf10 <__hexdig_fun+0xe>
 800bf0a:	3820      	subs	r0, #32
 800bf0c:	b2c0      	uxtb	r0, r0
 800bf0e:	4770      	bx	lr
 800bf10:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bf14:	2b05      	cmp	r3, #5
 800bf16:	d801      	bhi.n	800bf1c <__hexdig_fun+0x1a>
 800bf18:	3847      	subs	r0, #71	@ 0x47
 800bf1a:	e7f7      	b.n	800bf0c <__hexdig_fun+0xa>
 800bf1c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bf20:	2b05      	cmp	r3, #5
 800bf22:	d801      	bhi.n	800bf28 <__hexdig_fun+0x26>
 800bf24:	3827      	subs	r0, #39	@ 0x27
 800bf26:	e7f1      	b.n	800bf0c <__hexdig_fun+0xa>
 800bf28:	2000      	movs	r0, #0
 800bf2a:	4770      	bx	lr

0800bf2c <__gethex>:
 800bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf30:	b085      	sub	sp, #20
 800bf32:	468a      	mov	sl, r1
 800bf34:	9302      	str	r3, [sp, #8]
 800bf36:	680b      	ldr	r3, [r1, #0]
 800bf38:	9001      	str	r0, [sp, #4]
 800bf3a:	4690      	mov	r8, r2
 800bf3c:	1c9c      	adds	r4, r3, #2
 800bf3e:	46a1      	mov	r9, r4
 800bf40:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bf44:	2830      	cmp	r0, #48	@ 0x30
 800bf46:	d0fa      	beq.n	800bf3e <__gethex+0x12>
 800bf48:	eba9 0303 	sub.w	r3, r9, r3
 800bf4c:	f1a3 0b02 	sub.w	fp, r3, #2
 800bf50:	f7ff ffd7 	bl	800bf02 <__hexdig_fun>
 800bf54:	4605      	mov	r5, r0
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d168      	bne.n	800c02c <__gethex+0x100>
 800bf5a:	49a0      	ldr	r1, [pc, #640]	@ (800c1dc <__gethex+0x2b0>)
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	4648      	mov	r0, r9
 800bf60:	f7fc ff8c 	bl	8008e7c <strncmp>
 800bf64:	4607      	mov	r7, r0
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d167      	bne.n	800c03a <__gethex+0x10e>
 800bf6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bf6e:	4626      	mov	r6, r4
 800bf70:	f7ff ffc7 	bl	800bf02 <__hexdig_fun>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d062      	beq.n	800c03e <__gethex+0x112>
 800bf78:	4623      	mov	r3, r4
 800bf7a:	7818      	ldrb	r0, [r3, #0]
 800bf7c:	2830      	cmp	r0, #48	@ 0x30
 800bf7e:	4699      	mov	r9, r3
 800bf80:	f103 0301 	add.w	r3, r3, #1
 800bf84:	d0f9      	beq.n	800bf7a <__gethex+0x4e>
 800bf86:	f7ff ffbc 	bl	800bf02 <__hexdig_fun>
 800bf8a:	fab0 f580 	clz	r5, r0
 800bf8e:	096d      	lsrs	r5, r5, #5
 800bf90:	f04f 0b01 	mov.w	fp, #1
 800bf94:	464a      	mov	r2, r9
 800bf96:	4616      	mov	r6, r2
 800bf98:	3201      	adds	r2, #1
 800bf9a:	7830      	ldrb	r0, [r6, #0]
 800bf9c:	f7ff ffb1 	bl	800bf02 <__hexdig_fun>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d1f8      	bne.n	800bf96 <__gethex+0x6a>
 800bfa4:	498d      	ldr	r1, [pc, #564]	@ (800c1dc <__gethex+0x2b0>)
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	f7fc ff67 	bl	8008e7c <strncmp>
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	d13f      	bne.n	800c032 <__gethex+0x106>
 800bfb2:	b944      	cbnz	r4, 800bfc6 <__gethex+0x9a>
 800bfb4:	1c74      	adds	r4, r6, #1
 800bfb6:	4622      	mov	r2, r4
 800bfb8:	4616      	mov	r6, r2
 800bfba:	3201      	adds	r2, #1
 800bfbc:	7830      	ldrb	r0, [r6, #0]
 800bfbe:	f7ff ffa0 	bl	800bf02 <__hexdig_fun>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d1f8      	bne.n	800bfb8 <__gethex+0x8c>
 800bfc6:	1ba4      	subs	r4, r4, r6
 800bfc8:	00a7      	lsls	r7, r4, #2
 800bfca:	7833      	ldrb	r3, [r6, #0]
 800bfcc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bfd0:	2b50      	cmp	r3, #80	@ 0x50
 800bfd2:	d13e      	bne.n	800c052 <__gethex+0x126>
 800bfd4:	7873      	ldrb	r3, [r6, #1]
 800bfd6:	2b2b      	cmp	r3, #43	@ 0x2b
 800bfd8:	d033      	beq.n	800c042 <__gethex+0x116>
 800bfda:	2b2d      	cmp	r3, #45	@ 0x2d
 800bfdc:	d034      	beq.n	800c048 <__gethex+0x11c>
 800bfde:	1c71      	adds	r1, r6, #1
 800bfe0:	2400      	movs	r4, #0
 800bfe2:	7808      	ldrb	r0, [r1, #0]
 800bfe4:	f7ff ff8d 	bl	800bf02 <__hexdig_fun>
 800bfe8:	1e43      	subs	r3, r0, #1
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	2b18      	cmp	r3, #24
 800bfee:	d830      	bhi.n	800c052 <__gethex+0x126>
 800bff0:	f1a0 0210 	sub.w	r2, r0, #16
 800bff4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bff8:	f7ff ff83 	bl	800bf02 <__hexdig_fun>
 800bffc:	f100 3cff 	add.w	ip, r0, #4294967295
 800c000:	fa5f fc8c 	uxtb.w	ip, ip
 800c004:	f1bc 0f18 	cmp.w	ip, #24
 800c008:	f04f 030a 	mov.w	r3, #10
 800c00c:	d91e      	bls.n	800c04c <__gethex+0x120>
 800c00e:	b104      	cbz	r4, 800c012 <__gethex+0xe6>
 800c010:	4252      	negs	r2, r2
 800c012:	4417      	add	r7, r2
 800c014:	f8ca 1000 	str.w	r1, [sl]
 800c018:	b1ed      	cbz	r5, 800c056 <__gethex+0x12a>
 800c01a:	f1bb 0f00 	cmp.w	fp, #0
 800c01e:	bf0c      	ite	eq
 800c020:	2506      	moveq	r5, #6
 800c022:	2500      	movne	r5, #0
 800c024:	4628      	mov	r0, r5
 800c026:	b005      	add	sp, #20
 800c028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c02c:	2500      	movs	r5, #0
 800c02e:	462c      	mov	r4, r5
 800c030:	e7b0      	b.n	800bf94 <__gethex+0x68>
 800c032:	2c00      	cmp	r4, #0
 800c034:	d1c7      	bne.n	800bfc6 <__gethex+0x9a>
 800c036:	4627      	mov	r7, r4
 800c038:	e7c7      	b.n	800bfca <__gethex+0x9e>
 800c03a:	464e      	mov	r6, r9
 800c03c:	462f      	mov	r7, r5
 800c03e:	2501      	movs	r5, #1
 800c040:	e7c3      	b.n	800bfca <__gethex+0x9e>
 800c042:	2400      	movs	r4, #0
 800c044:	1cb1      	adds	r1, r6, #2
 800c046:	e7cc      	b.n	800bfe2 <__gethex+0xb6>
 800c048:	2401      	movs	r4, #1
 800c04a:	e7fb      	b.n	800c044 <__gethex+0x118>
 800c04c:	fb03 0002 	mla	r0, r3, r2, r0
 800c050:	e7ce      	b.n	800bff0 <__gethex+0xc4>
 800c052:	4631      	mov	r1, r6
 800c054:	e7de      	b.n	800c014 <__gethex+0xe8>
 800c056:	eba6 0309 	sub.w	r3, r6, r9
 800c05a:	3b01      	subs	r3, #1
 800c05c:	4629      	mov	r1, r5
 800c05e:	2b07      	cmp	r3, #7
 800c060:	dc0a      	bgt.n	800c078 <__gethex+0x14c>
 800c062:	9801      	ldr	r0, [sp, #4]
 800c064:	f7fd ffa4 	bl	8009fb0 <_Balloc>
 800c068:	4604      	mov	r4, r0
 800c06a:	b940      	cbnz	r0, 800c07e <__gethex+0x152>
 800c06c:	4b5c      	ldr	r3, [pc, #368]	@ (800c1e0 <__gethex+0x2b4>)
 800c06e:	4602      	mov	r2, r0
 800c070:	21e4      	movs	r1, #228	@ 0xe4
 800c072:	485c      	ldr	r0, [pc, #368]	@ (800c1e4 <__gethex+0x2b8>)
 800c074:	f7fd f826 	bl	80090c4 <__assert_func>
 800c078:	3101      	adds	r1, #1
 800c07a:	105b      	asrs	r3, r3, #1
 800c07c:	e7ef      	b.n	800c05e <__gethex+0x132>
 800c07e:	f100 0a14 	add.w	sl, r0, #20
 800c082:	2300      	movs	r3, #0
 800c084:	4655      	mov	r5, sl
 800c086:	469b      	mov	fp, r3
 800c088:	45b1      	cmp	r9, r6
 800c08a:	d337      	bcc.n	800c0fc <__gethex+0x1d0>
 800c08c:	f845 bb04 	str.w	fp, [r5], #4
 800c090:	eba5 050a 	sub.w	r5, r5, sl
 800c094:	10ad      	asrs	r5, r5, #2
 800c096:	6125      	str	r5, [r4, #16]
 800c098:	4658      	mov	r0, fp
 800c09a:	f7fe f87b 	bl	800a194 <__hi0bits>
 800c09e:	016d      	lsls	r5, r5, #5
 800c0a0:	f8d8 6000 	ldr.w	r6, [r8]
 800c0a4:	1a2d      	subs	r5, r5, r0
 800c0a6:	42b5      	cmp	r5, r6
 800c0a8:	dd54      	ble.n	800c154 <__gethex+0x228>
 800c0aa:	1bad      	subs	r5, r5, r6
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f7fe fc07 	bl	800a8c2 <__any_on>
 800c0b4:	4681      	mov	r9, r0
 800c0b6:	b178      	cbz	r0, 800c0d8 <__gethex+0x1ac>
 800c0b8:	1e6b      	subs	r3, r5, #1
 800c0ba:	1159      	asrs	r1, r3, #5
 800c0bc:	f003 021f 	and.w	r2, r3, #31
 800c0c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c0c4:	f04f 0901 	mov.w	r9, #1
 800c0c8:	fa09 f202 	lsl.w	r2, r9, r2
 800c0cc:	420a      	tst	r2, r1
 800c0ce:	d003      	beq.n	800c0d8 <__gethex+0x1ac>
 800c0d0:	454b      	cmp	r3, r9
 800c0d2:	dc36      	bgt.n	800c142 <__gethex+0x216>
 800c0d4:	f04f 0902 	mov.w	r9, #2
 800c0d8:	4629      	mov	r1, r5
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f7ff febf 	bl	800be5e <rshift>
 800c0e0:	442f      	add	r7, r5
 800c0e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0e6:	42bb      	cmp	r3, r7
 800c0e8:	da42      	bge.n	800c170 <__gethex+0x244>
 800c0ea:	9801      	ldr	r0, [sp, #4]
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	f7fd ff9f 	bl	800a030 <_Bfree>
 800c0f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	6013      	str	r3, [r2, #0]
 800c0f8:	25a3      	movs	r5, #163	@ 0xa3
 800c0fa:	e793      	b.n	800c024 <__gethex+0xf8>
 800c0fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c100:	2a2e      	cmp	r2, #46	@ 0x2e
 800c102:	d012      	beq.n	800c12a <__gethex+0x1fe>
 800c104:	2b20      	cmp	r3, #32
 800c106:	d104      	bne.n	800c112 <__gethex+0x1e6>
 800c108:	f845 bb04 	str.w	fp, [r5], #4
 800c10c:	f04f 0b00 	mov.w	fp, #0
 800c110:	465b      	mov	r3, fp
 800c112:	7830      	ldrb	r0, [r6, #0]
 800c114:	9303      	str	r3, [sp, #12]
 800c116:	f7ff fef4 	bl	800bf02 <__hexdig_fun>
 800c11a:	9b03      	ldr	r3, [sp, #12]
 800c11c:	f000 000f 	and.w	r0, r0, #15
 800c120:	4098      	lsls	r0, r3
 800c122:	ea4b 0b00 	orr.w	fp, fp, r0
 800c126:	3304      	adds	r3, #4
 800c128:	e7ae      	b.n	800c088 <__gethex+0x15c>
 800c12a:	45b1      	cmp	r9, r6
 800c12c:	d8ea      	bhi.n	800c104 <__gethex+0x1d8>
 800c12e:	492b      	ldr	r1, [pc, #172]	@ (800c1dc <__gethex+0x2b0>)
 800c130:	9303      	str	r3, [sp, #12]
 800c132:	2201      	movs	r2, #1
 800c134:	4630      	mov	r0, r6
 800c136:	f7fc fea1 	bl	8008e7c <strncmp>
 800c13a:	9b03      	ldr	r3, [sp, #12]
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d1e1      	bne.n	800c104 <__gethex+0x1d8>
 800c140:	e7a2      	b.n	800c088 <__gethex+0x15c>
 800c142:	1ea9      	subs	r1, r5, #2
 800c144:	4620      	mov	r0, r4
 800c146:	f7fe fbbc 	bl	800a8c2 <__any_on>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d0c2      	beq.n	800c0d4 <__gethex+0x1a8>
 800c14e:	f04f 0903 	mov.w	r9, #3
 800c152:	e7c1      	b.n	800c0d8 <__gethex+0x1ac>
 800c154:	da09      	bge.n	800c16a <__gethex+0x23e>
 800c156:	1b75      	subs	r5, r6, r5
 800c158:	4621      	mov	r1, r4
 800c15a:	9801      	ldr	r0, [sp, #4]
 800c15c:	462a      	mov	r2, r5
 800c15e:	f7fe f977 	bl	800a450 <__lshift>
 800c162:	1b7f      	subs	r7, r7, r5
 800c164:	4604      	mov	r4, r0
 800c166:	f100 0a14 	add.w	sl, r0, #20
 800c16a:	f04f 0900 	mov.w	r9, #0
 800c16e:	e7b8      	b.n	800c0e2 <__gethex+0x1b6>
 800c170:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c174:	42bd      	cmp	r5, r7
 800c176:	dd6f      	ble.n	800c258 <__gethex+0x32c>
 800c178:	1bed      	subs	r5, r5, r7
 800c17a:	42ae      	cmp	r6, r5
 800c17c:	dc34      	bgt.n	800c1e8 <__gethex+0x2bc>
 800c17e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c182:	2b02      	cmp	r3, #2
 800c184:	d022      	beq.n	800c1cc <__gethex+0x2a0>
 800c186:	2b03      	cmp	r3, #3
 800c188:	d024      	beq.n	800c1d4 <__gethex+0x2a8>
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d115      	bne.n	800c1ba <__gethex+0x28e>
 800c18e:	42ae      	cmp	r6, r5
 800c190:	d113      	bne.n	800c1ba <__gethex+0x28e>
 800c192:	2e01      	cmp	r6, #1
 800c194:	d10b      	bne.n	800c1ae <__gethex+0x282>
 800c196:	9a02      	ldr	r2, [sp, #8]
 800c198:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c19c:	6013      	str	r3, [r2, #0]
 800c19e:	2301      	movs	r3, #1
 800c1a0:	6123      	str	r3, [r4, #16]
 800c1a2:	f8ca 3000 	str.w	r3, [sl]
 800c1a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1a8:	2562      	movs	r5, #98	@ 0x62
 800c1aa:	601c      	str	r4, [r3, #0]
 800c1ac:	e73a      	b.n	800c024 <__gethex+0xf8>
 800c1ae:	1e71      	subs	r1, r6, #1
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f7fe fb86 	bl	800a8c2 <__any_on>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d1ed      	bne.n	800c196 <__gethex+0x26a>
 800c1ba:	9801      	ldr	r0, [sp, #4]
 800c1bc:	4621      	mov	r1, r4
 800c1be:	f7fd ff37 	bl	800a030 <_Bfree>
 800c1c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	2550      	movs	r5, #80	@ 0x50
 800c1ca:	e72b      	b.n	800c024 <__gethex+0xf8>
 800c1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1f3      	bne.n	800c1ba <__gethex+0x28e>
 800c1d2:	e7e0      	b.n	800c196 <__gethex+0x26a>
 800c1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1dd      	bne.n	800c196 <__gethex+0x26a>
 800c1da:	e7ee      	b.n	800c1ba <__gethex+0x28e>
 800c1dc:	0800d0e9 	.word	0x0800d0e9
 800c1e0:	0800d07f 	.word	0x0800d07f
 800c1e4:	0800d104 	.word	0x0800d104
 800c1e8:	1e6f      	subs	r7, r5, #1
 800c1ea:	f1b9 0f00 	cmp.w	r9, #0
 800c1ee:	d130      	bne.n	800c252 <__gethex+0x326>
 800c1f0:	b127      	cbz	r7, 800c1fc <__gethex+0x2d0>
 800c1f2:	4639      	mov	r1, r7
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f7fe fb64 	bl	800a8c2 <__any_on>
 800c1fa:	4681      	mov	r9, r0
 800c1fc:	117a      	asrs	r2, r7, #5
 800c1fe:	2301      	movs	r3, #1
 800c200:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c204:	f007 071f 	and.w	r7, r7, #31
 800c208:	40bb      	lsls	r3, r7
 800c20a:	4213      	tst	r3, r2
 800c20c:	4629      	mov	r1, r5
 800c20e:	4620      	mov	r0, r4
 800c210:	bf18      	it	ne
 800c212:	f049 0902 	orrne.w	r9, r9, #2
 800c216:	f7ff fe22 	bl	800be5e <rshift>
 800c21a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c21e:	1b76      	subs	r6, r6, r5
 800c220:	2502      	movs	r5, #2
 800c222:	f1b9 0f00 	cmp.w	r9, #0
 800c226:	d047      	beq.n	800c2b8 <__gethex+0x38c>
 800c228:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d015      	beq.n	800c25c <__gethex+0x330>
 800c230:	2b03      	cmp	r3, #3
 800c232:	d017      	beq.n	800c264 <__gethex+0x338>
 800c234:	2b01      	cmp	r3, #1
 800c236:	d109      	bne.n	800c24c <__gethex+0x320>
 800c238:	f019 0f02 	tst.w	r9, #2
 800c23c:	d006      	beq.n	800c24c <__gethex+0x320>
 800c23e:	f8da 3000 	ldr.w	r3, [sl]
 800c242:	ea49 0903 	orr.w	r9, r9, r3
 800c246:	f019 0f01 	tst.w	r9, #1
 800c24a:	d10e      	bne.n	800c26a <__gethex+0x33e>
 800c24c:	f045 0510 	orr.w	r5, r5, #16
 800c250:	e032      	b.n	800c2b8 <__gethex+0x38c>
 800c252:	f04f 0901 	mov.w	r9, #1
 800c256:	e7d1      	b.n	800c1fc <__gethex+0x2d0>
 800c258:	2501      	movs	r5, #1
 800c25a:	e7e2      	b.n	800c222 <__gethex+0x2f6>
 800c25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c25e:	f1c3 0301 	rsb	r3, r3, #1
 800c262:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d0f0      	beq.n	800c24c <__gethex+0x320>
 800c26a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c26e:	f104 0314 	add.w	r3, r4, #20
 800c272:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c276:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c27a:	f04f 0c00 	mov.w	ip, #0
 800c27e:	4618      	mov	r0, r3
 800c280:	f853 2b04 	ldr.w	r2, [r3], #4
 800c284:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c288:	d01b      	beq.n	800c2c2 <__gethex+0x396>
 800c28a:	3201      	adds	r2, #1
 800c28c:	6002      	str	r2, [r0, #0]
 800c28e:	2d02      	cmp	r5, #2
 800c290:	f104 0314 	add.w	r3, r4, #20
 800c294:	d13c      	bne.n	800c310 <__gethex+0x3e4>
 800c296:	f8d8 2000 	ldr.w	r2, [r8]
 800c29a:	3a01      	subs	r2, #1
 800c29c:	42b2      	cmp	r2, r6
 800c29e:	d109      	bne.n	800c2b4 <__gethex+0x388>
 800c2a0:	1171      	asrs	r1, r6, #5
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c2a8:	f006 061f 	and.w	r6, r6, #31
 800c2ac:	fa02 f606 	lsl.w	r6, r2, r6
 800c2b0:	421e      	tst	r6, r3
 800c2b2:	d13a      	bne.n	800c32a <__gethex+0x3fe>
 800c2b4:	f045 0520 	orr.w	r5, r5, #32
 800c2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2ba:	601c      	str	r4, [r3, #0]
 800c2bc:	9b02      	ldr	r3, [sp, #8]
 800c2be:	601f      	str	r7, [r3, #0]
 800c2c0:	e6b0      	b.n	800c024 <__gethex+0xf8>
 800c2c2:	4299      	cmp	r1, r3
 800c2c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c2c8:	d8d9      	bhi.n	800c27e <__gethex+0x352>
 800c2ca:	68a3      	ldr	r3, [r4, #8]
 800c2cc:	459b      	cmp	fp, r3
 800c2ce:	db17      	blt.n	800c300 <__gethex+0x3d4>
 800c2d0:	6861      	ldr	r1, [r4, #4]
 800c2d2:	9801      	ldr	r0, [sp, #4]
 800c2d4:	3101      	adds	r1, #1
 800c2d6:	f7fd fe6b 	bl	8009fb0 <_Balloc>
 800c2da:	4681      	mov	r9, r0
 800c2dc:	b918      	cbnz	r0, 800c2e6 <__gethex+0x3ba>
 800c2de:	4b1a      	ldr	r3, [pc, #104]	@ (800c348 <__gethex+0x41c>)
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	2184      	movs	r1, #132	@ 0x84
 800c2e4:	e6c5      	b.n	800c072 <__gethex+0x146>
 800c2e6:	6922      	ldr	r2, [r4, #16]
 800c2e8:	3202      	adds	r2, #2
 800c2ea:	f104 010c 	add.w	r1, r4, #12
 800c2ee:	0092      	lsls	r2, r2, #2
 800c2f0:	300c      	adds	r0, #12
 800c2f2:	f7fc fed2 	bl	800909a <memcpy>
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	9801      	ldr	r0, [sp, #4]
 800c2fa:	f7fd fe99 	bl	800a030 <_Bfree>
 800c2fe:	464c      	mov	r4, r9
 800c300:	6923      	ldr	r3, [r4, #16]
 800c302:	1c5a      	adds	r2, r3, #1
 800c304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c308:	6122      	str	r2, [r4, #16]
 800c30a:	2201      	movs	r2, #1
 800c30c:	615a      	str	r2, [r3, #20]
 800c30e:	e7be      	b.n	800c28e <__gethex+0x362>
 800c310:	6922      	ldr	r2, [r4, #16]
 800c312:	455a      	cmp	r2, fp
 800c314:	dd0b      	ble.n	800c32e <__gethex+0x402>
 800c316:	2101      	movs	r1, #1
 800c318:	4620      	mov	r0, r4
 800c31a:	f7ff fda0 	bl	800be5e <rshift>
 800c31e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c322:	3701      	adds	r7, #1
 800c324:	42bb      	cmp	r3, r7
 800c326:	f6ff aee0 	blt.w	800c0ea <__gethex+0x1be>
 800c32a:	2501      	movs	r5, #1
 800c32c:	e7c2      	b.n	800c2b4 <__gethex+0x388>
 800c32e:	f016 061f 	ands.w	r6, r6, #31
 800c332:	d0fa      	beq.n	800c32a <__gethex+0x3fe>
 800c334:	4453      	add	r3, sl
 800c336:	f1c6 0620 	rsb	r6, r6, #32
 800c33a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c33e:	f7fd ff29 	bl	800a194 <__hi0bits>
 800c342:	42b0      	cmp	r0, r6
 800c344:	dbe7      	blt.n	800c316 <__gethex+0x3ea>
 800c346:	e7f0      	b.n	800c32a <__gethex+0x3fe>
 800c348:	0800d07f 	.word	0x0800d07f

0800c34c <L_shift>:
 800c34c:	f1c2 0208 	rsb	r2, r2, #8
 800c350:	0092      	lsls	r2, r2, #2
 800c352:	b570      	push	{r4, r5, r6, lr}
 800c354:	f1c2 0620 	rsb	r6, r2, #32
 800c358:	6843      	ldr	r3, [r0, #4]
 800c35a:	6804      	ldr	r4, [r0, #0]
 800c35c:	fa03 f506 	lsl.w	r5, r3, r6
 800c360:	432c      	orrs	r4, r5
 800c362:	40d3      	lsrs	r3, r2
 800c364:	6004      	str	r4, [r0, #0]
 800c366:	f840 3f04 	str.w	r3, [r0, #4]!
 800c36a:	4288      	cmp	r0, r1
 800c36c:	d3f4      	bcc.n	800c358 <L_shift+0xc>
 800c36e:	bd70      	pop	{r4, r5, r6, pc}

0800c370 <__match>:
 800c370:	b530      	push	{r4, r5, lr}
 800c372:	6803      	ldr	r3, [r0, #0]
 800c374:	3301      	adds	r3, #1
 800c376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c37a:	b914      	cbnz	r4, 800c382 <__match+0x12>
 800c37c:	6003      	str	r3, [r0, #0]
 800c37e:	2001      	movs	r0, #1
 800c380:	bd30      	pop	{r4, r5, pc}
 800c382:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c386:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c38a:	2d19      	cmp	r5, #25
 800c38c:	bf98      	it	ls
 800c38e:	3220      	addls	r2, #32
 800c390:	42a2      	cmp	r2, r4
 800c392:	d0f0      	beq.n	800c376 <__match+0x6>
 800c394:	2000      	movs	r0, #0
 800c396:	e7f3      	b.n	800c380 <__match+0x10>

0800c398 <__hexnan>:
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	680b      	ldr	r3, [r1, #0]
 800c39e:	6801      	ldr	r1, [r0, #0]
 800c3a0:	115e      	asrs	r6, r3, #5
 800c3a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c3a6:	f013 031f 	ands.w	r3, r3, #31
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	bf18      	it	ne
 800c3ae:	3604      	addne	r6, #4
 800c3b0:	2500      	movs	r5, #0
 800c3b2:	1f37      	subs	r7, r6, #4
 800c3b4:	4682      	mov	sl, r0
 800c3b6:	4690      	mov	r8, r2
 800c3b8:	9301      	str	r3, [sp, #4]
 800c3ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800c3be:	46b9      	mov	r9, r7
 800c3c0:	463c      	mov	r4, r7
 800c3c2:	9502      	str	r5, [sp, #8]
 800c3c4:	46ab      	mov	fp, r5
 800c3c6:	784a      	ldrb	r2, [r1, #1]
 800c3c8:	1c4b      	adds	r3, r1, #1
 800c3ca:	9303      	str	r3, [sp, #12]
 800c3cc:	b342      	cbz	r2, 800c420 <__hexnan+0x88>
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	9105      	str	r1, [sp, #20]
 800c3d2:	9204      	str	r2, [sp, #16]
 800c3d4:	f7ff fd95 	bl	800bf02 <__hexdig_fun>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d151      	bne.n	800c480 <__hexnan+0xe8>
 800c3dc:	9a04      	ldr	r2, [sp, #16]
 800c3de:	9905      	ldr	r1, [sp, #20]
 800c3e0:	2a20      	cmp	r2, #32
 800c3e2:	d818      	bhi.n	800c416 <__hexnan+0x7e>
 800c3e4:	9b02      	ldr	r3, [sp, #8]
 800c3e6:	459b      	cmp	fp, r3
 800c3e8:	dd13      	ble.n	800c412 <__hexnan+0x7a>
 800c3ea:	454c      	cmp	r4, r9
 800c3ec:	d206      	bcs.n	800c3fc <__hexnan+0x64>
 800c3ee:	2d07      	cmp	r5, #7
 800c3f0:	dc04      	bgt.n	800c3fc <__hexnan+0x64>
 800c3f2:	462a      	mov	r2, r5
 800c3f4:	4649      	mov	r1, r9
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f7ff ffa8 	bl	800c34c <L_shift>
 800c3fc:	4544      	cmp	r4, r8
 800c3fe:	d952      	bls.n	800c4a6 <__hexnan+0x10e>
 800c400:	2300      	movs	r3, #0
 800c402:	f1a4 0904 	sub.w	r9, r4, #4
 800c406:	f844 3c04 	str.w	r3, [r4, #-4]
 800c40a:	f8cd b008 	str.w	fp, [sp, #8]
 800c40e:	464c      	mov	r4, r9
 800c410:	461d      	mov	r5, r3
 800c412:	9903      	ldr	r1, [sp, #12]
 800c414:	e7d7      	b.n	800c3c6 <__hexnan+0x2e>
 800c416:	2a29      	cmp	r2, #41	@ 0x29
 800c418:	d157      	bne.n	800c4ca <__hexnan+0x132>
 800c41a:	3102      	adds	r1, #2
 800c41c:	f8ca 1000 	str.w	r1, [sl]
 800c420:	f1bb 0f00 	cmp.w	fp, #0
 800c424:	d051      	beq.n	800c4ca <__hexnan+0x132>
 800c426:	454c      	cmp	r4, r9
 800c428:	d206      	bcs.n	800c438 <__hexnan+0xa0>
 800c42a:	2d07      	cmp	r5, #7
 800c42c:	dc04      	bgt.n	800c438 <__hexnan+0xa0>
 800c42e:	462a      	mov	r2, r5
 800c430:	4649      	mov	r1, r9
 800c432:	4620      	mov	r0, r4
 800c434:	f7ff ff8a 	bl	800c34c <L_shift>
 800c438:	4544      	cmp	r4, r8
 800c43a:	d936      	bls.n	800c4aa <__hexnan+0x112>
 800c43c:	f1a8 0204 	sub.w	r2, r8, #4
 800c440:	4623      	mov	r3, r4
 800c442:	f853 1b04 	ldr.w	r1, [r3], #4
 800c446:	f842 1f04 	str.w	r1, [r2, #4]!
 800c44a:	429f      	cmp	r7, r3
 800c44c:	d2f9      	bcs.n	800c442 <__hexnan+0xaa>
 800c44e:	1b3b      	subs	r3, r7, r4
 800c450:	f023 0303 	bic.w	r3, r3, #3
 800c454:	3304      	adds	r3, #4
 800c456:	3401      	adds	r4, #1
 800c458:	3e03      	subs	r6, #3
 800c45a:	42b4      	cmp	r4, r6
 800c45c:	bf88      	it	hi
 800c45e:	2304      	movhi	r3, #4
 800c460:	4443      	add	r3, r8
 800c462:	2200      	movs	r2, #0
 800c464:	f843 2b04 	str.w	r2, [r3], #4
 800c468:	429f      	cmp	r7, r3
 800c46a:	d2fb      	bcs.n	800c464 <__hexnan+0xcc>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	b91b      	cbnz	r3, 800c478 <__hexnan+0xe0>
 800c470:	4547      	cmp	r7, r8
 800c472:	d128      	bne.n	800c4c6 <__hexnan+0x12e>
 800c474:	2301      	movs	r3, #1
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	2005      	movs	r0, #5
 800c47a:	b007      	add	sp, #28
 800c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c480:	3501      	adds	r5, #1
 800c482:	2d08      	cmp	r5, #8
 800c484:	f10b 0b01 	add.w	fp, fp, #1
 800c488:	dd06      	ble.n	800c498 <__hexnan+0x100>
 800c48a:	4544      	cmp	r4, r8
 800c48c:	d9c1      	bls.n	800c412 <__hexnan+0x7a>
 800c48e:	2300      	movs	r3, #0
 800c490:	f844 3c04 	str.w	r3, [r4, #-4]
 800c494:	2501      	movs	r5, #1
 800c496:	3c04      	subs	r4, #4
 800c498:	6822      	ldr	r2, [r4, #0]
 800c49a:	f000 000f 	and.w	r0, r0, #15
 800c49e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c4a2:	6020      	str	r0, [r4, #0]
 800c4a4:	e7b5      	b.n	800c412 <__hexnan+0x7a>
 800c4a6:	2508      	movs	r5, #8
 800c4a8:	e7b3      	b.n	800c412 <__hexnan+0x7a>
 800c4aa:	9b01      	ldr	r3, [sp, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d0dd      	beq.n	800c46c <__hexnan+0xd4>
 800c4b0:	f1c3 0320 	rsb	r3, r3, #32
 800c4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b8:	40da      	lsrs	r2, r3
 800c4ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c4be:	4013      	ands	r3, r2
 800c4c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c4c4:	e7d2      	b.n	800c46c <__hexnan+0xd4>
 800c4c6:	3f04      	subs	r7, #4
 800c4c8:	e7d0      	b.n	800c46c <__hexnan+0xd4>
 800c4ca:	2004      	movs	r0, #4
 800c4cc:	e7d5      	b.n	800c47a <__hexnan+0xe2>

0800c4ce <__ascii_mbtowc>:
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	b901      	cbnz	r1, 800c4d4 <__ascii_mbtowc+0x6>
 800c4d2:	a901      	add	r1, sp, #4
 800c4d4:	b142      	cbz	r2, 800c4e8 <__ascii_mbtowc+0x1a>
 800c4d6:	b14b      	cbz	r3, 800c4ec <__ascii_mbtowc+0x1e>
 800c4d8:	7813      	ldrb	r3, [r2, #0]
 800c4da:	600b      	str	r3, [r1, #0]
 800c4dc:	7812      	ldrb	r2, [r2, #0]
 800c4de:	1e10      	subs	r0, r2, #0
 800c4e0:	bf18      	it	ne
 800c4e2:	2001      	movne	r0, #1
 800c4e4:	b002      	add	sp, #8
 800c4e6:	4770      	bx	lr
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	e7fb      	b.n	800c4e4 <__ascii_mbtowc+0x16>
 800c4ec:	f06f 0001 	mvn.w	r0, #1
 800c4f0:	e7f8      	b.n	800c4e4 <__ascii_mbtowc+0x16>

0800c4f2 <_realloc_r>:
 800c4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f6:	4607      	mov	r7, r0
 800c4f8:	4614      	mov	r4, r2
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	b921      	cbnz	r1, 800c508 <_realloc_r+0x16>
 800c4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c502:	4611      	mov	r1, r2
 800c504:	f7fd bcc8 	b.w	8009e98 <_malloc_r>
 800c508:	b92a      	cbnz	r2, 800c516 <_realloc_r+0x24>
 800c50a:	f7fd fc51 	bl	8009db0 <_free_r>
 800c50e:	4625      	mov	r5, r4
 800c510:	4628      	mov	r0, r5
 800c512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c516:	f000 f86b 	bl	800c5f0 <_malloc_usable_size_r>
 800c51a:	4284      	cmp	r4, r0
 800c51c:	4606      	mov	r6, r0
 800c51e:	d802      	bhi.n	800c526 <_realloc_r+0x34>
 800c520:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c524:	d8f4      	bhi.n	800c510 <_realloc_r+0x1e>
 800c526:	4621      	mov	r1, r4
 800c528:	4638      	mov	r0, r7
 800c52a:	f7fd fcb5 	bl	8009e98 <_malloc_r>
 800c52e:	4680      	mov	r8, r0
 800c530:	b908      	cbnz	r0, 800c536 <_realloc_r+0x44>
 800c532:	4645      	mov	r5, r8
 800c534:	e7ec      	b.n	800c510 <_realloc_r+0x1e>
 800c536:	42b4      	cmp	r4, r6
 800c538:	4622      	mov	r2, r4
 800c53a:	4629      	mov	r1, r5
 800c53c:	bf28      	it	cs
 800c53e:	4632      	movcs	r2, r6
 800c540:	f7fc fdab 	bl	800909a <memcpy>
 800c544:	4629      	mov	r1, r5
 800c546:	4638      	mov	r0, r7
 800c548:	f7fd fc32 	bl	8009db0 <_free_r>
 800c54c:	e7f1      	b.n	800c532 <_realloc_r+0x40>

0800c54e <__ascii_wctomb>:
 800c54e:	4603      	mov	r3, r0
 800c550:	4608      	mov	r0, r1
 800c552:	b141      	cbz	r1, 800c566 <__ascii_wctomb+0x18>
 800c554:	2aff      	cmp	r2, #255	@ 0xff
 800c556:	d904      	bls.n	800c562 <__ascii_wctomb+0x14>
 800c558:	228a      	movs	r2, #138	@ 0x8a
 800c55a:	601a      	str	r2, [r3, #0]
 800c55c:	f04f 30ff 	mov.w	r0, #4294967295
 800c560:	4770      	bx	lr
 800c562:	700a      	strb	r2, [r1, #0]
 800c564:	2001      	movs	r0, #1
 800c566:	4770      	bx	lr

0800c568 <_raise_r>:
 800c568:	291f      	cmp	r1, #31
 800c56a:	b538      	push	{r3, r4, r5, lr}
 800c56c:	4605      	mov	r5, r0
 800c56e:	460c      	mov	r4, r1
 800c570:	d904      	bls.n	800c57c <_raise_r+0x14>
 800c572:	2316      	movs	r3, #22
 800c574:	6003      	str	r3, [r0, #0]
 800c576:	f04f 30ff 	mov.w	r0, #4294967295
 800c57a:	bd38      	pop	{r3, r4, r5, pc}
 800c57c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c57e:	b112      	cbz	r2, 800c586 <_raise_r+0x1e>
 800c580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c584:	b94b      	cbnz	r3, 800c59a <_raise_r+0x32>
 800c586:	4628      	mov	r0, r5
 800c588:	f000 f830 	bl	800c5ec <_getpid_r>
 800c58c:	4622      	mov	r2, r4
 800c58e:	4601      	mov	r1, r0
 800c590:	4628      	mov	r0, r5
 800c592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c596:	f000 b817 	b.w	800c5c8 <_kill_r>
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d00a      	beq.n	800c5b4 <_raise_r+0x4c>
 800c59e:	1c59      	adds	r1, r3, #1
 800c5a0:	d103      	bne.n	800c5aa <_raise_r+0x42>
 800c5a2:	2316      	movs	r3, #22
 800c5a4:	6003      	str	r3, [r0, #0]
 800c5a6:	2001      	movs	r0, #1
 800c5a8:	e7e7      	b.n	800c57a <_raise_r+0x12>
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	4798      	blx	r3
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	e7e0      	b.n	800c57a <_raise_r+0x12>

0800c5b8 <raise>:
 800c5b8:	4b02      	ldr	r3, [pc, #8]	@ (800c5c4 <raise+0xc>)
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	f7ff bfd3 	b.w	800c568 <_raise_r>
 800c5c2:	bf00      	nop
 800c5c4:	20000060 	.word	0x20000060

0800c5c8 <_kill_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d07      	ldr	r5, [pc, #28]	@ (800c5e8 <_kill_r+0x20>)
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	4611      	mov	r1, r2
 800c5d4:	602b      	str	r3, [r5, #0]
 800c5d6:	f7f4 ff60 	bl	800149a <_kill>
 800c5da:	1c43      	adds	r3, r0, #1
 800c5dc:	d102      	bne.n	800c5e4 <_kill_r+0x1c>
 800c5de:	682b      	ldr	r3, [r5, #0]
 800c5e0:	b103      	cbz	r3, 800c5e4 <_kill_r+0x1c>
 800c5e2:	6023      	str	r3, [r4, #0]
 800c5e4:	bd38      	pop	{r3, r4, r5, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20000e34 	.word	0x20000e34

0800c5ec <_getpid_r>:
 800c5ec:	f7f4 bf4d 	b.w	800148a <_getpid>

0800c5f0 <_malloc_usable_size_r>:
 800c5f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5f4:	1f18      	subs	r0, r3, #4
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	bfbc      	itt	lt
 800c5fa:	580b      	ldrlt	r3, [r1, r0]
 800c5fc:	18c0      	addlt	r0, r0, r3
 800c5fe:	4770      	bx	lr

0800c600 <_init>:
 800c600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c602:	bf00      	nop
 800c604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c606:	bc08      	pop	{r3}
 800c608:	469e      	mov	lr, r3
 800c60a:	4770      	bx	lr

0800c60c <_fini>:
 800c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60e:	bf00      	nop
 800c610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c612:	bc08      	pop	{r3}
 800c614:	469e      	mov	lr, r3
 800c616:	4770      	bx	lr
