
WiFi_Client_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  0800c750  0800c750  0000d750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d544  0800d544  0000f21c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d544  0800d544  0000e544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d54c  0800d54c  0000f21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d54c  0800d54c  0000e54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d550  0800d550  0000e550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800d554  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000f21c  2**0
                  CONTENTS
 10 .bss          00000c94  2000021c  2000021c  0000f21c  2**2
                  ALLOC
 11 ._user_heap_stack 00017000  20000eb0  20000eb0  0000f21c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001734e  00000000  00000000  0000f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009d  00000000  00000000  0002659a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00014af7  00000000  00000000  00026637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002ded  00000000  00000000  0003b12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001340  00000000  00000000  0003df20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0fbd  00000000  00000000  0003f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000eea  00000000  00000000  0013021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00028781  00000000  00000000  00131107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00159888  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000677c  00000000  00000000  001598cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c738 	.word	0x0800c738

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800c738 	.word	0x0800c738

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001024:	f002 f9f2 	bl	800340c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	@ (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	@ (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104e:	f008 f897 	bl	8009180 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001052:	f000 f861 	bl	8001118 <main>

08001056 <LoopForever>:

LoopForever:
    b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001058:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001064:	0800d554 	.word	0x0800d554
  ldr r2, =_sbss
 8001068:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 800106c:	20000eb0 	.word	0x20000eb0

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <Motion_INT_Init>:
  * @brief  Initialize Motion Detection GPIO and EXTI (with test button)
  * @param  None
  * @retval None
  */
static void Motion_INT_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* Enable GPIO clocks */
  MOTION_INT_GPIO_CLK_ENABLE();
 800108a:	4b20      	ldr	r3, [pc, #128]	@ (800110c <Motion_INT_Init+0x98>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a1f      	ldr	r2, [pc, #124]	@ (800110c <Motion_INT_Init+0x98>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <Motion_INT_Init+0x98>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  TEST_BUTTON_CLK_ENABLE();
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <Motion_INT_Init+0x98>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a19      	ldr	r2, [pc, #100]	@ (800110c <Motion_INT_Init+0x98>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <Motion_INT_Init+0x98>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin for motion interrupt */
  GPIO_InitStruct.Pin = MOTION_INT_PIN;
 80010ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTION_INT_GPIO_PORT, &GPIO_InitStruct);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4619      	mov	r1, r3
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <Motion_INT_Init+0x9c>)
 80010d2:	f002 fbc3 	bl	800385c <HAL_GPIO_Init>

  /* Configure test button (User Button) for debugging */
  GPIO_InitStruct.Pin = TEST_BUTTON_PIN;
 80010d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Button press (falling edge)
 80010dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TEST_BUTTON_PORT, &GPIO_InitStruct);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <Motion_INT_Init+0xa0>)
 80010ee:	f002 fbb5 	bl	800385c <HAL_GPIO_Init>

  /* Enable EXTI interrupts */
  HAL_NVIC_SetPriority(MOTION_INT_EXTI_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2028      	movs	r0, #40	@ 0x28
 80010f8:	f002 fb39 	bl	800376e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MOTION_INT_EXTI_IRQn);
 80010fc:	2028      	movs	r0, #40	@ 0x28
 80010fe:	f002 fb52 	bl	80037a6 <HAL_NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	48000c00 	.word	0x48000c00
 8001114:	48000800 	.word	0x48000800

08001118 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6] = {0};
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	809a      	strh	r2, [r3, #4]
  uint8_t  IP_Addr[4] = {0};
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  static uint8_t TxData[200];
  int32_t Socket = -1;
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	61fb      	str	r3, [r7, #28]
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;
 8001132:	230a      	movs	r3, #10
 8001134:	837b      	strh	r3, [r7, #26]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001136:	f002 f99f 	bl	8003478 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800113a:	f000 f95d 	bl	80013f8 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 800113e:	2000      	movs	r0, #0
 8001140:	f001 fdea 	bl	8002d18 <BSP_LED_Init>

#if defined (TERMINAL_USE)
  /* Initialize UART for terminal output */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8001144:	4b8f      	ldr	r3, [pc, #572]	@ (8001384 <main+0x26c>)
 8001146:	4a90      	ldr	r2, [pc, #576]	@ (8001388 <main+0x270>)
 8001148:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 9600;
 800114a:	4b8e      	ldr	r3, [pc, #568]	@ (8001384 <main+0x26c>)
 800114c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001150:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b8c      	ldr	r3, [pc, #560]	@ (8001384 <main+0x26c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b8a      	ldr	r3, [pc, #552]	@ (8001384 <main+0x26c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800115e:	4b89      	ldr	r3, [pc, #548]	@ (8001384 <main+0x26c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b87      	ldr	r3, [pc, #540]	@ (8001384 <main+0x26c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b86      	ldr	r3, [pc, #536]	@ (8001384 <main+0x26c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b84      	ldr	r3, [pc, #528]	@ (8001384 <main+0x26c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b83      	ldr	r3, [pc, #524]	@ (8001384 <main+0x26c>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117c:	4b81      	ldr	r3, [pc, #516]	@ (8001384 <main+0x26c>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	@ 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 8001182:	4980      	ldr	r1, [pc, #512]	@ (8001384 <main+0x26c>)
 8001184:	2000      	movs	r0, #0
 8001186:	f001 fe0d 	bl	8002da4 <BSP_COM_Init>
#endif /* TERMINAL_USE */

  TERMOUT("****** WIFI Module with Motion Detection Demo ****** \r\n\n");
 800118a:	4880      	ldr	r0, [pc, #512]	@ (800138c <main+0x274>)
 800118c:	f007 fdd0 	bl	8008d30 <puts>
  TERMOUT("Motion Detection Instructions :\r\n");
 8001190:	487f      	ldr	r0, [pc, #508]	@ (8001390 <main+0x278>)
 8001192:	f007 fdcd 	bl	8008d30 <puts>
  TERMOUT("1- The LSM6DSL accelerometer will detect significant motion\r\n");
 8001196:	487f      	ldr	r0, [pc, #508]	@ (8001394 <main+0x27c>)
 8001198:	f007 fdca 	bl	8008d30 <puts>
  TERMOUT("2- Motion events will be sent to the TCP server\r\n");
 800119c:	487e      	ldr	r0, [pc, #504]	@ (8001398 <main+0x280>)
 800119e:	f007 fdc7 	bl	8008d30 <puts>

  /* Initialize accelerometer */
  if(BSP_ACCELERO_Init() == ACCELERO_OK)
 80011a2:	f001 ffbb 	bl	800311c <BSP_ACCELERO_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d111      	bne.n	80011d0 <main+0xb8>
  {
    TERMOUT("> Accelerometer initialized successfully\r\n");
 80011ac:	487b      	ldr	r0, [pc, #492]	@ (800139c <main+0x284>)
 80011ae:	f007 fdbf 	bl	8008d30 <puts>

    /* Initialize motion detection GPIO */
    Motion_INT_Init();
 80011b2:	f7ff ff5f 	bl	8001074 <Motion_INT_Init>

    /* Enable significant motion detection interrupt */
    if(BSP_ACCELERO_Enable_Motion_Detection_IT() == ACCELERO_OK)
 80011b6:	f001 fff1 	bl	800319c <BSP_ACCELERO_Enable_Motion_Detection_IT>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d103      	bne.n	80011c8 <main+0xb0>
    {
      TERMOUT("> Motion detection enabled successfully\r\n");
 80011c0:	4877      	ldr	r0, [pc, #476]	@ (80013a0 <main+0x288>)
 80011c2:	f007 fdb5 	bl	8008d30 <puts>
 80011c6:	e006      	b.n	80011d6 <main+0xbe>
    }
    else
    {
      TERMOUT("> ERROR: Failed to enable motion detection\r\n");
 80011c8:	4876      	ldr	r0, [pc, #472]	@ (80013a4 <main+0x28c>)
 80011ca:	f007 fdb1 	bl	8008d30 <puts>
 80011ce:	e002      	b.n	80011d6 <main+0xbe>
    }
  }
  else
  {
    TERMOUT("> ERROR: Failed to initialize accelerometer\r\n");
 80011d0:	4875      	ldr	r0, [pc, #468]	@ (80013a8 <main+0x290>)
 80011d2:	f007 fdad 	bl	8008d30 <puts>
  }

  /* Initialize WIFI module */
  if(WIFI_Init() == WIFI_STATUS_OK)
 80011d6:	f001 fcaf 	bl	8002b38 <WIFI_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f040 8090 	bne.w	8001302 <main+0x1ea>
  {
    TERMOUT("> WIFI Module Initialized.\r\n");
 80011e2:	4872      	ldr	r0, [pc, #456]	@ (80013ac <main+0x294>)
 80011e4:	f007 fda4 	bl	8008d30 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2106      	movs	r1, #6
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fcf0 	bl	8002bd4 <WIFI_GetMAC_Address>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d112      	bne.n	8001220 <main+0x108>
    {
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\r\n",
 80011fa:	7b3b      	ldrb	r3, [r7, #12]
 80011fc:	4618      	mov	r0, r3
 80011fe:	7b7b      	ldrb	r3, [r7, #13]
 8001200:	461c      	mov	r4, r3
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	461d      	mov	r5, r3
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	7c3a      	ldrb	r2, [r7, #16]
 800120a:	7c79      	ldrb	r1, [r7, #17]
 800120c:	9102      	str	r1, [sp, #8]
 800120e:	9201      	str	r2, [sp, #4]
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	462b      	mov	r3, r5
 8001214:	4622      	mov	r2, r4
 8001216:	4601      	mov	r1, r0
 8001218:	4865      	ldr	r0, [pc, #404]	@ (80013b0 <main+0x298>)
 800121a:	f007 fd21 	bl	8008c60 <iprintf>
 800121e:	e005      	b.n	800122c <main+0x114>
               MAC_Addr[0], MAC_Addr[1], MAC_Addr[2],
               MAC_Addr[3], MAC_Addr[4], MAC_Addr[5]);
    }
    else
    {
      TERMOUT("> ERROR : CANNOT get MAC address\r\n");
 8001220:	4864      	ldr	r0, [pc, #400]	@ (80013b4 <main+0x29c>)
 8001222:	f007 fd85 	bl	8008d30 <puts>
      BSP_LED_On(LED2);
 8001226:	2000      	movs	r0, #0
 8001228:	f001 fda6 	bl	8002d78 <BSP_LED_On>
    }

    if(WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 800122c:	2203      	movs	r2, #3
 800122e:	4962      	ldr	r1, [pc, #392]	@ (80013b8 <main+0x2a0>)
 8001230:	4862      	ldr	r0, [pc, #392]	@ (80013bc <main+0x2a4>)
 8001232:	f001 fcad 	bl	8002b90 <WIFI_Connect>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d15b      	bne.n	80012f4 <main+0x1dc>
    {
      TERMOUT("> es-wifi module connected \r\n");
 800123c:	4860      	ldr	r0, [pc, #384]	@ (80013c0 <main+0x2a8>)
 800123e:	f007 fd77 	bl	8008d30 <puts>
      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	2104      	movs	r1, #4
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fce3 	bl	8002c14 <WIFI_GetIP_Address>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d148      	bne.n	80012e6 <main+0x1ce>
      {
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\r\n",
 8001254:	7a3b      	ldrb	r3, [r7, #8]
 8001256:	4619      	mov	r1, r3
 8001258:	7a7b      	ldrb	r3, [r7, #9]
 800125a:	461a      	mov	r2, r3
 800125c:	7abb      	ldrb	r3, [r7, #10]
 800125e:	4618      	mov	r0, r3
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4603      	mov	r3, r0
 8001266:	4857      	ldr	r0, [pc, #348]	@ (80013c4 <main+0x2ac>)
 8001268:	f007 fcfa 	bl	8008c60 <iprintf>
               IP_Addr[0], IP_Addr[1], IP_Addr[2], IP_Addr[3]);

        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\r\n",
 800126c:	4b56      	ldr	r3, [pc, #344]	@ (80013c8 <main+0x2b0>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	4b55      	ldr	r3, [pc, #340]	@ (80013c8 <main+0x2b0>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	4618      	mov	r0, r3
 8001278:	4b53      	ldr	r3, [pc, #332]	@ (80013c8 <main+0x2b0>)
 800127a:	789b      	ldrb	r3, [r3, #2]
 800127c:	461c      	mov	r4, r3
 800127e:	4b52      	ldr	r3, [pc, #328]	@ (80013c8 <main+0x2b0>)
 8001280:	78db      	ldrb	r3, [r3, #3]
 8001282:	461a      	mov	r2, r3
 8001284:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	9200      	str	r2, [sp, #0]
 800128c:	4623      	mov	r3, r4
 800128e:	4602      	mov	r2, r0
 8001290:	484e      	ldr	r0, [pc, #312]	@ (80013cc <main+0x2b4>)
 8001292:	f007 fce5 	bl	8008c60 <iprintf>
               RemoteIP[0], RemoteIP[1], RemoteIP[2], RemoteIP[3], RemotePORT);

        while (Trials--)
 8001296:	e013      	b.n	80012c0 <main+0x1a8>
        {
          if(WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8001298:	2300      	movs	r3, #0
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4b49      	ldr	r3, [pc, #292]	@ (80013c8 <main+0x2b0>)
 80012a4:	4a4a      	ldr	r2, [pc, #296]	@ (80013d0 <main+0x2b8>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	2000      	movs	r0, #0
 80012aa:	f001 fcd7 	bl	8002c5c <WIFI_OpenClientConnection>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <main+0x1a8>
          {
            TERMOUT("> TCP Connection opened successfully.\r\n");
 80012b4:	4847      	ldr	r0, [pc, #284]	@ (80013d4 <main+0x2bc>)
 80012b6:	f007 fd3b 	bl	8008d30 <puts>
            Socket = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
            break;
 80012be:	e007      	b.n	80012d0 <main+0x1b8>
        while (Trials--)
 80012c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	3a01      	subs	r2, #1
 80012c8:	b292      	uxth	r2, r2
 80012ca:	837a      	strh	r2, [r7, #26]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e3      	bne.n	8001298 <main+0x180>
          }
        }
        if(Socket == -1)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d6:	d11a      	bne.n	800130e <main+0x1f6>
        {
          TERMOUT("> ERROR : Cannot open Connection\r\n");
 80012d8:	483f      	ldr	r0, [pc, #252]	@ (80013d8 <main+0x2c0>)
 80012da:	f007 fd29 	bl	8008d30 <puts>
          BSP_LED_On(LED2);
 80012de:	2000      	movs	r0, #0
 80012e0:	f001 fd4a 	bl	8002d78 <BSP_LED_On>
 80012e4:	e013      	b.n	800130e <main+0x1f6>
        }
      }
      else
      {
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\r\n");
 80012e6:	483d      	ldr	r0, [pc, #244]	@ (80013dc <main+0x2c4>)
 80012e8:	f007 fd22 	bl	8008d30 <puts>
        BSP_LED_On(LED2);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f001 fd43 	bl	8002d78 <BSP_LED_On>
 80012f2:	e00c      	b.n	800130e <main+0x1f6>
      }
    }
    else
    {
      TERMOUT("> ERROR : es-wifi module NOT connected\r\n");
 80012f4:	483a      	ldr	r0, [pc, #232]	@ (80013e0 <main+0x2c8>)
 80012f6:	f007 fd1b 	bl	8008d30 <puts>
      BSP_LED_On(LED2);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f001 fd3c 	bl	8002d78 <BSP_LED_On>
 8001300:	e005      	b.n	800130e <main+0x1f6>
    }
  }
  else
  {
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\r\n");
 8001302:	4838      	ldr	r0, [pc, #224]	@ (80013e4 <main+0x2cc>)
 8001304:	f007 fd14 	bl	8008d30 <puts>
    BSP_LED_On(LED2);
 8001308:	2000      	movs	r0, #0
 800130a:	f001 fd35 	bl	8002d78 <BSP_LED_On>
  }

  int16_t pDataXYZ[3] = {0};
 800130e:	463b      	mov	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	809a      	strh	r2, [r3, #4]
  uint32_t last_motion_time = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  while(1)
  {
    if(Socket != -1)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d0fb      	beq.n	800131a <main+0x202>
//          break;
//        }
//      }
      uint8_t func_src_val;

	  func_src_val = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, 0x53);
 8001322:	2153      	movs	r1, #83	@ 0x53
 8001324:	20d4      	movs	r0, #212	@ 0xd4
 8001326:	f001 febd 	bl	80030a4 <SENSOR_IO_Read>
 800132a:	4603      	mov	r3, r0
 800132c:	74fb      	strb	r3, [r7, #19]

	  if (func_src_val & 0x40)
 800132e:	7cfb      	ldrb	r3, [r7, #19]
 8001330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <main+0x202>
	  {
		  motion_count++;
 8001338:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <main+0x2d0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a2a      	ldr	r2, [pc, #168]	@ (80013e8 <main+0x2d0>)
 8001340:	6013      	str	r3, [r2, #0]
		  last_motion_time = HAL_GetTick();
 8001342:	f002 f909 	bl	8003558 <HAL_GetTick>
 8001346:	6178      	str	r0, [r7, #20]

		  TERMOUT(">> Detected event in FUNC_SRC1! (Value: 0x%02X) <<\r\n", func_src_val);
 8001348:	7cfb      	ldrb	r3, [r7, #19]
 800134a:	4619      	mov	r1, r3
 800134c:	4827      	ldr	r0, [pc, #156]	@ (80013ec <main+0x2d4>)
 800134e:	f007 fc87 	bl	8008c60 <iprintf>


		  snprintf((char*)TxData, sizeof(TxData),
 8001352:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <main+0x2d0>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	4613      	mov	r3, r2
 800135c:	4a24      	ldr	r2, [pc, #144]	@ (80013f0 <main+0x2d8>)
 800135e:	21c8      	movs	r1, #200	@ 0xc8
 8001360:	4824      	ldr	r0, [pc, #144]	@ (80013f4 <main+0x2dc>)
 8001362:	f007 fced 	bl	8008d40 <sniprintf>
				   "SIGNIFICANT_MOTION_DETECTED,Count=%lu,Time=%lu\r\n",
				   (unsigned long)motion_count, (unsigned long)last_motion_time);

		  WIFI_SendData(Socket, TxData, strlen((char*)TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8001366:	69fc      	ldr	r4, [r7, #28]
 8001368:	4822      	ldr	r0, [pc, #136]	@ (80013f4 <main+0x2dc>)
 800136a:	f7fe ff81 	bl	8000270 <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	b29a      	uxth	r2, r3
 8001372:	1dbb      	adds	r3, r7, #6
 8001374:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001378:	9100      	str	r1, [sp, #0]
 800137a:	491e      	ldr	r1, [pc, #120]	@ (80013f4 <main+0x2dc>)
 800137c:	4620      	mov	r0, r4
 800137e:	f001 fca9 	bl	8002cd4 <WIFI_SendData>
    if(Socket != -1)
 8001382:	e7ca      	b.n	800131a <main+0x202>
 8001384:	20000cd4 	.word	0x20000cd4
 8001388:	40013800 	.word	0x40013800
 800138c:	0800c750 	.word	0x0800c750
 8001390:	0800c788 	.word	0x0800c788
 8001394:	0800c7ac 	.word	0x0800c7ac
 8001398:	0800c7ec 	.word	0x0800c7ec
 800139c:	0800c820 	.word	0x0800c820
 80013a0:	0800c84c 	.word	0x0800c84c
 80013a4:	0800c878 	.word	0x0800c878
 80013a8:	0800c8a4 	.word	0x0800c8a4
 80013ac:	0800c8d4 	.word	0x0800c8d4
 80013b0:	0800c8f0 	.word	0x0800c8f0
 80013b4:	0800c924 	.word	0x0800c924
 80013b8:	0800c948 	.word	0x0800c948
 80013bc:	0800c954 	.word	0x0800c954
 80013c0:	0800c95c 	.word	0x0800c95c
 80013c4:	0800c97c 	.word	0x0800c97c
 80013c8:	20000000 	.word	0x20000000
 80013cc:	0800c9ac 	.word	0x0800c9ac
 80013d0:	0800c9e0 	.word	0x0800c9e0
 80013d4:	0800c9ec 	.word	0x0800c9ec
 80013d8:	0800ca14 	.word	0x0800ca14
 80013dc:	0800ca38 	.word	0x0800ca38
 80013e0:	0800ca68 	.word	0x0800ca68
 80013e4:	0800ca90 	.word	0x0800ca90
 80013e8:	2000023c 	.word	0x2000023c
 80013ec:	0800cac0 	.word	0x0800cac0
 80013f0:	0800caf8 	.word	0x0800caf8
 80013f4:	20000240 	.word	0x20000240

080013f8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b096      	sub	sp, #88	@ 0x58
 80013fc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013fe:	2310      	movs	r3, #16
 8001400:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001402:	2301      	movs	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001406:	2360      	movs	r3, #96	@ 0x60
 8001408:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140e:	2302      	movs	r3, #2
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001412:	2301      	movs	r3, #1
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 800141a:	2328      	movs	r3, #40	@ 0x28
 800141c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800141e:	2302      	movs	r3, #2
 8001420:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001422:	2307      	movs	r3, #7
 8001424:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001426:	2304      	movs	r3, #4
 8001428:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fa2f 	bl	8004890 <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x44>
  {
    /* Initialization Error */
    while(1);
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800143c:	230f      	movs	r3, #15
 800143e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2303      	movs	r3, #3
 8001442:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	657b      	str	r3, [r7, #84]	@ 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001450:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001454:	2104      	movs	r1, #4
 8001456:	4618      	mov	r0, r3
 8001458:	f003 fdf6 	bl	8005048 <HAL_RCC_ClockConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x6e>
  {
    /* Initialization Error */
    while(1);
 8001462:	bf00      	nop
 8001464:	e7fd      	b.n	8001462 <SystemClock_Config+0x6a>
  }
}
 8001466:	bf00      	nop
 8001468:	3758      	adds	r7, #88	@ 0x58
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8001478:	1d39      	adds	r1, r7, #4
 800147a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800147e:	2201      	movs	r2, #1
 8001480:	4803      	ldr	r0, [pc, #12]	@ (8001490 <__io_putchar+0x20>)
 8001482:	f005 ff6c 	bl	800735e <HAL_UART_Transmit>
  return ch;
 8001486:	687b      	ldr	r3, [r7, #4]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000cd4 	.word	0x20000cd4

08001494 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014a4:	d012      	beq.n	80014cc <HAL_GPIO_EXTI_Callback+0x38>
 80014a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014aa:	dc16      	bgt.n	80014da <HAL_GPIO_EXTI_Callback+0x46>
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_EXTI_Callback+0x24>
 80014b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_EXTI_Callback+0x2a>
      TERMOUT("Test button pressed - simulating motion!\r\n");
      break;
    }
    default:
    {
      break;
 80014b6:	e010      	b.n	80014da <HAL_GPIO_EXTI_Callback+0x46>
      SPI_WIFI_ISR();
 80014b8:	f001 fb2e 	bl	8002b18 <SPI_WIFI_ISR>
      break;
 80014bc:	e00e      	b.n	80014dc <HAL_GPIO_EXTI_Callback+0x48>
      motion_detected = 1; /* Set motion detection flag */
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0x50>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
      TERMOUT("Motion interrupt triggered!\r\n");
 80014c4:	4808      	ldr	r0, [pc, #32]	@ (80014e8 <HAL_GPIO_EXTI_Callback+0x54>)
 80014c6:	f007 fc33 	bl	8008d30 <puts>
      break;
 80014ca:	e007      	b.n	80014dc <HAL_GPIO_EXTI_Callback+0x48>
      motion_detected = 1; /* Set motion detection flag */
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0x50>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
      TERMOUT("Test button pressed - simulating motion!\r\n");
 80014d2:	4806      	ldr	r0, [pc, #24]	@ (80014ec <HAL_GPIO_EXTI_Callback+0x58>)
 80014d4:	f007 fc2c 	bl	8008d30 <puts>
      break;
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_EXTI_Callback+0x48>
      break;
 80014da:	bf00      	nop
    }
  }
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000238 	.word	0x20000238
 80014e8:	0800cb2c 	.word	0x0800cb2c
 80014ec:	0800cb4c 	.word	0x0800cb4c

080014f0 <EXTI15_10_IRQHandler>:
  * @brief  EXTI15_10_IRQHandler for motion detection and test button
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Check if it's the motion detection pin interrupt */
  if(__HAL_GPIO_EXTI_GET_IT(MOTION_INT_PIN) != RESET)
 80014f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <EXTI15_10_IRQHandler+0x30>)
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <EXTI15_10_IRQHandler+0x18>
  {
    HAL_GPIO_EXTI_IRQHandler(MOTION_INT_PIN);
 8001500:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001504:	f002 fb84 	bl	8003c10 <HAL_GPIO_EXTI_IRQHandler>
  }

  /* Check if it's the test button interrupt */
  if(__HAL_GPIO_EXTI_GET_IT(TEST_BUTTON_PIN) != RESET)
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <EXTI15_10_IRQHandler+0x30>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <EXTI15_10_IRQHandler+0x2c>
  {
    HAL_GPIO_EXTI_IRQHandler(TEST_BUTTON_PIN);
 8001514:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001518:	f002 fb7a 	bl	8003c10 <HAL_GPIO_EXTI_IRQHandler>
  }
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40010400 	.word	0x40010400

08001524 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <SPI3_IRQHandler+0x10>)
 800152a:	f005 f83d 	bl	80065a8 <HAL_SPI_IRQHandler>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000030c 	.word	0x2000030c

08001538 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800154a:	bf00      	nop
 800154c:	e7fd      	b.n	800154a <HardFault_Handler+0x4>

0800154e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001552:	bf00      	nop
 8001554:	e7fd      	b.n	8001552 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800155a:	bf00      	nop
 800155c:	e7fd      	b.n	800155a <BusFault_Handler+0x4>

0800155e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001562:	bf00      	nop
 8001564:	e7fd      	b.n	8001562 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001594:	f001 ffcc 	bl	8003530 <HAL_IncTick>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80015a0:	2002      	movs	r0, #2
 80015a2:	f002 fb35 	bl	8003c10 <HAL_GPIO_EXTI_IRQHandler>
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  return 1;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_kill>:

int _kill(int pid, int sig)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015c4:	f007 fdd6 	bl	8009174 <__errno>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2216      	movs	r2, #22
 80015cc:	601a      	str	r2, [r3, #0]
  return -1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_exit>:

void _exit (int status)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015e2:	f04f 31ff 	mov.w	r1, #4294967295
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffe7 	bl	80015ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <_exit+0x12>

080015f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e00a      	b.n	8001618 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001602:	f3af 8000 	nop.w
 8001606:	4601      	mov	r1, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60ba      	str	r2, [r7, #8]
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf0      	blt.n	8001602 <_read+0x12>
  }

  return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e009      	b.n	8001650 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff13 	bl	8001470 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbf1      	blt.n	800163c <_write+0x12>
  }
  return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_close>:

int _close(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800168a:	605a      	str	r2, [r3, #4]
  return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_isatty>:

int _isatty(int file)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d4:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <_sbrk+0x5c>)
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <_sbrk+0x60>)
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e0:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <_sbrk+0x64>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <_sbrk+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d207      	bcs.n	800170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016fc:	f007 fd3a 	bl	8009174 <__errno>
 8001700:	4603      	mov	r3, r0
 8001702:	220c      	movs	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	e009      	b.n	8001720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <_sbrk+0x64>)
 800171c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20018000 	.word	0x20018000
 800172c:	00007000 	.word	0x00007000
 8001730:	20000308 	.word	0x20000308
 8001734:	20000eb0 	.word	0x20000eb0

08001738 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b2f      	cmp	r3, #47	@ 0x2f
 8001746:	d906      	bls.n	8001756 <Hex2Num+0x1e>
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2b39      	cmp	r3, #57	@ 0x39
 800174c:	d803      	bhi.n	8001756 <Hex2Num+0x1e>
        return a - '0';
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	3b30      	subs	r3, #48	@ 0x30
 8001752:	b2db      	uxtb	r3, r3
 8001754:	e014      	b.n	8001780 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b60      	cmp	r3, #96	@ 0x60
 800175a:	d906      	bls.n	800176a <Hex2Num+0x32>
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b66      	cmp	r3, #102	@ 0x66
 8001760:	d803      	bhi.n	800176a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	3b57      	subs	r3, #87	@ 0x57
 8001766:	b2db      	uxtb	r3, r3
 8001768:	e00a      	b.n	8001780 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b40      	cmp	r3, #64	@ 0x40
 800176e:	d906      	bls.n	800177e <Hex2Num+0x46>
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	2b46      	cmp	r3, #70	@ 0x46
 8001774:	d803      	bhi.n	800177e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	3b37      	subs	r3, #55	@ 0x37
 800177a:	b2db      	uxtb	r3, r3
 800177c:	e000      	b.n	8001780 <Hex2Num+0x48>
    }

    return 0;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 800179e:	e012      	b.n	80017c6 <ParseHexNumber+0x3a>
        sum <<= 4;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ffc4 	bl	8001738 <Hex2Num>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	4413      	add	r3, r2
 80017b8:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3301      	adds	r3, #1
 80017be:	607b      	str	r3, [r7, #4]
        done_count++;
 80017c0:	7bbb      	ldrb	r3, [r7, #14]
 80017c2:	3301      	adds	r3, #1
 80017c4:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80017cc:	d903      	bls.n	80017d6 <ParseHexNumber+0x4a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b39      	cmp	r3, #57	@ 0x39
 80017d4:	d90f      	bls.n	80017f6 <ParseHexNumber+0x6a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b60      	cmp	r3, #96	@ 0x60
 80017dc:	d903      	bls.n	80017e6 <ParseHexNumber+0x5a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b66      	cmp	r3, #102	@ 0x66
 80017e4:	d907      	bls.n	80017f6 <ParseHexNumber+0x6a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b40      	cmp	r3, #64	@ 0x40
 80017ec:	d906      	bls.n	80017fc <ParseHexNumber+0x70>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b46      	cmp	r3, #70	@ 0x46
 80017f4:	d802      	bhi.n	80017fc <ParseHexNumber+0x70>
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d9d1      	bls.n	80017a0 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <ParseHexNumber+0x7c>
        *cnt = done_count;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	7bba      	ldrb	r2, [r7, #14]
 8001806:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8001808:	7bfb      	ldrb	r3, [r7, #15]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b2d      	cmp	r3, #45	@ 0x2d
 800182e:	d119      	bne.n	8001864 <ParseNumber+0x52>
        minus = 1;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3301      	adds	r3, #1
 8001838:	607b      	str	r3, [r7, #4]
        done_count++;
 800183a:	7bbb      	ldrb	r3, [r7, #14]
 800183c:	3301      	adds	r3, #1
 800183e:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001840:	e010      	b.n	8001864 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	3b30      	subs	r3, #48	@ 0x30
 8001854:	4413      	add	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3301      	adds	r3, #1
 800185c:	607b      	str	r3, [r7, #4]
        done_count++;
 800185e:	7bbb      	ldrb	r3, [r7, #14]
 8001860:	3301      	adds	r3, #1
 8001862:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b2f      	cmp	r3, #47	@ 0x2f
 800186a:	d903      	bls.n	8001874 <ParseNumber+0x62>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b39      	cmp	r3, #57	@ 0x39
 8001872:	d9e6      	bls.n	8001842 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <ParseNumber+0x6e>
        *cnt = done_count;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	7bba      	ldrb	r2, [r7, #14]
 800187e:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <ParseNumber+0x7a>
        return 0 - sum;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	425b      	negs	r3, r3
 800188a:	e000      	b.n	800188e <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 800188c:	68bb      	ldr	r3, [r7, #8]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 800189a:	b590      	push	{r4, r7, lr}
 800189c:	b087      	sub	sp, #28
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d027      	beq.n	8001900 <ParseMAC+0x66>
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d024      	beq.n	8001900 <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80018b6:	e018      	b.n	80018ea <ParseMAC+0x50>
    uint8_t done_count = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80018c2:	d00d      	beq.n	80018e0 <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	75fa      	strb	r2, [r7, #23]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	189c      	adds	r4, r3, r2
 80018d0:	f107 0316 	add.w	r3, r7, #22
 80018d4:	4619      	mov	r1, r3
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7ff ff58 	bl	800178c <ParseHexNumber>
 80018dc:	4603      	mov	r3, r0
 80018de:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 80018e0:	7dbb      	ldrb	r3, [r7, #22]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d906      	bls.n	8001900 <ParseMAC+0x66>
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d803      	bhi.n	8001900 <ParseMAC+0x66>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1db      	bne.n	80018b8 <ParseMAC+0x1e>
   }
  }
}
 8001900:	bf00      	nop
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}

08001908 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d027      	beq.n	800196e <ParseIP+0x66>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d024      	beq.n	800196e <ParseIP+0x66>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d921      	bls.n	800196e <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800192a:	e019      	b.n	8001960 <ParseIP+0x58>
    uint8_t done_count = 1;
 800192c:	2301      	movs	r3, #1
 800192e:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b2e      	cmp	r3, #46	@ 0x2e
 8001936:	d00e      	beq.n	8001956 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001938:	f107 0316 	add.w	r3, r7, #22
 800193c:	4619      	mov	r1, r3
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff ff67 	bl	8001812 <ParseNumber>
 8001944:	4601      	mov	r1, r0
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	75fa      	strb	r2, [r7, #23]
 800194c:	461a      	mov	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4413      	add	r3, r2
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8001956:	7dbb      	ldrb	r3, [r7, #22]
 8001958:	461a      	mov	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4413      	add	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d803      	bhi.n	800196e <ParseIP+0x66>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1de      	bne.n	800192c <ParseIP+0x24>
   }
  }
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	3302      	adds	r3, #2
 800198a:	4940      	ldr	r1, [pc, #256]	@ (8001a8c <AT_ParseInfo+0x114>)
 800198c:	4618      	mov	r0, r3
 800198e:	f007 fb35 	bl	8008ffc <strtok>
 8001992:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001994:	e071      	b.n	8001a7a <AT_ParseInfo+0x102>
    switch (num++) {
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	72fa      	strb	r2, [r7, #11]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d866      	bhi.n	8001a6e <AT_ParseInfo+0xf6>
 80019a0:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <AT_ParseInfo+0x30>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019c5 	.word	0x080019c5
 80019ac:	080019d9 	.word	0x080019d9
 80019b0:	080019f1 	.word	0x080019f1
 80019b4:	08001a09 	.word	0x08001a09
 80019b8:	08001a21 	.word	0x08001a21
 80019bc:	08001a39 	.word	0x08001a39
 80019c0:	08001a4d 	.word	0x08001a4d
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	221f      	movs	r2, #31
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f007 fb02 	bl	8008fd4 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	77da      	strb	r2, [r3, #31]
      break;
 80019d6:	e04b      	b.n	8001a70 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3320      	adds	r3, #32
 80019dc:	2217      	movs	r2, #23
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f007 faf7 	bl	8008fd4 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 80019ee:	e03f      	b.n	8001a70 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3338      	adds	r3, #56	@ 0x38
 80019f4:	220f      	movs	r2, #15
 80019f6:	68f9      	ldr	r1, [r7, #12]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f007 faeb 	bl	8008fd4 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001a06:	e033      	b.n	8001a70 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3348      	adds	r3, #72	@ 0x48
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	68f9      	ldr	r1, [r7, #12]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f007 fadf 	bl	8008fd4 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 8001a1e:	e027      	b.n	8001a70 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3358      	adds	r3, #88	@ 0x58
 8001a24:	220f      	movs	r2, #15
 8001a26:	68f9      	ldr	r1, [r7, #12]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f007 fad3 	bl	8008fd4 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 8001a36:	e01b      	b.n	8001a70 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff fee9 	bl	8001812 <ParseNumber>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 8001a4a:	e011      	b.n	8001a70 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8001a4c:	4910      	ldr	r1, [pc, #64]	@ (8001a90 <AT_ParseInfo+0x118>)
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f007 fad4 	bl	8008ffc <strtok>
 8001a54:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3368      	adds	r3, #104	@ 0x68
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f007 fab8 	bl	8008fd4 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 8001a6c:	e000      	b.n	8001a70 <AT_ParseInfo+0xf8>

    default: break;
 8001a6e:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001a70:	4906      	ldr	r1, [pc, #24]	@ (8001a8c <AT_ParseInfo+0x114>)
 8001a72:	2000      	movs	r0, #0
 8001a74:	f007 fac2 	bl	8008ffc <strtok>
 8001a78:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d18a      	bne.n	8001996 <AT_ParseInfo+0x1e>
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	0800cba8 	.word	0x0800cba8
 8001a90:	0800cbac 	.word	0x0800cbac

08001a94 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	4959      	ldr	r1, [pc, #356]	@ (8001c0c <AT_ParseConnSettings+0x178>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f007 faa7 	bl	8008ffc <strtok>
 8001aae:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001ab0:	e0a2      	b.n	8001bf8 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	73fa      	strb	r2, [r7, #15]
 8001ab8:	2b0b      	cmp	r3, #11
 8001aba:	f200 808c 	bhi.w	8001bd6 <AT_ParseConnSettings+0x142>
 8001abe:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac4 <AT_ParseConnSettings+0x30>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001af5 	.word	0x08001af5
 8001ac8:	08001b0b 	.word	0x08001b0b
 8001acc:	08001b23 	.word	0x08001b23
 8001ad0:	08001b37 	.word	0x08001b37
 8001ad4:	08001b4b 	.word	0x08001b4b
 8001ad8:	08001b5f 	.word	0x08001b5f
 8001adc:	08001b6f 	.word	0x08001b6f
 8001ae0:	08001b7f 	.word	0x08001b7f
 8001ae4:	08001b8f 	.word	0x08001b8f
 8001ae8:	08001b9f 	.word	0x08001b9f
 8001aec:	08001baf 	.word	0x08001baf
 8001af0:	08001bc3 	.word	0x08001bc3
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2220      	movs	r2, #32
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 fa6a 	bl	8008fd4 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8001b08:	e066      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3321      	adds	r3, #33	@ 0x21
 8001b0e:	2220      	movs	r2, #32
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f007 fa5e 	bl	8008fd4 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 8001b20:	e05a      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001b22:	2100      	movs	r1, #0
 8001b24:	68b8      	ldr	r0, [r7, #8]
 8001b26:	f7ff fe74 	bl	8001812 <ParseNumber>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8001b34:	e050      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8001b36:	2100      	movs	r1, #0
 8001b38:	68b8      	ldr	r0, [r7, #8]
 8001b3a:	f7ff fe6a 	bl	8001812 <ParseNumber>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8001b48:	e046      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	68b8      	ldr	r0, [r7, #8]
 8001b4e:	f7ff fe60 	bl	8001812 <ParseNumber>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001b5c:	e03c      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	3348      	adds	r3, #72	@ 0x48
 8001b62:	2204      	movs	r2, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	68b8      	ldr	r0, [r7, #8]
 8001b68:	f7ff fece 	bl	8001908 <ParseIP>
      break;
 8001b6c:	e034      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	334c      	adds	r3, #76	@ 0x4c
 8001b72:	2204      	movs	r2, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	68b8      	ldr	r0, [r7, #8]
 8001b78:	f7ff fec6 	bl	8001908 <ParseIP>
      break;
 8001b7c:	e02c      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3350      	adds	r3, #80	@ 0x50
 8001b82:	2204      	movs	r2, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f7ff febe 	bl	8001908 <ParseIP>
      break;
 8001b8c:	e024      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3354      	adds	r3, #84	@ 0x54
 8001b92:	2204      	movs	r2, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	68b8      	ldr	r0, [r7, #8]
 8001b98:	f7ff feb6 	bl	8001908 <ParseIP>
      break;
 8001b9c:	e01c      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	3358      	adds	r3, #88	@ 0x58
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	68b8      	ldr	r0, [r7, #8]
 8001ba8:	f7ff feae 	bl	8001908 <ParseIP>
      break;
 8001bac:	e014      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	68b8      	ldr	r0, [r7, #8]
 8001bb2:	f7ff fe2e 	bl	8001812 <ParseNumber>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8001bc0:	e00a      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	68b8      	ldr	r0, [r7, #8]
 8001bc6:	f7ff fe24 	bl	8001812 <ParseNumber>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8001bd4:	e000      	b.n	8001bd8 <AT_ParseConnSettings+0x144>

    default:
      break;
 8001bd6:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001bd8:	490c      	ldr	r1, [pc, #48]	@ (8001c0c <AT_ParseConnSettings+0x178>)
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f007 fa0e 	bl	8008ffc <strtok>
 8001be0:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <AT_ParseConnSettings+0x164>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b2c      	cmp	r3, #44	@ 0x2c
 8001bf0:	d102      	bne.n	8001bf8 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f47f af59 	bne.w	8001ab2 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	0800cba8 	.word	0x0800cba8

08001c10 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d056      	beq.n	8001cdc <AT_ExecuteCommand+0xcc>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d051      	beq.n	8001cdc <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8001c3e:	68b8      	ldr	r0, [r7, #8]
 8001c40:	f7fe fb16 	bl	8000270 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b299      	uxth	r1, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68b8      	ldr	r0, [r7, #8]
 8001c52:	47a0      	blx	r4
 8001c54:	4603      	mov	r3, r0
 8001c56:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	dd3e      	ble.n	8001cdc <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001c6a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001c76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dd27      	ble.n	8001cce <AT_ExecuteCommand+0xbe>
 8001c7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c82:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c86:	dc22      	bgt.n	8001cce <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001c88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c8c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c90:	d105      	bne.n	8001c9e <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001c92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001c9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8001caa:	490f      	ldr	r1, [pc, #60]	@ (8001ce8 <AT_ExecuteCommand+0xd8>)
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f007 fa01 	bl	80090b4 <strstr>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e010      	b.n	8001cde <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8001cbc:	490b      	ldr	r1, [pc, #44]	@ (8001cec <AT_ExecuteCommand+0xdc>)
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f007 f9f8 	bl	80090b4 <strstr>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001cca:	2305      	movs	r3, #5
 8001ccc:	e007      	b.n	8001cde <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001cce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cd2:	f113 0f04 	cmn.w	r3, #4
 8001cd6:	d101      	bne.n	8001cdc <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001cd8:	2306      	movs	r3, #6
 8001cda:	e000      	b.n	8001cde <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001cdc:	2304      	movs	r3, #4
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	371c      	adds	r7, #28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd90      	pop	{r4, r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	0800cbc0 	.word	0x0800cbc0
 8001cec:	0800cbcc 	.word	0x0800cbcc

08001cf0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 8001d0a:	68b8      	ldr	r0, [r7, #8]
 8001d0c:	f7fe fab0 	bl	8000270 <strlen>
 8001d10:	4603      	mov	r3, r0
 8001d12:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001d14:	8a7b      	ldrh	r3, [r7, #18]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <AT_RequestSendData+0x32>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e05d      	b.n	8001dde <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d057      	beq.n	8001ddc <AT_RequestSendData+0xec>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d052      	beq.n	8001ddc <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001d42:	8a79      	ldrh	r1, [r7, #18]
 8001d44:	68b8      	ldr	r0, [r7, #8]
 8001d46:	4798      	blx	r3
 8001d48:	4603      	mov	r3, r0
 8001d4a:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001d4c:	8a3a      	ldrh	r2, [r7, #16]
 8001d4e:	8a7b      	ldrh	r3, [r7, #18]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d143      	bne.n	8001ddc <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001d60:	8879      	ldrh	r1, [r7, #2]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001d6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d131      	bne.n	8001dd8 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001d80:	2100      	movs	r1, #0
 8001d82:	6a38      	ldr	r0, [r7, #32]
 8001d84:	4798      	blx	r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001d8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dd19      	ble.n	8001dc6 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8001d92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d96:	6a3a      	ldr	r2, [r7, #32]
 8001d98:	4413      	add	r3, r2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001d9e:	4912      	ldr	r1, [pc, #72]	@ (8001de8 <AT_RequestSendData+0xf8>)
 8001da0:	6a38      	ldr	r0, [r7, #32]
 8001da2:	f007 f987 	bl	80090b4 <strstr>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e016      	b.n	8001dde <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001db0:	490e      	ldr	r1, [pc, #56]	@ (8001dec <AT_RequestSendData+0xfc>)
 8001db2:	6a38      	ldr	r0, [r7, #32]
 8001db4:	f007 f97e 	bl	80090b4 <strstr>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e00d      	b.n	8001dde <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e00b      	b.n	8001dde <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001dc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dca:	f113 0f04 	cmn.w	r3, #4
 8001dce:	d101      	bne.n	8001dd4 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	e004      	b.n	8001dde <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e002      	b.n	8001dde <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e000      	b.n	8001dde <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8001ddc:	2304      	movs	r3, #4
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	0800cbc0 	.word	0x0800cbc0
 8001dec:	0800cbcc 	.word	0x0800cbcc

08001df0 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001e02:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001e16:	2000      	movs	r0, #0
 8001e18:	4798      	blx	r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d113      	bne.n	8001e48 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e26:	461a      	mov	r2, r3
 8001e28:	490a      	ldr	r1, [pc, #40]	@ (8001e54 <ES_WIFI_Init+0x64>)
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fef0 	bl	8001c10 <AT_ExecuteCommand>
 8001e30:	4603      	mov	r3, r0
 8001e32:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fd98 	bl	8001978 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	0800cbdc 	.word	0x0800cbdc

08001e58 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <ES_WIFI_RegisterBusIO+0x2c>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <ES_WIFI_RegisterBusIO+0x2c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <ES_WIFI_RegisterBusIO+0x2c>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <ES_WIFI_RegisterBusIO+0x2c>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001e84:	2302      	movs	r3, #2
 8001e86:	e014      	b.n	8001eb2 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	4932      	ldr	r1, [pc, #200]	@ (8001fa0 <ES_WIFI_Connect+0xe0>)
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f006 ff67 	bl	8008dac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001eea:	461a      	mov	r2, r3
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fe8f 	bl	8001c10 <AT_ExecuteCommand>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d14b      	bne.n	8001f94 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4927      	ldr	r1, [pc, #156]	@ (8001fa4 <ES_WIFI_Connect+0xe4>)
 8001f06:	4618      	mov	r0, r3
 8001f08:	f006 ff50 	bl	8008dac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff fe78 	bl	8001c10 <AT_ExecuteCommand>
 8001f20:	4603      	mov	r3, r0
 8001f22:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d134      	bne.n	8001f94 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	491b      	ldr	r1, [pc, #108]	@ (8001fa8 <ES_WIFI_Connect+0xe8>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f006 ff35 	bl	8008dac <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7ff fe5d 	bl	8001c10 <AT_ExecuteCommand>
 8001f56:	4603      	mov	r3, r0
 8001f58:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d119      	bne.n	8001f94 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f66:	4911      	ldr	r1, [pc, #68]	@ (8001fac <ES_WIFI_Connect+0xec>)
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f006 ff1f 	bl	8008dac <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f7ff fe47 	bl	8001c10 <AT_ExecuteCommand>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d103      	bne.n	8001f94 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	0800cbf4 	.word	0x0800cbf4
 8001fa4:	0800cbfc 	.word	0x0800cbfc
 8001fa8:	0800cc04 	.word	0x0800cc04
 8001fac:	0800cc0c 	.word	0x0800cc0c

08001fb0 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fbe:	4913      	ldr	r1, [pc, #76]	@ (800200c <ES_WIFI_IsConnected+0x5c>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f006 fef3 	bl	8008dac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fe1b 	bl	8001c10 <AT_ExecuteCommand>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8001fea:	2b31      	cmp	r3, #49	@ 0x31
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	0800cc10 	.word	0x0800cc10

08002010 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800201e:	4910      	ldr	r1, [pc, #64]	@ (8002060 <ES_WIFI_GetNetworkSettings+0x50>)
 8002020:	4618      	mov	r0, r3
 8002022:	f006 fec3 	bl	8008dac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002032:	461a      	mov	r2, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff fdeb 	bl	8001c10 <AT_ExecuteCommand>
 800203a:	4603      	mov	r3, r0
 800203c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d108      	bne.n	8002056 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	338d      	adds	r3, #141	@ 0x8d
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7ff fd1f 	bl	8001a94 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	0800cc18 	.word	0x0800cc18

08002064 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002078:	4913      	ldr	r1, [pc, #76]	@ (80020c8 <ES_WIFI_GetMACAddress+0x64>)
 800207a:	4618      	mov	r0, r3
 800207c:	f006 fe96 	bl	8008dac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800208c:	461a      	mov	r2, r3
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff fdbe 	bl	8001c10 <AT_ExecuteCommand>
 8002094:	4603      	mov	r3, r0
 8002096:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10e      	bne.n	80020bc <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020a4:	3302      	adds	r3, #2
 80020a6:	4909      	ldr	r1, [pc, #36]	@ (80020cc <ES_WIFI_GetMACAddress+0x68>)
 80020a8:	4618      	mov	r0, r3
 80020aa:	f006 ffa7 	bl	8008ffc <strtok>
 80020ae:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6938      	ldr	r0, [r7, #16]
 80020b8:	f7ff fbef 	bl	800189a <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	0800cc68 	.word	0x0800cc68
 80020cc:	0800cc6c 	.word	0x0800cc6c

080020d0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <ES_WIFI_StartClientConnection+0x1e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d105      	bne.n	80020fa <ES_WIFI_StartClientConnection+0x2a>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	885b      	ldrh	r3, [r3, #2]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <ES_WIFI_StartClientConnection+0x2a>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e0b1      	b.n	800225e <ES_WIFI_StartClientConnection+0x18e>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	785b      	ldrb	r3, [r3, #1]
 8002104:	461a      	mov	r2, r3
 8002106:	4958      	ldr	r1, [pc, #352]	@ (8002268 <ES_WIFI_StartClientConnection+0x198>)
 8002108:	f006 fe50 	bl	8008dac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002118:	461a      	mov	r2, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fd78 	bl	8001c10 <AT_ExecuteCommand>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d114      	bne.n	8002154 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	494d      	ldr	r1, [pc, #308]	@ (800226c <ES_WIFI_StartClientConnection+0x19c>)
 8002138:	f006 fe38 	bl	8008dac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002148:	461a      	mov	r2, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fd60 	bl	8001c10 <AT_ExecuteCommand>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d114      	bne.n	8002184 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	889b      	ldrh	r3, [r3, #4]
 8002164:	461a      	mov	r2, r3
 8002166:	4942      	ldr	r1, [pc, #264]	@ (8002270 <ES_WIFI_StartClientConnection+0x1a0>)
 8002168:	f006 fe20 	bl	8008dac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002178:	461a      	mov	r2, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fd48 	bl	8001c10 <AT_ExecuteCommand>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d114      	bne.n	80021b4 <ES_WIFI_StartClientConnection+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	885b      	ldrh	r3, [r3, #2]
 8002194:	461a      	mov	r2, r3
 8002196:	4937      	ldr	r1, [pc, #220]	@ (8002274 <ES_WIFI_StartClientConnection+0x1a4>)
 8002198:	f006 fe08 	bl	8008dac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021a8:	461a      	mov	r2, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fd30 	bl	8001c10 <AT_ExecuteCommand>
 80021b0:	4603      	mov	r3, r0
 80021b2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d120      	bne.n	80021fc <ES_WIFI_StartClientConnection+0x12c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	799b      	ldrb	r3, [r3, #6]
 80021c4:	4619      	mov	r1, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	79db      	ldrb	r3, [r3, #7]
 80021ca:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80021d0:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	9200      	str	r2, [sp, #0]
 80021da:	4623      	mov	r3, r4
 80021dc:	460a      	mov	r2, r1
 80021de:	4926      	ldr	r1, [pc, #152]	@ (8002278 <ES_WIFI_StartClientConnection+0x1a8>)
 80021e0:	f006 fde4 	bl	8008dac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021f0:	461a      	mov	r2, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff fd0c 	bl	8001c10 <AT_ExecuteCommand>
 80021f8:	4603      	mov	r3, r0
 80021fa:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d116      	bne.n	8002230 <ES_WIFI_StartClientConnection+0x160>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d112      	bne.n	8002230 <ES_WIFI_StartClientConnection+0x160>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002210:	491a      	ldr	r1, [pc, #104]	@ (800227c <ES_WIFI_StartClientConnection+0x1ac>)
 8002212:	4618      	mov	r0, r3
 8002214:	f006 fdca 	bl	8008dac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002224:	461a      	mov	r2, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fcf2 	bl	8001c10 <AT_ExecuteCommand>
 800222c:	4603      	mov	r3, r0
 800222e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d112      	bne.n	800225c <ES_WIFI_StartClientConnection+0x18c>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800223c:	4910      	ldr	r1, [pc, #64]	@ (8002280 <ES_WIFI_StartClientConnection+0x1b0>)
 800223e:	4618      	mov	r0, r3
 8002240:	f006 fdb4 	bl	8008dac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002250:	461a      	mov	r2, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fcdc 	bl	8001c10 <AT_ExecuteCommand>
 8002258:	4603      	mov	r3, r0
 800225a:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bd90      	pop	{r4, r7, pc}
 8002266:	bf00      	nop
 8002268:	0800ccd0 	.word	0x0800ccd0
 800226c:	0800ccd8 	.word	0x0800ccd8
 8002270:	0800cce0 	.word	0x0800cce0
 8002274:	0800cce8 	.word	0x0800cce8
 8002278:	0800ccf0 	.word	0x0800ccf0
 800227c:	0800cd00 	.word	0x0800cd00
 8002280:	0800cd08 	.word	0x0800cd08

08002284 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	461a      	mov	r2, r3
 8002290:	460b      	mov	r3, r1
 8002292:	72fb      	strb	r3, [r7, #11]
 8002294:	4613      	mov	r3, r2
 8002296:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002298:	2302      	movs	r3, #2
 800229a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80022a2:	2301      	movs	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e001      	b.n	80022ac <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 80022ac:	893b      	ldrh	r3, [r7, #8]
 80022ae:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80022b2:	d302      	bcc.n	80022ba <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 80022b4:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80022b8:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	893a      	ldrh	r2, [r7, #8]
 80022be:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022c6:	7afa      	ldrb	r2, [r7, #11]
 80022c8:	4942      	ldr	r1, [pc, #264]	@ (80023d4 <ES_WIFI_SendData+0x150>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f006 fd6e 	bl	8008dac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022dc:	461a      	mov	r2, r3
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff fc96 	bl	8001c10 <AT_ExecuteCommand>
 80022e4:	4603      	mov	r3, r0
 80022e6:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d15e      	bne.n	80023ac <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4938      	ldr	r1, [pc, #224]	@ (80023d8 <ES_WIFI_SendData+0x154>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f006 fd57 	bl	8008dac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800230a:	461a      	mov	r2, r3
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff fc7f 	bl	8001c10 <AT_ExecuteCommand>
 8002312:	4603      	mov	r3, r0
 8002314:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d13d      	bne.n	8002398 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002322:	893a      	ldrh	r2, [r7, #8]
 8002324:	492d      	ldr	r1, [pc, #180]	@ (80023dc <ES_WIFI_SendData+0x158>)
 8002326:	4618      	mov	r0, r3
 8002328:	f006 fd40 	bl	8008dac <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002338:	893a      	ldrh	r2, [r7, #8]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f7ff fcd5 	bl	8001cf0 <AT_RequestSendData>
 8002346:	4603      	mov	r3, r0
 8002348:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d119      	bne.n	8002384 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002356:	4922      	ldr	r1, [pc, #136]	@ (80023e0 <ES_WIFI_SendData+0x15c>)
 8002358:	4618      	mov	r0, r3
 800235a:	f006 feab 	bl	80090b4 <strstr>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d02c      	beq.n	80023be <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002364:	f640 1201 	movw	r2, #2305	@ 0x901
 8002368:	491e      	ldr	r1, [pc, #120]	@ (80023e4 <ES_WIFI_SendData+0x160>)
 800236a:	481f      	ldr	r0, [pc, #124]	@ (80023e8 <ES_WIFI_SendData+0x164>)
 800236c:	f006 fc78 	bl	8008c60 <iprintf>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002376:	4619      	mov	r1, r3
 8002378:	481c      	ldr	r0, [pc, #112]	@ (80023ec <ES_WIFI_SendData+0x168>)
 800237a:	f006 fc71 	bl	8008c60 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800237e:	2302      	movs	r3, #2
 8002380:	74fb      	strb	r3, [r7, #19]
 8002382:	e01c      	b.n	80023be <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8002384:	f640 1207 	movw	r2, #2311	@ 0x907
 8002388:	4916      	ldr	r1, [pc, #88]	@ (80023e4 <ES_WIFI_SendData+0x160>)
 800238a:	4817      	ldr	r0, [pc, #92]	@ (80023e8 <ES_WIFI_SendData+0x164>)
 800238c:	f006 fc68 	bl	8008c60 <iprintf>
 8002390:	4817      	ldr	r0, [pc, #92]	@ (80023f0 <ES_WIFI_SendData+0x16c>)
 8002392:	f006 fccd 	bl	8008d30 <puts>
 8002396:	e012      	b.n	80023be <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8002398:	f640 120c 	movw	r2, #2316	@ 0x90c
 800239c:	4911      	ldr	r1, [pc, #68]	@ (80023e4 <ES_WIFI_SendData+0x160>)
 800239e:	4812      	ldr	r0, [pc, #72]	@ (80023e8 <ES_WIFI_SendData+0x164>)
 80023a0:	f006 fc5e 	bl	8008c60 <iprintf>
 80023a4:	4813      	ldr	r0, [pc, #76]	@ (80023f4 <ES_WIFI_SendData+0x170>)
 80023a6:	f006 fcc3 	bl	8008d30 <puts>
 80023aa:	e008      	b.n	80023be <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80023ac:	f640 1211 	movw	r2, #2321	@ 0x911
 80023b0:	490c      	ldr	r1, [pc, #48]	@ (80023e4 <ES_WIFI_SendData+0x160>)
 80023b2:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <ES_WIFI_SendData+0x164>)
 80023b4:	f006 fc54 	bl	8008c60 <iprintf>
 80023b8:	480f      	ldr	r0, [pc, #60]	@ (80023f8 <ES_WIFI_SendData+0x174>)
 80023ba:	f006 fcb9 	bl	8008d30 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d102      	bne.n	80023ca <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2200      	movs	r2, #0
 80023c8:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	0800ccd0 	.word	0x0800ccd0
 80023d8:	0800cecc 	.word	0x0800cecc
 80023dc:	0800ced4 	.word	0x0800ced4
 80023e0:	0800cee0 	.word	0x0800cee0
 80023e4:	0800cd60 	.word	0x0800cd60
 80023e8:	0800cdc0 	.word	0x0800cdc0
 80023ec:	0800cee8 	.word	0x0800cee8
 80023f0:	0800cf04 	.word	0x0800cf04
 80023f4:	0800cf20 	.word	0x0800cf20
 80023f8:	0800cf34 	.word	0x0800cf34

080023fc <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08c      	sub	sp, #48	@ 0x30
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8002404:	4b57      	ldr	r3, [pc, #348]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 8002406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002408:	4a56      	ldr	r2, [pc, #344]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 800240a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800240e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002410:	4b54      	ldr	r3, [pc, #336]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241c:	4b51      	ldr	r3, [pc, #324]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002420:	4a50      	ldr	r2, [pc, #320]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 8002422:	f043 0302 	orr.w	r3, r3, #2
 8002426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002428:	4b4e      	ldr	r3, [pc, #312]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 800242a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002434:	4b4b      	ldr	r3, [pc, #300]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002438:	4a4a      	ldr	r2, [pc, #296]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002440:	4b48      	ldr	r3, [pc, #288]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800244c:	4b45      	ldr	r3, [pc, #276]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	4a44      	ldr	r2, [pc, #272]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 8002452:	f043 0310 	orr.w	r3, r3, #16
 8002456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002458:	4b42      	ldr	r3, [pc, #264]	@ (8002564 <SPI_WIFI_MspInit+0x168>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002464:	2200      	movs	r2, #0
 8002466:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800246a:	483f      	ldr	r0, [pc, #252]	@ (8002568 <SPI_WIFI_MspInit+0x16c>)
 800246c:	f001 fbb8 	bl	8003be0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002470:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002474:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002476:	2301      	movs	r3, #1
 8002478:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	4837      	ldr	r0, [pc, #220]	@ (8002568 <SPI_WIFI_MspInit+0x16c>)
 800248a:	f001 f9e7 	bl	800385c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800248e:	2302      	movs	r3, #2
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002492:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002496:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	4831      	ldr	r0, [pc, #196]	@ (800256c <SPI_WIFI_MspInit+0x170>)
 80024a8:	f001 f9d8 	bl	800385c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80024ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024b0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80024b2:	2301      	movs	r3, #1
 80024b4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	4619      	mov	r1, r3
 80024c8:	4828      	ldr	r0, [pc, #160]	@ (800256c <SPI_WIFI_MspInit+0x170>)
 80024ca:	f001 f9c7 	bl	800385c <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80024ce:	2201      	movs	r2, #1
 80024d0:	2101      	movs	r1, #1
 80024d2:	4826      	ldr	r0, [pc, #152]	@ (800256c <SPI_WIFI_MspInit+0x170>)
 80024d4:	f001 fb84 	bl	8003be0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80024d8:	2301      	movs	r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80024dc:	2301      	movs	r3, #1
 80024de:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4619      	mov	r1, r3
 80024ee:	481f      	ldr	r0, [pc, #124]	@ (800256c <SPI_WIFI_MspInit+0x170>)
 80024f0:	f001 f9b4 	bl	800385c <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80024f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024f8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002502:	2301      	movs	r3, #1
 8002504:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002506:	2306      	movs	r3, #6
 8002508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	4619      	mov	r1, r3
 8002510:	4817      	ldr	r0, [pc, #92]	@ (8002570 <SPI_WIFI_MspInit+0x174>)
 8002512:	f001 f9a3 	bl	800385c <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800251a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002524:	2301      	movs	r3, #1
 8002526:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002528:	2306      	movs	r3, #6
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	480f      	ldr	r0, [pc, #60]	@ (8002570 <SPI_WIFI_MspInit+0x174>)
 8002534:	f001 f992 	bl	800385c <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002538:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800253c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002542:	2301      	movs	r3, #1
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002546:	2301      	movs	r3, #1
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800254a:	2306      	movs	r3, #6
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	4619      	mov	r1, r3
 8002554:	4806      	ldr	r0, [pc, #24]	@ (8002570 <SPI_WIFI_MspInit+0x174>)
 8002556:	f001 f981 	bl	800385c <HAL_GPIO_Init>
}
 800255a:	bf00      	nop
 800255c:	3730      	adds	r7, #48	@ 0x30
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	48000400 	.word	0x48000400
 800256c:	48001000 	.word	0x48001000
 8002570:	48000800 	.word	0x48000800

08002574 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d145      	bne.n	8002614 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002588:	4b27      	ldr	r3, [pc, #156]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 800258a:	4a28      	ldr	r2, [pc, #160]	@ (800262c <SPI_WIFI_Init+0xb8>)
 800258c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800258e:	4826      	ldr	r0, [pc, #152]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 8002590:	f7ff ff34 	bl	80023fc <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002594:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 8002596:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800259a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800259c:	4b22      	ldr	r3, [pc, #136]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80025a2:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 80025a4:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80025a8:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80025aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80025b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 80025b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025bc:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80025be:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 80025c0:	2210      	movs	r2, #16
 80025c2:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80025c4:	4b18      	ldr	r3, [pc, #96]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80025ca:	4b17      	ldr	r3, [pc, #92]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80025d0:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 80025d6:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 80025d8:	2200      	movs	r2, #0
 80025da:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80025dc:	4812      	ldr	r0, [pc, #72]	@ (8002628 <SPI_WIFI_Init+0xb4>)
 80025de:	f002 ff57 	bl	8005490 <HAL_SPI_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ec:	e018      	b.n	8002620 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	2007      	movs	r0, #7
 80025f4:	f001 f8bb 	bl	800376e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80025f8:	2007      	movs	r0, #7
 80025fa:	f001 f8d4 	bl	80037a6 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	2033      	movs	r0, #51	@ 0x33
 8002604:	f001 f8b3 	bl	800376e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002608:	2033      	movs	r0, #51	@ 0x33
 800260a:	f001 f8cc 	bl	80037a6 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800260e:	200a      	movs	r0, #10
 8002610:	f000 fa08 	bl	8002a24 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8002614:	f000 f80c 	bl	8002630 <SPI_WIFI_ResetModule>
 8002618:	4603      	mov	r3, r0
 800261a:	73fb      	strb	r3, [r7, #15]

  return rc;
 800261c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	2000030c 	.word	0x2000030c
 800262c:	40003c00 	.word	0x40003c00

08002630 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002636:	f000 ff8f 	bl	8003558 <HAL_GetTick>
 800263a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002640:	2200      	movs	r2, #0
 8002642:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002646:	4835      	ldr	r0, [pc, #212]	@ (800271c <SPI_WIFI_ResetModule+0xec>)
 8002648:	f001 faca 	bl	8003be0 <HAL_GPIO_WritePin>
 800264c:	200a      	movs	r0, #10
 800264e:	f000 ff8f 	bl	8003570 <HAL_Delay>
 8002652:	2201      	movs	r2, #1
 8002654:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002658:	4830      	ldr	r0, [pc, #192]	@ (800271c <SPI_WIFI_ResetModule+0xec>)
 800265a:	f001 fac1 	bl	8003be0 <HAL_GPIO_WritePin>
 800265e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002662:	f000 ff85 	bl	8003570 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8002666:	2200      	movs	r2, #0
 8002668:	2101      	movs	r1, #1
 800266a:	482c      	ldr	r0, [pc, #176]	@ (800271c <SPI_WIFI_ResetModule+0xec>)
 800266c:	f001 fab8 	bl	8003be0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002670:	200f      	movs	r0, #15
 8002672:	f000 f9d7 	bl	8002a24 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8002676:	e02b      	b.n	80026d0 <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b04      	cmp	r3, #4
 800267c:	d907      	bls.n	800268e <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 800267e:	2201      	movs	r2, #1
 8002680:	2101      	movs	r1, #1
 8002682:	4826      	ldr	r0, [pc, #152]	@ (800271c <SPI_WIFI_ResetModule+0xec>)
 8002684:	f001 faac 	bl	8003be0 <HAL_GPIO_WritePin>
      return -1;
 8002688:	f04f 33ff 	mov.w	r3, #4294967295
 800268c:	e042      	b.n	8002714 <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	463a      	mov	r2, r7
 8002692:	18d1      	adds	r1, r2, r3
 8002694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002698:	2201      	movs	r2, #1
 800269a:	4821      	ldr	r0, [pc, #132]	@ (8002720 <SPI_WIFI_ResetModule+0xf0>)
 800269c:	f003 f800 	bl	80056a0 <HAL_SPI_Receive>
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3302      	adds	r3, #2
 80026a8:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80026aa:	f000 ff55 	bl	8003558 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b8:	d202      	bcs.n	80026c0 <SPI_WIFI_ResetModule+0x90>
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 80026c0:	2201      	movs	r2, #1
 80026c2:	2101      	movs	r1, #1
 80026c4:	4815      	ldr	r0, [pc, #84]	@ (800271c <SPI_WIFI_ResetModule+0xec>)
 80026c6:	f001 fa8b 	bl	8003be0 <HAL_GPIO_WritePin>
      return -1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	e021      	b.n	8002714 <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 80026d0:	2102      	movs	r1, #2
 80026d2:	4812      	ldr	r0, [pc, #72]	@ (800271c <SPI_WIFI_ResetModule+0xec>)
 80026d4:	f001 fa6c 	bl	8003bb0 <HAL_GPIO_ReadPin>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d0cc      	beq.n	8002678 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 80026de:	2201      	movs	r2, #1
 80026e0:	2101      	movs	r1, #1
 80026e2:	480e      	ldr	r0, [pc, #56]	@ (800271c <SPI_WIFI_ResetModule+0xec>)
 80026e4:	f001 fa7c 	bl	8003be0 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80026e8:	783b      	ldrb	r3, [r7, #0]
 80026ea:	2b15      	cmp	r3, #21
 80026ec:	d10e      	bne.n	800270c <SPI_WIFI_ResetModule+0xdc>
 80026ee:	787b      	ldrb	r3, [r7, #1]
 80026f0:	2b15      	cmp	r3, #21
 80026f2:	d10b      	bne.n	800270c <SPI_WIFI_ResetModule+0xdc>
 80026f4:	78bb      	ldrb	r3, [r7, #2]
 80026f6:	2b0d      	cmp	r3, #13
 80026f8:	d108      	bne.n	800270c <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80026fa:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80026fc:	2b0a      	cmp	r3, #10
 80026fe:	d105      	bne.n	800270c <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002700:	793b      	ldrb	r3, [r7, #4]
 8002702:	2b3e      	cmp	r3, #62	@ 0x3e
 8002704:	d102      	bne.n	800270c <SPI_WIFI_ResetModule+0xdc>
 8002706:	797b      	ldrb	r3, [r7, #5]
 8002708:	2b20      	cmp	r3, #32
 800270a:	d002      	beq.n	8002712 <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	e000      	b.n	8002714 <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	48001000 	.word	0x48001000
 8002720:	2000030c 	.word	0x2000030c

08002724 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <SPI_WIFI_DeInit+0x10>)
 800272a:	f002 ff7d 	bl	8005628 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	2000030c 	.word	0x2000030c

08002738 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002740:	f000 ff0a 	bl	8003558 <HAL_GetTick>
 8002744:	4603      	mov	r3, r0
 8002746:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002748:	e00a      	b.n	8002760 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800274a:	f000 ff05 	bl	8003558 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad2      	subs	r2, r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d902      	bls.n	8002760 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	e007      	b.n	8002770 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002760:	2102      	movs	r1, #2
 8002762:	4805      	ldr	r0, [pc, #20]	@ (8002778 <wait_cmddata_rdy_high+0x40>)
 8002764:	f001 fa24 	bl	8003bb0 <HAL_GPIO_ReadPin>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d1ed      	bne.n	800274a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	48001000 	.word	0x48001000

0800277c <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002784:	f000 fee8 	bl	8003558 <HAL_GetTick>
 8002788:	4603      	mov	r3, r0
 800278a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 800278c:	e00a      	b.n	80027a4 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800278e:	f000 fee3 	bl	8003558 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad2      	subs	r2, r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d902      	bls.n	80027a4 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	e004      	b.n	80027ae <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <wait_cmddata_rdy_rising_event+0x3c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d0f0      	beq.n	800278e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80027ac:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000378 	.word	0x20000378

080027bc <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80027c4:	f000 fec8 	bl	8003558 <HAL_GetTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 80027cc:	e00a      	b.n	80027e4 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80027ce:	f000 fec3 	bl	8003558 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad2      	subs	r2, r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d902      	bls.n	80027e4 <wait_spi_rx_event+0x28>
    {
      return -1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	e004      	b.n	80027ee <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <wait_spi_rx_event+0x3c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d0f0      	beq.n	80027ce <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80027ec:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000370 	.word	0x20000370

080027fc <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002804:	f000 fea8 	bl	8003558 <HAL_GetTick>
 8002808:	4603      	mov	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 800280c:	e00a      	b.n	8002824 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800280e:	f000 fea3 	bl	8003558 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad2      	subs	r2, r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	d902      	bls.n	8002824 <wait_spi_tx_event+0x28>
    {
      return -1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e004      	b.n	800282e <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8002824:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <wait_spi_tx_event+0x3c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d0f0      	beq.n	800280e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800282c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000374 	.word	0x20000374

0800283c <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	460b      	mov	r3, r1
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 800284e:	2201      	movs	r2, #1
 8002850:	2101      	movs	r1, #1
 8002852:	4834      	ldr	r0, [pc, #208]	@ (8002924 <SPI_WIFI_ReceiveData+0xe8>)
 8002854:	f001 f9c4 	bl	8003be0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002858:	2003      	movs	r0, #3
 800285a:	f000 f8e3 	bl	8002a24 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff8b 	bl	800277c <wait_cmddata_rdy_rising_event>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	da02      	bge.n	8002872 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800286c:	f06f 0302 	mvn.w	r3, #2
 8002870:	e054      	b.n	800291c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002872:	2200      	movs	r2, #0
 8002874:	2101      	movs	r1, #1
 8002876:	482b      	ldr	r0, [pc, #172]	@ (8002924 <SPI_WIFI_ReceiveData+0xe8>)
 8002878:	f001 f9b2 	bl	8003be0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800287c:	200f      	movs	r0, #15
 800287e:	f000 f8d1 	bl	8002a24 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8002882:	e03d      	b.n	8002900 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8002884:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002888:	897b      	ldrh	r3, [r7, #10]
 800288a:	429a      	cmp	r2, r3
 800288c:	db02      	blt.n	8002894 <SPI_WIFI_ReceiveData+0x58>
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d13c      	bne.n	800290e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8002894:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <SPI_WIFI_ReceiveData+0xec>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	2201      	movs	r2, #1
 80028a0:	4619      	mov	r1, r3
 80028a2:	4822      	ldr	r0, [pc, #136]	@ (800292c <SPI_WIFI_ReceiveData+0xf0>)
 80028a4:	f003 fcdc 	bl	8006260 <HAL_SPI_Receive_IT>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 80028ae:	2201      	movs	r2, #1
 80028b0:	2101      	movs	r1, #1
 80028b2:	481c      	ldr	r0, [pc, #112]	@ (8002924 <SPI_WIFI_ReceiveData+0xe8>)
 80028b4:	f001 f994 	bl	8003be0 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
 80028bc:	e02e      	b.n	800291c <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff7b 	bl	80027bc <wait_spi_rx_event>

      pData[0] = tmp[0];
 80028c6:	7d3a      	ldrb	r2, [r7, #20]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3301      	adds	r3, #1
 80028d0:	7d7a      	ldrb	r2, [r7, #21]
 80028d2:	701a      	strb	r2, [r3, #0]
      length += 2;
 80028d4:	8afb      	ldrh	r3, [r7, #22]
 80028d6:	3302      	adds	r3, #2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3302      	adds	r3, #2
 80028e0:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 80028e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80028ea:	db09      	blt.n	8002900 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80028ec:	2201      	movs	r2, #1
 80028ee:	2101      	movs	r1, #1
 80028f0:	480c      	ldr	r0, [pc, #48]	@ (8002924 <SPI_WIFI_ReceiveData+0xe8>)
 80028f2:	f001 f975 	bl	8003be0 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80028f6:	f7ff fe9b 	bl	8002630 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80028fa:	f06f 0303 	mvn.w	r3, #3
 80028fe:	e00d      	b.n	800291c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002900:	2102      	movs	r1, #2
 8002902:	4808      	ldr	r0, [pc, #32]	@ (8002924 <SPI_WIFI_ReceiveData+0xe8>)
 8002904:	f001 f954 	bl	8003bb0 <HAL_GPIO_ReadPin>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d0ba      	beq.n	8002884 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800290e:	2201      	movs	r2, #1
 8002910:	2101      	movs	r1, #1
 8002912:	4804      	ldr	r0, [pc, #16]	@ (8002924 <SPI_WIFI_ReceiveData+0xe8>)
 8002914:	f001 f964 	bl	8003be0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002918:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	48001000 	.word	0x48001000
 8002928:	20000370 	.word	0x20000370
 800292c:	2000030c 	.word	0x2000030c

08002930 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	460b      	mov	r3, r1
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fef9 	bl	8002738 <wait_cmddata_rdy_high>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	da02      	bge.n	8002952 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800294c:	f04f 33ff 	mov.w	r3, #4294967295
 8002950:	e04f      	b.n	80029f2 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8002952:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <SPI_WIFI_SendData+0xcc>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002958:	2200      	movs	r2, #0
 800295a:	2101      	movs	r1, #1
 800295c:	4828      	ldr	r0, [pc, #160]	@ (8002a00 <SPI_WIFI_SendData+0xd0>)
 800295e:	f001 f93f 	bl	8003be0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002962:	200f      	movs	r0, #15
 8002964:	f000 f85e 	bl	8002a24 <SPI_WIFI_DelayUs>
  if (len > 1)
 8002968:	897b      	ldrh	r3, [r7, #10]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d919      	bls.n	80029a2 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 800296e:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <SPI_WIFI_SendData+0xd4>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8002974:	897b      	ldrh	r3, [r7, #10]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	68f9      	ldr	r1, [r7, #12]
 800297e:	4822      	ldr	r0, [pc, #136]	@ (8002a08 <SPI_WIFI_SendData+0xd8>)
 8002980:	f003 fbd2 	bl	8006128 <HAL_SPI_Transmit_IT>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800298a:	2201      	movs	r2, #1
 800298c:	2101      	movs	r1, #1
 800298e:	481c      	ldr	r0, [pc, #112]	@ (8002a00 <SPI_WIFI_SendData+0xd0>)
 8002990:	f001 f926 	bl	8003be0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	e02b      	b.n	80029f2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff2d 	bl	80027fc <wait_spi_tx_event>
  }

  if (len & 1)
 80029a2:	897b      	ldrh	r3, [r7, #10]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 80029ac:	897b      	ldrh	r3, [r7, #10]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80029b8:	230a      	movs	r3, #10
 80029ba:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80029bc:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <SPI_WIFI_SendData+0xd4>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	480f      	ldr	r0, [pc, #60]	@ (8002a08 <SPI_WIFI_SendData+0xd8>)
 80029cc:	f003 fbac 	bl	8006128 <HAL_SPI_Transmit_IT>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80029d6:	2201      	movs	r2, #1
 80029d8:	2101      	movs	r1, #1
 80029da:	4809      	ldr	r0, [pc, #36]	@ (8002a00 <SPI_WIFI_SendData+0xd0>)
 80029dc:	f001 f900 	bl	8003be0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
 80029e4:	e005      	b.n	80029f2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff07 	bl	80027fc <wait_spi_tx_event>
  }
  return len;
 80029ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000378 	.word	0x20000378
 8002a00:	48001000 	.word	0x48001000
 8002a04:	20000374 	.word	0x20000374
 8002a08:	2000030c 	.word	0x2000030c

08002a0c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fdab 	bl	8003570 <HAL_Delay>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8002a34:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <SPI_WIFI_DelayUs+0x94>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d122      	bne.n	8002a82 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <SPI_WIFI_DelayUs+0x98>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac0 <SPI_WIFI_DelayUs+0x9c>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002a52:	f000 fd81 	bl	8003558 <HAL_GetTick>
 8002a56:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002a58:	e002      	b.n	8002a60 <SPI_WIFI_DelayUs+0x3c>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f9      	bne.n	8002a5a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8002a66:	f000 fd77 	bl	8003558 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	4a11      	ldr	r2, [pc, #68]	@ (8002ab8 <SPI_WIFI_DelayUs+0x94>)
 8002a72:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002a74:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <SPI_WIFI_DelayUs+0x94>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <SPI_WIFI_DelayUs+0x5e>
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab8 <SPI_WIFI_DelayUs+0x94>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <SPI_WIFI_DelayUs+0x98>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac4 <SPI_WIFI_DelayUs+0xa0>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	0c9a      	lsrs	r2, r3, #18
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <SPI_WIFI_DelayUs+0x94>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	fb02 f303 	mul.w	r3, r2, r3
 8002aa0:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002aa2:	e002      	b.n	8002aaa <SPI_WIFI_DelayUs+0x86>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f9      	bne.n	8002aa4 <SPI_WIFI_DelayUs+0x80>
  return;
 8002ab0:	bf00      	nop
}
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2000037c 	.word	0x2000037c
 8002abc:	20000048 	.word	0x20000048
 8002ac0:	10624dd3 	.word	0x10624dd3
 8002ac4:	431bde83 	.word	0x431bde83

08002ac8 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002ad0:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <HAL_SPI_RxCpltCallback+0x24>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <HAL_SPI_RxCpltCallback+0x24>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
  }
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000370 	.word	0x20000370

08002af0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002af8:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_SPI_TxCpltCallback+0x24>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <HAL_SPI_TxCpltCallback+0x24>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
  }
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000374 	.word	0x20000374

08002b18 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <SPI_WIFI_ISR+0x1c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d102      	bne.n	8002b2a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002b24:	4b03      	ldr	r3, [pc, #12]	@ (8002b34 <SPI_WIFI_ISR+0x1c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
   }
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	20000378 	.word	0x20000378

08002b38 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002b42:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <WIFI_Init+0x40>)
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <WIFI_Init+0x44>)
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <WIFI_Init+0x48>)
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b84 <WIFI_Init+0x4c>)
 8002b4e:	490e      	ldr	r1, [pc, #56]	@ (8002b88 <WIFI_Init+0x50>)
 8002b50:	480e      	ldr	r0, [pc, #56]	@ (8002b8c <WIFI_Init+0x54>)
 8002b52:	f7ff f981 	bl	8001e58 <ES_WIFI_RegisterBusIO>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d107      	bne.n	8002b6c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002b5c:	480b      	ldr	r0, [pc, #44]	@ (8002b8c <WIFI_Init+0x54>)
 8002b5e:	f7ff f947 	bl	8001df0 <ES_WIFI_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	0800283d 	.word	0x0800283d
 8002b7c:	08002931 	.word	0x08002931
 8002b80:	08002a0d 	.word	0x08002a0d
 8002b84:	08002725 	.word	0x08002725
 8002b88:	08002575 	.word	0x08002575
 8002b8c:	20000380 	.word	0x20000380

08002b90 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	68f9      	ldr	r1, [r7, #12]
 8002ba8:	4809      	ldr	r0, [pc, #36]	@ (8002bd0 <WIFI_Connect+0x40>)
 8002baa:	f7ff f989 	bl	8001ec0 <ES_WIFI_Connect>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002bb4:	4806      	ldr	r0, [pc, #24]	@ (8002bd0 <WIFI_Connect+0x40>)
 8002bb6:	f7ff fa2b 	bl	8002010 <ES_WIFI_GetNetworkSettings>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000380 	.word	0x20000380

08002bd4 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <WIFI_GetMAC_Address+0x32>
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4806      	ldr	r0, [pc, #24]	@ (8002c10 <WIFI_GetMAC_Address+0x3c>)
 8002bf8:	f7ff fa34 	bl	8002064 <ES_WIFI_GetMACAddress>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000380 	.word	0x20000380

08002c14 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <WIFI_GetIP_Address+0x38>
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d90d      	bls.n	8002c4c <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002c30:	4809      	ldr	r0, [pc, #36]	@ (8002c58 <WIFI_GetIP_Address+0x44>)
 8002c32:	f7ff f9bd 	bl	8001fb0 <ES_WIFI_IsConnected>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <WIFI_GetIP_Address+0x44>)
 8002c3e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 8002c42:	461a      	mov	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000380 	.word	0x20000380

08002c5c <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	@ 0x28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8002c78:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002c7a:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8002c7c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002c7e:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002c80:	7afb      	ldrb	r3, [r7, #11]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	3303      	adds	r3, #3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002cac:	f107 0310 	add.w	r3, r7, #16
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4807      	ldr	r0, [pc, #28]	@ (8002cd0 <WIFI_OpenClientConnection+0x74>)
 8002cb4:	f7ff fa0c 	bl	80020d0 <ES_WIFI_StartClientConnection>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8002cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3728      	adds	r7, #40	@ 0x28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000380 	.word	0x20000380

08002cd4 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	b2d9      	uxtb	r1, r3
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	4806      	ldr	r0, [pc, #24]	@ (8002d14 <WIFI_SendData+0x40>)
 8002cfc:	f7ff fac2 	bl	8002284 <ES_WIFI_SendData>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000380 	.word	0x20000380

08002d18 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10b      	bne.n	8002d40 <BSP_LED_Init+0x28>
 8002d28:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <BSP_LED_Init+0x58>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2c:	4a10      	ldr	r2, [pc, #64]	@ (8002d70 <BSP_LED_Init+0x58>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d34:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <BSP_LED_Init+0x58>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002d40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d44:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002d46:	2301      	movs	r3, #1
 8002d48:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	4a07      	ldr	r2, [pc, #28]	@ (8002d74 <BSP_LED_Init+0x5c>)
 8002d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5a:	f107 020c 	add.w	r2, r7, #12
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fd7b 	bl	800385c <HAL_GPIO_Init>
}
 8002d66:	bf00      	nop
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	20000004 	.word	0x20000004

08002d78 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	4a06      	ldr	r2, [pc, #24]	@ (8002da0 <BSP_LED_On+0x28>)
 8002d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d8e:	b291      	uxth	r1, r2
 8002d90:	2201      	movs	r2, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 ff24 	bl	8003be0 <HAL_GPIO_WritePin>
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000004 	.word	0x20000004

08002da4 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	@ 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <BSP_COM_Init+0x2a>
 8002db6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e6c <BSP_COM_Init+0xc8>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dba:	4a2c      	ldr	r2, [pc, #176]	@ (8002e6c <BSP_COM_Init+0xc8>)
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e6c <BSP_COM_Init+0xc8>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <BSP_COM_Init+0x48>
 8002dd4:	4b25      	ldr	r3, [pc, #148]	@ (8002e6c <BSP_COM_Init+0xc8>)
 8002dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd8:	4a24      	ldr	r2, [pc, #144]	@ (8002e6c <BSP_COM_Init+0xc8>)
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de0:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <BSP_COM_Init+0xc8>)
 8002de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10b      	bne.n	8002e0a <BSP_COM_Init+0x66>
 8002df2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e6c <BSP_COM_Init+0xc8>)
 8002df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e6c <BSP_COM_Init+0xc8>)
 8002df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <BSP_COM_Init+0xc8>)
 8002e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8002e0a:	2340      	movs	r3, #64	@ 0x40
 8002e0c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e12:	2302      	movs	r3, #2
 8002e14:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002e1a:	2307      	movs	r3, #7
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	4a13      	ldr	r2, [pc, #76]	@ (8002e70 <BSP_COM_Init+0xcc>)
 8002e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e26:	f107 0214 	add.w	r2, r7, #20
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fd15 	bl	800385c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002e32:	2380      	movs	r3, #128	@ 0x80
 8002e34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	4a0c      	ldr	r2, [pc, #48]	@ (8002e74 <BSP_COM_Init+0xd0>)
 8002e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e46:	f107 0214 	add.w	r2, r7, #20
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fd05 	bl	800385c <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	4a08      	ldr	r2, [pc, #32]	@ (8002e78 <BSP_COM_Init+0xd4>)
 8002e56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8002e5e:	6838      	ldr	r0, [r7, #0]
 8002e60:	f004 fa25 	bl	80072ae <HAL_UART_Init>
}
 8002e64:	bf00      	nop
 8002e66:	3728      	adds	r7, #40	@ 0x28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	2000000c 	.word	0x2000000c
 8002e74:	20000010 	.word	0x20000010
 8002e78:	20000008 	.word	0x20000008

08002e7c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	@ 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002e84:	4b27      	ldr	r3, [pc, #156]	@ (8002f24 <I2Cx_MspInit+0xa8>)
 8002e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e88:	4a26      	ldr	r2, [pc, #152]	@ (8002f24 <I2Cx_MspInit+0xa8>)
 8002e8a:	f043 0302 	orr.w	r3, r3, #2
 8002e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e90:	4b24      	ldr	r3, [pc, #144]	@ (8002f24 <I2Cx_MspInit+0xa8>)
 8002e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002e9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ea0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002ea2:	2312      	movs	r3, #18
 8002ea4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	481b      	ldr	r0, [pc, #108]	@ (8002f28 <I2Cx_MspInit+0xac>)
 8002eba:	f000 fccf 	bl	800385c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4818      	ldr	r0, [pc, #96]	@ (8002f28 <I2Cx_MspInit+0xac>)
 8002ec6:	f000 fcc9 	bl	800385c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002eca:	4b16      	ldr	r3, [pc, #88]	@ (8002f24 <I2Cx_MspInit+0xa8>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	4a15      	ldr	r2, [pc, #84]	@ (8002f24 <I2Cx_MspInit+0xa8>)
 8002ed0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed6:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <I2Cx_MspInit+0xa8>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <I2Cx_MspInit+0xa8>)
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f24 <I2Cx_MspInit+0xa8>)
 8002ee8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002eec:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002eee:	4b0d      	ldr	r3, [pc, #52]	@ (8002f24 <I2Cx_MspInit+0xa8>)
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8002f24 <I2Cx_MspInit+0xa8>)
 8002ef4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002ef8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	210f      	movs	r1, #15
 8002efe:	2021      	movs	r0, #33	@ 0x21
 8002f00:	f000 fc35 	bl	800376e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002f04:	2021      	movs	r0, #33	@ 0x21
 8002f06:	f000 fc4e 	bl	80037a6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	210f      	movs	r1, #15
 8002f0e:	2022      	movs	r0, #34	@ 0x22
 8002f10:	f000 fc2d 	bl	800376e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002f14:	2022      	movs	r0, #34	@ 0x22
 8002f16:	f000 fc46 	bl	80037a6 <HAL_NVIC_EnableIRQ>
}
 8002f1a:	bf00      	nop
 8002f1c:	3728      	adds	r7, #40	@ 0x28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000
 8002f28:	48000400 	.word	0x48000400

08002f2c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <I2Cx_Init+0x54>)
 8002f38:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a11      	ldr	r2, [pc, #68]	@ (8002f84 <I2Cx_Init+0x58>)
 8002f3e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ff89 	bl	8002e7c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fe68 	bl	8003c40 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002f70:	2100      	movs	r1, #0
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f001 fc32 	bl	80047dc <HAL_I2CEx_ConfigAnalogFilter>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40005800 	.word	0x40005800
 8002f84:	00702681 	.word	0x00702681

08002f88 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	@ 0x28
 8002f8c:	af04      	add	r7, sp, #16
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	72fb      	strb	r3, [r7, #11]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	813b      	strh	r3, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002fa6:	7afb      	ldrb	r3, [r7, #11]
 8002fa8:	b299      	uxth	r1, r3
 8002faa:	88f8      	ldrh	r0, [r7, #6]
 8002fac:	893a      	ldrh	r2, [r7, #8]
 8002fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fb2:	9302      	str	r3, [sp, #8]
 8002fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f001 f830 	bl	8004024 <HAL_I2C_Mem_Read>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d004      	beq.n	8002fd8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002fce:	7afb      	ldrb	r3, [r7, #11]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f832 	bl	800303c <I2Cx_Error>
  }
  return status;
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b08a      	sub	sp, #40	@ 0x28
 8002fe6:	af04      	add	r7, sp, #16
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	4608      	mov	r0, r1
 8002fec:	4611      	mov	r1, r2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	72fb      	strb	r3, [r7, #11]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	813b      	strh	r3, [r7, #8]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	b299      	uxth	r1, r3
 8003004:	88f8      	ldrh	r0, [r7, #6]
 8003006:	893a      	ldrh	r2, [r7, #8]
 8003008:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800300c:	9302      	str	r3, [sp, #8]
 800300e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4603      	mov	r3, r0
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 feef 	bl	8003dfc <HAL_I2C_Mem_Write>
 800301e:	4603      	mov	r3, r0
 8003020:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003028:	7afb      	ldrb	r3, [r7, #11]
 800302a:	4619      	mov	r1, r3
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f805 	bl	800303c <I2Cx_Error>
  }
  return status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fe94 	bl	8003d76 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ff6c 	bl	8002f2c <I2Cx_Init>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003060:	4802      	ldr	r0, [pc, #8]	@ (800306c <SENSOR_IO_Init+0x10>)
 8003062:	f7ff ff63 	bl	8002f2c <I2Cx_Init>
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000c80 	.word	0x20000c80

08003070 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af02      	add	r7, sp, #8
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
 800307a:	460b      	mov	r3, r1
 800307c:	71bb      	strb	r3, [r7, #6]
 800307e:	4613      	mov	r3, r2
 8003080:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003082:	79bb      	ldrb	r3, [r7, #6]
 8003084:	b29a      	uxth	r2, r3
 8003086:	79f9      	ldrb	r1, [r7, #7]
 8003088:	2301      	movs	r3, #1
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	1d7b      	adds	r3, r7, #5
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2301      	movs	r3, #1
 8003092:	4803      	ldr	r0, [pc, #12]	@ (80030a0 <SENSOR_IO_Write+0x30>)
 8003094:	f7ff ffa5 	bl	8002fe2 <I2Cx_WriteMultiple>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000c80 	.word	0x20000c80

080030a4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	4603      	mov	r3, r0
 80030ac:	460a      	mov	r2, r1
 80030ae:	71fb      	strb	r3, [r7, #7]
 80030b0:	4613      	mov	r3, r2
 80030b2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80030b8:	79bb      	ldrb	r3, [r7, #6]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	79f9      	ldrb	r1, [r7, #7]
 80030be:	2301      	movs	r3, #1
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	f107 030f 	add.w	r3, r7, #15
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2301      	movs	r3, #1
 80030ca:	4804      	ldr	r0, [pc, #16]	@ (80030dc <SENSOR_IO_Read+0x38>)
 80030cc:	f7ff ff5c 	bl	8002f88 <I2Cx_ReadMultiple>

  return read_value;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000c80 	.word	0x20000c80

080030e0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	603a      	str	r2, [r7, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
 80030ee:	460b      	mov	r3, r1
 80030f0:	71bb      	strb	r3, [r7, #6]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80030f6:	79bb      	ldrb	r3, [r7, #6]
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	79f9      	ldrb	r1, [r7, #7]
 80030fc:	88bb      	ldrh	r3, [r7, #4]
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2301      	movs	r3, #1
 8003106:	4804      	ldr	r0, [pc, #16]	@ (8003118 <SENSOR_IO_ReadMultiple+0x38>)
 8003108:	f7ff ff3e 	bl	8002f88 <I2Cx_ReadMultiple>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000c80 	.word	0x20000c80

0800311c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003126:	2300      	movs	r3, #0
 8003128:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800312a:	4b1a      	ldr	r3, [pc, #104]	@ (8003194 <BSP_ACCELERO_Init+0x78>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4798      	blx	r3
 8003130:	4603      	mov	r3, r0
 8003132:	2b6a      	cmp	r3, #106	@ 0x6a
 8003134:	d002      	beq.n	800313c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	e025      	b.n	8003188 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800313c:	4b16      	ldr	r3, [pc, #88]	@ (8003198 <BSP_ACCELERO_Init+0x7c>)
 800313e:	4a15      	ldr	r2, [pc, #84]	@ (8003194 <BSP_ACCELERO_Init+0x78>)
 8003140:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_26Hz;
 8003142:	2320      	movs	r3, #32
 8003144:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800314a:	2300      	movs	r3, #0
 800314c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800314e:	2340      	movs	r3, #64	@ 0x40
 8003150:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	72fb      	strb	r3, [r7, #11]

    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800315a:	797a      	ldrb	r2, [r7, #5]
 800315c:	7abb      	ldrb	r3, [r7, #10]
 800315e:	4313      	orrs	r3, r2
 8003160:	b2db      	uxtb	r3, r3
 8003162:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003164:	7a3b      	ldrb	r3, [r7, #8]
 8003166:	f043 0304 	orr.w	r3, r3, #4
 800316a:	b2db      	uxtb	r3, r3
 800316c:	b21b      	sxth	r3, r3
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	b21a      	sxth	r2, r3
 8003172:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	b21b      	sxth	r3, r3
 800317a:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <BSP_ACCELERO_Init+0x7c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	89ba      	ldrh	r2, [r7, #12]
 8003184:	4610      	mov	r0, r2
 8003186:	4798      	blx	r3
  }

  return ret;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000014 	.word	0x20000014
 8003198:	20000d5c 	.word	0x20000d5c

0800319c <BSP_ACCELERO_Enable_Motion_Detection_IT>:
/**
  * @brief  Enable LSM6DSL Significant Motion Detection interrupt.
  * @retval ACCEL-ERO_OK if success, ACCELERO_ERROR otherwise.
  */
int32_t BSP_ACCELERO_Enable_Motion_Detection_IT(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0

  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_FUNC_CFG_ACCESS, 0x80);
 80031a0:	2280      	movs	r2, #128	@ 0x80
 80031a2:	2101      	movs	r1, #1
 80031a4:	20d4      	movs	r0, #212	@ 0xd4
 80031a6:	f7ff ff63 	bl	8003070 <SENSOR_IO_Write>
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_SM_STEP_THS, 0x04);
 80031aa:	2204      	movs	r2, #4
 80031ac:	2113      	movs	r1, #19
 80031ae:	20d4      	movs	r0, #212	@ 0xd4
 80031b0:	f7ff ff5e 	bl	8003070 <SENSOR_IO_Write>
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_FUNC_CFG_ACCESS, 0x00);
 80031b4:	2200      	movs	r2, #0
 80031b6:	2101      	movs	r1, #1
 80031b8:	20d4      	movs	r0, #212	@ 0xd4
 80031ba:	f7ff ff59 	bl	8003070 <SENSOR_IO_Write>

  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, 0x20);
 80031be:	2220      	movs	r2, #32
 80031c0:	2110      	movs	r1, #16
 80031c2:	20d4      	movs	r0, #212	@ 0xd4
 80031c4:	f7ff ff54 	bl	8003070 <SENSOR_IO_Write>

  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL10_C, 0x05);
 80031c8:	2205      	movs	r2, #5
 80031ca:	2119      	movs	r1, #25
 80031cc:	20d4      	movs	r0, #212	@ 0xd4
 80031ce:	f7ff ff4f 	bl	8003070 <SENSOR_IO_Write>

  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, 0x40);
 80031d2:	2240      	movs	r2, #64	@ 0x40
 80031d4:	210d      	movs	r1, #13
 80031d6:	20d4      	movs	r0, #212	@ 0xd4
 80031d8:	f7ff ff4a 	bl	8003070 <SENSOR_IO_Write>
  return ACCELERO_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80031f0:	2110      	movs	r1, #16
 80031f2:	20d4      	movs	r0, #212	@ 0xd4
 80031f4:	f7ff ff56 	bl	80030a4 <SENSOR_IO_Read>
 80031f8:	4603      	mov	r3, r0
 80031fa:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003200:	7bbb      	ldrb	r3, [r7, #14]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003208:	7bba      	ldrb	r2, [r7, #14]
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	4313      	orrs	r3, r2
 800320e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003210:	7bbb      	ldrb	r3, [r7, #14]
 8003212:	461a      	mov	r2, r3
 8003214:	2110      	movs	r1, #16
 8003216:	20d4      	movs	r0, #212	@ 0xd4
 8003218:	f7ff ff2a 	bl	8003070 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800321c:	2112      	movs	r1, #18
 800321e:	20d4      	movs	r0, #212	@ 0xd4
 8003220:	f7ff ff40 	bl	80030a4 <SENSOR_IO_Read>
 8003224:	4603      	mov	r3, r0
 8003226:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	b29b      	uxth	r3, r3
 800322e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003230:	7bbb      	ldrb	r3, [r7, #14]
 8003232:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003236:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003238:	7bba      	ldrb	r2, [r7, #14]
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	4313      	orrs	r3, r2
 800323e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	461a      	mov	r2, r3
 8003244:	2112      	movs	r1, #18
 8003246:	20d4      	movs	r0, #212	@ 0xd4
 8003248:	f7ff ff12 	bl	8003070 <SENSOR_IO_Write>
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800325a:	2300      	movs	r3, #0
 800325c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800325e:	2110      	movs	r1, #16
 8003260:	20d4      	movs	r0, #212	@ 0xd4
 8003262:	f7ff ff1f 	bl	80030a4 <SENSOR_IO_Read>
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	461a      	mov	r2, r3
 8003276:	2110      	movs	r1, #16
 8003278:	20d4      	movs	r0, #212	@ 0xd4
 800327a:	f7ff fef9 	bl	8003070 <SENSOR_IO_Write>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003286:	b580      	push	{r7, lr}
 8003288:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800328a:	f7ff fee7 	bl	800305c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800328e:	210f      	movs	r1, #15
 8003290:	20d4      	movs	r0, #212	@ 0xd4
 8003292:	f7ff ff07 	bl	80030a4 <SENSOR_IO_Read>
 8003296:	4603      	mov	r3, r0
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}

0800329c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80032aa:	2115      	movs	r1, #21
 80032ac:	20d4      	movs	r0, #212	@ 0xd4
 80032ae:	f7ff fef9 	bl	80030a4 <SENSOR_IO_Read>
 80032b2:	4603      	mov	r3, r0
 80032b4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	f023 0310 	bic.w	r3, r3, #16
 80032bc:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	f043 0310 	orr.w	r3, r3, #16
 80032ca:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	461a      	mov	r2, r3
 80032d0:	2115      	movs	r1, #21
 80032d2:	20d4      	movs	r0, #212	@ 0xd4
 80032d4:	f7ff fecc 	bl	8003070 <SENSOR_IO_Write>
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80032f6:	2110      	movs	r1, #16
 80032f8:	20d4      	movs	r0, #212	@ 0xd4
 80032fa:	f7ff fed3 	bl	80030a4 <SENSOR_IO_Read>
 80032fe:	4603      	mov	r3, r0
 8003300:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003302:	f107 0208 	add.w	r2, r7, #8
 8003306:	2306      	movs	r3, #6
 8003308:	2128      	movs	r1, #40	@ 0x28
 800330a:	20d4      	movs	r0, #212	@ 0xd4
 800330c:	f7ff fee8 	bl	80030e0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003310:	2300      	movs	r3, #0
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e01a      	b.n	800334c <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003316:	7ffb      	ldrb	r3, [r7, #31]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	3301      	adds	r3, #1
 800331c:	3320      	adds	r3, #32
 800331e:	443b      	add	r3, r7
 8003320:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	b29b      	uxth	r3, r3
 8003328:	7ffa      	ldrb	r2, [r7, #31]
 800332a:	0052      	lsls	r2, r2, #1
 800332c:	3220      	adds	r2, #32
 800332e:	443a      	add	r2, r7
 8003330:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003334:	4413      	add	r3, r2
 8003336:	b29a      	uxth	r2, r3
 8003338:	7ffb      	ldrb	r3, [r7, #31]
 800333a:	b212      	sxth	r2, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	3320      	adds	r3, #32
 8003340:	443b      	add	r3, r7
 8003342:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003346:	7ffb      	ldrb	r3, [r7, #31]
 8003348:	3301      	adds	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	7ffb      	ldrb	r3, [r7, #31]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d9e1      	bls.n	8003316 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d829      	bhi.n	80033b0 <LSM6DSL_AccReadXYZ+0xd0>
 800335c:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <LSM6DSL_AccReadXYZ+0x84>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003399 	.word	0x08003399
 8003368:	080033b1 	.word	0x080033b1
 800336c:	080033b1 	.word	0x080033b1
 8003370:	080033b1 	.word	0x080033b1
 8003374:	080033ab 	.word	0x080033ab
 8003378:	080033b1 	.word	0x080033b1
 800337c:	080033b1 	.word	0x080033b1
 8003380:	080033b1 	.word	0x080033b1
 8003384:	0800339f 	.word	0x0800339f
 8003388:	080033b1 	.word	0x080033b1
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033b1 	.word	0x080033b1
 8003394:	080033a5 	.word	0x080033a5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003398:	4b18      	ldr	r3, [pc, #96]	@ (80033fc <LSM6DSL_AccReadXYZ+0x11c>)
 800339a:	61bb      	str	r3, [r7, #24]
    break;
 800339c:	e008      	b.n	80033b0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800339e:	4b18      	ldr	r3, [pc, #96]	@ (8003400 <LSM6DSL_AccReadXYZ+0x120>)
 80033a0:	61bb      	str	r3, [r7, #24]
    break;
 80033a2:	e005      	b.n	80033b0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80033a4:	4b17      	ldr	r3, [pc, #92]	@ (8003404 <LSM6DSL_AccReadXYZ+0x124>)
 80033a6:	61bb      	str	r3, [r7, #24]
    break;
 80033a8:	e002      	b.n	80033b0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80033aa:	4b17      	ldr	r3, [pc, #92]	@ (8003408 <LSM6DSL_AccReadXYZ+0x128>)
 80033ac:	61bb      	str	r3, [r7, #24]
    break;    
 80033ae:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80033b0:	2300      	movs	r3, #0
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e01a      	b.n	80033ec <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80033b6:	7ffb      	ldrb	r3, [r7, #31]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	3320      	adds	r3, #32
 80033bc:	443b      	add	r3, r7
 80033be:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d2:	7ffb      	ldrb	r3, [r7, #31]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033de:	ee17 2a90 	vmov	r2, s15
 80033e2:	b212      	sxth	r2, r2
 80033e4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	3301      	adds	r3, #1
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	7ffb      	ldrb	r3, [r7, #31]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d9e1      	bls.n	80033b6 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	3d79db23 	.word	0x3d79db23
 8003400:	3df9db23 	.word	0x3df9db23
 8003404:	3e79db23 	.word	0x3e79db23
 8003408:	3ef9db23 	.word	0x3ef9db23

0800340c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003410:	4b17      	ldr	r3, [pc, #92]	@ (8003470 <SystemInit+0x64>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003416:	4a16      	ldr	r2, [pc, #88]	@ (8003470 <SystemInit+0x64>)
 8003418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800341c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003420:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <SystemInit+0x68>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a13      	ldr	r2, [pc, #76]	@ (8003474 <SystemInit+0x68>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800342c:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <SystemInit+0x68>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003432:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <SystemInit+0x68>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a0f      	ldr	r2, [pc, #60]	@ (8003474 <SystemInit+0x68>)
 8003438:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800343c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003440:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8003442:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <SystemInit+0x68>)
 8003444:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003448:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800344a:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <SystemInit+0x68>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a09      	ldr	r2, [pc, #36]	@ (8003474 <SystemInit+0x68>)
 8003450:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003454:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003456:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <SystemInit+0x68>)
 8003458:	2200      	movs	r2, #0
 800345a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <SystemInit+0x64>)
 800345e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003462:	609a      	str	r2, [r3, #8]
#endif
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000ed00 	.word	0xe000ed00
 8003474:	40021000 	.word	0x40021000

08003478 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003482:	2003      	movs	r0, #3
 8003484:	f000 f968 	bl	8003758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003488:	200f      	movs	r0, #15
 800348a:	f000 f815 	bl	80034b8 <HAL_InitTick>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	71fb      	strb	r3, [r7, #7]
 8003498:	e001      	b.n	800349e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800349a:	f000 f805 	bl	80034a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800349e:	79fb      	ldrb	r3, [r7, #7]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034c4:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <HAL_InitTick+0x6c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d023      	beq.n	8003514 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034cc:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <HAL_InitTick+0x70>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b14      	ldr	r3, [pc, #80]	@ (8003524 <HAL_InitTick+0x6c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034da:	fbb3 f3f1 	udiv	r3, r3, r1
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f96d 	bl	80037c2 <HAL_SYSTICK_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d809      	bhi.n	8003508 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f4:	2200      	movs	r2, #0
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295
 80034fc:	f000 f937 	bl	800376e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003500:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <HAL_InitTick+0x74>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e007      	b.n	8003518 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e004      	b.n	8003518 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	e001      	b.n	8003518 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000050 	.word	0x20000050
 8003528:	20000048 	.word	0x20000048
 800352c:	2000004c 	.word	0x2000004c

08003530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <HAL_IncTick+0x20>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <HAL_IncTick+0x24>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4413      	add	r3, r2
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <HAL_IncTick+0x24>)
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000050 	.word	0x20000050
 8003554:	20000d60 	.word	0x20000d60

08003558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return uwTick;
 800355c:	4b03      	ldr	r3, [pc, #12]	@ (800356c <HAL_GetTick+0x14>)
 800355e:	681b      	ldr	r3, [r3, #0]
}
 8003560:	4618      	mov	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000d60 	.word	0x20000d60

08003570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003578:	f7ff ffee 	bl	8003558 <HAL_GetTick>
 800357c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d005      	beq.n	8003596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800358a:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <HAL_Delay+0x44>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003596:	bf00      	nop
 8003598:	f7ff ffde 	bl	8003558 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d8f7      	bhi.n	8003598 <HAL_Delay+0x28>
  {
  }
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000050 	.word	0x20000050

080035b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035c8:	4b0c      	ldr	r3, [pc, #48]	@ (80035fc <__NVIC_SetPriorityGrouping+0x44>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035d4:	4013      	ands	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ea:	4a04      	ldr	r2, [pc, #16]	@ (80035fc <__NVIC_SetPriorityGrouping+0x44>)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	60d3      	str	r3, [r2, #12]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003604:	4b04      	ldr	r3, [pc, #16]	@ (8003618 <__NVIC_GetPriorityGrouping+0x18>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	f003 0307 	and.w	r3, r3, #7
}
 800360e:	4618      	mov	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	2b00      	cmp	r3, #0
 800362c:	db0b      	blt.n	8003646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	4907      	ldr	r1, [pc, #28]	@ (8003654 <__NVIC_EnableIRQ+0x38>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2001      	movs	r0, #1
 800363e:	fa00 f202 	lsl.w	r2, r0, r2
 8003642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000e100 	.word	0xe000e100

08003658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	6039      	str	r1, [r7, #0]
 8003662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003668:	2b00      	cmp	r3, #0
 800366a:	db0a      	blt.n	8003682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	490c      	ldr	r1, [pc, #48]	@ (80036a4 <__NVIC_SetPriority+0x4c>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	440b      	add	r3, r1
 800367c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003680:	e00a      	b.n	8003698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4908      	ldr	r1, [pc, #32]	@ (80036a8 <__NVIC_SetPriority+0x50>)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	3b04      	subs	r3, #4
 8003690:	0112      	lsls	r2, r2, #4
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	440b      	add	r3, r1
 8003696:	761a      	strb	r2, [r3, #24]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000e100 	.word	0xe000e100
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b089      	sub	sp, #36	@ 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f1c3 0307 	rsb	r3, r3, #7
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	bf28      	it	cs
 80036ca:	2304      	movcs	r3, #4
 80036cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	d902      	bls.n	80036dc <NVIC_EncodePriority+0x30>
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3b03      	subs	r3, #3
 80036da:	e000      	b.n	80036de <NVIC_EncodePriority+0x32>
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43da      	mvns	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	401a      	ands	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036f4:	f04f 31ff 	mov.w	r1, #4294967295
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43d9      	mvns	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003704:	4313      	orrs	r3, r2
         );
}
 8003706:	4618      	mov	r0, r3
 8003708:	3724      	adds	r7, #36	@ 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3b01      	subs	r3, #1
 8003720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003724:	d301      	bcc.n	800372a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003726:	2301      	movs	r3, #1
 8003728:	e00f      	b.n	800374a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800372a:	4a0a      	ldr	r2, [pc, #40]	@ (8003754 <SysTick_Config+0x40>)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003732:	210f      	movs	r1, #15
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	f7ff ff8e 	bl	8003658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800373c:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <SysTick_Config+0x40>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003742:	4b04      	ldr	r3, [pc, #16]	@ (8003754 <SysTick_Config+0x40>)
 8003744:	2207      	movs	r2, #7
 8003746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	e000e010 	.word	0xe000e010

08003758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff29 	bl	80035b8 <__NVIC_SetPriorityGrouping>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003780:	f7ff ff3e 	bl	8003600 <__NVIC_GetPriorityGrouping>
 8003784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	6978      	ldr	r0, [r7, #20]
 800378c:	f7ff ff8e 	bl	80036ac <NVIC_EncodePriority>
 8003790:	4602      	mov	r2, r0
 8003792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff5d 	bl	8003658 <__NVIC_SetPriority>
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	4603      	mov	r3, r0
 80037ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff ff31 	bl	800361c <__NVIC_EnableIRQ>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff ffa2 	bl	8003714 <SysTick_Config>
 80037d0:	4603      	mov	r3, r0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d005      	beq.n	80037fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2204      	movs	r2, #4
 80037f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e029      	b.n	8003852 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 020e 	bic.w	r2, r2, #14
 800380c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	f003 021c 	and.w	r2, r3, #28
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f202 	lsl.w	r2, r1, r2
 8003830:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
    }
  }
  return status;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386a:	e17f      	b.n	8003b6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	2101      	movs	r1, #1
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8171 	beq.w	8003b66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d005      	beq.n	800389c <HAL_GPIO_Init+0x40>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d130      	bne.n	80038fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038d2:	2201      	movs	r2, #1
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f003 0201 	and.w	r2, r3, #1
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b03      	cmp	r3, #3
 8003908:	d118      	bne.n	800393c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003910:	2201      	movs	r2, #1
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	08db      	lsrs	r3, r3, #3
 8003926:	f003 0201 	and.w	r2, r3, #1
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b03      	cmp	r3, #3
 8003946:	d017      	beq.n	8003978 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d123      	bne.n	80039cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	08da      	lsrs	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3208      	adds	r2, #8
 800398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	220f      	movs	r2, #15
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	08da      	lsrs	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3208      	adds	r2, #8
 80039c6:	6939      	ldr	r1, [r7, #16]
 80039c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0203 	and.w	r2, r3, #3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80ac 	beq.w	8003b66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b8c <HAL_GPIO_Init+0x330>)
 8003a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a12:	4a5e      	ldr	r2, [pc, #376]	@ (8003b8c <HAL_GPIO_Init+0x330>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b8c <HAL_GPIO_Init+0x330>)
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a26:	4a5a      	ldr	r2, [pc, #360]	@ (8003b90 <HAL_GPIO_Init+0x334>)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a50:	d025      	beq.n	8003a9e <HAL_GPIO_Init+0x242>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4f      	ldr	r2, [pc, #316]	@ (8003b94 <HAL_GPIO_Init+0x338>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01f      	beq.n	8003a9a <HAL_GPIO_Init+0x23e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8003b98 <HAL_GPIO_Init+0x33c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d019      	beq.n	8003a96 <HAL_GPIO_Init+0x23a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4d      	ldr	r2, [pc, #308]	@ (8003b9c <HAL_GPIO_Init+0x340>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_GPIO_Init+0x236>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4c      	ldr	r2, [pc, #304]	@ (8003ba0 <HAL_GPIO_Init+0x344>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00d      	beq.n	8003a8e <HAL_GPIO_Init+0x232>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a4b      	ldr	r2, [pc, #300]	@ (8003ba4 <HAL_GPIO_Init+0x348>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <HAL_GPIO_Init+0x22e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba8 <HAL_GPIO_Init+0x34c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_GPIO_Init+0x22a>
 8003a82:	2306      	movs	r3, #6
 8003a84:	e00c      	b.n	8003aa0 <HAL_GPIO_Init+0x244>
 8003a86:	2307      	movs	r3, #7
 8003a88:	e00a      	b.n	8003aa0 <HAL_GPIO_Init+0x244>
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	e008      	b.n	8003aa0 <HAL_GPIO_Init+0x244>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	e006      	b.n	8003aa0 <HAL_GPIO_Init+0x244>
 8003a92:	2303      	movs	r3, #3
 8003a94:	e004      	b.n	8003aa0 <HAL_GPIO_Init+0x244>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e002      	b.n	8003aa0 <HAL_GPIO_Init+0x244>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_GPIO_Init+0x244>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	f002 0203 	and.w	r2, r2, #3
 8003aa6:	0092      	lsls	r2, r2, #2
 8003aa8:	4093      	lsls	r3, r2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ab0:	4937      	ldr	r1, [pc, #220]	@ (8003b90 <HAL_GPIO_Init+0x334>)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003abe:	4b3b      	ldr	r3, [pc, #236]	@ (8003bac <HAL_GPIO_Init+0x350>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ae2:	4a32      	ldr	r2, [pc, #200]	@ (8003bac <HAL_GPIO_Init+0x350>)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ae8:	4b30      	ldr	r3, [pc, #192]	@ (8003bac <HAL_GPIO_Init+0x350>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b0c:	4a27      	ldr	r2, [pc, #156]	@ (8003bac <HAL_GPIO_Init+0x350>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b12:	4b26      	ldr	r3, [pc, #152]	@ (8003bac <HAL_GPIO_Init+0x350>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b36:	4a1d      	ldr	r2, [pc, #116]	@ (8003bac <HAL_GPIO_Init+0x350>)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <HAL_GPIO_Init+0x350>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b60:	4a12      	ldr	r2, [pc, #72]	@ (8003bac <HAL_GPIO_Init+0x350>)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f47f ae78 	bne.w	800386c <HAL_GPIO_Init+0x10>
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40010000 	.word	0x40010000
 8003b94:	48000400 	.word	0x48000400
 8003b98:	48000800 	.word	0x48000800
 8003b9c:	48000c00 	.word	0x48000c00
 8003ba0:	48001000 	.word	0x48001000
 8003ba4:	48001400 	.word	0x48001400
 8003ba8:	48001800 	.word	0x48001800
 8003bac:	40010400 	.word	0x40010400

08003bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	887b      	ldrh	r3, [r7, #2]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
 8003bcc:	e001      	b.n	8003bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
 8003bec:	4613      	mov	r3, r2
 8003bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf0:	787b      	ldrb	r3, [r7, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bf6:	887a      	ldrh	r2, [r7, #2]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bfc:	e002      	b.n	8003c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bfe:	887a      	ldrh	r2, [r7, #2]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c1a:	4b08      	ldr	r3, [pc, #32]	@ (8003c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c26:	4a05      	ldr	r2, [pc, #20]	@ (8003c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd fc30 	bl	8001494 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40010400 	.word	0x40010400

08003c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e08d      	b.n	8003d6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f8b4 	bl	8003dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	@ 0x24
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d107      	bne.n	8003cba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	e006      	b.n	8003cc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d108      	bne.n	8003ce2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	e007      	b.n	8003cf2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69d9      	ldr	r1, [r3, #28]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e021      	b.n	8003dcc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	@ 0x24
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f821 	bl	8003de8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	817b      	strh	r3, [r7, #10]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	813b      	strh	r3, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	f040 80f9 	bne.w	8004016 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_I2C_Mem_Write+0x34>
 8003e2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e36:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0ed      	b.n	8004018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_I2C_Mem_Write+0x4e>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e0e6      	b.n	8004018 <HAL_I2C_Mem_Write+0x21c>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e52:	f7ff fb81 	bl	8003558 <HAL_GetTick>
 8003e56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2319      	movs	r3, #25
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fac3 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0d1      	b.n	8004018 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2221      	movs	r2, #33	@ 0x21
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2240      	movs	r2, #64	@ 0x40
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e9c:	88f8      	ldrh	r0, [r7, #6]
 8003e9e:	893a      	ldrh	r2, [r7, #8]
 8003ea0:	8979      	ldrh	r1, [r7, #10]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	4603      	mov	r3, r0
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f9d3 	bl	8004258 <I2C_RequestMemoryWrite>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0a9      	b.n	8004018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2bff      	cmp	r3, #255	@ 0xff
 8003ecc:	d90e      	bls.n	8003eec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	22ff      	movs	r2, #255	@ 0xff
 8003ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	8979      	ldrh	r1, [r7, #10]
 8003edc:	2300      	movs	r3, #0
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fc47 	bl	8004778 <I2C_TransferConfig>
 8003eea:	e00f      	b.n	8003f0c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	8979      	ldrh	r1, [r7, #10]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fc36 	bl	8004778 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fac6 	bl	80044a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e07b      	b.n	8004018 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	781a      	ldrb	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d034      	beq.n	8003fc4 <HAL_I2C_Mem_Write+0x1c8>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d130      	bne.n	8003fc4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2180      	movs	r1, #128	@ 0x80
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fa3f 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e04d      	b.n	8004018 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2bff      	cmp	r3, #255	@ 0xff
 8003f84:	d90e      	bls.n	8003fa4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	22ff      	movs	r2, #255	@ 0xff
 8003f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	8979      	ldrh	r1, [r7, #10]
 8003f94:	2300      	movs	r3, #0
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fbeb 	bl	8004778 <I2C_TransferConfig>
 8003fa2:	e00f      	b.n	8003fc4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	8979      	ldrh	r1, [r7, #10]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fbda 	bl	8004778 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d19e      	bne.n	8003f0c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 faac 	bl	8004530 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e01a      	b.n	8004018 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6859      	ldr	r1, [r3, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <HAL_I2C_Mem_Write+0x224>)
 8003ff6:	400b      	ands	r3, r1
 8003ff8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	fe00e800 	.word	0xfe00e800

08004024 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4603      	mov	r3, r0
 8004034:	817b      	strh	r3, [r7, #10]
 8004036:	460b      	mov	r3, r1
 8004038:	813b      	strh	r3, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	f040 80fd 	bne.w	8004246 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_I2C_Mem_Read+0x34>
 8004052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800405e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0f1      	b.n	8004248 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_I2C_Mem_Read+0x4e>
 800406e:	2302      	movs	r3, #2
 8004070:	e0ea      	b.n	8004248 <HAL_I2C_Mem_Read+0x224>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800407a:	f7ff fa6d 	bl	8003558 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2319      	movs	r3, #25
 8004086:	2201      	movs	r2, #1
 8004088:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f9af 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0d5      	b.n	8004248 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2222      	movs	r2, #34	@ 0x22
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2240      	movs	r2, #64	@ 0x40
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a3a      	ldr	r2, [r7, #32]
 80040b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c4:	88f8      	ldrh	r0, [r7, #6]
 80040c6:	893a      	ldrh	r2, [r7, #8]
 80040c8:	8979      	ldrh	r1, [r7, #10]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	4603      	mov	r3, r0
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f913 	bl	8004300 <I2C_RequestMemoryRead>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0ad      	b.n	8004248 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2bff      	cmp	r3, #255	@ 0xff
 80040f4:	d90e      	bls.n	8004114 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004100:	b2da      	uxtb	r2, r3
 8004102:	8979      	ldrh	r1, [r7, #10]
 8004104:	4b52      	ldr	r3, [pc, #328]	@ (8004250 <HAL_I2C_Mem_Read+0x22c>)
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fb33 	bl	8004778 <I2C_TransferConfig>
 8004112:	e00f      	b.n	8004134 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	b2da      	uxtb	r2, r3
 8004124:	8979      	ldrh	r1, [r7, #10]
 8004126:	4b4a      	ldr	r3, [pc, #296]	@ (8004250 <HAL_I2C_Mem_Read+0x22c>)
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fb22 	bl	8004778 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	2200      	movs	r2, #0
 800413c:	2104      	movs	r1, #4
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f956 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e07c      	b.n	8004248 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d034      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x1d0>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418e:	2b00      	cmp	r3, #0
 8004190:	d130      	bne.n	80041f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	2200      	movs	r2, #0
 800419a:	2180      	movs	r1, #128	@ 0x80
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f927 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e04d      	b.n	8004248 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2bff      	cmp	r3, #255	@ 0xff
 80041b4:	d90e      	bls.n	80041d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	8979      	ldrh	r1, [r7, #10]
 80041c4:	2300      	movs	r3, #0
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fad3 	bl	8004778 <I2C_TransferConfig>
 80041d2:	e00f      	b.n	80041f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	8979      	ldrh	r1, [r7, #10]
 80041e6:	2300      	movs	r3, #0
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fac2 	bl	8004778 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d19a      	bne.n	8004134 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f994 	bl	8004530 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e01a      	b.n	8004248 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2220      	movs	r2, #32
 8004218:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <HAL_I2C_Mem_Read+0x230>)
 8004226:	400b      	ands	r3, r1
 8004228:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004246:	2302      	movs	r3, #2
  }
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	80002400 	.word	0x80002400
 8004254:	fe00e800 	.word	0xfe00e800

08004258 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	4603      	mov	r3, r0
 8004268:	817b      	strh	r3, [r7, #10]
 800426a:	460b      	mov	r3, r1
 800426c:	813b      	strh	r3, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	8979      	ldrh	r1, [r7, #10]
 8004278:	4b20      	ldr	r3, [pc, #128]	@ (80042fc <I2C_RequestMemoryWrite+0xa4>)
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fa79 	bl	8004778 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	69b9      	ldr	r1, [r7, #24]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f909 	bl	80044a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e02c      	b.n	80042f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042a0:	893b      	ldrh	r3, [r7, #8]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80042aa:	e015      	b.n	80042d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042ac:	893b      	ldrh	r3, [r7, #8]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	69b9      	ldr	r1, [r7, #24]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f8ef 	bl	80044a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e012      	b.n	80042f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042ce:	893b      	ldrh	r3, [r7, #8]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2200      	movs	r2, #0
 80042e0:	2180      	movs	r1, #128	@ 0x80
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f884 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	80002000 	.word	0x80002000

08004300 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	4608      	mov	r0, r1
 800430a:	4611      	mov	r1, r2
 800430c:	461a      	mov	r2, r3
 800430e:	4603      	mov	r3, r0
 8004310:	817b      	strh	r3, [r7, #10]
 8004312:	460b      	mov	r3, r1
 8004314:	813b      	strh	r3, [r7, #8]
 8004316:	4613      	mov	r3, r2
 8004318:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	b2da      	uxtb	r2, r3
 800431e:	8979      	ldrh	r1, [r7, #10]
 8004320:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <I2C_RequestMemoryRead+0xa4>)
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2300      	movs	r3, #0
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fa26 	bl	8004778 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	69b9      	ldr	r1, [r7, #24]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f8b6 	bl	80044a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e02c      	b.n	800439a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d105      	bne.n	8004352 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004346:	893b      	ldrh	r3, [r7, #8]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004350:	e015      	b.n	800437e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004352:	893b      	ldrh	r3, [r7, #8]
 8004354:	0a1b      	lsrs	r3, r3, #8
 8004356:	b29b      	uxth	r3, r3
 8004358:	b2da      	uxtb	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	69b9      	ldr	r1, [r7, #24]
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f89c 	bl	80044a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e012      	b.n	800439a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004374:	893b      	ldrh	r3, [r7, #8]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2200      	movs	r2, #0
 8004386:	2140      	movs	r1, #64	@ 0x40
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f831 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	80002000 	.word	0x80002000

080043a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d103      	bne.n	80043c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d007      	beq.n	80043e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	619a      	str	r2, [r3, #24]
  }
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004400:	e03b      	b.n	800447a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f8d6 	bl	80045b8 <I2C_IsErrorOccurred>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e041      	b.n	800449a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d02d      	beq.n	800447a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441e:	f7ff f89b 	bl	8003558 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d302      	bcc.n	8004434 <I2C_WaitOnFlagUntilTimeout+0x44>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d122      	bne.n	800447a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4013      	ands	r3, r2
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	429a      	cmp	r2, r3
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	429a      	cmp	r2, r3
 8004450:	d113      	bne.n	800447a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e00f      	b.n	800449a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d0b4      	beq.n	8004402 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044ae:	e033      	b.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f87f 	bl	80045b8 <I2C_IsErrorOccurred>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e031      	b.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d025      	beq.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7ff f844 	bl	8003558 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d11a      	bne.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d013      	beq.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e007      	b.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d1c4      	bne.n	80044b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800453c:	e02f      	b.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f838 	bl	80045b8 <I2C_IsErrorOccurred>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e02d      	b.n	80045ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7ff f801 	bl	8003558 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11a      	bne.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d013      	beq.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	f043 0220 	orr.w	r2, r3, #32
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e007      	b.n	80045ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d1c8      	bne.n	800453e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	@ 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d068      	beq.n	80046b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2210      	movs	r2, #16
 80045ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045ec:	e049      	b.n	8004682 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d045      	beq.n	8004682 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045f6:	f7fe ffaf 	bl	8003558 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <I2C_IsErrorOccurred+0x54>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d13a      	bne.n	8004682 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004616:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800461e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800462a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800462e:	d121      	bne.n	8004674 <I2C_IsErrorOccurred+0xbc>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004636:	d01d      	beq.n	8004674 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	2b20      	cmp	r3, #32
 800463c:	d01a      	beq.n	8004674 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800464c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800464e:	f7fe ff83 	bl	8003558 <HAL_GetTick>
 8004652:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004654:	e00e      	b.n	8004674 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004656:	f7fe ff7f 	bl	8003558 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b19      	cmp	r3, #25
 8004662:	d907      	bls.n	8004674 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f043 0320 	orr.w	r3, r3, #32
 800466a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004672:	e006      	b.n	8004682 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b20      	cmp	r3, #32
 8004680:	d1e9      	bne.n	8004656 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b20      	cmp	r3, #32
 800468e:	d003      	beq.n	8004698 <I2C_IsErrorOccurred+0xe0>
 8004690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0aa      	beq.n	80045ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2220      	movs	r2, #32
 80046a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f043 0304 	orr.w	r3, r3, #4
 80046ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	f043 0308 	orr.w	r3, r3, #8
 80046f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00b      	beq.n	8004724 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f043 0302 	orr.w	r3, r3, #2
 8004712:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800471c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01c      	beq.n	8004766 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff fe3b 	bl	80043a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <I2C_IsErrorOccurred+0x1bc>)
 800473e:	400b      	ands	r3, r1
 8004740:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	431a      	orrs	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800476a:	4618      	mov	r0, r3
 800476c:	3728      	adds	r7, #40	@ 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	fe00e800 	.word	0xfe00e800

08004778 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	817b      	strh	r3, [r7, #10]
 8004786:	4613      	mov	r3, r2
 8004788:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800478a:	897b      	ldrh	r3, [r7, #10]
 800478c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004790:	7a7b      	ldrb	r3, [r7, #9]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004798:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047a6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	0d5b      	lsrs	r3, r3, #21
 80047b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80047b6:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <I2C_TransferConfig+0x60>)
 80047b8:	430b      	orrs	r3, r1
 80047ba:	43db      	mvns	r3, r3
 80047bc:	ea02 0103 	and.w	r1, r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	03ff63ff 	.word	0x03ff63ff

080047dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d138      	bne.n	8004864 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e032      	b.n	8004866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800482e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004864:	2302      	movs	r3, #2
  }
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004878:	4b04      	ldr	r3, [pc, #16]	@ (800488c <HAL_PWREx_GetVoltageRange+0x18>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40007000 	.word	0x40007000

08004890 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e3ca      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a2:	4b97      	ldr	r3, [pc, #604]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048ac:	4b94      	ldr	r3, [pc, #592]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80e4 	beq.w	8004a8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <HAL_RCC_OscConfig+0x4a>
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	f040 808b 	bne.w	80049e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 8087 	bne.w	80049e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048da:	4b89      	ldr	r3, [pc, #548]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_RCC_OscConfig+0x62>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e3a2      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1a      	ldr	r2, [r3, #32]
 80048f6:	4b82      	ldr	r3, [pc, #520]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d004      	beq.n	800490c <HAL_RCC_OscConfig+0x7c>
 8004902:	4b7f      	ldr	r3, [pc, #508]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800490a:	e005      	b.n	8004918 <HAL_RCC_OscConfig+0x88>
 800490c:	4b7c      	ldr	r3, [pc, #496]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004918:	4293      	cmp	r3, r2
 800491a:	d223      	bcs.n	8004964 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fd55 	bl	80053d0 <RCC_SetFlashLatencyFromMSIRange>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e383      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004930:	4b73      	ldr	r3, [pc, #460]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a72      	ldr	r2, [pc, #456]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004936:	f043 0308 	orr.w	r3, r3, #8
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	4b70      	ldr	r3, [pc, #448]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	496d      	ldr	r1, [pc, #436]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 800494a:	4313      	orrs	r3, r2
 800494c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800494e:	4b6c      	ldr	r3, [pc, #432]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	4968      	ldr	r1, [pc, #416]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 800495e:	4313      	orrs	r3, r2
 8004960:	604b      	str	r3, [r1, #4]
 8004962:	e025      	b.n	80049b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004964:	4b66      	ldr	r3, [pc, #408]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a65      	ldr	r2, [pc, #404]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 800496a:	f043 0308 	orr.w	r3, r3, #8
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b63      	ldr	r3, [pc, #396]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4960      	ldr	r1, [pc, #384]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004982:	4b5f      	ldr	r3, [pc, #380]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	495b      	ldr	r1, [pc, #364]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004992:	4313      	orrs	r3, r2
 8004994:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fd15 	bl	80053d0 <RCC_SetFlashLatencyFromMSIRange>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e343      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049b0:	f000 fc4a 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b52      	ldr	r3, [pc, #328]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	4950      	ldr	r1, [pc, #320]	@ (8004b04 <HAL_RCC_OscConfig+0x274>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
 80049cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004b08 <HAL_RCC_OscConfig+0x278>)
 80049ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049d0:	4b4e      	ldr	r3, [pc, #312]	@ (8004b0c <HAL_RCC_OscConfig+0x27c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fd6f 	bl	80034b8 <HAL_InitTick>
 80049da:	4603      	mov	r3, r0
 80049dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d052      	beq.n	8004a8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	e327      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d032      	beq.n	8004a56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049f0:	4b43      	ldr	r3, [pc, #268]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a42      	ldr	r2, [pc, #264]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049fc:	f7fe fdac 	bl	8003558 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a04:	f7fe fda8 	bl	8003558 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e310      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a16:	4b3a      	ldr	r3, [pc, #232]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a22:	4b37      	ldr	r3, [pc, #220]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a36      	ldr	r2, [pc, #216]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a28:	f043 0308 	orr.w	r3, r3, #8
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	4b34      	ldr	r3, [pc, #208]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	4931      	ldr	r1, [pc, #196]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a40:	4b2f      	ldr	r3, [pc, #188]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	492c      	ldr	r1, [pc, #176]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]
 8004a54:	e01a      	b.n	8004a8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a56:	4b2a      	ldr	r3, [pc, #168]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a29      	ldr	r2, [pc, #164]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a62:	f7fe fd79 	bl	8003558 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a6a:	f7fe fd75 	bl	8003558 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e2dd      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a7c:	4b20      	ldr	r3, [pc, #128]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0x1da>
 8004a88:	e000      	b.n	8004a8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d074      	beq.n	8004b82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d005      	beq.n	8004aaa <HAL_RCC_OscConfig+0x21a>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	d10e      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d10b      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aaa:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d064      	beq.n	8004b80 <HAL_RCC_OscConfig+0x2f0>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d160      	bne.n	8004b80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e2ba      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x24a>
 8004acc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e026      	b.n	8004b28 <HAL_RCC_OscConfig+0x298>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae2:	d115      	bne.n	8004b10 <HAL_RCC_OscConfig+0x280>
 8004ae4:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a05      	ldr	r2, [pc, #20]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004aea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4b03      	ldr	r3, [pc, #12]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a02      	ldr	r2, [pc, #8]	@ (8004b00 <HAL_RCC_OscConfig+0x270>)
 8004af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	e014      	b.n	8004b28 <HAL_RCC_OscConfig+0x298>
 8004afe:	bf00      	nop
 8004b00:	40021000 	.word	0x40021000
 8004b04:	0800d078 	.word	0x0800d078
 8004b08:	20000048 	.word	0x20000048
 8004b0c:	2000004c 	.word	0x2000004c
 8004b10:	4ba0      	ldr	r3, [pc, #640]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a9f      	ldr	r2, [pc, #636]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b9d      	ldr	r3, [pc, #628]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a9c      	ldr	r2, [pc, #624]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d013      	beq.n	8004b58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fe fd12 	bl	8003558 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fe fd0e 	bl	8003558 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	@ 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e276      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b4a:	4b92      	ldr	r3, [pc, #584]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x2a8>
 8004b56:	e014      	b.n	8004b82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fe fcfe 	bl	8003558 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fe fcfa 	bl	8003558 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	@ 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e262      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b72:	4b88      	ldr	r3, [pc, #544]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x2d0>
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d060      	beq.n	8004c50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d005      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x310>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d119      	bne.n	8004bce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d116      	bne.n	8004bce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba0:	4b7c      	ldr	r3, [pc, #496]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x328>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e23f      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb8:	4b76      	ldr	r3, [pc, #472]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	4973      	ldr	r1, [pc, #460]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bcc:	e040      	b.n	8004c50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d023      	beq.n	8004c1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd6:	4b6f      	ldr	r3, [pc, #444]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6e      	ldr	r2, [pc, #440]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be2:	f7fe fcb9 	bl	8003558 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bea:	f7fe fcb5 	bl	8003558 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e21d      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bfc:	4b65      	ldr	r3, [pc, #404]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c08:	4b62      	ldr	r3, [pc, #392]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	061b      	lsls	r3, r3, #24
 8004c16:	495f      	ldr	r1, [pc, #380]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	604b      	str	r3, [r1, #4]
 8004c1c:	e018      	b.n	8004c50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a5c      	ldr	r2, [pc, #368]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fe fc95 	bl	8003558 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c32:	f7fe fc91 	bl	8003558 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e1f9      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c44:	4b53      	ldr	r3, [pc, #332]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d03c      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01c      	beq.n	8004c9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c64:	4b4b      	ldr	r3, [pc, #300]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c74:	f7fe fc70 	bl	8003558 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c7c:	f7fe fc6c 	bl	8003558 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e1d4      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c8e:	4b41      	ldr	r3, [pc, #260]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ef      	beq.n	8004c7c <HAL_RCC_OscConfig+0x3ec>
 8004c9c:	e01b      	b.n	8004cd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ca4:	4a3b      	ldr	r2, [pc, #236]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004ca6:	f023 0301 	bic.w	r3, r3, #1
 8004caa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cae:	f7fe fc53 	bl	8003558 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb6:	f7fe fc4f 	bl	8003558 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e1b7      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cc8:	4b32      	ldr	r3, [pc, #200]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1ef      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80a6 	beq.w	8004e30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10d      	bne.n	8004d10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf4:	4b27      	ldr	r3, [pc, #156]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf8:	4a26      	ldr	r2, [pc, #152]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d00:	4b24      	ldr	r3, [pc, #144]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d10:	4b21      	ldr	r3, [pc, #132]	@ (8004d98 <HAL_RCC_OscConfig+0x508>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d118      	bne.n	8004d4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <HAL_RCC_OscConfig+0x508>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1d      	ldr	r2, [pc, #116]	@ (8004d98 <HAL_RCC_OscConfig+0x508>)
 8004d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d28:	f7fe fc16 	bl	8003558 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d30:	f7fe fc12 	bl	8003558 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e17a      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d42:	4b15      	ldr	r3, [pc, #84]	@ (8004d98 <HAL_RCC_OscConfig+0x508>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d108      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4d8>
 8004d56:	4b0f      	ldr	r3, [pc, #60]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d66:	e029      	b.n	8004dbc <HAL_RCC_OscConfig+0x52c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b05      	cmp	r3, #5
 8004d6e:	d115      	bne.n	8004d9c <HAL_RCC_OscConfig+0x50c>
 8004d70:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d76:	4a07      	ldr	r2, [pc, #28]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004d78:	f043 0304 	orr.w	r3, r3, #4
 8004d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d80:	4b04      	ldr	r3, [pc, #16]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d86:	4a03      	ldr	r2, [pc, #12]	@ (8004d94 <HAL_RCC_OscConfig+0x504>)
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d90:	e014      	b.n	8004dbc <HAL_RCC_OscConfig+0x52c>
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40007000 	.word	0x40007000
 8004d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da2:	4a9b      	ldr	r2, [pc, #620]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dac:	4b98      	ldr	r3, [pc, #608]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db2:	4a97      	ldr	r2, [pc, #604]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004db4:	f023 0304 	bic.w	r3, r3, #4
 8004db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d016      	beq.n	8004df2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fe fbc8 	bl	8003558 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dcc:	f7fe fbc4 	bl	8003558 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e12a      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de2:	4b8b      	ldr	r3, [pc, #556]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ed      	beq.n	8004dcc <HAL_RCC_OscConfig+0x53c>
 8004df0:	e015      	b.n	8004e1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df2:	f7fe fbb1 	bl	8003558 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004df8:	e00a      	b.n	8004e10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfa:	f7fe fbad 	bl	8003558 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e113      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e10:	4b7f      	ldr	r3, [pc, #508]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1ed      	bne.n	8004dfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1e:	7ffb      	ldrb	r3, [r7, #31]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d105      	bne.n	8004e30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e24:	4b7a      	ldr	r3, [pc, #488]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e28:	4a79      	ldr	r2, [pc, #484]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e2e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80fe 	beq.w	8005036 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	f040 80d0 	bne.w	8004fe4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e44:	4b72      	ldr	r3, [pc, #456]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f003 0203 	and.w	r2, r3, #3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d130      	bne.n	8004eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	3b01      	subs	r3, #1
 8004e64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d127      	bne.n	8004eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d11f      	bne.n	8004eba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e84:	2a07      	cmp	r2, #7
 8004e86:	bf14      	ite	ne
 8004e88:	2201      	movne	r2, #1
 8004e8a:	2200      	moveq	r2, #0
 8004e8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d113      	bne.n	8004eba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d109      	bne.n	8004eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	085b      	lsrs	r3, r3, #1
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d06e      	beq.n	8004f98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	2b0c      	cmp	r3, #12
 8004ebe:	d069      	beq.n	8004f94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ec0:	4b53      	ldr	r3, [pc, #332]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ecc:	4b50      	ldr	r3, [pc, #320]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0ad      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004edc:	4b4c      	ldr	r3, [pc, #304]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a4b      	ldr	r2, [pc, #300]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ee6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ee8:	f7fe fb36 	bl	8003558 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fe fb32 	bl	8003558 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e09a      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f02:	4b43      	ldr	r3, [pc, #268]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f0e:	4b40      	ldr	r3, [pc, #256]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	4b40      	ldr	r3, [pc, #256]	@ (8005014 <HAL_RCC_OscConfig+0x784>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f1e:	3a01      	subs	r2, #1
 8004f20:	0112      	lsls	r2, r2, #4
 8004f22:	4311      	orrs	r1, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f28:	0212      	lsls	r2, r2, #8
 8004f2a:	4311      	orrs	r1, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f30:	0852      	lsrs	r2, r2, #1
 8004f32:	3a01      	subs	r2, #1
 8004f34:	0552      	lsls	r2, r2, #21
 8004f36:	4311      	orrs	r1, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f3c:	0852      	lsrs	r2, r2, #1
 8004f3e:	3a01      	subs	r2, #1
 8004f40:	0652      	lsls	r2, r2, #25
 8004f42:	4311      	orrs	r1, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f48:	0912      	lsrs	r2, r2, #4
 8004f4a:	0452      	lsls	r2, r2, #17
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	4930      	ldr	r1, [pc, #192]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f54:	4b2e      	ldr	r3, [pc, #184]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2d      	ldr	r2, [pc, #180]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004f5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f60:	4b2b      	ldr	r3, [pc, #172]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4a2a      	ldr	r2, [pc, #168]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f6c:	f7fe faf4 	bl	8003558 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f74:	f7fe faf0 	bl	8003558 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e058      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f86:	4b22      	ldr	r3, [pc, #136]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f92:	e050      	b.n	8005036 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e04f      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f98:	4b1d      	ldr	r3, [pc, #116]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d148      	bne.n	8005036 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fb0:	4b17      	ldr	r3, [pc, #92]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a16      	ldr	r2, [pc, #88]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fbc:	f7fe facc 	bl	8003558 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fe fac8 	bl	8003558 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e030      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x734>
 8004fe2:	e028      	b.n	8005036 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2b0c      	cmp	r3, #12
 8004fe8:	d023      	beq.n	8005032 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fea:	4b09      	ldr	r3, [pc, #36]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a08      	ldr	r2, [pc, #32]	@ (8005010 <HAL_RCC_OscConfig+0x780>)
 8004ff0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fe faaf 	bl	8003558 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ffc:	e00c      	b.n	8005018 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fe faab 	bl	8003558 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d905      	bls.n	8005018 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e013      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
 8005010:	40021000 	.word	0x40021000
 8005014:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005018:	4b09      	ldr	r3, [pc, #36]	@ (8005040 <HAL_RCC_OscConfig+0x7b0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1ec      	bne.n	8004ffe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005024:	4b06      	ldr	r3, [pc, #24]	@ (8005040 <HAL_RCC_OscConfig+0x7b0>)
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	4905      	ldr	r1, [pc, #20]	@ (8005040 <HAL_RCC_OscConfig+0x7b0>)
 800502a:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <HAL_RCC_OscConfig+0x7b4>)
 800502c:	4013      	ands	r3, r2
 800502e:	60cb      	str	r3, [r1, #12]
 8005030:	e001      	b.n	8005036 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40021000 	.word	0x40021000
 8005044:	feeefffc 	.word	0xfeeefffc

08005048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0e7      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800505c:	4b75      	ldr	r3, [pc, #468]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d910      	bls.n	800508c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b72      	ldr	r3, [pc, #456]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 0207 	bic.w	r2, r3, #7
 8005072:	4970      	ldr	r1, [pc, #448]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507a:	4b6e      	ldr	r3, [pc, #440]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0cf      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d010      	beq.n	80050ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	4b66      	ldr	r3, [pc, #408]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d908      	bls.n	80050ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a8:	4b63      	ldr	r3, [pc, #396]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4960      	ldr	r1, [pc, #384]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04c      	beq.n	8005160 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d107      	bne.n	80050de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d121      	bne.n	800511e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0a6      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e6:	4b54      	ldr	r3, [pc, #336]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d115      	bne.n	800511e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e09a      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e08e      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800510e:	4b4a      	ldr	r3, [pc, #296]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e086      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800511e:	4b46      	ldr	r3, [pc, #280]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4943      	ldr	r1, [pc, #268]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005130:	f7fe fa12 	bl	8003558 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	e00a      	b.n	800514e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005138:	f7fe fa0e 	bl	8003558 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e06e      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	4b3a      	ldr	r3, [pc, #232]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 020c 	and.w	r2, r3, #12
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	429a      	cmp	r2, r3
 800515e:	d1eb      	bne.n	8005138 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d010      	beq.n	800518e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	4b31      	ldr	r3, [pc, #196]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005178:	429a      	cmp	r2, r3
 800517a:	d208      	bcs.n	800518e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800517c:	4b2e      	ldr	r3, [pc, #184]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	492b      	ldr	r1, [pc, #172]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800518e:	4b29      	ldr	r3, [pc, #164]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d210      	bcs.n	80051be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519c:	4b25      	ldr	r3, [pc, #148]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 0207 	bic.w	r2, r3, #7
 80051a4:	4923      	ldr	r1, [pc, #140]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ac:	4b21      	ldr	r3, [pc, #132]	@ (8005234 <HAL_RCC_ClockConfig+0x1ec>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d001      	beq.n	80051be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e036      	b.n	800522c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	4918      	ldr	r1, [pc, #96]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051e8:	4b13      	ldr	r3, [pc, #76]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4910      	ldr	r1, [pc, #64]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051fc:	f000 f824 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	490b      	ldr	r1, [pc, #44]	@ (800523c <HAL_RCC_ClockConfig+0x1f4>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
 8005218:	4a09      	ldr	r2, [pc, #36]	@ (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 800521a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800521c:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <HAL_RCC_ClockConfig+0x1fc>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4618      	mov	r0, r3
 8005222:	f7fe f949 	bl	80034b8 <HAL_InitTick>
 8005226:	4603      	mov	r3, r0
 8005228:	72fb      	strb	r3, [r7, #11]

  return status;
 800522a:	7afb      	ldrb	r3, [r7, #11]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40022000 	.word	0x40022000
 8005238:	40021000 	.word	0x40021000
 800523c:	0800d078 	.word	0x0800d078
 8005240:	20000048 	.word	0x20000048
 8005244:	2000004c 	.word	0x2000004c

08005248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005248:	b480      	push	{r7}
 800524a:	b089      	sub	sp, #36	@ 0x24
 800524c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005256:	4b3e      	ldr	r3, [pc, #248]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005260:	4b3b      	ldr	r3, [pc, #236]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x34>
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b0c      	cmp	r3, #12
 8005274:	d121      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d11e      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800527c:	4b34      	ldr	r3, [pc, #208]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d107      	bne.n	8005298 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005288:	4b31      	ldr	r3, [pc, #196]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 800528a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	e005      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005298:	4b2d      	ldr	r3, [pc, #180]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005354 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10d      	bne.n	80052d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052b8:	e00a      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d102      	bne.n	80052c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052c0:	4b25      	ldr	r3, [pc, #148]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	e004      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052cc:	4b23      	ldr	r3, [pc, #140]	@ (800535c <HAL_RCC_GetSysClockFreq+0x114>)
 80052ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b0c      	cmp	r3, #12
 80052d4:	d134      	bne.n	8005340 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d003      	beq.n	80052ee <HAL_RCC_GetSysClockFreq+0xa6>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d003      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0xac>
 80052ec:	e005      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x110>)
 80052f0:	617b      	str	r3, [r7, #20]
      break;
 80052f2:	e005      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052f4:	4b19      	ldr	r3, [pc, #100]	@ (800535c <HAL_RCC_GetSysClockFreq+0x114>)
 80052f6:	617b      	str	r3, [r7, #20]
      break;
 80052f8:	e002      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	617b      	str	r3, [r7, #20]
      break;
 80052fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005300:	4b13      	ldr	r3, [pc, #76]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	3301      	adds	r3, #1
 800530c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800530e:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	fb03 f202 	mul.w	r2, r3, r2
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005326:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <HAL_RCC_GetSysClockFreq+0x108>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	0e5b      	lsrs	r3, r3, #25
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	3301      	adds	r3, #1
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	fbb2 f3f3 	udiv	r3, r2, r3
 800533e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005340:	69bb      	ldr	r3, [r7, #24]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3724      	adds	r7, #36	@ 0x24
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40021000 	.word	0x40021000
 8005354:	0800d090 	.word	0x0800d090
 8005358:	00f42400 	.word	0x00f42400
 800535c:	007a1200 	.word	0x007a1200

08005360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005364:	4b03      	ldr	r3, [pc, #12]	@ (8005374 <HAL_RCC_GetHCLKFreq+0x14>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000048 	.word	0x20000048

08005378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800537c:	f7ff fff0 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b06      	ldr	r3, [pc, #24]	@ (800539c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	4904      	ldr	r1, [pc, #16]	@ (80053a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40021000 	.word	0x40021000
 80053a0:	0800d088 	.word	0x0800d088

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053a8:	f7ff ffda 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0adb      	lsrs	r3, r3, #11
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4904      	ldr	r1, [pc, #16]	@ (80053cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40021000 	.word	0x40021000
 80053cc:	0800d088 	.word	0x0800d088

080053d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053e8:	f7ff fa44 	bl	8004874 <HAL_PWREx_GetVoltageRange>
 80053ec:	6178      	str	r0, [r7, #20]
 80053ee:	e014      	b.n	800541a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053f0:	4b25      	ldr	r3, [pc, #148]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f4:	4a24      	ldr	r2, [pc, #144]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80053fc:	4b22      	ldr	r3, [pc, #136]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005408:	f7ff fa34 	bl	8004874 <HAL_PWREx_GetVoltageRange>
 800540c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800540e:	4b1e      	ldr	r3, [pc, #120]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005412:	4a1d      	ldr	r2, [pc, #116]	@ (8005488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005418:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005420:	d10b      	bne.n	800543a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b80      	cmp	r3, #128	@ 0x80
 8005426:	d919      	bls.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2ba0      	cmp	r3, #160	@ 0xa0
 800542c:	d902      	bls.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800542e:	2302      	movs	r3, #2
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	e013      	b.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005434:	2301      	movs	r3, #1
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e010      	b.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b80      	cmp	r3, #128	@ 0x80
 800543e:	d902      	bls.n	8005446 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005440:	2303      	movs	r3, #3
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	e00a      	b.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b80      	cmp	r3, #128	@ 0x80
 800544a:	d102      	bne.n	8005452 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800544c:	2302      	movs	r3, #2
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	e004      	b.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b70      	cmp	r3, #112	@ 0x70
 8005456:	d101      	bne.n	800545c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005458:	2301      	movs	r3, #1
 800545a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800545c:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f023 0207 	bic.w	r2, r3, #7
 8005464:	4909      	ldr	r1, [pc, #36]	@ (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800546c:	4b07      	ldr	r3, [pc, #28]	@ (800548c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	429a      	cmp	r2, r3
 8005478:	d001      	beq.n	800547e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	40022000 	.word	0x40022000

08005490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e0be      	b.n	8005620 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d108      	bne.n	80054bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054b2:	d009      	beq.n	80054c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	61da      	str	r2, [r3, #28]
 80054ba:	e005      	b.n	80054c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f8cb 	bl	8005678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054f8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005502:	d902      	bls.n	800550a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	e002      	b.n	8005510 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800550a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800550e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005518:	d007      	beq.n	800552a <HAL_SPI_Init+0x9a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005522:	d002      	beq.n	800552a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556c:	ea42 0103 	orr.w	r1, r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005574:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005588:	d11b      	bne.n	80055c2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10b      	bne.n	80055aa <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800559a:	d903      	bls.n	80055a4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80055a2:	e002      	b.n	80055aa <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d107      	bne.n	80055c2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	f003 0204 	and.w	r2, r3, #4
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80055e8:	ea42 0103 	orr.w	r1, r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005602:	d105      	bne.n	8005610 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	b292      	uxth	r2, r2
 800560e:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e01a      	b.n	8005670 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005650:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f81a 	bl	800568c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	@ 0x28
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d001      	beq.n	80056c8 <HAL_SPI_Receive+0x28>
  {
    return HAL_BUSY;
 80056c4:	2302      	movs	r3, #2
 80056c6:	e1e0      	b.n	8005a8a <HAL_SPI_Receive+0x3ea>
  }

  if ((pData == NULL) || (Size == 0U))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Receive+0x34>
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_SPI_Receive+0x38>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e1d8      	b.n	8005a8a <HAL_SPI_Receive+0x3ea>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056e0:	d112      	bne.n	8005708 <HAL_SPI_Receive+0x68>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10e      	bne.n	8005708 <HAL_SPI_Receive+0x68>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2204      	movs	r2, #4
 80056ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056f2:	88fa      	ldrh	r2, [r7, #6]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f9c7 	bl	8005a92 <HAL_SPI_TransmitReceive>
 8005704:	4603      	mov	r3, r0
 8005706:	e1c0      	b.n	8005a8a <HAL_SPI_Receive+0x3ea>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005708:	f7fd ff26 	bl	8003558 <HAL_GetTick>
 800570c:	61f8      	str	r0, [r7, #28]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_SPI_Receive+0x7c>
 8005718:	2302      	movs	r3, #2
 800571a:	e1b6      	b.n	8005a8a <HAL_SPI_Receive+0x3ea>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2204      	movs	r2, #4
 8005728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800576e:	d118      	bne.n	80057a2 <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800578e:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057aa:	d908      	bls.n	80057be <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057ba:	605a      	str	r2, [r3, #4]
 80057bc:	e007      	b.n	80057ce <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057cc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057d6:	d10f      	bne.n	80057f8 <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005802:	2b40      	cmp	r3, #64	@ 0x40
 8005804:	d007      	beq.n	8005816 <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005814:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800581e:	d875      	bhi.n	800590c <HAL_SPI_Receive+0x26c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005820:	e037      	b.n	8005892 <HAL_SPI_Receive+0x1f2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b01      	cmp	r3, #1
 800582e:	d117      	bne.n	8005860 <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f103 020c 	add.w	r2, r3, #12
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800585e:	e018      	b.n	8005892 <HAL_SPI_Receive+0x1f2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005860:	f7fd fe7a 	bl	8003558 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	429a      	cmp	r2, r3
 800586e:	d803      	bhi.n	8005878 <HAL_SPI_Receive+0x1d8>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d102      	bne.n	800587e <HAL_SPI_Receive+0x1de>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <HAL_SPI_Receive+0x1f2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e0fb      	b.n	8005a8a <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1c1      	bne.n	8005822 <HAL_SPI_Receive+0x182>
 800589e:	e03b      	b.n	8005918 <HAL_SPI_Receive+0x278>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d115      	bne.n	80058da <HAL_SPI_Receive+0x23a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b8:	b292      	uxth	r2, r2
 80058ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c0:	1c9a      	adds	r2, r3, #2
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80058d8:	e018      	b.n	800590c <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058da:	f7fd fe3d 	bl	8003558 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d803      	bhi.n	80058f2 <HAL_SPI_Receive+0x252>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d102      	bne.n	80058f8 <HAL_SPI_Receive+0x258>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_SPI_Receive+0x26c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e0be      	b.n	8005a8a <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1c3      	bne.n	80058a0 <HAL_SPI_Receive+0x200>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005920:	f040 8087 	bne.w	8005a32 <HAL_SPI_Receive+0x392>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005932:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	2101      	movs	r1, #1
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f001 fa18 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      __HAL_UNLOCK(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e099      	b.n	8005a8a <HAL_SPI_Receive+0x3ea>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800595e:	d907      	bls.n	8005970 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	b292      	uxth	r2, r2
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	e008      	b.n	8005982 <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f103 020c 	add.w	r2, r3, #12
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597c:	7812      	ldrb	r2, [r2, #0]
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2201      	movs	r2, #1
 800598a:	2101      	movs	r1, #1
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f001 f9f1 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00f      	beq.n	80059b8 <HAL_SPI_Receive+0x318>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800599c:	f043 0202 	orr.w	r2, r3, #2
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e068      	b.n	8005a8a <HAL_SPI_Receive+0x3ea>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80059c0:	d105      	bne.n	80059ce <HAL_SPI_Receive+0x32e>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	e031      	b.n	8005a32 <HAL_SPI_Receive+0x392>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059de:	7cfb      	ldrb	r3, [r7, #19]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059e8:	d123      	bne.n	8005a32 <HAL_SPI_Receive+0x392>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d11f      	bne.n	8005a32 <HAL_SPI_Receive+0x392>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2201      	movs	r2, #1
 80059fa:	2101      	movs	r1, #1
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f001 f9b9 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00f      	beq.n	8005a28 <HAL_SPI_Receive+0x388>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a0c:	f043 0202 	orr.w	r2, r3, #2
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e030      	b.n	8005a8a <HAL_SPI_Receive+0x3ea>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005a30:	7cfb      	ldrb	r3, [r7, #19]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f001 faba 	bl	8006fb0 <SPI_EndRxTransaction>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_SPI_Receive+0x3a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	2b10      	cmp	r3, #16
 8005a54:	d10a      	bne.n	8005a6c <HAL_SPI_Receive+0x3cc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a5a:	f043 0202 	orr.w	r2, r3, #2
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005a6a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_SPI_Receive+0x3e8>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <HAL_SPI_Receive+0x3ea>
  }
  else
  {
    return HAL_OK;
 8005a88:	2300      	movs	r3, #0
  }
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b090      	sub	sp, #64	@ 0x40
 8005a96:	af02      	add	r7, sp, #8
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	607a      	str	r2, [r7, #4]
 8005a9e:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aac:	f7fd fd54 	bl	8003558 <HAL_GetTick>
 8005ab0:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ab8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tmp_mode            = hspi->Init.Mode;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  initial_TxXferCount = Size;
 8005ac2:	887b      	ldrh	r3, [r7, #2]
 8005ac4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 8005ac6:	887b      	ldrh	r3, [r7, #2]
 8005ac8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	623b      	str	r3, [r7, #32]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	61fb      	str	r3, [r7, #28]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ada:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d00d      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x6c>
 8005ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ae8:	d107      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x68>
 8005af2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d001      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x6c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005afa:	2302      	movs	r3, #2
 8005afc:	e30f      	b.n	800611e <HAL_SPI_TransmitReceive+0x68c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_SPI_TransmitReceive+0x7e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_SPI_TransmitReceive+0x7e>
 8005b0a:	887b      	ldrh	r3, [r7, #2]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e304      	b.n	800611e <HAL_SPI_TransmitReceive+0x68c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x90>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e2fd      	b.n	800611e <HAL_SPI_TransmitReceive+0x68c>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d003      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2205      	movs	r2, #5
 8005b3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	887a      	ldrh	r2, [r7, #2]
 8005b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	887a      	ldrh	r2, [r7, #2]
 8005b56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	887a      	ldrh	r2, [r7, #2]
 8005b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	887a      	ldrh	r2, [r7, #2]
 8005b6a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b80:	d10f      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ba0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005baa:	d802      	bhi.n	8005bb2 <HAL_SPI_TransmitReceive+0x120>
 8005bac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d908      	bls.n	8005bc4 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	e007      	b.n	8005bd4 <HAL_SPI_TransmitReceive+0x142>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005bd2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bde:	2b40      	cmp	r3, #64	@ 0x40
 8005be0:	d007      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bfa:	f240 80d0 	bls.w	8005d9e <HAL_SPI_TransmitReceive+0x30c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x17c>
 8005c06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	f040 80ba 	bne.w	8005d82 <HAL_SPI_TransmitReceive+0x2f0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	881a      	ldrh	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	1c9a      	adds	r2, r3, #2
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f040 80a2 	bne.w	8005d82 <HAL_SPI_TransmitReceive+0x2f0>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c46:	f040 809c 	bne.w	8005d82 <HAL_SPI_TransmitReceive+0x2f0>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10c      	bne.n	8005c6e <HAL_SPI_TransmitReceive+0x1dc>
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c6c:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c7c:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c7e:	e080      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x2f0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d13f      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x27c>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d03a      	beq.n	8005d0e <HAL_SPI_TransmitReceive+0x27c>
 8005c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d137      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x27c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca2:	881a      	ldrh	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cae:	1c9a      	adds	r2, r3, #2
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d11e      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x27c>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cd8:	d119      	bne.n	8005d0e <HAL_SPI_TransmitReceive+0x27c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10c      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x26c>
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <HAL_SPI_TransmitReceive+0x26c>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cfc:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d0c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d11c      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x2c4>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d016      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x2c4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	b292      	uxth	r2, r2
 8005d34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	1c9a      	adds	r2, r3, #2
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d52:	2301      	movs	r3, #1
 8005d54:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d56:	f7fd fbff 	bl	8003558 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d80d      	bhi.n	8005d82 <HAL_SPI_TransmitReceive+0x2f0>
 8005d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d009      	beq.n	8005d82 <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e1cd      	b.n	800611e <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f47f af79 	bne.w	8005c80 <HAL_SPI_TransmitReceive+0x1ee>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f47f af72 	bne.w	8005c80 <HAL_SPI_TransmitReceive+0x1ee>
 8005d9c:	e12f      	b.n	8005ffe <HAL_SPI_TransmitReceive+0x56c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_SPI_TransmitReceive+0x31c>
 8005da6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	f040 811b 	bne.w	8005fe4 <HAL_SPI_TransmitReceive+0x552>
    {
      if (hspi->TxXferCount > 1U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d912      	bls.n	8005dde <HAL_SPI_TransmitReceive+0x34c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbc:	881a      	ldrh	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc8:	1c9a      	adds	r2, r3, #2
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b02      	subs	r3, #2
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ddc:	e102      	b.n	8005fe4 <HAL_SPI_TransmitReceive+0x552>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	7812      	ldrb	r2, [r2, #0]
 8005dea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f040 80ea 	bne.w	8005fe4 <HAL_SPI_TransmitReceive+0x552>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e18:	f040 80e4 	bne.w	8005fe4 <HAL_SPI_TransmitReceive+0x552>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10c      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x3ae>
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <HAL_SPI_TransmitReceive+0x3ae>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e3e:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e4e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e50:	e0c8      	b.n	8005fe4 <HAL_SPI_TransmitReceive+0x552>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d158      	bne.n	8005f12 <HAL_SPI_TransmitReceive+0x480>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d053      	beq.n	8005f12 <HAL_SPI_TransmitReceive+0x480>
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d150      	bne.n	8005f12 <HAL_SPI_TransmitReceive+0x480>
      {
        if (hspi->TxXferCount > 1U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d912      	bls.n	8005ea0 <HAL_SPI_TransmitReceive+0x40e>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	881a      	ldrh	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8a:	1c9a      	adds	r2, r3, #2
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b02      	subs	r3, #2
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e9e:	e012      	b.n	8005ec6 <HAL_SPI_TransmitReceive+0x434>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d11e      	bne.n	8005f12 <HAL_SPI_TransmitReceive+0x480>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005edc:	d119      	bne.n	8005f12 <HAL_SPI_TransmitReceive+0x480>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10c      	bne.n	8005f02 <HAL_SPI_TransmitReceive+0x470>
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <HAL_SPI_TransmitReceive+0x470>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f00:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f10:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d148      	bne.n	8005fb2 <HAL_SPI_TransmitReceive+0x520>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d042      	beq.n	8005fb2 <HAL_SPI_TransmitReceive+0x520>
      {
        if (hspi->RxXferCount > 1U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d923      	bls.n	8005f80 <HAL_SPI_TransmitReceive+0x4ee>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	b292      	uxth	r2, r2
 8005f44:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	1c9a      	adds	r2, r3, #2
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b02      	subs	r3, #2
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d81f      	bhi.n	8005fae <HAL_SPI_TransmitReceive+0x51c>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	e016      	b.n	8005fae <HAL_SPI_TransmitReceive+0x51c>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f103 020c 	add.w	r2, r3, #12
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	7812      	ldrb	r2, [r2, #0]
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fb2:	f7fd fad1 	bl	8003558 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d803      	bhi.n	8005fca <HAL_SPI_TransmitReceive+0x538>
 8005fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d102      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x53e>
 8005fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <HAL_SPI_TransmitReceive+0x552>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e09c      	b.n	800611e <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f47f af31 	bne.w	8005e52 <HAL_SPI_TransmitReceive+0x3c0>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f47f af2a 	bne.w	8005e52 <HAL_SPI_TransmitReceive+0x3c0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006006:	d152      	bne.n	80060ae <HAL_SPI_TransmitReceive+0x61c>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800600e:	2201      	movs	r2, #1
 8006010:	2101      	movs	r1, #1
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 feae 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00f      	beq.n	800603e <HAL_SPI_TransmitReceive+0x5ac>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006022:	f043 0202 	orr.w	r2, r3, #2
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e06f      	b.n	800611e <HAL_SPI_TransmitReceive+0x68c>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006046:	d105      	bne.n	8006054 <HAL_SPI_TransmitReceive+0x5c2>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	e02c      	b.n	80060ae <HAL_SPI_TransmitReceive+0x61c>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	330c      	adds	r3, #12
 800605a:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006064:	7cfb      	ldrb	r3, [r7, #19]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	2b02      	cmp	r3, #2
 800606c:	d11f      	bne.n	80060ae <HAL_SPI_TransmitReceive+0x61c>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006074:	2201      	movs	r2, #1
 8006076:	2101      	movs	r1, #1
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fe7b 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00f      	beq.n	80060a4 <HAL_SPI_TransmitReceive+0x612>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006088:	f043 0202 	orr.w	r2, r3, #2
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e03c      	b.n	800611e <HAL_SPI_TransmitReceive+0x68c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80060ac:	7cfb      	ldrb	r3, [r7, #19]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d110      	bne.n	80060de <HAL_SPI_TransmitReceive+0x64c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c0:	f043 0202 	orr.w	r2, r3, #2
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80060d0:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e01f      	b.n	800611e <HAL_SPI_TransmitReceive+0x68c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 ffbc 	bl	8007060 <SPI_EndRxTxTransaction>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <HAL_SPI_TransmitReceive+0x66e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e00e      	b.n	800611e <HAL_SPI_TransmitReceive+0x68c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_SPI_TransmitReceive+0x68a>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <HAL_SPI_TransmitReceive+0x68c>
  }
  else
  {
    return HAL_OK;
 800611c:	2300      	movs	r3, #0
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3738      	adds	r7, #56	@ 0x38
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_SPI_Transmit_IT+0x1a>
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e082      	b.n	800624c <HAL_SPI_Transmit_IT+0x124>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d001      	beq.n	8006156 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8006152:	2302      	movs	r3, #2
 8006154:	e07a      	b.n	800624c <HAL_SPI_Transmit_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_SPI_Transmit_IT+0x3c>
 8006160:	2302      	movs	r3, #2
 8006162:	e073      	b.n	800624c <HAL_SPI_Transmit_IT+0x124>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2203      	movs	r2, #3
 8006170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	88fa      	ldrh	r2, [r7, #6]
 8006184:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061b0:	d903      	bls.n	80061ba <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a28      	ldr	r2, [pc, #160]	@ (8006258 <HAL_SPI_Transmit_IT+0x130>)
 80061b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80061b8:	e002      	b.n	80061c0 <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a27      	ldr	r2, [pc, #156]	@ (800625c <HAL_SPI_Transmit_IT+0x134>)
 80061be:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061c8:	d10f      	bne.n	80061ea <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061e8:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f2:	d10f      	bne.n	8006214 <HAL_SPI_Transmit_IT+0xec>
  {
    SPI_RESET_CRC(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006212:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621e:	2b40      	cmp	r3, #64	@ 0x40
 8006220:	d007      	beq.n	8006232 <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006230:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006248:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	08006d15 	.word	0x08006d15
 800625c:	08006cb5 	.word	0x08006cb5

08006260 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b01      	cmp	r3, #1
 8006278:	d001      	beq.n	800627e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
 800627c:	e0ba      	b.n	80063f4 <HAL_SPI_Receive_IT+0x194>
  }

  if ((pData == NULL) || (Size == 0U))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <HAL_SPI_Receive_IT+0x2a>
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e0b2      	b.n	80063f4 <HAL_SPI_Receive_IT+0x194>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d110      	bne.n	80062b8 <HAL_SPI_Receive_IT+0x58>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800629e:	d10b      	bne.n	80062b8 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2204      	movs	r2, #4
 80062a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f8a8 	bl	8006404 <HAL_SPI_TransmitReceive_IT>
 80062b4:	4603      	mov	r3, r0
 80062b6:	e09d      	b.n	80063f4 <HAL_SPI_Receive_IT+0x194>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_SPI_Receive_IT+0x66>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e096      	b.n	80063f4 <HAL_SPI_Receive_IT+0x194>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2204      	movs	r2, #4
 80062d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	88fa      	ldrh	r2, [r7, #6]
 80062ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006312:	d90b      	bls.n	800632c <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006322:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4a35      	ldr	r2, [pc, #212]	@ (80063fc <HAL_SPI_Receive_IT+0x19c>)
 8006328:	64da      	str	r2, [r3, #76]	@ 0x4c
 800632a:	e00a      	b.n	8006342 <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800633a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a30      	ldr	r2, [pc, #192]	@ (8006400 <HAL_SPI_Receive_IT+0x1a0>)
 8006340:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800634a:	d10f      	bne.n	800636c <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800635a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800636a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006374:	d11f      	bne.n	80063b6 <HAL_SPI_Receive_IT+0x156>
  {
    hspi->CRCSize = 1U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006384:	d806      	bhi.n	8006394 <HAL_SPI_Receive_IT+0x134>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638a:	2b02      	cmp	r3, #2
 800638c:	d102      	bne.n	8006394 <HAL_SPI_Receive_IT+0x134>
    {
      hspi->CRCSize = 2U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2202      	movs	r2, #2
 8006392:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e002      	b.n	80063bc <HAL_SPI_Receive_IT+0x15c>
  }
  else
  {
    hspi->CRCSize = 0U;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c6:	2b40      	cmp	r3, #64	@ 0x40
 80063c8:	d007      	beq.n	80063da <HAL_SPI_Receive_IT+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063d8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80063f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	08006c2d 	.word	0x08006c2d
 8006400:	08006b6d 	.word	0x08006b6d

08006404 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006418:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d00c      	beq.n	8006440 <HAL_SPI_TransmitReceive_IT+0x3c>
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800642c:	d106      	bne.n	800643c <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <HAL_SPI_TransmitReceive_IT+0x38>
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	2b04      	cmp	r3, #4
 800643a:	d001      	beq.n	8006440 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800643c:	2302      	movs	r3, #2
 800643e:	e0a5      	b.n	800658c <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <HAL_SPI_TransmitReceive_IT+0x4e>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <HAL_SPI_TransmitReceive_IT+0x4e>
 800644c:	887b      	ldrh	r3, [r7, #2]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e09a      	b.n	800658c <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_SPI_TransmitReceive_IT+0x60>
 8006460:	2302      	movs	r3, #2
 8006462:	e093      	b.n	800658c <HAL_SPI_TransmitReceive_IT+0x188>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b04      	cmp	r3, #4
 8006476:	d003      	beq.n	8006480 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2205      	movs	r2, #5
 800647c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	887a      	ldrh	r2, [r7, #2]
 8006490:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	887a      	ldrh	r2, [r7, #2]
 8006496:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	887a      	ldrh	r2, [r7, #2]
 80064a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	887a      	ldrh	r2, [r7, #2]
 80064aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064b6:	d906      	bls.n	80064c6 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a37      	ldr	r2, [pc, #220]	@ (8006598 <HAL_SPI_TransmitReceive_IT+0x194>)
 80064bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a36      	ldr	r2, [pc, #216]	@ (800659c <HAL_SPI_TransmitReceive_IT+0x198>)
 80064c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80064c4:	e005      	b.n	80064d2 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a35      	ldr	r2, [pc, #212]	@ (80065a0 <HAL_SPI_TransmitReceive_IT+0x19c>)
 80064ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4a35      	ldr	r2, [pc, #212]	@ (80065a4 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80064d0:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064da:	d11f      	bne.n	800651c <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064ea:	d806      	bhi.n	80064fa <HAL_SPI_TransmitReceive_IT+0xf6>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d102      	bne.n	80064fa <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2202      	movs	r2, #2
 80064f8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e002      	b.n	8006522 <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800652a:	d802      	bhi.n	8006532 <HAL_SPI_TransmitReceive_IT+0x12e>
 800652c:	887b      	ldrh	r3, [r7, #2]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d908      	bls.n	8006544 <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	e007      	b.n	8006554 <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006552:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655e:	2b40      	cmp	r3, #64	@ 0x40
 8006560:	d007      	beq.n	8006572 <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006570:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8006588:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	080069f5 	.word	0x080069f5
 800659c:	08006aa5 	.word	0x08006aa5
 80065a0:	080067fd 	.word	0x080067fd
 80065a4:	08006939 	.word	0x08006939

080065a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	099b      	lsrs	r3, r3, #6
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10f      	bne.n	80065ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	099b      	lsrs	r3, r3, #6
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
    return;
 80065ea:	e0d7      	b.n	800679c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <HAL_SPI_IRQHandler+0x66>
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	09db      	lsrs	r3, r3, #7
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
    return;
 800660c:	e0c6      	b.n	800679c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10c      	bne.n	8006634 <HAL_SPI_IRQHandler+0x8c>
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	099b      	lsrs	r3, r3, #6
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80b4 	beq.w	800679c <HAL_SPI_IRQHandler+0x1f4>
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80ad 	beq.w	800679c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	099b      	lsrs	r3, r3, #6
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d023      	beq.n	8006696 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d011      	beq.n	800667e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800665e:	f043 0204 	orr.w	r2, r3, #4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	e00b      	b.n	8006696 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800667e:	2300      	movs	r3, #0
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	693b      	ldr	r3, [r7, #16]
        return;
 8006694:	e082      	b.n	800679c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d014      	beq.n	80066cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066a6:	f043 0201 	orr.w	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00c      	beq.n	80066f2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066dc:	f043 0208 	orr.w	r2, r3, #8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066e4:	2300      	movs	r3, #0
 80066e6:	60bb      	str	r3, [r7, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d04f      	beq.n	800679a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006708:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <HAL_SPI_IRQHandler+0x17e>
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d034      	beq.n	8006790 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0203 	bic.w	r2, r2, #3
 8006734:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800673a:	2b00      	cmp	r3, #0
 800673c:	d011      	beq.n	8006762 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006742:	4a18      	ldr	r2, [pc, #96]	@ (80067a4 <HAL_SPI_IRQHandler+0x1fc>)
 8006744:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674a:	4618      	mov	r0, r3
 800674c:	f7fd f845 	bl	80037da <HAL_DMA_Abort_IT>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800675a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006766:	2b00      	cmp	r3, #0
 8006768:	d016      	beq.n	8006798 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676e:	4a0d      	ldr	r2, [pc, #52]	@ (80067a4 <HAL_SPI_IRQHandler+0x1fc>)
 8006770:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006776:	4618      	mov	r0, r3
 8006778:	f7fd f82f 	bl	80037da <HAL_DMA_Abort_IT>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006786:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800678e:	e003      	b.n	8006798 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f813 	bl	80067bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006796:	e000      	b.n	800679a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006798:	bf00      	nop
    return;
 800679a:	bf00      	nop
  }
}
 800679c:	3720      	adds	r7, #32
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	080067d1 	.word	0x080067d1

080067a8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff ffe5 	bl	80067bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	d923      	bls.n	8006858 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	b292      	uxth	r2, r2
 800681c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	1c9a      	adds	r2, r3, #2
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b02      	subs	r3, #2
 8006832:	b29a      	uxth	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b01      	cmp	r3, #1
 8006844:	d11f      	bne.n	8006886 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006854:	605a      	str	r2, [r3, #4]
 8006856:	e016      	b.n	8006886 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f103 020c 	add.w	r2, r3, #12
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	7812      	ldrb	r2, [r2, #0]
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d120      	bne.n	80068d4 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800689a:	d10b      	bne.n	80068b4 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068aa:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a0b      	ldr	r2, [pc, #44]	@ (80068dc <SPI_2linesRxISR_8BIT+0xe0>)
 80068b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 80068b2:	e00f      	b.n	80068d4 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80068c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d102      	bne.n	80068d4 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fc0c 	bl	80070ec <SPI_CloseRxTx_ISR>
    }
  }
}
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	080068e1 	.word	0x080068e1

080068e0 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80068fc:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006902:	1e5a      	subs	r2, r3, #1
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10f      	bne.n	8006930 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800691e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d102      	bne.n	8006930 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fbde 	bl	80070ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b01      	cmp	r3, #1
 8006948:	d912      	bls.n	8006970 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b02      	subs	r3, #2
 8006968:	b29a      	uxth	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800696e:	e012      	b.n	8006996 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	330c      	adds	r3, #12
 800697a:	7812      	ldrb	r2, [r2, #0]
 800697c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800698c:	b29b      	uxth	r3, r3
 800698e:	3b01      	subs	r3, #1
 8006990:	b29a      	uxth	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d126      	bne.n	80069ee <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069a8:	d110      	bne.n	80069cc <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069b8:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069c8:	605a      	str	r2, [r3, #4]
      return;
 80069ca:	e010      	b.n	80069ee <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069da:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fb7f 	bl	80070ec <SPI_CloseRxTx_ISR>
    }
  }
}
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a06:	b292      	uxth	r2, r2
 8006a08:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0e:	1c9a      	adds	r2, r3, #2
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d118      	bne.n	8006a64 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a3a:	d103      	bne.n	8006a44 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8006a6c <SPI_2linesRxISR_16BIT+0x78>)
 8006a40:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006a42:	e00f      	b.n	8006a64 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a52:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d102      	bne.n	8006a64 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fb44 	bl	80070ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	08006a71 	.word	0x08006a71

08006a70 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006a84:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a94:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fb28 	bl	80070ec <SPI_CloseRxTx_ISR>
}
 8006a9c:	bf00      	nop
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abc:	1c9a      	adds	r2, r3, #2
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d126      	bne.n	8006b28 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ae2:	d110      	bne.n	8006b06 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006af2:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b02:	605a      	str	r2, [r3, #4]
      return;
 8006b04:	e010      	b.n	8006b28 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b14:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d102      	bne.n	8006b28 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fae2 	bl	80070ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	330c      	adds	r3, #12
 8006b40:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006b4a:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b50:	1e5a      	subs	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d102      	bne.n	8006b64 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fb20 	bl	80071a4 <SPI_CloseRx_ISR>
  }
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f103 020c 	add.w	r2, r3, #12
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b80:	7812      	ldrb	r2, [r2, #0]
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d10c      	bne.n	8006bc8 <SPI_RxISR_8BIT+0x5c>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bb6:	d107      	bne.n	8006bc8 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bc6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10b      	bne.n	8006bec <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bdc:	d103      	bne.n	8006be6 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a04      	ldr	r2, [pc, #16]	@ (8006bf4 <SPI_RxISR_8BIT+0x88>)
 8006be2:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006be4:	e002      	b.n	8006bec <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fadc 	bl	80071a4 <SPI_CloseRx_ISR>
  }
}
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	08006b2f 	.word	0x08006b2f

08006bf8 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006c0c:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c1c:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fac0 	bl	80071a4 <SPI_CloseRx_ISR>
}
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	b292      	uxth	r2, r2
 8006c40:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c46:	1c9a      	adds	r2, r3, #2
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10c      	bne.n	8006c84 <SPI_RxISR_16BIT+0x58>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c72:	d107      	bne.n	8006c84 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c82:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10b      	bne.n	8006ca8 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c98:	d103      	bne.n	8006ca2 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a04      	ldr	r2, [pc, #16]	@ (8006cb0 <SPI_RxISR_16BIT+0x84>)
 8006c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006ca0:	e002      	b.n	8006ca8 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa7e 	bl	80071a4 <SPI_CloseRx_ISR>
  }
}
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	08006bf9 	.word	0x08006bf9

08006cb4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	7812      	ldrb	r2, [r2, #0]
 8006cc8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10f      	bne.n	8006d0c <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cf4:	d107      	bne.n	8006d06 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d04:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa92 	bl	8007230 <SPI_CloseTx_ISR>
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	881a      	ldrh	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2c:	1c9a      	adds	r2, r3, #2
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10f      	bne.n	8006d6a <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d52:	d107      	bne.n	8006d64 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d62:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fa63 	bl	8007230 <SPI_CloseTx_ISR>
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d84:	f7fc fbe8 	bl	8003558 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4413      	add	r3, r2
 8006d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d94:	f7fc fbe0 	bl	8003558 <HAL_GetTick>
 8006d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d9a:	4b39      	ldr	r3, [pc, #228]	@ (8006e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	015b      	lsls	r3, r3, #5
 8006da0:	0d1b      	lsrs	r3, r3, #20
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	fb02 f303 	mul.w	r3, r2, r3
 8006da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006daa:	e054      	b.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d050      	beq.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006db4:	f7fc fbd0 	bl	8003558 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d902      	bls.n	8006dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d13d      	bne.n	8006e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006de2:	d111      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dec:	d004      	beq.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df6:	d107      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e10:	d10f      	bne.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e017      	b.n	8006e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d19b      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000048 	.word	0x20000048

08006e84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	@ 0x28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e96:	f7fc fb5f 	bl	8003558 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006ea6:	f7fc fb57 	bl	8003558 <HAL_GetTick>
 8006eaa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8006fac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	00da      	lsls	r2, r3, #3
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	0d1b      	lsrs	r3, r3, #20
 8006ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ecc:	e060      	b.n	8006f90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ed4:	d107      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d050      	beq.n	8006f90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eee:	f7fc fb33 	bl	8003558 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d902      	bls.n	8006f04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d13d      	bne.n	8006f80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f1c:	d111      	bne.n	8006f42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f26:	d004      	beq.n	8006f32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f30:	d107      	bne.n	8006f42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f4a:	d10f      	bne.n	8006f6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e010      	b.n	8006fa2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d196      	bne.n	8006ece <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3728      	adds	r7, #40	@ 0x28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000048 	.word	0x20000048

08006fb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fc4:	d111      	bne.n	8006fea <SPI_EndRxTransaction+0x3a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fce:	d004      	beq.n	8006fda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd8:	d107      	bne.n	8006fea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fe8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2180      	movs	r1, #128	@ 0x80
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff febd 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e023      	b.n	8007058 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007018:	d11d      	bne.n	8007056 <SPI_EndRxTransaction+0xa6>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007022:	d004      	beq.n	800702e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800702c:	d113      	bne.n	8007056 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff ff22 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800704a:	f043 0220 	orr.w	r2, r3, #32
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e000      	b.n	8007058 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ff03 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007088:	f043 0220 	orr.w	r2, r3, #32
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e027      	b.n	80070e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	2180      	movs	r1, #128	@ 0x80
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff fe68 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e014      	b.n	80070e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fedc 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d6:	f043 0220 	orr.w	r2, r3, #32
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e000      	b.n	80070e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070f4:	f7fc fa30 	bl	8003558 <HAL_GetTick>
 80070f8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0220 	bic.w	r2, r2, #32
 8007108:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	2164      	movs	r1, #100	@ 0x64
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff ffa6 	bl	8007060 <SPI_EndRxTxTransaction>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711e:	f043 0220 	orr.w	r2, r3, #32
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b10      	cmp	r3, #16
 8007132:	d112      	bne.n	800715a <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007140:	f043 0202 	orr.w	r2, r3, #2
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007150:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fb32 	bl	80067bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007158:	e020      	b.n	800719c <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800715e:	2b00      	cmp	r3, #0
 8007160:	d115      	bne.n	800718e <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b04      	cmp	r3, #4
 800716c:	d107      	bne.n	800717e <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fb fca6 	bl	8002ac8 <HAL_SPI_RxCpltCallback>
}
 800717c:	e00e      	b.n	800719c <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fb0e 	bl	80067a8 <HAL_SPI_TxRxCpltCallback>
}
 800718c:	e006      	b.n	800719c <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff fb10 	bl	80067bc <HAL_SPI_ErrorCallback>
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80071ba:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80071bc:	f7fc f9cc 	bl	8003558 <HAL_GetTick>
 80071c0:	4603      	mov	r3, r0
 80071c2:	461a      	mov	r2, r3
 80071c4:	2164      	movs	r1, #100	@ 0x64
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff fef2 	bl	8006fb0 <SPI_EndRxTransaction>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d6:	f043 0220 	orr.w	r2, r3, #32
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f003 0310 	and.w	r3, r3, #16
 80071f0:	2b10      	cmp	r3, #16
 80071f2:	d10e      	bne.n	8007212 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f8:	f043 0202 	orr.w	r2, r3, #2
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007208:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff fad6 	bl	80067bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007210:	e00a      	b.n	8007228 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fb fc54 	bl	8002ac8 <HAL_SPI_RxCpltCallback>
}
 8007220:	e002      	b.n	8007228 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff faca 	bl	80067bc <HAL_SPI_ErrorCallback>
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007238:	f7fc f98e 	bl	8003558 <HAL_GetTick>
 800723c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800724c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	2164      	movs	r1, #100	@ 0x64
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff ff04 	bl	8007060 <SPI_EndRxTxTransaction>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007262:	f043 0220 	orr.w	r2, r3, #32
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007272:	2300      	movs	r3, #0
 8007274:	60bb      	str	r3, [r7, #8]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	60bb      	str	r3, [r7, #8]
 8007286:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fa8f 	bl	80067bc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800729e:	e002      	b.n	80072a6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7fb fc25 	bl	8002af0 <HAL_SPI_TxCpltCallback>
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e040      	b.n	8007342 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d106      	bne.n	80072d6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f83a 	bl	800734a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2224      	movs	r2, #36	@ 0x24
 80072da:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0201 	bic.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb73 	bl	80079e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f8b8 	bl	8007470 <UART_SetConfig>
 8007300:	4603      	mov	r3, r0
 8007302:	2b01      	cmp	r3, #1
 8007304:	d101      	bne.n	800730a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e01b      	b.n	8007342 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007318:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007328:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 0201 	orr.w	r2, r2, #1
 8007338:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fbf2 	bl	8007b24 <UART_CheckIdleState>
 8007340:	4603      	mov	r3, r0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b08a      	sub	sp, #40	@ 0x28
 8007362:	af02      	add	r7, sp, #8
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	603b      	str	r3, [r7, #0]
 800736a:	4613      	mov	r3, r2
 800736c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007372:	2b20      	cmp	r3, #32
 8007374:	d177      	bne.n	8007466 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_UART_Transmit+0x24>
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e070      	b.n	8007468 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2221      	movs	r2, #33	@ 0x21
 8007392:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007394:	f7fc f8e0 	bl	8003558 <HAL_GetTick>
 8007398:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	88fa      	ldrh	r2, [r7, #6]
 80073a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b2:	d108      	bne.n	80073c6 <HAL_UART_Transmit+0x68>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d104      	bne.n	80073c6 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	e003      	b.n	80073ce <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073ce:	e02f      	b.n	8007430 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2200      	movs	r2, #0
 80073d8:	2180      	movs	r1, #128	@ 0x80
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 fc4a 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2220      	movs	r2, #32
 80073ea:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e03b      	b.n	8007468 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10b      	bne.n	800740e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	881a      	ldrh	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007402:	b292      	uxth	r2, r2
 8007404:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	3302      	adds	r3, #2
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	e007      	b.n	800741e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	3301      	adds	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1c9      	bne.n	80073d0 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2200      	movs	r2, #0
 8007444:	2140      	movs	r1, #64	@ 0x40
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fc14 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d004      	beq.n	800745c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e005      	b.n	8007468 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	e000      	b.n	8007468 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007466:	2302      	movs	r3, #2
  }
}
 8007468:	4618      	mov	r0, r3
 800746a:	3720      	adds	r7, #32
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007474:	b08a      	sub	sp, #40	@ 0x28
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	431a      	orrs	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	431a      	orrs	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	4313      	orrs	r3, r2
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4ba4      	ldr	r3, [pc, #656]	@ (8007730 <UART_SetConfig+0x2c0>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a99      	ldr	r2, [pc, #612]	@ (8007734 <UART_SetConfig+0x2c4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d8:	4313      	orrs	r3, r2
 80074da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ec:	430a      	orrs	r2, r1
 80074ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a90      	ldr	r2, [pc, #576]	@ (8007738 <UART_SetConfig+0x2c8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d126      	bne.n	8007548 <UART_SetConfig+0xd8>
 80074fa:	4b90      	ldr	r3, [pc, #576]	@ (800773c <UART_SetConfig+0x2cc>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007500:	f003 0303 	and.w	r3, r3, #3
 8007504:	2b03      	cmp	r3, #3
 8007506:	d81b      	bhi.n	8007540 <UART_SetConfig+0xd0>
 8007508:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <UART_SetConfig+0xa0>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007521 	.word	0x08007521
 8007514:	08007531 	.word	0x08007531
 8007518:	08007529 	.word	0x08007529
 800751c:	08007539 	.word	0x08007539
 8007520:	2301      	movs	r3, #1
 8007522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007526:	e116      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007528:	2302      	movs	r3, #2
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800752e:	e112      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007530:	2304      	movs	r3, #4
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007536:	e10e      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007538:	2308      	movs	r3, #8
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800753e:	e10a      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007540:	2310      	movs	r3, #16
 8007542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007546:	e106      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a7c      	ldr	r2, [pc, #496]	@ (8007740 <UART_SetConfig+0x2d0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d138      	bne.n	80075c4 <UART_SetConfig+0x154>
 8007552:	4b7a      	ldr	r3, [pc, #488]	@ (800773c <UART_SetConfig+0x2cc>)
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007558:	f003 030c 	and.w	r3, r3, #12
 800755c:	2b0c      	cmp	r3, #12
 800755e:	d82d      	bhi.n	80075bc <UART_SetConfig+0x14c>
 8007560:	a201      	add	r2, pc, #4	@ (adr r2, 8007568 <UART_SetConfig+0xf8>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	0800759d 	.word	0x0800759d
 800756c:	080075bd 	.word	0x080075bd
 8007570:	080075bd 	.word	0x080075bd
 8007574:	080075bd 	.word	0x080075bd
 8007578:	080075ad 	.word	0x080075ad
 800757c:	080075bd 	.word	0x080075bd
 8007580:	080075bd 	.word	0x080075bd
 8007584:	080075bd 	.word	0x080075bd
 8007588:	080075a5 	.word	0x080075a5
 800758c:	080075bd 	.word	0x080075bd
 8007590:	080075bd 	.word	0x080075bd
 8007594:	080075bd 	.word	0x080075bd
 8007598:	080075b5 	.word	0x080075b5
 800759c:	2300      	movs	r3, #0
 800759e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075a2:	e0d8      	b.n	8007756 <UART_SetConfig+0x2e6>
 80075a4:	2302      	movs	r3, #2
 80075a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075aa:	e0d4      	b.n	8007756 <UART_SetConfig+0x2e6>
 80075ac:	2304      	movs	r3, #4
 80075ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075b2:	e0d0      	b.n	8007756 <UART_SetConfig+0x2e6>
 80075b4:	2308      	movs	r3, #8
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ba:	e0cc      	b.n	8007756 <UART_SetConfig+0x2e6>
 80075bc:	2310      	movs	r3, #16
 80075be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c2:	e0c8      	b.n	8007756 <UART_SetConfig+0x2e6>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a5e      	ldr	r2, [pc, #376]	@ (8007744 <UART_SetConfig+0x2d4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d125      	bne.n	800761a <UART_SetConfig+0x1aa>
 80075ce:	4b5b      	ldr	r3, [pc, #364]	@ (800773c <UART_SetConfig+0x2cc>)
 80075d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80075d8:	2b30      	cmp	r3, #48	@ 0x30
 80075da:	d016      	beq.n	800760a <UART_SetConfig+0x19a>
 80075dc:	2b30      	cmp	r3, #48	@ 0x30
 80075de:	d818      	bhi.n	8007612 <UART_SetConfig+0x1a2>
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d00a      	beq.n	80075fa <UART_SetConfig+0x18a>
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d814      	bhi.n	8007612 <UART_SetConfig+0x1a2>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <UART_SetConfig+0x182>
 80075ec:	2b10      	cmp	r3, #16
 80075ee:	d008      	beq.n	8007602 <UART_SetConfig+0x192>
 80075f0:	e00f      	b.n	8007612 <UART_SetConfig+0x1a2>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075f8:	e0ad      	b.n	8007756 <UART_SetConfig+0x2e6>
 80075fa:	2302      	movs	r3, #2
 80075fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007600:	e0a9      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007602:	2304      	movs	r3, #4
 8007604:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007608:	e0a5      	b.n	8007756 <UART_SetConfig+0x2e6>
 800760a:	2308      	movs	r3, #8
 800760c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007610:	e0a1      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007612:	2310      	movs	r3, #16
 8007614:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007618:	e09d      	b.n	8007756 <UART_SetConfig+0x2e6>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a4a      	ldr	r2, [pc, #296]	@ (8007748 <UART_SetConfig+0x2d8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d125      	bne.n	8007670 <UART_SetConfig+0x200>
 8007624:	4b45      	ldr	r3, [pc, #276]	@ (800773c <UART_SetConfig+0x2cc>)
 8007626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800762e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007630:	d016      	beq.n	8007660 <UART_SetConfig+0x1f0>
 8007632:	2bc0      	cmp	r3, #192	@ 0xc0
 8007634:	d818      	bhi.n	8007668 <UART_SetConfig+0x1f8>
 8007636:	2b80      	cmp	r3, #128	@ 0x80
 8007638:	d00a      	beq.n	8007650 <UART_SetConfig+0x1e0>
 800763a:	2b80      	cmp	r3, #128	@ 0x80
 800763c:	d814      	bhi.n	8007668 <UART_SetConfig+0x1f8>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <UART_SetConfig+0x1d8>
 8007642:	2b40      	cmp	r3, #64	@ 0x40
 8007644:	d008      	beq.n	8007658 <UART_SetConfig+0x1e8>
 8007646:	e00f      	b.n	8007668 <UART_SetConfig+0x1f8>
 8007648:	2300      	movs	r3, #0
 800764a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800764e:	e082      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007650:	2302      	movs	r3, #2
 8007652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007656:	e07e      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007658:	2304      	movs	r3, #4
 800765a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800765e:	e07a      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007666:	e076      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007668:	2310      	movs	r3, #16
 800766a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800766e:	e072      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a35      	ldr	r2, [pc, #212]	@ (800774c <UART_SetConfig+0x2dc>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d12a      	bne.n	80076d0 <UART_SetConfig+0x260>
 800767a:	4b30      	ldr	r3, [pc, #192]	@ (800773c <UART_SetConfig+0x2cc>)
 800767c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007684:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007688:	d01a      	beq.n	80076c0 <UART_SetConfig+0x250>
 800768a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800768e:	d81b      	bhi.n	80076c8 <UART_SetConfig+0x258>
 8007690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007694:	d00c      	beq.n	80076b0 <UART_SetConfig+0x240>
 8007696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800769a:	d815      	bhi.n	80076c8 <UART_SetConfig+0x258>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <UART_SetConfig+0x238>
 80076a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076a4:	d008      	beq.n	80076b8 <UART_SetConfig+0x248>
 80076a6:	e00f      	b.n	80076c8 <UART_SetConfig+0x258>
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ae:	e052      	b.n	8007756 <UART_SetConfig+0x2e6>
 80076b0:	2302      	movs	r3, #2
 80076b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076b6:	e04e      	b.n	8007756 <UART_SetConfig+0x2e6>
 80076b8:	2304      	movs	r3, #4
 80076ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076be:	e04a      	b.n	8007756 <UART_SetConfig+0x2e6>
 80076c0:	2308      	movs	r3, #8
 80076c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076c6:	e046      	b.n	8007756 <UART_SetConfig+0x2e6>
 80076c8:	2310      	movs	r3, #16
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ce:	e042      	b.n	8007756 <UART_SetConfig+0x2e6>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a17      	ldr	r2, [pc, #92]	@ (8007734 <UART_SetConfig+0x2c4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d13a      	bne.n	8007750 <UART_SetConfig+0x2e0>
 80076da:	4b18      	ldr	r3, [pc, #96]	@ (800773c <UART_SetConfig+0x2cc>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80076e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076e8:	d01a      	beq.n	8007720 <UART_SetConfig+0x2b0>
 80076ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076ee:	d81b      	bhi.n	8007728 <UART_SetConfig+0x2b8>
 80076f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076f4:	d00c      	beq.n	8007710 <UART_SetConfig+0x2a0>
 80076f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076fa:	d815      	bhi.n	8007728 <UART_SetConfig+0x2b8>
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <UART_SetConfig+0x298>
 8007700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007704:	d008      	beq.n	8007718 <UART_SetConfig+0x2a8>
 8007706:	e00f      	b.n	8007728 <UART_SetConfig+0x2b8>
 8007708:	2300      	movs	r3, #0
 800770a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800770e:	e022      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007710:	2302      	movs	r3, #2
 8007712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007716:	e01e      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007718:	2304      	movs	r3, #4
 800771a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800771e:	e01a      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007720:	2308      	movs	r3, #8
 8007722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007726:	e016      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007728:	2310      	movs	r3, #16
 800772a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800772e:	e012      	b.n	8007756 <UART_SetConfig+0x2e6>
 8007730:	efff69f3 	.word	0xefff69f3
 8007734:	40008000 	.word	0x40008000
 8007738:	40013800 	.word	0x40013800
 800773c:	40021000 	.word	0x40021000
 8007740:	40004400 	.word	0x40004400
 8007744:	40004800 	.word	0x40004800
 8007748:	40004c00 	.word	0x40004c00
 800774c:	40005000 	.word	0x40005000
 8007750:	2310      	movs	r3, #16
 8007752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a9f      	ldr	r2, [pc, #636]	@ (80079d8 <UART_SetConfig+0x568>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d17a      	bne.n	8007856 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007760:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007764:	2b08      	cmp	r3, #8
 8007766:	d824      	bhi.n	80077b2 <UART_SetConfig+0x342>
 8007768:	a201      	add	r2, pc, #4	@ (adr r2, 8007770 <UART_SetConfig+0x300>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	08007795 	.word	0x08007795
 8007774:	080077b3 	.word	0x080077b3
 8007778:	0800779d 	.word	0x0800779d
 800777c:	080077b3 	.word	0x080077b3
 8007780:	080077a3 	.word	0x080077a3
 8007784:	080077b3 	.word	0x080077b3
 8007788:	080077b3 	.word	0x080077b3
 800778c:	080077b3 	.word	0x080077b3
 8007790:	080077ab 	.word	0x080077ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007794:	f7fd fdf0 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8007798:	61f8      	str	r0, [r7, #28]
        break;
 800779a:	e010      	b.n	80077be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800779c:	4b8f      	ldr	r3, [pc, #572]	@ (80079dc <UART_SetConfig+0x56c>)
 800779e:	61fb      	str	r3, [r7, #28]
        break;
 80077a0:	e00d      	b.n	80077be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077a2:	f7fd fd51 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 80077a6:	61f8      	str	r0, [r7, #28]
        break;
 80077a8:	e009      	b.n	80077be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ae:	61fb      	str	r3, [r7, #28]
        break;
 80077b0:	e005      	b.n	80077be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80fb 	beq.w	80079bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	4613      	mov	r3, r2
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	4413      	add	r3, r2
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d305      	bcc.n	80077e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077dc:	69fa      	ldr	r2, [r7, #28]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d903      	bls.n	80077ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077e8:	e0e8      	b.n	80079bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	2200      	movs	r2, #0
 80077ee:	461c      	mov	r4, r3
 80077f0:	4615      	mov	r5, r2
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	f04f 0300 	mov.w	r3, #0
 80077fa:	022b      	lsls	r3, r5, #8
 80077fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007800:	0222      	lsls	r2, r4, #8
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	6849      	ldr	r1, [r1, #4]
 8007806:	0849      	lsrs	r1, r1, #1
 8007808:	2000      	movs	r0, #0
 800780a:	4688      	mov	r8, r1
 800780c:	4681      	mov	r9, r0
 800780e:	eb12 0a08 	adds.w	sl, r2, r8
 8007812:	eb43 0b09 	adc.w	fp, r3, r9
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	603b      	str	r3, [r7, #0]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007824:	4650      	mov	r0, sl
 8007826:	4659      	mov	r1, fp
 8007828:	f7f9 fa2e 	bl	8000c88 <__aeabi_uldivmod>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4613      	mov	r3, r2
 8007832:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800783a:	d308      	bcc.n	800784e <UART_SetConfig+0x3de>
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007842:	d204      	bcs.n	800784e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	60da      	str	r2, [r3, #12]
 800784c:	e0b6      	b.n	80079bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007854:	e0b2      	b.n	80079bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800785e:	d15e      	bne.n	800791e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007860:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007864:	2b08      	cmp	r3, #8
 8007866:	d828      	bhi.n	80078ba <UART_SetConfig+0x44a>
 8007868:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <UART_SetConfig+0x400>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	08007895 	.word	0x08007895
 8007874:	0800789d 	.word	0x0800789d
 8007878:	080078a5 	.word	0x080078a5
 800787c:	080078bb 	.word	0x080078bb
 8007880:	080078ab 	.word	0x080078ab
 8007884:	080078bb 	.word	0x080078bb
 8007888:	080078bb 	.word	0x080078bb
 800788c:	080078bb 	.word	0x080078bb
 8007890:	080078b3 	.word	0x080078b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007894:	f7fd fd70 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8007898:	61f8      	str	r0, [r7, #28]
        break;
 800789a:	e014      	b.n	80078c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800789c:	f7fd fd82 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 80078a0:	61f8      	str	r0, [r7, #28]
        break;
 80078a2:	e010      	b.n	80078c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078a4:	4b4d      	ldr	r3, [pc, #308]	@ (80079dc <UART_SetConfig+0x56c>)
 80078a6:	61fb      	str	r3, [r7, #28]
        break;
 80078a8:	e00d      	b.n	80078c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078aa:	f7fd fccd 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 80078ae:	61f8      	str	r0, [r7, #28]
        break;
 80078b0:	e009      	b.n	80078c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078b6:	61fb      	str	r3, [r7, #28]
        break;
 80078b8:	e005      	b.n	80078c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d077      	beq.n	80079bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	005a      	lsls	r2, r3, #1
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	085b      	lsrs	r3, r3, #1
 80078d6:	441a      	add	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b0f      	cmp	r3, #15
 80078e6:	d916      	bls.n	8007916 <UART_SetConfig+0x4a6>
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ee:	d212      	bcs.n	8007916 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f023 030f 	bic.w	r3, r3, #15
 80078f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	085b      	lsrs	r3, r3, #1
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	b29a      	uxth	r2, r3
 8007906:	8afb      	ldrh	r3, [r7, #22]
 8007908:	4313      	orrs	r3, r2
 800790a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	8afa      	ldrh	r2, [r7, #22]
 8007912:	60da      	str	r2, [r3, #12]
 8007914:	e052      	b.n	80079bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800791c:	e04e      	b.n	80079bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800791e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007922:	2b08      	cmp	r3, #8
 8007924:	d827      	bhi.n	8007976 <UART_SetConfig+0x506>
 8007926:	a201      	add	r2, pc, #4	@ (adr r2, 800792c <UART_SetConfig+0x4bc>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007951 	.word	0x08007951
 8007930:	08007959 	.word	0x08007959
 8007934:	08007961 	.word	0x08007961
 8007938:	08007977 	.word	0x08007977
 800793c:	08007967 	.word	0x08007967
 8007940:	08007977 	.word	0x08007977
 8007944:	08007977 	.word	0x08007977
 8007948:	08007977 	.word	0x08007977
 800794c:	0800796f 	.word	0x0800796f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007950:	f7fd fd12 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8007954:	61f8      	str	r0, [r7, #28]
        break;
 8007956:	e014      	b.n	8007982 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007958:	f7fd fd24 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 800795c:	61f8      	str	r0, [r7, #28]
        break;
 800795e:	e010      	b.n	8007982 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007960:	4b1e      	ldr	r3, [pc, #120]	@ (80079dc <UART_SetConfig+0x56c>)
 8007962:	61fb      	str	r3, [r7, #28]
        break;
 8007964:	e00d      	b.n	8007982 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007966:	f7fd fc6f 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 800796a:	61f8      	str	r0, [r7, #28]
        break;
 800796c:	e009      	b.n	8007982 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800796e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007972:	61fb      	str	r3, [r7, #28]
        break;
 8007974:	e005      	b.n	8007982 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007980:	bf00      	nop
    }

    if (pclk != 0U)
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d019      	beq.n	80079bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	085a      	lsrs	r2, r3, #1
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	441a      	add	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	fbb2 f3f3 	udiv	r3, r2, r3
 800799a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	2b0f      	cmp	r3, #15
 80079a0:	d909      	bls.n	80079b6 <UART_SetConfig+0x546>
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079a8:	d205      	bcs.n	80079b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60da      	str	r2, [r3, #12]
 80079b4:	e002      	b.n	80079bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80079c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3728      	adds	r7, #40	@ 0x28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079d6:	bf00      	nop
 80079d8:	40008000 	.word	0x40008000
 80079dc:	00f42400 	.word	0x00f42400

080079e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ec:	f003 0308 	and.w	r3, r3, #8
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01a      	beq.n	8007af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ade:	d10a      	bne.n	8007af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	605a      	str	r2, [r3, #4]
  }
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b098      	sub	sp, #96	@ 0x60
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b34:	f7fb fd10 	bl	8003558 <HAL_GetTick>
 8007b38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d12e      	bne.n	8007ba6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b50:	2200      	movs	r2, #0
 8007b52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f88c 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d021      	beq.n	8007ba6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b76:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e6      	bne.n	8007b62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e062      	b.n	8007c6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d149      	bne.n	8007c48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f856 	bl	8007c74 <UART_WaitOnFlagUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d03c      	beq.n	8007c48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	623b      	str	r3, [r7, #32]
   return(result);
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e6      	bne.n	8007bce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3308      	adds	r3, #8
 8007c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c20:	61fa      	str	r2, [r7, #28]
 8007c22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	69b9      	ldr	r1, [r7, #24]
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e5      	bne.n	8007c00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e011      	b.n	8007c6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3758      	adds	r7, #88	@ 0x58
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	4613      	mov	r3, r2
 8007c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c84:	e04f      	b.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8c:	d04b      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8e:	f7fb fc63 	bl	8003558 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d302      	bcc.n	8007ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e04e      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d037      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b80      	cmp	r3, #128	@ 0x80
 8007cba:	d034      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b40      	cmp	r3, #64	@ 0x40
 8007cc0:	d031      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d110      	bne.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2208      	movs	r2, #8
 8007cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f838 	bl	8007d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e029      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d00:	d111      	bne.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f81e 	bl	8007d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e00f      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	bf0c      	ite	eq
 8007d36:	2301      	moveq	r3, #1
 8007d38:	2300      	movne	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d0a0      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b095      	sub	sp, #84	@ 0x54
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e6      	bne.n	8007d56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	f023 0301 	bic.w	r3, r3, #1
 8007d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3308      	adds	r3, #8
 8007da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007da8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e5      	bne.n	8007d88 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d118      	bne.n	8007df6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f023 0310 	bic.w	r3, r3, #16
 8007dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007de2:	61bb      	str	r3, [r7, #24]
 8007de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6979      	ldr	r1, [r7, #20]
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	613b      	str	r3, [r7, #16]
   return(result);
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e6      	bne.n	8007dc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e0a:	bf00      	nop
 8007e0c:	3754      	adds	r7, #84	@ 0x54
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <__cvt>:
 8007e16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1a:	ec57 6b10 	vmov	r6, r7, d0
 8007e1e:	2f00      	cmp	r7, #0
 8007e20:	460c      	mov	r4, r1
 8007e22:	4619      	mov	r1, r3
 8007e24:	463b      	mov	r3, r7
 8007e26:	bfbb      	ittet	lt
 8007e28:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007e2c:	461f      	movlt	r7, r3
 8007e2e:	2300      	movge	r3, #0
 8007e30:	232d      	movlt	r3, #45	@ 0x2d
 8007e32:	700b      	strb	r3, [r1, #0]
 8007e34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e36:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e3a:	4691      	mov	r9, r2
 8007e3c:	f023 0820 	bic.w	r8, r3, #32
 8007e40:	bfbc      	itt	lt
 8007e42:	4632      	movlt	r2, r6
 8007e44:	4616      	movlt	r6, r2
 8007e46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e4a:	d005      	beq.n	8007e58 <__cvt+0x42>
 8007e4c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e50:	d100      	bne.n	8007e54 <__cvt+0x3e>
 8007e52:	3401      	adds	r4, #1
 8007e54:	2102      	movs	r1, #2
 8007e56:	e000      	b.n	8007e5a <__cvt+0x44>
 8007e58:	2103      	movs	r1, #3
 8007e5a:	ab03      	add	r3, sp, #12
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	ab02      	add	r3, sp, #8
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	ec47 6b10 	vmov	d0, r6, r7
 8007e66:	4653      	mov	r3, sl
 8007e68:	4622      	mov	r2, r4
 8007e6a:	f001 fa6d 	bl	8009348 <_dtoa_r>
 8007e6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e72:	4605      	mov	r5, r0
 8007e74:	d119      	bne.n	8007eaa <__cvt+0x94>
 8007e76:	f019 0f01 	tst.w	r9, #1
 8007e7a:	d00e      	beq.n	8007e9a <__cvt+0x84>
 8007e7c:	eb00 0904 	add.w	r9, r0, r4
 8007e80:	2200      	movs	r2, #0
 8007e82:	2300      	movs	r3, #0
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e8c:	b108      	cbz	r0, 8007e92 <__cvt+0x7c>
 8007e8e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e92:	2230      	movs	r2, #48	@ 0x30
 8007e94:	9b03      	ldr	r3, [sp, #12]
 8007e96:	454b      	cmp	r3, r9
 8007e98:	d31e      	bcc.n	8007ed8 <__cvt+0xc2>
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e9e:	1b5b      	subs	r3, r3, r5
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	b004      	add	sp, #16
 8007ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eaa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007eae:	eb00 0904 	add.w	r9, r0, r4
 8007eb2:	d1e5      	bne.n	8007e80 <__cvt+0x6a>
 8007eb4:	7803      	ldrb	r3, [r0, #0]
 8007eb6:	2b30      	cmp	r3, #48	@ 0x30
 8007eb8:	d10a      	bne.n	8007ed0 <__cvt+0xba>
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	f7f8 fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ec6:	b918      	cbnz	r0, 8007ed0 <__cvt+0xba>
 8007ec8:	f1c4 0401 	rsb	r4, r4, #1
 8007ecc:	f8ca 4000 	str.w	r4, [sl]
 8007ed0:	f8da 3000 	ldr.w	r3, [sl]
 8007ed4:	4499      	add	r9, r3
 8007ed6:	e7d3      	b.n	8007e80 <__cvt+0x6a>
 8007ed8:	1c59      	adds	r1, r3, #1
 8007eda:	9103      	str	r1, [sp, #12]
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e7d9      	b.n	8007e94 <__cvt+0x7e>

08007ee0 <__exponent>:
 8007ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	bfba      	itte	lt
 8007ee6:	4249      	neglt	r1, r1
 8007ee8:	232d      	movlt	r3, #45	@ 0x2d
 8007eea:	232b      	movge	r3, #43	@ 0x2b
 8007eec:	2909      	cmp	r1, #9
 8007eee:	7002      	strb	r2, [r0, #0]
 8007ef0:	7043      	strb	r3, [r0, #1]
 8007ef2:	dd29      	ble.n	8007f48 <__exponent+0x68>
 8007ef4:	f10d 0307 	add.w	r3, sp, #7
 8007ef8:	461d      	mov	r5, r3
 8007efa:	270a      	movs	r7, #10
 8007efc:	461a      	mov	r2, r3
 8007efe:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f02:	fb07 1416 	mls	r4, r7, r6, r1
 8007f06:	3430      	adds	r4, #48	@ 0x30
 8007f08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	2c63      	cmp	r4, #99	@ 0x63
 8007f10:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f14:	4631      	mov	r1, r6
 8007f16:	dcf1      	bgt.n	8007efc <__exponent+0x1c>
 8007f18:	3130      	adds	r1, #48	@ 0x30
 8007f1a:	1e94      	subs	r4, r2, #2
 8007f1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f20:	1c41      	adds	r1, r0, #1
 8007f22:	4623      	mov	r3, r4
 8007f24:	42ab      	cmp	r3, r5
 8007f26:	d30a      	bcc.n	8007f3e <__exponent+0x5e>
 8007f28:	f10d 0309 	add.w	r3, sp, #9
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	42ac      	cmp	r4, r5
 8007f30:	bf88      	it	hi
 8007f32:	2300      	movhi	r3, #0
 8007f34:	3302      	adds	r3, #2
 8007f36:	4403      	add	r3, r0
 8007f38:	1a18      	subs	r0, r3, r0
 8007f3a:	b003      	add	sp, #12
 8007f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f46:	e7ed      	b.n	8007f24 <__exponent+0x44>
 8007f48:	2330      	movs	r3, #48	@ 0x30
 8007f4a:	3130      	adds	r1, #48	@ 0x30
 8007f4c:	7083      	strb	r3, [r0, #2]
 8007f4e:	70c1      	strb	r1, [r0, #3]
 8007f50:	1d03      	adds	r3, r0, #4
 8007f52:	e7f1      	b.n	8007f38 <__exponent+0x58>

08007f54 <_printf_float>:
 8007f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	b08d      	sub	sp, #52	@ 0x34
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f60:	4616      	mov	r6, r2
 8007f62:	461f      	mov	r7, r3
 8007f64:	4605      	mov	r5, r0
 8007f66:	f001 f8bb 	bl	80090e0 <_localeconv_r>
 8007f6a:	6803      	ldr	r3, [r0, #0]
 8007f6c:	9304      	str	r3, [sp, #16]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7f8 f97e 	bl	8000270 <strlen>
 8007f74:	2300      	movs	r3, #0
 8007f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f78:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7c:	9005      	str	r0, [sp, #20]
 8007f7e:	3307      	adds	r3, #7
 8007f80:	f023 0307 	bic.w	r3, r3, #7
 8007f84:	f103 0208 	add.w	r2, r3, #8
 8007f88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f8c:	f8d4 b000 	ldr.w	fp, [r4]
 8007f90:	f8c8 2000 	str.w	r2, [r8]
 8007f94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f9c:	9307      	str	r3, [sp, #28]
 8007f9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fa2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007fa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007faa:	4b9c      	ldr	r3, [pc, #624]	@ (800821c <_printf_float+0x2c8>)
 8007fac:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb0:	f7f8 fdbc 	bl	8000b2c <__aeabi_dcmpun>
 8007fb4:	bb70      	cbnz	r0, 8008014 <_printf_float+0xc0>
 8007fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fba:	4b98      	ldr	r3, [pc, #608]	@ (800821c <_printf_float+0x2c8>)
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc0:	f7f8 fd96 	bl	8000af0 <__aeabi_dcmple>
 8007fc4:	bb30      	cbnz	r0, 8008014 <_printf_float+0xc0>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4640      	mov	r0, r8
 8007fcc:	4649      	mov	r1, r9
 8007fce:	f7f8 fd85 	bl	8000adc <__aeabi_dcmplt>
 8007fd2:	b110      	cbz	r0, 8007fda <_printf_float+0x86>
 8007fd4:	232d      	movs	r3, #45	@ 0x2d
 8007fd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fda:	4a91      	ldr	r2, [pc, #580]	@ (8008220 <_printf_float+0x2cc>)
 8007fdc:	4b91      	ldr	r3, [pc, #580]	@ (8008224 <_printf_float+0x2d0>)
 8007fde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fe2:	bf8c      	ite	hi
 8007fe4:	4690      	movhi	r8, r2
 8007fe6:	4698      	movls	r8, r3
 8007fe8:	2303      	movs	r3, #3
 8007fea:	6123      	str	r3, [r4, #16]
 8007fec:	f02b 0304 	bic.w	r3, fp, #4
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	f04f 0900 	mov.w	r9, #0
 8007ff6:	9700      	str	r7, [sp, #0]
 8007ff8:	4633      	mov	r3, r6
 8007ffa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4628      	mov	r0, r5
 8008000:	f000 f9d2 	bl	80083a8 <_printf_common>
 8008004:	3001      	adds	r0, #1
 8008006:	f040 808d 	bne.w	8008124 <_printf_float+0x1d0>
 800800a:	f04f 30ff 	mov.w	r0, #4294967295
 800800e:	b00d      	add	sp, #52	@ 0x34
 8008010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008014:	4642      	mov	r2, r8
 8008016:	464b      	mov	r3, r9
 8008018:	4640      	mov	r0, r8
 800801a:	4649      	mov	r1, r9
 800801c:	f7f8 fd86 	bl	8000b2c <__aeabi_dcmpun>
 8008020:	b140      	cbz	r0, 8008034 <_printf_float+0xe0>
 8008022:	464b      	mov	r3, r9
 8008024:	2b00      	cmp	r3, #0
 8008026:	bfbc      	itt	lt
 8008028:	232d      	movlt	r3, #45	@ 0x2d
 800802a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800802e:	4a7e      	ldr	r2, [pc, #504]	@ (8008228 <_printf_float+0x2d4>)
 8008030:	4b7e      	ldr	r3, [pc, #504]	@ (800822c <_printf_float+0x2d8>)
 8008032:	e7d4      	b.n	8007fde <_printf_float+0x8a>
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800803a:	9206      	str	r2, [sp, #24]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	d13b      	bne.n	80080b8 <_printf_float+0x164>
 8008040:	2306      	movs	r3, #6
 8008042:	6063      	str	r3, [r4, #4]
 8008044:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008048:	2300      	movs	r3, #0
 800804a:	6022      	str	r2, [r4, #0]
 800804c:	9303      	str	r3, [sp, #12]
 800804e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008050:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008054:	ab09      	add	r3, sp, #36	@ 0x24
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	6861      	ldr	r1, [r4, #4]
 800805a:	ec49 8b10 	vmov	d0, r8, r9
 800805e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008062:	4628      	mov	r0, r5
 8008064:	f7ff fed7 	bl	8007e16 <__cvt>
 8008068:	9b06      	ldr	r3, [sp, #24]
 800806a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800806c:	2b47      	cmp	r3, #71	@ 0x47
 800806e:	4680      	mov	r8, r0
 8008070:	d129      	bne.n	80080c6 <_printf_float+0x172>
 8008072:	1cc8      	adds	r0, r1, #3
 8008074:	db02      	blt.n	800807c <_printf_float+0x128>
 8008076:	6863      	ldr	r3, [r4, #4]
 8008078:	4299      	cmp	r1, r3
 800807a:	dd41      	ble.n	8008100 <_printf_float+0x1ac>
 800807c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008080:	fa5f fa8a 	uxtb.w	sl, sl
 8008084:	3901      	subs	r1, #1
 8008086:	4652      	mov	r2, sl
 8008088:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800808c:	9109      	str	r1, [sp, #36]	@ 0x24
 800808e:	f7ff ff27 	bl	8007ee0 <__exponent>
 8008092:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008094:	1813      	adds	r3, r2, r0
 8008096:	2a01      	cmp	r2, #1
 8008098:	4681      	mov	r9, r0
 800809a:	6123      	str	r3, [r4, #16]
 800809c:	dc02      	bgt.n	80080a4 <_printf_float+0x150>
 800809e:	6822      	ldr	r2, [r4, #0]
 80080a0:	07d2      	lsls	r2, r2, #31
 80080a2:	d501      	bpl.n	80080a8 <_printf_float+0x154>
 80080a4:	3301      	adds	r3, #1
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0a2      	beq.n	8007ff6 <_printf_float+0xa2>
 80080b0:	232d      	movs	r3, #45	@ 0x2d
 80080b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080b6:	e79e      	b.n	8007ff6 <_printf_float+0xa2>
 80080b8:	9a06      	ldr	r2, [sp, #24]
 80080ba:	2a47      	cmp	r2, #71	@ 0x47
 80080bc:	d1c2      	bne.n	8008044 <_printf_float+0xf0>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1c0      	bne.n	8008044 <_printf_float+0xf0>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e7bd      	b.n	8008042 <_printf_float+0xee>
 80080c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080ca:	d9db      	bls.n	8008084 <_printf_float+0x130>
 80080cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80080d0:	d118      	bne.n	8008104 <_printf_float+0x1b0>
 80080d2:	2900      	cmp	r1, #0
 80080d4:	6863      	ldr	r3, [r4, #4]
 80080d6:	dd0b      	ble.n	80080f0 <_printf_float+0x19c>
 80080d8:	6121      	str	r1, [r4, #16]
 80080da:	b913      	cbnz	r3, 80080e2 <_printf_float+0x18e>
 80080dc:	6822      	ldr	r2, [r4, #0]
 80080de:	07d0      	lsls	r0, r2, #31
 80080e0:	d502      	bpl.n	80080e8 <_printf_float+0x194>
 80080e2:	3301      	adds	r3, #1
 80080e4:	440b      	add	r3, r1
 80080e6:	6123      	str	r3, [r4, #16]
 80080e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080ea:	f04f 0900 	mov.w	r9, #0
 80080ee:	e7db      	b.n	80080a8 <_printf_float+0x154>
 80080f0:	b913      	cbnz	r3, 80080f8 <_printf_float+0x1a4>
 80080f2:	6822      	ldr	r2, [r4, #0]
 80080f4:	07d2      	lsls	r2, r2, #31
 80080f6:	d501      	bpl.n	80080fc <_printf_float+0x1a8>
 80080f8:	3302      	adds	r3, #2
 80080fa:	e7f4      	b.n	80080e6 <_printf_float+0x192>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e7f2      	b.n	80080e6 <_printf_float+0x192>
 8008100:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008106:	4299      	cmp	r1, r3
 8008108:	db05      	blt.n	8008116 <_printf_float+0x1c2>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	6121      	str	r1, [r4, #16]
 800810e:	07d8      	lsls	r0, r3, #31
 8008110:	d5ea      	bpl.n	80080e8 <_printf_float+0x194>
 8008112:	1c4b      	adds	r3, r1, #1
 8008114:	e7e7      	b.n	80080e6 <_printf_float+0x192>
 8008116:	2900      	cmp	r1, #0
 8008118:	bfd4      	ite	le
 800811a:	f1c1 0202 	rsble	r2, r1, #2
 800811e:	2201      	movgt	r2, #1
 8008120:	4413      	add	r3, r2
 8008122:	e7e0      	b.n	80080e6 <_printf_float+0x192>
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	055a      	lsls	r2, r3, #21
 8008128:	d407      	bmi.n	800813a <_printf_float+0x1e6>
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	4642      	mov	r2, r8
 800812e:	4631      	mov	r1, r6
 8008130:	4628      	mov	r0, r5
 8008132:	47b8      	blx	r7
 8008134:	3001      	adds	r0, #1
 8008136:	d12b      	bne.n	8008190 <_printf_float+0x23c>
 8008138:	e767      	b.n	800800a <_printf_float+0xb6>
 800813a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800813e:	f240 80dd 	bls.w	80082fc <_printf_float+0x3a8>
 8008142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	f7f8 fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800814e:	2800      	cmp	r0, #0
 8008150:	d033      	beq.n	80081ba <_printf_float+0x266>
 8008152:	4a37      	ldr	r2, [pc, #220]	@ (8008230 <_printf_float+0x2dc>)
 8008154:	2301      	movs	r3, #1
 8008156:	4631      	mov	r1, r6
 8008158:	4628      	mov	r0, r5
 800815a:	47b8      	blx	r7
 800815c:	3001      	adds	r0, #1
 800815e:	f43f af54 	beq.w	800800a <_printf_float+0xb6>
 8008162:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008166:	4543      	cmp	r3, r8
 8008168:	db02      	blt.n	8008170 <_printf_float+0x21c>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	07d8      	lsls	r0, r3, #31
 800816e:	d50f      	bpl.n	8008190 <_printf_float+0x23c>
 8008170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008174:	4631      	mov	r1, r6
 8008176:	4628      	mov	r0, r5
 8008178:	47b8      	blx	r7
 800817a:	3001      	adds	r0, #1
 800817c:	f43f af45 	beq.w	800800a <_printf_float+0xb6>
 8008180:	f04f 0900 	mov.w	r9, #0
 8008184:	f108 38ff 	add.w	r8, r8, #4294967295
 8008188:	f104 0a1a 	add.w	sl, r4, #26
 800818c:	45c8      	cmp	r8, r9
 800818e:	dc09      	bgt.n	80081a4 <_printf_float+0x250>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	079b      	lsls	r3, r3, #30
 8008194:	f100 8103 	bmi.w	800839e <_printf_float+0x44a>
 8008198:	68e0      	ldr	r0, [r4, #12]
 800819a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800819c:	4298      	cmp	r0, r3
 800819e:	bfb8      	it	lt
 80081a0:	4618      	movlt	r0, r3
 80081a2:	e734      	b.n	800800e <_printf_float+0xba>
 80081a4:	2301      	movs	r3, #1
 80081a6:	4652      	mov	r2, sl
 80081a8:	4631      	mov	r1, r6
 80081aa:	4628      	mov	r0, r5
 80081ac:	47b8      	blx	r7
 80081ae:	3001      	adds	r0, #1
 80081b0:	f43f af2b 	beq.w	800800a <_printf_float+0xb6>
 80081b4:	f109 0901 	add.w	r9, r9, #1
 80081b8:	e7e8      	b.n	800818c <_printf_float+0x238>
 80081ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dc39      	bgt.n	8008234 <_printf_float+0x2e0>
 80081c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008230 <_printf_float+0x2dc>)
 80081c2:	2301      	movs	r3, #1
 80081c4:	4631      	mov	r1, r6
 80081c6:	4628      	mov	r0, r5
 80081c8:	47b8      	blx	r7
 80081ca:	3001      	adds	r0, #1
 80081cc:	f43f af1d 	beq.w	800800a <_printf_float+0xb6>
 80081d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80081d4:	ea59 0303 	orrs.w	r3, r9, r3
 80081d8:	d102      	bne.n	80081e0 <_printf_float+0x28c>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	07d9      	lsls	r1, r3, #31
 80081de:	d5d7      	bpl.n	8008190 <_printf_float+0x23c>
 80081e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081e4:	4631      	mov	r1, r6
 80081e6:	4628      	mov	r0, r5
 80081e8:	47b8      	blx	r7
 80081ea:	3001      	adds	r0, #1
 80081ec:	f43f af0d 	beq.w	800800a <_printf_float+0xb6>
 80081f0:	f04f 0a00 	mov.w	sl, #0
 80081f4:	f104 0b1a 	add.w	fp, r4, #26
 80081f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081fa:	425b      	negs	r3, r3
 80081fc:	4553      	cmp	r3, sl
 80081fe:	dc01      	bgt.n	8008204 <_printf_float+0x2b0>
 8008200:	464b      	mov	r3, r9
 8008202:	e793      	b.n	800812c <_printf_float+0x1d8>
 8008204:	2301      	movs	r3, #1
 8008206:	465a      	mov	r2, fp
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	f43f aefb 	beq.w	800800a <_printf_float+0xb6>
 8008214:	f10a 0a01 	add.w	sl, sl, #1
 8008218:	e7ee      	b.n	80081f8 <_printf_float+0x2a4>
 800821a:	bf00      	nop
 800821c:	7fefffff 	.word	0x7fefffff
 8008220:	0800d0c4 	.word	0x0800d0c4
 8008224:	0800d0c0 	.word	0x0800d0c0
 8008228:	0800d0cc 	.word	0x0800d0cc
 800822c:	0800d0c8 	.word	0x0800d0c8
 8008230:	0800d0d0 	.word	0x0800d0d0
 8008234:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008236:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800823a:	4553      	cmp	r3, sl
 800823c:	bfa8      	it	ge
 800823e:	4653      	movge	r3, sl
 8008240:	2b00      	cmp	r3, #0
 8008242:	4699      	mov	r9, r3
 8008244:	dc36      	bgt.n	80082b4 <_printf_float+0x360>
 8008246:	f04f 0b00 	mov.w	fp, #0
 800824a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800824e:	f104 021a 	add.w	r2, r4, #26
 8008252:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008254:	9306      	str	r3, [sp, #24]
 8008256:	eba3 0309 	sub.w	r3, r3, r9
 800825a:	455b      	cmp	r3, fp
 800825c:	dc31      	bgt.n	80082c2 <_printf_float+0x36e>
 800825e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008260:	459a      	cmp	sl, r3
 8008262:	dc3a      	bgt.n	80082da <_printf_float+0x386>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	07da      	lsls	r2, r3, #31
 8008268:	d437      	bmi.n	80082da <_printf_float+0x386>
 800826a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800826c:	ebaa 0903 	sub.w	r9, sl, r3
 8008270:	9b06      	ldr	r3, [sp, #24]
 8008272:	ebaa 0303 	sub.w	r3, sl, r3
 8008276:	4599      	cmp	r9, r3
 8008278:	bfa8      	it	ge
 800827a:	4699      	movge	r9, r3
 800827c:	f1b9 0f00 	cmp.w	r9, #0
 8008280:	dc33      	bgt.n	80082ea <_printf_float+0x396>
 8008282:	f04f 0800 	mov.w	r8, #0
 8008286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800828a:	f104 0b1a 	add.w	fp, r4, #26
 800828e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008290:	ebaa 0303 	sub.w	r3, sl, r3
 8008294:	eba3 0309 	sub.w	r3, r3, r9
 8008298:	4543      	cmp	r3, r8
 800829a:	f77f af79 	ble.w	8008190 <_printf_float+0x23c>
 800829e:	2301      	movs	r3, #1
 80082a0:	465a      	mov	r2, fp
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	f43f aeae 	beq.w	800800a <_printf_float+0xb6>
 80082ae:	f108 0801 	add.w	r8, r8, #1
 80082b2:	e7ec      	b.n	800828e <_printf_float+0x33a>
 80082b4:	4642      	mov	r2, r8
 80082b6:	4631      	mov	r1, r6
 80082b8:	4628      	mov	r0, r5
 80082ba:	47b8      	blx	r7
 80082bc:	3001      	adds	r0, #1
 80082be:	d1c2      	bne.n	8008246 <_printf_float+0x2f2>
 80082c0:	e6a3      	b.n	800800a <_printf_float+0xb6>
 80082c2:	2301      	movs	r3, #1
 80082c4:	4631      	mov	r1, r6
 80082c6:	4628      	mov	r0, r5
 80082c8:	9206      	str	r2, [sp, #24]
 80082ca:	47b8      	blx	r7
 80082cc:	3001      	adds	r0, #1
 80082ce:	f43f ae9c 	beq.w	800800a <_printf_float+0xb6>
 80082d2:	9a06      	ldr	r2, [sp, #24]
 80082d4:	f10b 0b01 	add.w	fp, fp, #1
 80082d8:	e7bb      	b.n	8008252 <_printf_float+0x2fe>
 80082da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	d1c0      	bne.n	800826a <_printf_float+0x316>
 80082e8:	e68f      	b.n	800800a <_printf_float+0xb6>
 80082ea:	9a06      	ldr	r2, [sp, #24]
 80082ec:	464b      	mov	r3, r9
 80082ee:	4442      	add	r2, r8
 80082f0:	4631      	mov	r1, r6
 80082f2:	4628      	mov	r0, r5
 80082f4:	47b8      	blx	r7
 80082f6:	3001      	adds	r0, #1
 80082f8:	d1c3      	bne.n	8008282 <_printf_float+0x32e>
 80082fa:	e686      	b.n	800800a <_printf_float+0xb6>
 80082fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008300:	f1ba 0f01 	cmp.w	sl, #1
 8008304:	dc01      	bgt.n	800830a <_printf_float+0x3b6>
 8008306:	07db      	lsls	r3, r3, #31
 8008308:	d536      	bpl.n	8008378 <_printf_float+0x424>
 800830a:	2301      	movs	r3, #1
 800830c:	4642      	mov	r2, r8
 800830e:	4631      	mov	r1, r6
 8008310:	4628      	mov	r0, r5
 8008312:	47b8      	blx	r7
 8008314:	3001      	adds	r0, #1
 8008316:	f43f ae78 	beq.w	800800a <_printf_float+0xb6>
 800831a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800831e:	4631      	mov	r1, r6
 8008320:	4628      	mov	r0, r5
 8008322:	47b8      	blx	r7
 8008324:	3001      	adds	r0, #1
 8008326:	f43f ae70 	beq.w	800800a <_printf_float+0xb6>
 800832a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800832e:	2200      	movs	r2, #0
 8008330:	2300      	movs	r3, #0
 8008332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008336:	f7f8 fbc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800833a:	b9c0      	cbnz	r0, 800836e <_printf_float+0x41a>
 800833c:	4653      	mov	r3, sl
 800833e:	f108 0201 	add.w	r2, r8, #1
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	d10c      	bne.n	8008366 <_printf_float+0x412>
 800834c:	e65d      	b.n	800800a <_printf_float+0xb6>
 800834e:	2301      	movs	r3, #1
 8008350:	465a      	mov	r2, fp
 8008352:	4631      	mov	r1, r6
 8008354:	4628      	mov	r0, r5
 8008356:	47b8      	blx	r7
 8008358:	3001      	adds	r0, #1
 800835a:	f43f ae56 	beq.w	800800a <_printf_float+0xb6>
 800835e:	f108 0801 	add.w	r8, r8, #1
 8008362:	45d0      	cmp	r8, sl
 8008364:	dbf3      	blt.n	800834e <_printf_float+0x3fa>
 8008366:	464b      	mov	r3, r9
 8008368:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800836c:	e6df      	b.n	800812e <_printf_float+0x1da>
 800836e:	f04f 0800 	mov.w	r8, #0
 8008372:	f104 0b1a 	add.w	fp, r4, #26
 8008376:	e7f4      	b.n	8008362 <_printf_float+0x40e>
 8008378:	2301      	movs	r3, #1
 800837a:	4642      	mov	r2, r8
 800837c:	e7e1      	b.n	8008342 <_printf_float+0x3ee>
 800837e:	2301      	movs	r3, #1
 8008380:	464a      	mov	r2, r9
 8008382:	4631      	mov	r1, r6
 8008384:	4628      	mov	r0, r5
 8008386:	47b8      	blx	r7
 8008388:	3001      	adds	r0, #1
 800838a:	f43f ae3e 	beq.w	800800a <_printf_float+0xb6>
 800838e:	f108 0801 	add.w	r8, r8, #1
 8008392:	68e3      	ldr	r3, [r4, #12]
 8008394:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008396:	1a5b      	subs	r3, r3, r1
 8008398:	4543      	cmp	r3, r8
 800839a:	dcf0      	bgt.n	800837e <_printf_float+0x42a>
 800839c:	e6fc      	b.n	8008198 <_printf_float+0x244>
 800839e:	f04f 0800 	mov.w	r8, #0
 80083a2:	f104 0919 	add.w	r9, r4, #25
 80083a6:	e7f4      	b.n	8008392 <_printf_float+0x43e>

080083a8 <_printf_common>:
 80083a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	4616      	mov	r6, r2
 80083ae:	4698      	mov	r8, r3
 80083b0:	688a      	ldr	r2, [r1, #8]
 80083b2:	690b      	ldr	r3, [r1, #16]
 80083b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083b8:	4293      	cmp	r3, r2
 80083ba:	bfb8      	it	lt
 80083bc:	4613      	movlt	r3, r2
 80083be:	6033      	str	r3, [r6, #0]
 80083c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083c4:	4607      	mov	r7, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	b10a      	cbz	r2, 80083ce <_printf_common+0x26>
 80083ca:	3301      	adds	r3, #1
 80083cc:	6033      	str	r3, [r6, #0]
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	0699      	lsls	r1, r3, #26
 80083d2:	bf42      	ittt	mi
 80083d4:	6833      	ldrmi	r3, [r6, #0]
 80083d6:	3302      	addmi	r3, #2
 80083d8:	6033      	strmi	r3, [r6, #0]
 80083da:	6825      	ldr	r5, [r4, #0]
 80083dc:	f015 0506 	ands.w	r5, r5, #6
 80083e0:	d106      	bne.n	80083f0 <_printf_common+0x48>
 80083e2:	f104 0a19 	add.w	sl, r4, #25
 80083e6:	68e3      	ldr	r3, [r4, #12]
 80083e8:	6832      	ldr	r2, [r6, #0]
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	42ab      	cmp	r3, r5
 80083ee:	dc26      	bgt.n	800843e <_printf_common+0x96>
 80083f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083f4:	6822      	ldr	r2, [r4, #0]
 80083f6:	3b00      	subs	r3, #0
 80083f8:	bf18      	it	ne
 80083fa:	2301      	movne	r3, #1
 80083fc:	0692      	lsls	r2, r2, #26
 80083fe:	d42b      	bmi.n	8008458 <_printf_common+0xb0>
 8008400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008404:	4641      	mov	r1, r8
 8008406:	4638      	mov	r0, r7
 8008408:	47c8      	blx	r9
 800840a:	3001      	adds	r0, #1
 800840c:	d01e      	beq.n	800844c <_printf_common+0xa4>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	6922      	ldr	r2, [r4, #16]
 8008412:	f003 0306 	and.w	r3, r3, #6
 8008416:	2b04      	cmp	r3, #4
 8008418:	bf02      	ittt	eq
 800841a:	68e5      	ldreq	r5, [r4, #12]
 800841c:	6833      	ldreq	r3, [r6, #0]
 800841e:	1aed      	subeq	r5, r5, r3
 8008420:	68a3      	ldr	r3, [r4, #8]
 8008422:	bf0c      	ite	eq
 8008424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008428:	2500      	movne	r5, #0
 800842a:	4293      	cmp	r3, r2
 800842c:	bfc4      	itt	gt
 800842e:	1a9b      	subgt	r3, r3, r2
 8008430:	18ed      	addgt	r5, r5, r3
 8008432:	2600      	movs	r6, #0
 8008434:	341a      	adds	r4, #26
 8008436:	42b5      	cmp	r5, r6
 8008438:	d11a      	bne.n	8008470 <_printf_common+0xc8>
 800843a:	2000      	movs	r0, #0
 800843c:	e008      	b.n	8008450 <_printf_common+0xa8>
 800843e:	2301      	movs	r3, #1
 8008440:	4652      	mov	r2, sl
 8008442:	4641      	mov	r1, r8
 8008444:	4638      	mov	r0, r7
 8008446:	47c8      	blx	r9
 8008448:	3001      	adds	r0, #1
 800844a:	d103      	bne.n	8008454 <_printf_common+0xac>
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008454:	3501      	adds	r5, #1
 8008456:	e7c6      	b.n	80083e6 <_printf_common+0x3e>
 8008458:	18e1      	adds	r1, r4, r3
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	2030      	movs	r0, #48	@ 0x30
 800845e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008462:	4422      	add	r2, r4
 8008464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800846c:	3302      	adds	r3, #2
 800846e:	e7c7      	b.n	8008400 <_printf_common+0x58>
 8008470:	2301      	movs	r3, #1
 8008472:	4622      	mov	r2, r4
 8008474:	4641      	mov	r1, r8
 8008476:	4638      	mov	r0, r7
 8008478:	47c8      	blx	r9
 800847a:	3001      	adds	r0, #1
 800847c:	d0e6      	beq.n	800844c <_printf_common+0xa4>
 800847e:	3601      	adds	r6, #1
 8008480:	e7d9      	b.n	8008436 <_printf_common+0x8e>
	...

08008484 <_printf_i>:
 8008484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008488:	7e0f      	ldrb	r7, [r1, #24]
 800848a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800848c:	2f78      	cmp	r7, #120	@ 0x78
 800848e:	4691      	mov	r9, r2
 8008490:	4680      	mov	r8, r0
 8008492:	460c      	mov	r4, r1
 8008494:	469a      	mov	sl, r3
 8008496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800849a:	d807      	bhi.n	80084ac <_printf_i+0x28>
 800849c:	2f62      	cmp	r7, #98	@ 0x62
 800849e:	d80a      	bhi.n	80084b6 <_printf_i+0x32>
 80084a0:	2f00      	cmp	r7, #0
 80084a2:	f000 80d1 	beq.w	8008648 <_printf_i+0x1c4>
 80084a6:	2f58      	cmp	r7, #88	@ 0x58
 80084a8:	f000 80b8 	beq.w	800861c <_printf_i+0x198>
 80084ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084b4:	e03a      	b.n	800852c <_printf_i+0xa8>
 80084b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084ba:	2b15      	cmp	r3, #21
 80084bc:	d8f6      	bhi.n	80084ac <_printf_i+0x28>
 80084be:	a101      	add	r1, pc, #4	@ (adr r1, 80084c4 <_printf_i+0x40>)
 80084c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084c4:	0800851d 	.word	0x0800851d
 80084c8:	08008531 	.word	0x08008531
 80084cc:	080084ad 	.word	0x080084ad
 80084d0:	080084ad 	.word	0x080084ad
 80084d4:	080084ad 	.word	0x080084ad
 80084d8:	080084ad 	.word	0x080084ad
 80084dc:	08008531 	.word	0x08008531
 80084e0:	080084ad 	.word	0x080084ad
 80084e4:	080084ad 	.word	0x080084ad
 80084e8:	080084ad 	.word	0x080084ad
 80084ec:	080084ad 	.word	0x080084ad
 80084f0:	0800862f 	.word	0x0800862f
 80084f4:	0800855b 	.word	0x0800855b
 80084f8:	080085e9 	.word	0x080085e9
 80084fc:	080084ad 	.word	0x080084ad
 8008500:	080084ad 	.word	0x080084ad
 8008504:	08008651 	.word	0x08008651
 8008508:	080084ad 	.word	0x080084ad
 800850c:	0800855b 	.word	0x0800855b
 8008510:	080084ad 	.word	0x080084ad
 8008514:	080084ad 	.word	0x080084ad
 8008518:	080085f1 	.word	0x080085f1
 800851c:	6833      	ldr	r3, [r6, #0]
 800851e:	1d1a      	adds	r2, r3, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6032      	str	r2, [r6, #0]
 8008524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800852c:	2301      	movs	r3, #1
 800852e:	e09c      	b.n	800866a <_printf_i+0x1e6>
 8008530:	6833      	ldr	r3, [r6, #0]
 8008532:	6820      	ldr	r0, [r4, #0]
 8008534:	1d19      	adds	r1, r3, #4
 8008536:	6031      	str	r1, [r6, #0]
 8008538:	0606      	lsls	r6, r0, #24
 800853a:	d501      	bpl.n	8008540 <_printf_i+0xbc>
 800853c:	681d      	ldr	r5, [r3, #0]
 800853e:	e003      	b.n	8008548 <_printf_i+0xc4>
 8008540:	0645      	lsls	r5, r0, #25
 8008542:	d5fb      	bpl.n	800853c <_printf_i+0xb8>
 8008544:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008548:	2d00      	cmp	r5, #0
 800854a:	da03      	bge.n	8008554 <_printf_i+0xd0>
 800854c:	232d      	movs	r3, #45	@ 0x2d
 800854e:	426d      	negs	r5, r5
 8008550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008554:	4858      	ldr	r0, [pc, #352]	@ (80086b8 <_printf_i+0x234>)
 8008556:	230a      	movs	r3, #10
 8008558:	e011      	b.n	800857e <_printf_i+0xfa>
 800855a:	6821      	ldr	r1, [r4, #0]
 800855c:	6833      	ldr	r3, [r6, #0]
 800855e:	0608      	lsls	r0, r1, #24
 8008560:	f853 5b04 	ldr.w	r5, [r3], #4
 8008564:	d402      	bmi.n	800856c <_printf_i+0xe8>
 8008566:	0649      	lsls	r1, r1, #25
 8008568:	bf48      	it	mi
 800856a:	b2ad      	uxthmi	r5, r5
 800856c:	2f6f      	cmp	r7, #111	@ 0x6f
 800856e:	4852      	ldr	r0, [pc, #328]	@ (80086b8 <_printf_i+0x234>)
 8008570:	6033      	str	r3, [r6, #0]
 8008572:	bf14      	ite	ne
 8008574:	230a      	movne	r3, #10
 8008576:	2308      	moveq	r3, #8
 8008578:	2100      	movs	r1, #0
 800857a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800857e:	6866      	ldr	r6, [r4, #4]
 8008580:	60a6      	str	r6, [r4, #8]
 8008582:	2e00      	cmp	r6, #0
 8008584:	db05      	blt.n	8008592 <_printf_i+0x10e>
 8008586:	6821      	ldr	r1, [r4, #0]
 8008588:	432e      	orrs	r6, r5
 800858a:	f021 0104 	bic.w	r1, r1, #4
 800858e:	6021      	str	r1, [r4, #0]
 8008590:	d04b      	beq.n	800862a <_printf_i+0x1a6>
 8008592:	4616      	mov	r6, r2
 8008594:	fbb5 f1f3 	udiv	r1, r5, r3
 8008598:	fb03 5711 	mls	r7, r3, r1, r5
 800859c:	5dc7      	ldrb	r7, [r0, r7]
 800859e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085a2:	462f      	mov	r7, r5
 80085a4:	42bb      	cmp	r3, r7
 80085a6:	460d      	mov	r5, r1
 80085a8:	d9f4      	bls.n	8008594 <_printf_i+0x110>
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d10b      	bne.n	80085c6 <_printf_i+0x142>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	07df      	lsls	r7, r3, #31
 80085b2:	d508      	bpl.n	80085c6 <_printf_i+0x142>
 80085b4:	6923      	ldr	r3, [r4, #16]
 80085b6:	6861      	ldr	r1, [r4, #4]
 80085b8:	4299      	cmp	r1, r3
 80085ba:	bfde      	ittt	le
 80085bc:	2330      	movle	r3, #48	@ 0x30
 80085be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085c6:	1b92      	subs	r2, r2, r6
 80085c8:	6122      	str	r2, [r4, #16]
 80085ca:	f8cd a000 	str.w	sl, [sp]
 80085ce:	464b      	mov	r3, r9
 80085d0:	aa03      	add	r2, sp, #12
 80085d2:	4621      	mov	r1, r4
 80085d4:	4640      	mov	r0, r8
 80085d6:	f7ff fee7 	bl	80083a8 <_printf_common>
 80085da:	3001      	adds	r0, #1
 80085dc:	d14a      	bne.n	8008674 <_printf_i+0x1f0>
 80085de:	f04f 30ff 	mov.w	r0, #4294967295
 80085e2:	b004      	add	sp, #16
 80085e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	f043 0320 	orr.w	r3, r3, #32
 80085ee:	6023      	str	r3, [r4, #0]
 80085f0:	4832      	ldr	r0, [pc, #200]	@ (80086bc <_printf_i+0x238>)
 80085f2:	2778      	movs	r7, #120	@ 0x78
 80085f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	6831      	ldr	r1, [r6, #0]
 80085fc:	061f      	lsls	r7, r3, #24
 80085fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8008602:	d402      	bmi.n	800860a <_printf_i+0x186>
 8008604:	065f      	lsls	r7, r3, #25
 8008606:	bf48      	it	mi
 8008608:	b2ad      	uxthmi	r5, r5
 800860a:	6031      	str	r1, [r6, #0]
 800860c:	07d9      	lsls	r1, r3, #31
 800860e:	bf44      	itt	mi
 8008610:	f043 0320 	orrmi.w	r3, r3, #32
 8008614:	6023      	strmi	r3, [r4, #0]
 8008616:	b11d      	cbz	r5, 8008620 <_printf_i+0x19c>
 8008618:	2310      	movs	r3, #16
 800861a:	e7ad      	b.n	8008578 <_printf_i+0xf4>
 800861c:	4826      	ldr	r0, [pc, #152]	@ (80086b8 <_printf_i+0x234>)
 800861e:	e7e9      	b.n	80085f4 <_printf_i+0x170>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	f023 0320 	bic.w	r3, r3, #32
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	e7f6      	b.n	8008618 <_printf_i+0x194>
 800862a:	4616      	mov	r6, r2
 800862c:	e7bd      	b.n	80085aa <_printf_i+0x126>
 800862e:	6833      	ldr	r3, [r6, #0]
 8008630:	6825      	ldr	r5, [r4, #0]
 8008632:	6961      	ldr	r1, [r4, #20]
 8008634:	1d18      	adds	r0, r3, #4
 8008636:	6030      	str	r0, [r6, #0]
 8008638:	062e      	lsls	r6, r5, #24
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	d501      	bpl.n	8008642 <_printf_i+0x1be>
 800863e:	6019      	str	r1, [r3, #0]
 8008640:	e002      	b.n	8008648 <_printf_i+0x1c4>
 8008642:	0668      	lsls	r0, r5, #25
 8008644:	d5fb      	bpl.n	800863e <_printf_i+0x1ba>
 8008646:	8019      	strh	r1, [r3, #0]
 8008648:	2300      	movs	r3, #0
 800864a:	6123      	str	r3, [r4, #16]
 800864c:	4616      	mov	r6, r2
 800864e:	e7bc      	b.n	80085ca <_printf_i+0x146>
 8008650:	6833      	ldr	r3, [r6, #0]
 8008652:	1d1a      	adds	r2, r3, #4
 8008654:	6032      	str	r2, [r6, #0]
 8008656:	681e      	ldr	r6, [r3, #0]
 8008658:	6862      	ldr	r2, [r4, #4]
 800865a:	2100      	movs	r1, #0
 800865c:	4630      	mov	r0, r6
 800865e:	f7f7 fdb7 	bl	80001d0 <memchr>
 8008662:	b108      	cbz	r0, 8008668 <_printf_i+0x1e4>
 8008664:	1b80      	subs	r0, r0, r6
 8008666:	6060      	str	r0, [r4, #4]
 8008668:	6863      	ldr	r3, [r4, #4]
 800866a:	6123      	str	r3, [r4, #16]
 800866c:	2300      	movs	r3, #0
 800866e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008672:	e7aa      	b.n	80085ca <_printf_i+0x146>
 8008674:	6923      	ldr	r3, [r4, #16]
 8008676:	4632      	mov	r2, r6
 8008678:	4649      	mov	r1, r9
 800867a:	4640      	mov	r0, r8
 800867c:	47d0      	blx	sl
 800867e:	3001      	adds	r0, #1
 8008680:	d0ad      	beq.n	80085de <_printf_i+0x15a>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	079b      	lsls	r3, r3, #30
 8008686:	d413      	bmi.n	80086b0 <_printf_i+0x22c>
 8008688:	68e0      	ldr	r0, [r4, #12]
 800868a:	9b03      	ldr	r3, [sp, #12]
 800868c:	4298      	cmp	r0, r3
 800868e:	bfb8      	it	lt
 8008690:	4618      	movlt	r0, r3
 8008692:	e7a6      	b.n	80085e2 <_printf_i+0x15e>
 8008694:	2301      	movs	r3, #1
 8008696:	4632      	mov	r2, r6
 8008698:	4649      	mov	r1, r9
 800869a:	4640      	mov	r0, r8
 800869c:	47d0      	blx	sl
 800869e:	3001      	adds	r0, #1
 80086a0:	d09d      	beq.n	80085de <_printf_i+0x15a>
 80086a2:	3501      	adds	r5, #1
 80086a4:	68e3      	ldr	r3, [r4, #12]
 80086a6:	9903      	ldr	r1, [sp, #12]
 80086a8:	1a5b      	subs	r3, r3, r1
 80086aa:	42ab      	cmp	r3, r5
 80086ac:	dcf2      	bgt.n	8008694 <_printf_i+0x210>
 80086ae:	e7eb      	b.n	8008688 <_printf_i+0x204>
 80086b0:	2500      	movs	r5, #0
 80086b2:	f104 0619 	add.w	r6, r4, #25
 80086b6:	e7f5      	b.n	80086a4 <_printf_i+0x220>
 80086b8:	0800d0d2 	.word	0x0800d0d2
 80086bc:	0800d0e3 	.word	0x0800d0e3

080086c0 <_scanf_float>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	b087      	sub	sp, #28
 80086c6:	4691      	mov	r9, r2
 80086c8:	9303      	str	r3, [sp, #12]
 80086ca:	688b      	ldr	r3, [r1, #8]
 80086cc:	1e5a      	subs	r2, r3, #1
 80086ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80086d2:	bf81      	itttt	hi
 80086d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80086d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80086dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80086e0:	608b      	strhi	r3, [r1, #8]
 80086e2:	680b      	ldr	r3, [r1, #0]
 80086e4:	460a      	mov	r2, r1
 80086e6:	f04f 0500 	mov.w	r5, #0
 80086ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80086ee:	f842 3b1c 	str.w	r3, [r2], #28
 80086f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80086f6:	4680      	mov	r8, r0
 80086f8:	460c      	mov	r4, r1
 80086fa:	bf98      	it	ls
 80086fc:	f04f 0b00 	movls.w	fp, #0
 8008700:	9201      	str	r2, [sp, #4]
 8008702:	4616      	mov	r6, r2
 8008704:	46aa      	mov	sl, r5
 8008706:	462f      	mov	r7, r5
 8008708:	9502      	str	r5, [sp, #8]
 800870a:	68a2      	ldr	r2, [r4, #8]
 800870c:	b15a      	cbz	r2, 8008726 <_scanf_float+0x66>
 800870e:	f8d9 3000 	ldr.w	r3, [r9]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2b4e      	cmp	r3, #78	@ 0x4e
 8008716:	d863      	bhi.n	80087e0 <_scanf_float+0x120>
 8008718:	2b40      	cmp	r3, #64	@ 0x40
 800871a:	d83b      	bhi.n	8008794 <_scanf_float+0xd4>
 800871c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008720:	b2c8      	uxtb	r0, r1
 8008722:	280e      	cmp	r0, #14
 8008724:	d939      	bls.n	800879a <_scanf_float+0xda>
 8008726:	b11f      	cbz	r7, 8008730 <_scanf_float+0x70>
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008734:	f1ba 0f01 	cmp.w	sl, #1
 8008738:	f200 8114 	bhi.w	8008964 <_scanf_float+0x2a4>
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	429e      	cmp	r6, r3
 8008740:	f200 8105 	bhi.w	800894e <_scanf_float+0x28e>
 8008744:	2001      	movs	r0, #1
 8008746:	b007      	add	sp, #28
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008750:	2a0d      	cmp	r2, #13
 8008752:	d8e8      	bhi.n	8008726 <_scanf_float+0x66>
 8008754:	a101      	add	r1, pc, #4	@ (adr r1, 800875c <_scanf_float+0x9c>)
 8008756:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800875a:	bf00      	nop
 800875c:	080088a5 	.word	0x080088a5
 8008760:	08008727 	.word	0x08008727
 8008764:	08008727 	.word	0x08008727
 8008768:	08008727 	.word	0x08008727
 800876c:	08008901 	.word	0x08008901
 8008770:	080088db 	.word	0x080088db
 8008774:	08008727 	.word	0x08008727
 8008778:	08008727 	.word	0x08008727
 800877c:	080088b3 	.word	0x080088b3
 8008780:	08008727 	.word	0x08008727
 8008784:	08008727 	.word	0x08008727
 8008788:	08008727 	.word	0x08008727
 800878c:	08008727 	.word	0x08008727
 8008790:	0800886f 	.word	0x0800886f
 8008794:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008798:	e7da      	b.n	8008750 <_scanf_float+0x90>
 800879a:	290e      	cmp	r1, #14
 800879c:	d8c3      	bhi.n	8008726 <_scanf_float+0x66>
 800879e:	a001      	add	r0, pc, #4	@ (adr r0, 80087a4 <_scanf_float+0xe4>)
 80087a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80087a4:	0800885f 	.word	0x0800885f
 80087a8:	08008727 	.word	0x08008727
 80087ac:	0800885f 	.word	0x0800885f
 80087b0:	080088ef 	.word	0x080088ef
 80087b4:	08008727 	.word	0x08008727
 80087b8:	08008801 	.word	0x08008801
 80087bc:	08008845 	.word	0x08008845
 80087c0:	08008845 	.word	0x08008845
 80087c4:	08008845 	.word	0x08008845
 80087c8:	08008845 	.word	0x08008845
 80087cc:	08008845 	.word	0x08008845
 80087d0:	08008845 	.word	0x08008845
 80087d4:	08008845 	.word	0x08008845
 80087d8:	08008845 	.word	0x08008845
 80087dc:	08008845 	.word	0x08008845
 80087e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80087e2:	d809      	bhi.n	80087f8 <_scanf_float+0x138>
 80087e4:	2b60      	cmp	r3, #96	@ 0x60
 80087e6:	d8b1      	bhi.n	800874c <_scanf_float+0x8c>
 80087e8:	2b54      	cmp	r3, #84	@ 0x54
 80087ea:	d07b      	beq.n	80088e4 <_scanf_float+0x224>
 80087ec:	2b59      	cmp	r3, #89	@ 0x59
 80087ee:	d19a      	bne.n	8008726 <_scanf_float+0x66>
 80087f0:	2d07      	cmp	r5, #7
 80087f2:	d198      	bne.n	8008726 <_scanf_float+0x66>
 80087f4:	2508      	movs	r5, #8
 80087f6:	e02f      	b.n	8008858 <_scanf_float+0x198>
 80087f8:	2b74      	cmp	r3, #116	@ 0x74
 80087fa:	d073      	beq.n	80088e4 <_scanf_float+0x224>
 80087fc:	2b79      	cmp	r3, #121	@ 0x79
 80087fe:	e7f6      	b.n	80087ee <_scanf_float+0x12e>
 8008800:	6821      	ldr	r1, [r4, #0]
 8008802:	05c8      	lsls	r0, r1, #23
 8008804:	d51e      	bpl.n	8008844 <_scanf_float+0x184>
 8008806:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800880a:	6021      	str	r1, [r4, #0]
 800880c:	3701      	adds	r7, #1
 800880e:	f1bb 0f00 	cmp.w	fp, #0
 8008812:	d003      	beq.n	800881c <_scanf_float+0x15c>
 8008814:	3201      	adds	r2, #1
 8008816:	f10b 3bff 	add.w	fp, fp, #4294967295
 800881a:	60a2      	str	r2, [r4, #8]
 800881c:	68a3      	ldr	r3, [r4, #8]
 800881e:	3b01      	subs	r3, #1
 8008820:	60a3      	str	r3, [r4, #8]
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	3301      	adds	r3, #1
 8008826:	6123      	str	r3, [r4, #16]
 8008828:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800882c:	3b01      	subs	r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	f8c9 3004 	str.w	r3, [r9, #4]
 8008834:	f340 8082 	ble.w	800893c <_scanf_float+0x27c>
 8008838:	f8d9 3000 	ldr.w	r3, [r9]
 800883c:	3301      	adds	r3, #1
 800883e:	f8c9 3000 	str.w	r3, [r9]
 8008842:	e762      	b.n	800870a <_scanf_float+0x4a>
 8008844:	eb1a 0105 	adds.w	r1, sl, r5
 8008848:	f47f af6d 	bne.w	8008726 <_scanf_float+0x66>
 800884c:	6822      	ldr	r2, [r4, #0]
 800884e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008852:	6022      	str	r2, [r4, #0]
 8008854:	460d      	mov	r5, r1
 8008856:	468a      	mov	sl, r1
 8008858:	f806 3b01 	strb.w	r3, [r6], #1
 800885c:	e7de      	b.n	800881c <_scanf_float+0x15c>
 800885e:	6822      	ldr	r2, [r4, #0]
 8008860:	0610      	lsls	r0, r2, #24
 8008862:	f57f af60 	bpl.w	8008726 <_scanf_float+0x66>
 8008866:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800886a:	6022      	str	r2, [r4, #0]
 800886c:	e7f4      	b.n	8008858 <_scanf_float+0x198>
 800886e:	f1ba 0f00 	cmp.w	sl, #0
 8008872:	d10c      	bne.n	800888e <_scanf_float+0x1ce>
 8008874:	b977      	cbnz	r7, 8008894 <_scanf_float+0x1d4>
 8008876:	6822      	ldr	r2, [r4, #0]
 8008878:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800887c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008880:	d108      	bne.n	8008894 <_scanf_float+0x1d4>
 8008882:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008886:	6022      	str	r2, [r4, #0]
 8008888:	f04f 0a01 	mov.w	sl, #1
 800888c:	e7e4      	b.n	8008858 <_scanf_float+0x198>
 800888e:	f1ba 0f02 	cmp.w	sl, #2
 8008892:	d050      	beq.n	8008936 <_scanf_float+0x276>
 8008894:	2d01      	cmp	r5, #1
 8008896:	d002      	beq.n	800889e <_scanf_float+0x1de>
 8008898:	2d04      	cmp	r5, #4
 800889a:	f47f af44 	bne.w	8008726 <_scanf_float+0x66>
 800889e:	3501      	adds	r5, #1
 80088a0:	b2ed      	uxtb	r5, r5
 80088a2:	e7d9      	b.n	8008858 <_scanf_float+0x198>
 80088a4:	f1ba 0f01 	cmp.w	sl, #1
 80088a8:	f47f af3d 	bne.w	8008726 <_scanf_float+0x66>
 80088ac:	f04f 0a02 	mov.w	sl, #2
 80088b0:	e7d2      	b.n	8008858 <_scanf_float+0x198>
 80088b2:	b975      	cbnz	r5, 80088d2 <_scanf_float+0x212>
 80088b4:	2f00      	cmp	r7, #0
 80088b6:	f47f af37 	bne.w	8008728 <_scanf_float+0x68>
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80088c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80088c4:	f040 8103 	bne.w	8008ace <_scanf_float+0x40e>
 80088c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088cc:	6022      	str	r2, [r4, #0]
 80088ce:	2501      	movs	r5, #1
 80088d0:	e7c2      	b.n	8008858 <_scanf_float+0x198>
 80088d2:	2d03      	cmp	r5, #3
 80088d4:	d0e3      	beq.n	800889e <_scanf_float+0x1de>
 80088d6:	2d05      	cmp	r5, #5
 80088d8:	e7df      	b.n	800889a <_scanf_float+0x1da>
 80088da:	2d02      	cmp	r5, #2
 80088dc:	f47f af23 	bne.w	8008726 <_scanf_float+0x66>
 80088e0:	2503      	movs	r5, #3
 80088e2:	e7b9      	b.n	8008858 <_scanf_float+0x198>
 80088e4:	2d06      	cmp	r5, #6
 80088e6:	f47f af1e 	bne.w	8008726 <_scanf_float+0x66>
 80088ea:	2507      	movs	r5, #7
 80088ec:	e7b4      	b.n	8008858 <_scanf_float+0x198>
 80088ee:	6822      	ldr	r2, [r4, #0]
 80088f0:	0591      	lsls	r1, r2, #22
 80088f2:	f57f af18 	bpl.w	8008726 <_scanf_float+0x66>
 80088f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80088fa:	6022      	str	r2, [r4, #0]
 80088fc:	9702      	str	r7, [sp, #8]
 80088fe:	e7ab      	b.n	8008858 <_scanf_float+0x198>
 8008900:	6822      	ldr	r2, [r4, #0]
 8008902:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008906:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800890a:	d005      	beq.n	8008918 <_scanf_float+0x258>
 800890c:	0550      	lsls	r0, r2, #21
 800890e:	f57f af0a 	bpl.w	8008726 <_scanf_float+0x66>
 8008912:	2f00      	cmp	r7, #0
 8008914:	f000 80db 	beq.w	8008ace <_scanf_float+0x40e>
 8008918:	0591      	lsls	r1, r2, #22
 800891a:	bf58      	it	pl
 800891c:	9902      	ldrpl	r1, [sp, #8]
 800891e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008922:	bf58      	it	pl
 8008924:	1a79      	subpl	r1, r7, r1
 8008926:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800892a:	bf58      	it	pl
 800892c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008930:	6022      	str	r2, [r4, #0]
 8008932:	2700      	movs	r7, #0
 8008934:	e790      	b.n	8008858 <_scanf_float+0x198>
 8008936:	f04f 0a03 	mov.w	sl, #3
 800893a:	e78d      	b.n	8008858 <_scanf_float+0x198>
 800893c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008940:	4649      	mov	r1, r9
 8008942:	4640      	mov	r0, r8
 8008944:	4798      	blx	r3
 8008946:	2800      	cmp	r0, #0
 8008948:	f43f aedf 	beq.w	800870a <_scanf_float+0x4a>
 800894c:	e6eb      	b.n	8008726 <_scanf_float+0x66>
 800894e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008952:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008956:	464a      	mov	r2, r9
 8008958:	4640      	mov	r0, r8
 800895a:	4798      	blx	r3
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	3b01      	subs	r3, #1
 8008960:	6123      	str	r3, [r4, #16]
 8008962:	e6eb      	b.n	800873c <_scanf_float+0x7c>
 8008964:	1e6b      	subs	r3, r5, #1
 8008966:	2b06      	cmp	r3, #6
 8008968:	d824      	bhi.n	80089b4 <_scanf_float+0x2f4>
 800896a:	2d02      	cmp	r5, #2
 800896c:	d836      	bhi.n	80089dc <_scanf_float+0x31c>
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	429e      	cmp	r6, r3
 8008972:	f67f aee7 	bls.w	8008744 <_scanf_float+0x84>
 8008976:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800897a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800897e:	464a      	mov	r2, r9
 8008980:	4640      	mov	r0, r8
 8008982:	4798      	blx	r3
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	3b01      	subs	r3, #1
 8008988:	6123      	str	r3, [r4, #16]
 800898a:	e7f0      	b.n	800896e <_scanf_float+0x2ae>
 800898c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008990:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008994:	464a      	mov	r2, r9
 8008996:	4640      	mov	r0, r8
 8008998:	4798      	blx	r3
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	3b01      	subs	r3, #1
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089a4:	fa5f fa8a 	uxtb.w	sl, sl
 80089a8:	f1ba 0f02 	cmp.w	sl, #2
 80089ac:	d1ee      	bne.n	800898c <_scanf_float+0x2cc>
 80089ae:	3d03      	subs	r5, #3
 80089b0:	b2ed      	uxtb	r5, r5
 80089b2:	1b76      	subs	r6, r6, r5
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	05da      	lsls	r2, r3, #23
 80089b8:	d530      	bpl.n	8008a1c <_scanf_float+0x35c>
 80089ba:	055b      	lsls	r3, r3, #21
 80089bc:	d511      	bpl.n	80089e2 <_scanf_float+0x322>
 80089be:	9b01      	ldr	r3, [sp, #4]
 80089c0:	429e      	cmp	r6, r3
 80089c2:	f67f aebf 	bls.w	8008744 <_scanf_float+0x84>
 80089c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089ce:	464a      	mov	r2, r9
 80089d0:	4640      	mov	r0, r8
 80089d2:	4798      	blx	r3
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	6123      	str	r3, [r4, #16]
 80089da:	e7f0      	b.n	80089be <_scanf_float+0x2fe>
 80089dc:	46aa      	mov	sl, r5
 80089de:	46b3      	mov	fp, r6
 80089e0:	e7de      	b.n	80089a0 <_scanf_float+0x2e0>
 80089e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80089e6:	6923      	ldr	r3, [r4, #16]
 80089e8:	2965      	cmp	r1, #101	@ 0x65
 80089ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80089ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80089f2:	6123      	str	r3, [r4, #16]
 80089f4:	d00c      	beq.n	8008a10 <_scanf_float+0x350>
 80089f6:	2945      	cmp	r1, #69	@ 0x45
 80089f8:	d00a      	beq.n	8008a10 <_scanf_float+0x350>
 80089fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089fe:	464a      	mov	r2, r9
 8008a00:	4640      	mov	r0, r8
 8008a02:	4798      	blx	r3
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	1eb5      	subs	r5, r6, #2
 8008a0e:	6123      	str	r3, [r4, #16]
 8008a10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a14:	464a      	mov	r2, r9
 8008a16:	4640      	mov	r0, r8
 8008a18:	4798      	blx	r3
 8008a1a:	462e      	mov	r6, r5
 8008a1c:	6822      	ldr	r2, [r4, #0]
 8008a1e:	f012 0210 	ands.w	r2, r2, #16
 8008a22:	d001      	beq.n	8008a28 <_scanf_float+0x368>
 8008a24:	2000      	movs	r0, #0
 8008a26:	e68e      	b.n	8008746 <_scanf_float+0x86>
 8008a28:	7032      	strb	r2, [r6, #0]
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a34:	d125      	bne.n	8008a82 <_scanf_float+0x3c2>
 8008a36:	9b02      	ldr	r3, [sp, #8]
 8008a38:	429f      	cmp	r7, r3
 8008a3a:	d00a      	beq.n	8008a52 <_scanf_float+0x392>
 8008a3c:	1bda      	subs	r2, r3, r7
 8008a3e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008a42:	429e      	cmp	r6, r3
 8008a44:	bf28      	it	cs
 8008a46:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008a4a:	4922      	ldr	r1, [pc, #136]	@ (8008ad4 <_scanf_float+0x414>)
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f000 f9ad 	bl	8008dac <siprintf>
 8008a52:	9901      	ldr	r1, [sp, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	4640      	mov	r0, r8
 8008a58:	f002 fdf2 	bl	800b640 <_strtod_r>
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	6821      	ldr	r1, [r4, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f011 0f02 	tst.w	r1, #2
 8008a66:	ec57 6b10 	vmov	r6, r7, d0
 8008a6a:	f103 0204 	add.w	r2, r3, #4
 8008a6e:	d015      	beq.n	8008a9c <_scanf_float+0x3dc>
 8008a70:	9903      	ldr	r1, [sp, #12]
 8008a72:	600a      	str	r2, [r1, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	e9c3 6700 	strd	r6, r7, [r3]
 8008a7a:	68e3      	ldr	r3, [r4, #12]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	60e3      	str	r3, [r4, #12]
 8008a80:	e7d0      	b.n	8008a24 <_scanf_float+0x364>
 8008a82:	9b04      	ldr	r3, [sp, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d0e4      	beq.n	8008a52 <_scanf_float+0x392>
 8008a88:	9905      	ldr	r1, [sp, #20]
 8008a8a:	230a      	movs	r3, #10
 8008a8c:	3101      	adds	r1, #1
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f002 fe56 	bl	800b740 <_strtol_r>
 8008a94:	9b04      	ldr	r3, [sp, #16]
 8008a96:	9e05      	ldr	r6, [sp, #20]
 8008a98:	1ac2      	subs	r2, r0, r3
 8008a9a:	e7d0      	b.n	8008a3e <_scanf_float+0x37e>
 8008a9c:	f011 0f04 	tst.w	r1, #4
 8008aa0:	9903      	ldr	r1, [sp, #12]
 8008aa2:	600a      	str	r2, [r1, #0]
 8008aa4:	d1e6      	bne.n	8008a74 <_scanf_float+0x3b4>
 8008aa6:	681d      	ldr	r5, [r3, #0]
 8008aa8:	4632      	mov	r2, r6
 8008aaa:	463b      	mov	r3, r7
 8008aac:	4630      	mov	r0, r6
 8008aae:	4639      	mov	r1, r7
 8008ab0:	f7f8 f83c 	bl	8000b2c <__aeabi_dcmpun>
 8008ab4:	b128      	cbz	r0, 8008ac2 <_scanf_float+0x402>
 8008ab6:	4808      	ldr	r0, [pc, #32]	@ (8008ad8 <_scanf_float+0x418>)
 8008ab8:	f000 fb98 	bl	80091ec <nanf>
 8008abc:	ed85 0a00 	vstr	s0, [r5]
 8008ac0:	e7db      	b.n	8008a7a <_scanf_float+0x3ba>
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	f7f8 f88f 	bl	8000be8 <__aeabi_d2f>
 8008aca:	6028      	str	r0, [r5, #0]
 8008acc:	e7d5      	b.n	8008a7a <_scanf_float+0x3ba>
 8008ace:	2700      	movs	r7, #0
 8008ad0:	e62e      	b.n	8008730 <_scanf_float+0x70>
 8008ad2:	bf00      	nop
 8008ad4:	0800d0f4 	.word	0x0800d0f4
 8008ad8:	0800d1a5 	.word	0x0800d1a5

08008adc <std>:
 8008adc:	2300      	movs	r3, #0
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aea:	6083      	str	r3, [r0, #8]
 8008aec:	8181      	strh	r1, [r0, #12]
 8008aee:	6643      	str	r3, [r0, #100]	@ 0x64
 8008af0:	81c2      	strh	r2, [r0, #14]
 8008af2:	6183      	str	r3, [r0, #24]
 8008af4:	4619      	mov	r1, r3
 8008af6:	2208      	movs	r2, #8
 8008af8:	305c      	adds	r0, #92	@ 0x5c
 8008afa:	f000 fa51 	bl	8008fa0 <memset>
 8008afe:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <std+0x58>)
 8008b00:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b02:	4b0d      	ldr	r3, [pc, #52]	@ (8008b38 <std+0x5c>)
 8008b04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008b06:	4b0d      	ldr	r3, [pc, #52]	@ (8008b3c <std+0x60>)
 8008b08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b40 <std+0x64>)
 8008b0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b44 <std+0x68>)
 8008b10:	6224      	str	r4, [r4, #32]
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d006      	beq.n	8008b24 <std+0x48>
 8008b16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b1a:	4294      	cmp	r4, r2
 8008b1c:	d002      	beq.n	8008b24 <std+0x48>
 8008b1e:	33d0      	adds	r3, #208	@ 0xd0
 8008b20:	429c      	cmp	r4, r3
 8008b22:	d105      	bne.n	8008b30 <std+0x54>
 8008b24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b2c:	f000 bb4c 	b.w	80091c8 <__retarget_lock_init_recursive>
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	bf00      	nop
 8008b34:	08008df1 	.word	0x08008df1
 8008b38:	08008e13 	.word	0x08008e13
 8008b3c:	08008e4b 	.word	0x08008e4b
 8008b40:	08008e6f 	.word	0x08008e6f
 8008b44:	20000d64 	.word	0x20000d64

08008b48 <stdio_exit_handler>:
 8008b48:	4a02      	ldr	r2, [pc, #8]	@ (8008b54 <stdio_exit_handler+0xc>)
 8008b4a:	4903      	ldr	r1, [pc, #12]	@ (8008b58 <stdio_exit_handler+0x10>)
 8008b4c:	4803      	ldr	r0, [pc, #12]	@ (8008b5c <stdio_exit_handler+0x14>)
 8008b4e:	f000 b869 	b.w	8008c24 <_fwalk_sglue>
 8008b52:	bf00      	nop
 8008b54:	20000054 	.word	0x20000054
 8008b58:	0800bd81 	.word	0x0800bd81
 8008b5c:	20000064 	.word	0x20000064

08008b60 <cleanup_stdio>:
 8008b60:	6841      	ldr	r1, [r0, #4]
 8008b62:	4b0c      	ldr	r3, [pc, #48]	@ (8008b94 <cleanup_stdio+0x34>)
 8008b64:	4299      	cmp	r1, r3
 8008b66:	b510      	push	{r4, lr}
 8008b68:	4604      	mov	r4, r0
 8008b6a:	d001      	beq.n	8008b70 <cleanup_stdio+0x10>
 8008b6c:	f003 f908 	bl	800bd80 <_fflush_r>
 8008b70:	68a1      	ldr	r1, [r4, #8]
 8008b72:	4b09      	ldr	r3, [pc, #36]	@ (8008b98 <cleanup_stdio+0x38>)
 8008b74:	4299      	cmp	r1, r3
 8008b76:	d002      	beq.n	8008b7e <cleanup_stdio+0x1e>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f003 f901 	bl	800bd80 <_fflush_r>
 8008b7e:	68e1      	ldr	r1, [r4, #12]
 8008b80:	4b06      	ldr	r3, [pc, #24]	@ (8008b9c <cleanup_stdio+0x3c>)
 8008b82:	4299      	cmp	r1, r3
 8008b84:	d004      	beq.n	8008b90 <cleanup_stdio+0x30>
 8008b86:	4620      	mov	r0, r4
 8008b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b8c:	f003 b8f8 	b.w	800bd80 <_fflush_r>
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	bf00      	nop
 8008b94:	20000d64 	.word	0x20000d64
 8008b98:	20000dcc 	.word	0x20000dcc
 8008b9c:	20000e34 	.word	0x20000e34

08008ba0 <global_stdio_init.part.0>:
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd0 <global_stdio_init.part.0+0x30>)
 8008ba4:	4c0b      	ldr	r4, [pc, #44]	@ (8008bd4 <global_stdio_init.part.0+0x34>)
 8008ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8008bd8 <global_stdio_init.part.0+0x38>)
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	4620      	mov	r0, r4
 8008bac:	2200      	movs	r2, #0
 8008bae:	2104      	movs	r1, #4
 8008bb0:	f7ff ff94 	bl	8008adc <std>
 8008bb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008bb8:	2201      	movs	r2, #1
 8008bba:	2109      	movs	r1, #9
 8008bbc:	f7ff ff8e 	bl	8008adc <std>
 8008bc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bca:	2112      	movs	r1, #18
 8008bcc:	f7ff bf86 	b.w	8008adc <std>
 8008bd0:	20000e9c 	.word	0x20000e9c
 8008bd4:	20000d64 	.word	0x20000d64
 8008bd8:	08008b49 	.word	0x08008b49

08008bdc <__sfp_lock_acquire>:
 8008bdc:	4801      	ldr	r0, [pc, #4]	@ (8008be4 <__sfp_lock_acquire+0x8>)
 8008bde:	f000 baf4 	b.w	80091ca <__retarget_lock_acquire_recursive>
 8008be2:	bf00      	nop
 8008be4:	20000ea5 	.word	0x20000ea5

08008be8 <__sfp_lock_release>:
 8008be8:	4801      	ldr	r0, [pc, #4]	@ (8008bf0 <__sfp_lock_release+0x8>)
 8008bea:	f000 baef 	b.w	80091cc <__retarget_lock_release_recursive>
 8008bee:	bf00      	nop
 8008bf0:	20000ea5 	.word	0x20000ea5

08008bf4 <__sinit>:
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	f7ff fff0 	bl	8008bdc <__sfp_lock_acquire>
 8008bfc:	6a23      	ldr	r3, [r4, #32]
 8008bfe:	b11b      	cbz	r3, 8008c08 <__sinit+0x14>
 8008c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c04:	f7ff bff0 	b.w	8008be8 <__sfp_lock_release>
 8008c08:	4b04      	ldr	r3, [pc, #16]	@ (8008c1c <__sinit+0x28>)
 8008c0a:	6223      	str	r3, [r4, #32]
 8008c0c:	4b04      	ldr	r3, [pc, #16]	@ (8008c20 <__sinit+0x2c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f5      	bne.n	8008c00 <__sinit+0xc>
 8008c14:	f7ff ffc4 	bl	8008ba0 <global_stdio_init.part.0>
 8008c18:	e7f2      	b.n	8008c00 <__sinit+0xc>
 8008c1a:	bf00      	nop
 8008c1c:	08008b61 	.word	0x08008b61
 8008c20:	20000e9c 	.word	0x20000e9c

08008c24 <_fwalk_sglue>:
 8008c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c28:	4607      	mov	r7, r0
 8008c2a:	4688      	mov	r8, r1
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	2600      	movs	r6, #0
 8008c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c34:	f1b9 0901 	subs.w	r9, r9, #1
 8008c38:	d505      	bpl.n	8008c46 <_fwalk_sglue+0x22>
 8008c3a:	6824      	ldr	r4, [r4, #0]
 8008c3c:	2c00      	cmp	r4, #0
 8008c3e:	d1f7      	bne.n	8008c30 <_fwalk_sglue+0xc>
 8008c40:	4630      	mov	r0, r6
 8008c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c46:	89ab      	ldrh	r3, [r5, #12]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d907      	bls.n	8008c5c <_fwalk_sglue+0x38>
 8008c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c50:	3301      	adds	r3, #1
 8008c52:	d003      	beq.n	8008c5c <_fwalk_sglue+0x38>
 8008c54:	4629      	mov	r1, r5
 8008c56:	4638      	mov	r0, r7
 8008c58:	47c0      	blx	r8
 8008c5a:	4306      	orrs	r6, r0
 8008c5c:	3568      	adds	r5, #104	@ 0x68
 8008c5e:	e7e9      	b.n	8008c34 <_fwalk_sglue+0x10>

08008c60 <iprintf>:
 8008c60:	b40f      	push	{r0, r1, r2, r3}
 8008c62:	b507      	push	{r0, r1, r2, lr}
 8008c64:	4906      	ldr	r1, [pc, #24]	@ (8008c80 <iprintf+0x20>)
 8008c66:	ab04      	add	r3, sp, #16
 8008c68:	6808      	ldr	r0, [r1, #0]
 8008c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c6e:	6881      	ldr	r1, [r0, #8]
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	f002 fee9 	bl	800ba48 <_vfiprintf_r>
 8008c76:	b003      	add	sp, #12
 8008c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c7c:	b004      	add	sp, #16
 8008c7e:	4770      	bx	lr
 8008c80:	20000060 	.word	0x20000060

08008c84 <_puts_r>:
 8008c84:	6a03      	ldr	r3, [r0, #32]
 8008c86:	b570      	push	{r4, r5, r6, lr}
 8008c88:	6884      	ldr	r4, [r0, #8]
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	460e      	mov	r6, r1
 8008c8e:	b90b      	cbnz	r3, 8008c94 <_puts_r+0x10>
 8008c90:	f7ff ffb0 	bl	8008bf4 <__sinit>
 8008c94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c96:	07db      	lsls	r3, r3, #31
 8008c98:	d405      	bmi.n	8008ca6 <_puts_r+0x22>
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	0598      	lsls	r0, r3, #22
 8008c9e:	d402      	bmi.n	8008ca6 <_puts_r+0x22>
 8008ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ca2:	f000 fa92 	bl	80091ca <__retarget_lock_acquire_recursive>
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	0719      	lsls	r1, r3, #28
 8008caa:	d502      	bpl.n	8008cb2 <_puts_r+0x2e>
 8008cac:	6923      	ldr	r3, [r4, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d135      	bne.n	8008d1e <_puts_r+0x9a>
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f000 f91d 	bl	8008ef4 <__swsetup_r>
 8008cba:	b380      	cbz	r0, 8008d1e <_puts_r+0x9a>
 8008cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8008cc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cc2:	07da      	lsls	r2, r3, #31
 8008cc4:	d405      	bmi.n	8008cd2 <_puts_r+0x4e>
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	059b      	lsls	r3, r3, #22
 8008cca:	d402      	bmi.n	8008cd2 <_puts_r+0x4e>
 8008ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cce:	f000 fa7d 	bl	80091cc <__retarget_lock_release_recursive>
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	bd70      	pop	{r4, r5, r6, pc}
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	da04      	bge.n	8008ce4 <_puts_r+0x60>
 8008cda:	69a2      	ldr	r2, [r4, #24]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	dc17      	bgt.n	8008d10 <_puts_r+0x8c>
 8008ce0:	290a      	cmp	r1, #10
 8008ce2:	d015      	beq.n	8008d10 <_puts_r+0x8c>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	6022      	str	r2, [r4, #0]
 8008cea:	7019      	strb	r1, [r3, #0]
 8008cec:	68a3      	ldr	r3, [r4, #8]
 8008cee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	60a3      	str	r3, [r4, #8]
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	d1ed      	bne.n	8008cd6 <_puts_r+0x52>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	da11      	bge.n	8008d22 <_puts_r+0x9e>
 8008cfe:	4622      	mov	r2, r4
 8008d00:	210a      	movs	r1, #10
 8008d02:	4628      	mov	r0, r5
 8008d04:	f000 f8b7 	bl	8008e76 <__swbuf_r>
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d0d7      	beq.n	8008cbc <_puts_r+0x38>
 8008d0c:	250a      	movs	r5, #10
 8008d0e:	e7d7      	b.n	8008cc0 <_puts_r+0x3c>
 8008d10:	4622      	mov	r2, r4
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 f8af 	bl	8008e76 <__swbuf_r>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d1e7      	bne.n	8008cec <_puts_r+0x68>
 8008d1c:	e7ce      	b.n	8008cbc <_puts_r+0x38>
 8008d1e:	3e01      	subs	r6, #1
 8008d20:	e7e4      	b.n	8008cec <_puts_r+0x68>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	6022      	str	r2, [r4, #0]
 8008d28:	220a      	movs	r2, #10
 8008d2a:	701a      	strb	r2, [r3, #0]
 8008d2c:	e7ee      	b.n	8008d0c <_puts_r+0x88>
	...

08008d30 <puts>:
 8008d30:	4b02      	ldr	r3, [pc, #8]	@ (8008d3c <puts+0xc>)
 8008d32:	4601      	mov	r1, r0
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	f7ff bfa5 	b.w	8008c84 <_puts_r>
 8008d3a:	bf00      	nop
 8008d3c:	20000060 	.word	0x20000060

08008d40 <sniprintf>:
 8008d40:	b40c      	push	{r2, r3}
 8008d42:	b530      	push	{r4, r5, lr}
 8008d44:	4b18      	ldr	r3, [pc, #96]	@ (8008da8 <sniprintf+0x68>)
 8008d46:	1e0c      	subs	r4, r1, #0
 8008d48:	681d      	ldr	r5, [r3, #0]
 8008d4a:	b09d      	sub	sp, #116	@ 0x74
 8008d4c:	da08      	bge.n	8008d60 <sniprintf+0x20>
 8008d4e:	238b      	movs	r3, #139	@ 0x8b
 8008d50:	602b      	str	r3, [r5, #0]
 8008d52:	f04f 30ff 	mov.w	r0, #4294967295
 8008d56:	b01d      	add	sp, #116	@ 0x74
 8008d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d5c:	b002      	add	sp, #8
 8008d5e:	4770      	bx	lr
 8008d60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008d64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d68:	f04f 0300 	mov.w	r3, #0
 8008d6c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008d6e:	bf14      	ite	ne
 8008d70:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d74:	4623      	moveq	r3, r4
 8008d76:	9304      	str	r3, [sp, #16]
 8008d78:	9307      	str	r3, [sp, #28]
 8008d7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d7e:	9002      	str	r0, [sp, #8]
 8008d80:	9006      	str	r0, [sp, #24]
 8008d82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d86:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008d88:	ab21      	add	r3, sp, #132	@ 0x84
 8008d8a:	a902      	add	r1, sp, #8
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	f002 fd34 	bl	800b7fc <_svfiprintf_r>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	bfbc      	itt	lt
 8008d98:	238b      	movlt	r3, #139	@ 0x8b
 8008d9a:	602b      	strlt	r3, [r5, #0]
 8008d9c:	2c00      	cmp	r4, #0
 8008d9e:	d0da      	beq.n	8008d56 <sniprintf+0x16>
 8008da0:	9b02      	ldr	r3, [sp, #8]
 8008da2:	2200      	movs	r2, #0
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	e7d6      	b.n	8008d56 <sniprintf+0x16>
 8008da8:	20000060 	.word	0x20000060

08008dac <siprintf>:
 8008dac:	b40e      	push	{r1, r2, r3}
 8008dae:	b510      	push	{r4, lr}
 8008db0:	b09d      	sub	sp, #116	@ 0x74
 8008db2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008db4:	9002      	str	r0, [sp, #8]
 8008db6:	9006      	str	r0, [sp, #24]
 8008db8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008dbc:	480a      	ldr	r0, [pc, #40]	@ (8008de8 <siprintf+0x3c>)
 8008dbe:	9107      	str	r1, [sp, #28]
 8008dc0:	9104      	str	r1, [sp, #16]
 8008dc2:	490a      	ldr	r1, [pc, #40]	@ (8008dec <siprintf+0x40>)
 8008dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc8:	9105      	str	r1, [sp, #20]
 8008dca:	2400      	movs	r4, #0
 8008dcc:	a902      	add	r1, sp, #8
 8008dce:	6800      	ldr	r0, [r0, #0]
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008dd4:	f002 fd12 	bl	800b7fc <_svfiprintf_r>
 8008dd8:	9b02      	ldr	r3, [sp, #8]
 8008dda:	701c      	strb	r4, [r3, #0]
 8008ddc:	b01d      	add	sp, #116	@ 0x74
 8008dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de2:	b003      	add	sp, #12
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	20000060 	.word	0x20000060
 8008dec:	ffff0208 	.word	0xffff0208

08008df0 <__sread>:
 8008df0:	b510      	push	{r4, lr}
 8008df2:	460c      	mov	r4, r1
 8008df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df8:	f000 f998 	bl	800912c <_read_r>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	bfab      	itete	ge
 8008e00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e02:	89a3      	ldrhlt	r3, [r4, #12]
 8008e04:	181b      	addge	r3, r3, r0
 8008e06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e0a:	bfac      	ite	ge
 8008e0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e0e:	81a3      	strhlt	r3, [r4, #12]
 8008e10:	bd10      	pop	{r4, pc}

08008e12 <__swrite>:
 8008e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e16:	461f      	mov	r7, r3
 8008e18:	898b      	ldrh	r3, [r1, #12]
 8008e1a:	05db      	lsls	r3, r3, #23
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	4616      	mov	r6, r2
 8008e22:	d505      	bpl.n	8008e30 <__swrite+0x1e>
 8008e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e28:	2302      	movs	r3, #2
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f000 f96c 	bl	8009108 <_lseek_r>
 8008e30:	89a3      	ldrh	r3, [r4, #12]
 8008e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e3a:	81a3      	strh	r3, [r4, #12]
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	463b      	mov	r3, r7
 8008e40:	4628      	mov	r0, r5
 8008e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e46:	f000 b983 	b.w	8009150 <_write_r>

08008e4a <__sseek>:
 8008e4a:	b510      	push	{r4, lr}
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e52:	f000 f959 	bl	8009108 <_lseek_r>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	bf15      	itete	ne
 8008e5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e66:	81a3      	strheq	r3, [r4, #12]
 8008e68:	bf18      	it	ne
 8008e6a:	81a3      	strhne	r3, [r4, #12]
 8008e6c:	bd10      	pop	{r4, pc}

08008e6e <__sclose>:
 8008e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e72:	f000 b939 	b.w	80090e8 <_close_r>

08008e76 <__swbuf_r>:
 8008e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e78:	460e      	mov	r6, r1
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	b118      	cbz	r0, 8008e88 <__swbuf_r+0x12>
 8008e80:	6a03      	ldr	r3, [r0, #32]
 8008e82:	b90b      	cbnz	r3, 8008e88 <__swbuf_r+0x12>
 8008e84:	f7ff feb6 	bl	8008bf4 <__sinit>
 8008e88:	69a3      	ldr	r3, [r4, #24]
 8008e8a:	60a3      	str	r3, [r4, #8]
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	071a      	lsls	r2, r3, #28
 8008e90:	d501      	bpl.n	8008e96 <__swbuf_r+0x20>
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	b943      	cbnz	r3, 8008ea8 <__swbuf_r+0x32>
 8008e96:	4621      	mov	r1, r4
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f000 f82b 	bl	8008ef4 <__swsetup_r>
 8008e9e:	b118      	cbz	r0, 8008ea8 <__swbuf_r+0x32>
 8008ea0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	6922      	ldr	r2, [r4, #16]
 8008eac:	1a98      	subs	r0, r3, r2
 8008eae:	6963      	ldr	r3, [r4, #20]
 8008eb0:	b2f6      	uxtb	r6, r6
 8008eb2:	4283      	cmp	r3, r0
 8008eb4:	4637      	mov	r7, r6
 8008eb6:	dc05      	bgt.n	8008ec4 <__swbuf_r+0x4e>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f002 ff60 	bl	800bd80 <_fflush_r>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d1ed      	bne.n	8008ea0 <__swbuf_r+0x2a>
 8008ec4:	68a3      	ldr	r3, [r4, #8]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	60a3      	str	r3, [r4, #8]
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	6022      	str	r2, [r4, #0]
 8008ed0:	701e      	strb	r6, [r3, #0]
 8008ed2:	6962      	ldr	r2, [r4, #20]
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d004      	beq.n	8008ee4 <__swbuf_r+0x6e>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	07db      	lsls	r3, r3, #31
 8008ede:	d5e1      	bpl.n	8008ea4 <__swbuf_r+0x2e>
 8008ee0:	2e0a      	cmp	r6, #10
 8008ee2:	d1df      	bne.n	8008ea4 <__swbuf_r+0x2e>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f002 ff4a 	bl	800bd80 <_fflush_r>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d0d9      	beq.n	8008ea4 <__swbuf_r+0x2e>
 8008ef0:	e7d6      	b.n	8008ea0 <__swbuf_r+0x2a>
	...

08008ef4 <__swsetup_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4b29      	ldr	r3, [pc, #164]	@ (8008f9c <__swsetup_r+0xa8>)
 8008ef8:	4605      	mov	r5, r0
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	460c      	mov	r4, r1
 8008efe:	b118      	cbz	r0, 8008f08 <__swsetup_r+0x14>
 8008f00:	6a03      	ldr	r3, [r0, #32]
 8008f02:	b90b      	cbnz	r3, 8008f08 <__swsetup_r+0x14>
 8008f04:	f7ff fe76 	bl	8008bf4 <__sinit>
 8008f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f0c:	0719      	lsls	r1, r3, #28
 8008f0e:	d422      	bmi.n	8008f56 <__swsetup_r+0x62>
 8008f10:	06da      	lsls	r2, r3, #27
 8008f12:	d407      	bmi.n	8008f24 <__swsetup_r+0x30>
 8008f14:	2209      	movs	r2, #9
 8008f16:	602a      	str	r2, [r5, #0]
 8008f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f22:	e033      	b.n	8008f8c <__swsetup_r+0x98>
 8008f24:	0758      	lsls	r0, r3, #29
 8008f26:	d512      	bpl.n	8008f4e <__swsetup_r+0x5a>
 8008f28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f2a:	b141      	cbz	r1, 8008f3e <__swsetup_r+0x4a>
 8008f2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f30:	4299      	cmp	r1, r3
 8008f32:	d002      	beq.n	8008f3a <__swsetup_r+0x46>
 8008f34:	4628      	mov	r0, r5
 8008f36:	f000 ffd7 	bl	8009ee8 <_free_r>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	2300      	movs	r3, #0
 8008f48:	6063      	str	r3, [r4, #4]
 8008f4a:	6923      	ldr	r3, [r4, #16]
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f043 0308 	orr.w	r3, r3, #8
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	6923      	ldr	r3, [r4, #16]
 8008f58:	b94b      	cbnz	r3, 8008f6e <__swsetup_r+0x7a>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f64:	d003      	beq.n	8008f6e <__swsetup_r+0x7a>
 8008f66:	4621      	mov	r1, r4
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f002 ff69 	bl	800be40 <__smakebuf_r>
 8008f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f72:	f013 0201 	ands.w	r2, r3, #1
 8008f76:	d00a      	beq.n	8008f8e <__swsetup_r+0x9a>
 8008f78:	2200      	movs	r2, #0
 8008f7a:	60a2      	str	r2, [r4, #8]
 8008f7c:	6962      	ldr	r2, [r4, #20]
 8008f7e:	4252      	negs	r2, r2
 8008f80:	61a2      	str	r2, [r4, #24]
 8008f82:	6922      	ldr	r2, [r4, #16]
 8008f84:	b942      	cbnz	r2, 8008f98 <__swsetup_r+0xa4>
 8008f86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f8a:	d1c5      	bne.n	8008f18 <__swsetup_r+0x24>
 8008f8c:	bd38      	pop	{r3, r4, r5, pc}
 8008f8e:	0799      	lsls	r1, r3, #30
 8008f90:	bf58      	it	pl
 8008f92:	6962      	ldrpl	r2, [r4, #20]
 8008f94:	60a2      	str	r2, [r4, #8]
 8008f96:	e7f4      	b.n	8008f82 <__swsetup_r+0x8e>
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e7f7      	b.n	8008f8c <__swsetup_r+0x98>
 8008f9c:	20000060 	.word	0x20000060

08008fa0 <memset>:
 8008fa0:	4402      	add	r2, r0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d100      	bne.n	8008faa <memset+0xa>
 8008fa8:	4770      	bx	lr
 8008faa:	f803 1b01 	strb.w	r1, [r3], #1
 8008fae:	e7f9      	b.n	8008fa4 <memset+0x4>

08008fb0 <strncmp>:
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	b16a      	cbz	r2, 8008fd0 <strncmp+0x20>
 8008fb4:	3901      	subs	r1, #1
 8008fb6:	1884      	adds	r4, r0, r2
 8008fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d103      	bne.n	8008fcc <strncmp+0x1c>
 8008fc4:	42a0      	cmp	r0, r4
 8008fc6:	d001      	beq.n	8008fcc <strncmp+0x1c>
 8008fc8:	2a00      	cmp	r2, #0
 8008fca:	d1f5      	bne.n	8008fb8 <strncmp+0x8>
 8008fcc:	1ad0      	subs	r0, r2, r3
 8008fce:	bd10      	pop	{r4, pc}
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	e7fc      	b.n	8008fce <strncmp+0x1e>

08008fd4 <strncpy>:
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	3901      	subs	r1, #1
 8008fd8:	4603      	mov	r3, r0
 8008fda:	b132      	cbz	r2, 8008fea <strncpy+0x16>
 8008fdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008fe0:	f803 4b01 	strb.w	r4, [r3], #1
 8008fe4:	3a01      	subs	r2, #1
 8008fe6:	2c00      	cmp	r4, #0
 8008fe8:	d1f7      	bne.n	8008fda <strncpy+0x6>
 8008fea:	441a      	add	r2, r3
 8008fec:	2100      	movs	r1, #0
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d100      	bne.n	8008ff4 <strncpy+0x20>
 8008ff2:	bd10      	pop	{r4, pc}
 8008ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff8:	e7f9      	b.n	8008fee <strncpy+0x1a>
	...

08008ffc <strtok>:
 8008ffc:	4b16      	ldr	r3, [pc, #88]	@ (8009058 <strtok+0x5c>)
 8008ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009002:	681f      	ldr	r7, [r3, #0]
 8009004:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009006:	4605      	mov	r5, r0
 8009008:	460e      	mov	r6, r1
 800900a:	b9ec      	cbnz	r4, 8009048 <strtok+0x4c>
 800900c:	2050      	movs	r0, #80	@ 0x50
 800900e:	f000 ffb5 	bl	8009f7c <malloc>
 8009012:	4602      	mov	r2, r0
 8009014:	6478      	str	r0, [r7, #68]	@ 0x44
 8009016:	b920      	cbnz	r0, 8009022 <strtok+0x26>
 8009018:	4b10      	ldr	r3, [pc, #64]	@ (800905c <strtok+0x60>)
 800901a:	4811      	ldr	r0, [pc, #68]	@ (8009060 <strtok+0x64>)
 800901c:	215b      	movs	r1, #91	@ 0x5b
 800901e:	f000 f8eb 	bl	80091f8 <__assert_func>
 8009022:	e9c0 4400 	strd	r4, r4, [r0]
 8009026:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800902a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800902e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009032:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009036:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800903a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800903e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009042:	6184      	str	r4, [r0, #24]
 8009044:	7704      	strb	r4, [r0, #28]
 8009046:	6244      	str	r4, [r0, #36]	@ 0x24
 8009048:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800904a:	4631      	mov	r1, r6
 800904c:	4628      	mov	r0, r5
 800904e:	2301      	movs	r3, #1
 8009050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009054:	f000 b806 	b.w	8009064 <__strtok_r>
 8009058:	20000060 	.word	0x20000060
 800905c:	0800d0f9 	.word	0x0800d0f9
 8009060:	0800d110 	.word	0x0800d110

08009064 <__strtok_r>:
 8009064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009066:	4604      	mov	r4, r0
 8009068:	b908      	cbnz	r0, 800906e <__strtok_r+0xa>
 800906a:	6814      	ldr	r4, [r2, #0]
 800906c:	b144      	cbz	r4, 8009080 <__strtok_r+0x1c>
 800906e:	4620      	mov	r0, r4
 8009070:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009074:	460f      	mov	r7, r1
 8009076:	f817 6b01 	ldrb.w	r6, [r7], #1
 800907a:	b91e      	cbnz	r6, 8009084 <__strtok_r+0x20>
 800907c:	b965      	cbnz	r5, 8009098 <__strtok_r+0x34>
 800907e:	6015      	str	r5, [r2, #0]
 8009080:	2000      	movs	r0, #0
 8009082:	e005      	b.n	8009090 <__strtok_r+0x2c>
 8009084:	42b5      	cmp	r5, r6
 8009086:	d1f6      	bne.n	8009076 <__strtok_r+0x12>
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1f0      	bne.n	800906e <__strtok_r+0xa>
 800908c:	6014      	str	r4, [r2, #0]
 800908e:	7003      	strb	r3, [r0, #0]
 8009090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009092:	461c      	mov	r4, r3
 8009094:	e00c      	b.n	80090b0 <__strtok_r+0x4c>
 8009096:	b91d      	cbnz	r5, 80090a0 <__strtok_r+0x3c>
 8009098:	4627      	mov	r7, r4
 800909a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800909e:	460e      	mov	r6, r1
 80090a0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80090a4:	42ab      	cmp	r3, r5
 80090a6:	d1f6      	bne.n	8009096 <__strtok_r+0x32>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0f2      	beq.n	8009092 <__strtok_r+0x2e>
 80090ac:	2300      	movs	r3, #0
 80090ae:	703b      	strb	r3, [r7, #0]
 80090b0:	6014      	str	r4, [r2, #0]
 80090b2:	e7ed      	b.n	8009090 <__strtok_r+0x2c>

080090b4 <strstr>:
 80090b4:	780a      	ldrb	r2, [r1, #0]
 80090b6:	b570      	push	{r4, r5, r6, lr}
 80090b8:	b96a      	cbnz	r2, 80090d6 <strstr+0x22>
 80090ba:	bd70      	pop	{r4, r5, r6, pc}
 80090bc:	429a      	cmp	r2, r3
 80090be:	d109      	bne.n	80090d4 <strstr+0x20>
 80090c0:	460c      	mov	r4, r1
 80090c2:	4605      	mov	r5, r0
 80090c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0f6      	beq.n	80090ba <strstr+0x6>
 80090cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80090d0:	429e      	cmp	r6, r3
 80090d2:	d0f7      	beq.n	80090c4 <strstr+0x10>
 80090d4:	3001      	adds	r0, #1
 80090d6:	7803      	ldrb	r3, [r0, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1ef      	bne.n	80090bc <strstr+0x8>
 80090dc:	4618      	mov	r0, r3
 80090de:	e7ec      	b.n	80090ba <strstr+0x6>

080090e0 <_localeconv_r>:
 80090e0:	4800      	ldr	r0, [pc, #0]	@ (80090e4 <_localeconv_r+0x4>)
 80090e2:	4770      	bx	lr
 80090e4:	200001a0 	.word	0x200001a0

080090e8 <_close_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4d06      	ldr	r5, [pc, #24]	@ (8009104 <_close_r+0x1c>)
 80090ec:	2300      	movs	r3, #0
 80090ee:	4604      	mov	r4, r0
 80090f0:	4608      	mov	r0, r1
 80090f2:	602b      	str	r3, [r5, #0]
 80090f4:	f7f8 fab5 	bl	8001662 <_close>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d102      	bne.n	8009102 <_close_r+0x1a>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	b103      	cbz	r3, 8009102 <_close_r+0x1a>
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	20000ea0 	.word	0x20000ea0

08009108 <_lseek_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d07      	ldr	r5, [pc, #28]	@ (8009128 <_lseek_r+0x20>)
 800910c:	4604      	mov	r4, r0
 800910e:	4608      	mov	r0, r1
 8009110:	4611      	mov	r1, r2
 8009112:	2200      	movs	r2, #0
 8009114:	602a      	str	r2, [r5, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	f7f8 faca 	bl	80016b0 <_lseek>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d102      	bne.n	8009126 <_lseek_r+0x1e>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	b103      	cbz	r3, 8009126 <_lseek_r+0x1e>
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	20000ea0 	.word	0x20000ea0

0800912c <_read_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d07      	ldr	r5, [pc, #28]	@ (800914c <_read_r+0x20>)
 8009130:	4604      	mov	r4, r0
 8009132:	4608      	mov	r0, r1
 8009134:	4611      	mov	r1, r2
 8009136:	2200      	movs	r2, #0
 8009138:	602a      	str	r2, [r5, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	f7f8 fa58 	bl	80015f0 <_read>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d102      	bne.n	800914a <_read_r+0x1e>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b103      	cbz	r3, 800914a <_read_r+0x1e>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	20000ea0 	.word	0x20000ea0

08009150 <_write_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d07      	ldr	r5, [pc, #28]	@ (8009170 <_write_r+0x20>)
 8009154:	4604      	mov	r4, r0
 8009156:	4608      	mov	r0, r1
 8009158:	4611      	mov	r1, r2
 800915a:	2200      	movs	r2, #0
 800915c:	602a      	str	r2, [r5, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	f7f8 fa63 	bl	800162a <_write>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d102      	bne.n	800916e <_write_r+0x1e>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	b103      	cbz	r3, 800916e <_write_r+0x1e>
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	20000ea0 	.word	0x20000ea0

08009174 <__errno>:
 8009174:	4b01      	ldr	r3, [pc, #4]	@ (800917c <__errno+0x8>)
 8009176:	6818      	ldr	r0, [r3, #0]
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	20000060 	.word	0x20000060

08009180 <__libc_init_array>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	4d0d      	ldr	r5, [pc, #52]	@ (80091b8 <__libc_init_array+0x38>)
 8009184:	4c0d      	ldr	r4, [pc, #52]	@ (80091bc <__libc_init_array+0x3c>)
 8009186:	1b64      	subs	r4, r4, r5
 8009188:	10a4      	asrs	r4, r4, #2
 800918a:	2600      	movs	r6, #0
 800918c:	42a6      	cmp	r6, r4
 800918e:	d109      	bne.n	80091a4 <__libc_init_array+0x24>
 8009190:	4d0b      	ldr	r5, [pc, #44]	@ (80091c0 <__libc_init_array+0x40>)
 8009192:	4c0c      	ldr	r4, [pc, #48]	@ (80091c4 <__libc_init_array+0x44>)
 8009194:	f003 fad0 	bl	800c738 <_init>
 8009198:	1b64      	subs	r4, r4, r5
 800919a:	10a4      	asrs	r4, r4, #2
 800919c:	2600      	movs	r6, #0
 800919e:	42a6      	cmp	r6, r4
 80091a0:	d105      	bne.n	80091ae <__libc_init_array+0x2e>
 80091a2:	bd70      	pop	{r4, r5, r6, pc}
 80091a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091a8:	4798      	blx	r3
 80091aa:	3601      	adds	r6, #1
 80091ac:	e7ee      	b.n	800918c <__libc_init_array+0xc>
 80091ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b2:	4798      	blx	r3
 80091b4:	3601      	adds	r6, #1
 80091b6:	e7f2      	b.n	800919e <__libc_init_array+0x1e>
 80091b8:	0800d54c 	.word	0x0800d54c
 80091bc:	0800d54c 	.word	0x0800d54c
 80091c0:	0800d54c 	.word	0x0800d54c
 80091c4:	0800d550 	.word	0x0800d550

080091c8 <__retarget_lock_init_recursive>:
 80091c8:	4770      	bx	lr

080091ca <__retarget_lock_acquire_recursive>:
 80091ca:	4770      	bx	lr

080091cc <__retarget_lock_release_recursive>:
 80091cc:	4770      	bx	lr

080091ce <memcpy>:
 80091ce:	440a      	add	r2, r1
 80091d0:	4291      	cmp	r1, r2
 80091d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80091d6:	d100      	bne.n	80091da <memcpy+0xc>
 80091d8:	4770      	bx	lr
 80091da:	b510      	push	{r4, lr}
 80091dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091e4:	4291      	cmp	r1, r2
 80091e6:	d1f9      	bne.n	80091dc <memcpy+0xe>
 80091e8:	bd10      	pop	{r4, pc}
	...

080091ec <nanf>:
 80091ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80091f4 <nanf+0x8>
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	7fc00000 	.word	0x7fc00000

080091f8 <__assert_func>:
 80091f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091fa:	4614      	mov	r4, r2
 80091fc:	461a      	mov	r2, r3
 80091fe:	4b09      	ldr	r3, [pc, #36]	@ (8009224 <__assert_func+0x2c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4605      	mov	r5, r0
 8009204:	68d8      	ldr	r0, [r3, #12]
 8009206:	b14c      	cbz	r4, 800921c <__assert_func+0x24>
 8009208:	4b07      	ldr	r3, [pc, #28]	@ (8009228 <__assert_func+0x30>)
 800920a:	9100      	str	r1, [sp, #0]
 800920c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009210:	4906      	ldr	r1, [pc, #24]	@ (800922c <__assert_func+0x34>)
 8009212:	462b      	mov	r3, r5
 8009214:	f002 fddc 	bl	800bdd0 <fiprintf>
 8009218:	f002 fea2 	bl	800bf60 <abort>
 800921c:	4b04      	ldr	r3, [pc, #16]	@ (8009230 <__assert_func+0x38>)
 800921e:	461c      	mov	r4, r3
 8009220:	e7f3      	b.n	800920a <__assert_func+0x12>
 8009222:	bf00      	nop
 8009224:	20000060 	.word	0x20000060
 8009228:	0800d16a 	.word	0x0800d16a
 800922c:	0800d177 	.word	0x0800d177
 8009230:	0800d1a5 	.word	0x0800d1a5

08009234 <quorem>:
 8009234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	6903      	ldr	r3, [r0, #16]
 800923a:	690c      	ldr	r4, [r1, #16]
 800923c:	42a3      	cmp	r3, r4
 800923e:	4607      	mov	r7, r0
 8009240:	db7e      	blt.n	8009340 <quorem+0x10c>
 8009242:	3c01      	subs	r4, #1
 8009244:	f101 0814 	add.w	r8, r1, #20
 8009248:	00a3      	lsls	r3, r4, #2
 800924a:	f100 0514 	add.w	r5, r0, #20
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800925a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800925e:	3301      	adds	r3, #1
 8009260:	429a      	cmp	r2, r3
 8009262:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009266:	fbb2 f6f3 	udiv	r6, r2, r3
 800926a:	d32e      	bcc.n	80092ca <quorem+0x96>
 800926c:	f04f 0a00 	mov.w	sl, #0
 8009270:	46c4      	mov	ip, r8
 8009272:	46ae      	mov	lr, r5
 8009274:	46d3      	mov	fp, sl
 8009276:	f85c 3b04 	ldr.w	r3, [ip], #4
 800927a:	b298      	uxth	r0, r3
 800927c:	fb06 a000 	mla	r0, r6, r0, sl
 8009280:	0c02      	lsrs	r2, r0, #16
 8009282:	0c1b      	lsrs	r3, r3, #16
 8009284:	fb06 2303 	mla	r3, r6, r3, r2
 8009288:	f8de 2000 	ldr.w	r2, [lr]
 800928c:	b280      	uxth	r0, r0
 800928e:	b292      	uxth	r2, r2
 8009290:	1a12      	subs	r2, r2, r0
 8009292:	445a      	add	r2, fp
 8009294:	f8de 0000 	ldr.w	r0, [lr]
 8009298:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800929c:	b29b      	uxth	r3, r3
 800929e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092a6:	b292      	uxth	r2, r2
 80092a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092ac:	45e1      	cmp	r9, ip
 80092ae:	f84e 2b04 	str.w	r2, [lr], #4
 80092b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092b6:	d2de      	bcs.n	8009276 <quorem+0x42>
 80092b8:	9b00      	ldr	r3, [sp, #0]
 80092ba:	58eb      	ldr	r3, [r5, r3]
 80092bc:	b92b      	cbnz	r3, 80092ca <quorem+0x96>
 80092be:	9b01      	ldr	r3, [sp, #4]
 80092c0:	3b04      	subs	r3, #4
 80092c2:	429d      	cmp	r5, r3
 80092c4:	461a      	mov	r2, r3
 80092c6:	d32f      	bcc.n	8009328 <quorem+0xf4>
 80092c8:	613c      	str	r4, [r7, #16]
 80092ca:	4638      	mov	r0, r7
 80092cc:	f001 f9c8 	bl	800a660 <__mcmp>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	db25      	blt.n	8009320 <quorem+0xec>
 80092d4:	4629      	mov	r1, r5
 80092d6:	2000      	movs	r0, #0
 80092d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80092dc:	f8d1 c000 	ldr.w	ip, [r1]
 80092e0:	fa1f fe82 	uxth.w	lr, r2
 80092e4:	fa1f f38c 	uxth.w	r3, ip
 80092e8:	eba3 030e 	sub.w	r3, r3, lr
 80092ec:	4403      	add	r3, r0
 80092ee:	0c12      	lsrs	r2, r2, #16
 80092f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092fe:	45c1      	cmp	r9, r8
 8009300:	f841 3b04 	str.w	r3, [r1], #4
 8009304:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009308:	d2e6      	bcs.n	80092d8 <quorem+0xa4>
 800930a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800930e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009312:	b922      	cbnz	r2, 800931e <quorem+0xea>
 8009314:	3b04      	subs	r3, #4
 8009316:	429d      	cmp	r5, r3
 8009318:	461a      	mov	r2, r3
 800931a:	d30b      	bcc.n	8009334 <quorem+0x100>
 800931c:	613c      	str	r4, [r7, #16]
 800931e:	3601      	adds	r6, #1
 8009320:	4630      	mov	r0, r6
 8009322:	b003      	add	sp, #12
 8009324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009328:	6812      	ldr	r2, [r2, #0]
 800932a:	3b04      	subs	r3, #4
 800932c:	2a00      	cmp	r2, #0
 800932e:	d1cb      	bne.n	80092c8 <quorem+0x94>
 8009330:	3c01      	subs	r4, #1
 8009332:	e7c6      	b.n	80092c2 <quorem+0x8e>
 8009334:	6812      	ldr	r2, [r2, #0]
 8009336:	3b04      	subs	r3, #4
 8009338:	2a00      	cmp	r2, #0
 800933a:	d1ef      	bne.n	800931c <quorem+0xe8>
 800933c:	3c01      	subs	r4, #1
 800933e:	e7ea      	b.n	8009316 <quorem+0xe2>
 8009340:	2000      	movs	r0, #0
 8009342:	e7ee      	b.n	8009322 <quorem+0xee>
 8009344:	0000      	movs	r0, r0
	...

08009348 <_dtoa_r>:
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	69c7      	ldr	r7, [r0, #28]
 800934e:	b097      	sub	sp, #92	@ 0x5c
 8009350:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009354:	ec55 4b10 	vmov	r4, r5, d0
 8009358:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800935a:	9107      	str	r1, [sp, #28]
 800935c:	4681      	mov	r9, r0
 800935e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009360:	9311      	str	r3, [sp, #68]	@ 0x44
 8009362:	b97f      	cbnz	r7, 8009384 <_dtoa_r+0x3c>
 8009364:	2010      	movs	r0, #16
 8009366:	f000 fe09 	bl	8009f7c <malloc>
 800936a:	4602      	mov	r2, r0
 800936c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009370:	b920      	cbnz	r0, 800937c <_dtoa_r+0x34>
 8009372:	4ba9      	ldr	r3, [pc, #676]	@ (8009618 <_dtoa_r+0x2d0>)
 8009374:	21ef      	movs	r1, #239	@ 0xef
 8009376:	48a9      	ldr	r0, [pc, #676]	@ (800961c <_dtoa_r+0x2d4>)
 8009378:	f7ff ff3e 	bl	80091f8 <__assert_func>
 800937c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009380:	6007      	str	r7, [r0, #0]
 8009382:	60c7      	str	r7, [r0, #12]
 8009384:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009388:	6819      	ldr	r1, [r3, #0]
 800938a:	b159      	cbz	r1, 80093a4 <_dtoa_r+0x5c>
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	604a      	str	r2, [r1, #4]
 8009390:	2301      	movs	r3, #1
 8009392:	4093      	lsls	r3, r2
 8009394:	608b      	str	r3, [r1, #8]
 8009396:	4648      	mov	r0, r9
 8009398:	f000 fee6 	bl	800a168 <_Bfree>
 800939c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	1e2b      	subs	r3, r5, #0
 80093a6:	bfb9      	ittee	lt
 80093a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093ac:	9305      	strlt	r3, [sp, #20]
 80093ae:	2300      	movge	r3, #0
 80093b0:	6033      	strge	r3, [r6, #0]
 80093b2:	9f05      	ldr	r7, [sp, #20]
 80093b4:	4b9a      	ldr	r3, [pc, #616]	@ (8009620 <_dtoa_r+0x2d8>)
 80093b6:	bfbc      	itt	lt
 80093b8:	2201      	movlt	r2, #1
 80093ba:	6032      	strlt	r2, [r6, #0]
 80093bc:	43bb      	bics	r3, r7
 80093be:	d112      	bne.n	80093e6 <_dtoa_r+0x9e>
 80093c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093cc:	4323      	orrs	r3, r4
 80093ce:	f000 855a 	beq.w	8009e86 <_dtoa_r+0xb3e>
 80093d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009634 <_dtoa_r+0x2ec>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 855c 	beq.w	8009e96 <_dtoa_r+0xb4e>
 80093de:	f10a 0303 	add.w	r3, sl, #3
 80093e2:	f000 bd56 	b.w	8009e92 <_dtoa_r+0xb4a>
 80093e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80093ea:	2200      	movs	r2, #0
 80093ec:	ec51 0b17 	vmov	r0, r1, d7
 80093f0:	2300      	movs	r3, #0
 80093f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80093f6:	f7f7 fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80093fa:	4680      	mov	r8, r0
 80093fc:	b158      	cbz	r0, 8009416 <_dtoa_r+0xce>
 80093fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009400:	2301      	movs	r3, #1
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009406:	b113      	cbz	r3, 800940e <_dtoa_r+0xc6>
 8009408:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800940a:	4b86      	ldr	r3, [pc, #536]	@ (8009624 <_dtoa_r+0x2dc>)
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009638 <_dtoa_r+0x2f0>
 8009412:	f000 bd40 	b.w	8009e96 <_dtoa_r+0xb4e>
 8009416:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800941a:	aa14      	add	r2, sp, #80	@ 0x50
 800941c:	a915      	add	r1, sp, #84	@ 0x54
 800941e:	4648      	mov	r0, r9
 8009420:	f001 fa3e 	bl	800a8a0 <__d2b>
 8009424:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009428:	9002      	str	r0, [sp, #8]
 800942a:	2e00      	cmp	r6, #0
 800942c:	d078      	beq.n	8009520 <_dtoa_r+0x1d8>
 800942e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009430:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800943c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009440:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009444:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009448:	4619      	mov	r1, r3
 800944a:	2200      	movs	r2, #0
 800944c:	4b76      	ldr	r3, [pc, #472]	@ (8009628 <_dtoa_r+0x2e0>)
 800944e:	f7f6 ff1b 	bl	8000288 <__aeabi_dsub>
 8009452:	a36b      	add	r3, pc, #428	@ (adr r3, 8009600 <_dtoa_r+0x2b8>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	f7f7 f8ce 	bl	80005f8 <__aeabi_dmul>
 800945c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009608 <_dtoa_r+0x2c0>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f7f6 ff13 	bl	800028c <__adddf3>
 8009466:	4604      	mov	r4, r0
 8009468:	4630      	mov	r0, r6
 800946a:	460d      	mov	r5, r1
 800946c:	f7f7 f85a 	bl	8000524 <__aeabi_i2d>
 8009470:	a367      	add	r3, pc, #412	@ (adr r3, 8009610 <_dtoa_r+0x2c8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f7 f8bf 	bl	80005f8 <__aeabi_dmul>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4620      	mov	r0, r4
 8009480:	4629      	mov	r1, r5
 8009482:	f7f6 ff03 	bl	800028c <__adddf3>
 8009486:	4604      	mov	r4, r0
 8009488:	460d      	mov	r5, r1
 800948a:	f7f7 fb65 	bl	8000b58 <__aeabi_d2iz>
 800948e:	2200      	movs	r2, #0
 8009490:	4607      	mov	r7, r0
 8009492:	2300      	movs	r3, #0
 8009494:	4620      	mov	r0, r4
 8009496:	4629      	mov	r1, r5
 8009498:	f7f7 fb20 	bl	8000adc <__aeabi_dcmplt>
 800949c:	b140      	cbz	r0, 80094b0 <_dtoa_r+0x168>
 800949e:	4638      	mov	r0, r7
 80094a0:	f7f7 f840 	bl	8000524 <__aeabi_i2d>
 80094a4:	4622      	mov	r2, r4
 80094a6:	462b      	mov	r3, r5
 80094a8:	f7f7 fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80094ac:	b900      	cbnz	r0, 80094b0 <_dtoa_r+0x168>
 80094ae:	3f01      	subs	r7, #1
 80094b0:	2f16      	cmp	r7, #22
 80094b2:	d852      	bhi.n	800955a <_dtoa_r+0x212>
 80094b4:	4b5d      	ldr	r3, [pc, #372]	@ (800962c <_dtoa_r+0x2e4>)
 80094b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094c2:	f7f7 fb0b 	bl	8000adc <__aeabi_dcmplt>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d049      	beq.n	800955e <_dtoa_r+0x216>
 80094ca:	3f01      	subs	r7, #1
 80094cc:	2300      	movs	r3, #0
 80094ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80094d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094d2:	1b9b      	subs	r3, r3, r6
 80094d4:	1e5a      	subs	r2, r3, #1
 80094d6:	bf45      	ittet	mi
 80094d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80094dc:	9300      	strmi	r3, [sp, #0]
 80094de:	2300      	movpl	r3, #0
 80094e0:	2300      	movmi	r3, #0
 80094e2:	9206      	str	r2, [sp, #24]
 80094e4:	bf54      	ite	pl
 80094e6:	9300      	strpl	r3, [sp, #0]
 80094e8:	9306      	strmi	r3, [sp, #24]
 80094ea:	2f00      	cmp	r7, #0
 80094ec:	db39      	blt.n	8009562 <_dtoa_r+0x21a>
 80094ee:	9b06      	ldr	r3, [sp, #24]
 80094f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80094f2:	443b      	add	r3, r7
 80094f4:	9306      	str	r3, [sp, #24]
 80094f6:	2300      	movs	r3, #0
 80094f8:	9308      	str	r3, [sp, #32]
 80094fa:	9b07      	ldr	r3, [sp, #28]
 80094fc:	2b09      	cmp	r3, #9
 80094fe:	d863      	bhi.n	80095c8 <_dtoa_r+0x280>
 8009500:	2b05      	cmp	r3, #5
 8009502:	bfc4      	itt	gt
 8009504:	3b04      	subgt	r3, #4
 8009506:	9307      	strgt	r3, [sp, #28]
 8009508:	9b07      	ldr	r3, [sp, #28]
 800950a:	f1a3 0302 	sub.w	r3, r3, #2
 800950e:	bfcc      	ite	gt
 8009510:	2400      	movgt	r4, #0
 8009512:	2401      	movle	r4, #1
 8009514:	2b03      	cmp	r3, #3
 8009516:	d863      	bhi.n	80095e0 <_dtoa_r+0x298>
 8009518:	e8df f003 	tbb	[pc, r3]
 800951c:	2b375452 	.word	0x2b375452
 8009520:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009524:	441e      	add	r6, r3
 8009526:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800952a:	2b20      	cmp	r3, #32
 800952c:	bfc1      	itttt	gt
 800952e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009532:	409f      	lslgt	r7, r3
 8009534:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009538:	fa24 f303 	lsrgt.w	r3, r4, r3
 800953c:	bfd6      	itet	le
 800953e:	f1c3 0320 	rsble	r3, r3, #32
 8009542:	ea47 0003 	orrgt.w	r0, r7, r3
 8009546:	fa04 f003 	lslle.w	r0, r4, r3
 800954a:	f7f6 ffdb 	bl	8000504 <__aeabi_ui2d>
 800954e:	2201      	movs	r2, #1
 8009550:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009554:	3e01      	subs	r6, #1
 8009556:	9212      	str	r2, [sp, #72]	@ 0x48
 8009558:	e776      	b.n	8009448 <_dtoa_r+0x100>
 800955a:	2301      	movs	r3, #1
 800955c:	e7b7      	b.n	80094ce <_dtoa_r+0x186>
 800955e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009560:	e7b6      	b.n	80094d0 <_dtoa_r+0x188>
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	1bdb      	subs	r3, r3, r7
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	427b      	negs	r3, r7
 800956a:	9308      	str	r3, [sp, #32]
 800956c:	2300      	movs	r3, #0
 800956e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009570:	e7c3      	b.n	80094fa <_dtoa_r+0x1b2>
 8009572:	2301      	movs	r3, #1
 8009574:	9309      	str	r3, [sp, #36]	@ 0x24
 8009576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009578:	eb07 0b03 	add.w	fp, r7, r3
 800957c:	f10b 0301 	add.w	r3, fp, #1
 8009580:	2b01      	cmp	r3, #1
 8009582:	9303      	str	r3, [sp, #12]
 8009584:	bfb8      	it	lt
 8009586:	2301      	movlt	r3, #1
 8009588:	e006      	b.n	8009598 <_dtoa_r+0x250>
 800958a:	2301      	movs	r3, #1
 800958c:	9309      	str	r3, [sp, #36]	@ 0x24
 800958e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009590:	2b00      	cmp	r3, #0
 8009592:	dd28      	ble.n	80095e6 <_dtoa_r+0x29e>
 8009594:	469b      	mov	fp, r3
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800959c:	2100      	movs	r1, #0
 800959e:	2204      	movs	r2, #4
 80095a0:	f102 0514 	add.w	r5, r2, #20
 80095a4:	429d      	cmp	r5, r3
 80095a6:	d926      	bls.n	80095f6 <_dtoa_r+0x2ae>
 80095a8:	6041      	str	r1, [r0, #4]
 80095aa:	4648      	mov	r0, r9
 80095ac:	f000 fd9c 	bl	800a0e8 <_Balloc>
 80095b0:	4682      	mov	sl, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d142      	bne.n	800963c <_dtoa_r+0x2f4>
 80095b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009630 <_dtoa_r+0x2e8>)
 80095b8:	4602      	mov	r2, r0
 80095ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80095be:	e6da      	b.n	8009376 <_dtoa_r+0x2e>
 80095c0:	2300      	movs	r3, #0
 80095c2:	e7e3      	b.n	800958c <_dtoa_r+0x244>
 80095c4:	2300      	movs	r3, #0
 80095c6:	e7d5      	b.n	8009574 <_dtoa_r+0x22c>
 80095c8:	2401      	movs	r4, #1
 80095ca:	2300      	movs	r3, #0
 80095cc:	9307      	str	r3, [sp, #28]
 80095ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80095d0:	f04f 3bff 	mov.w	fp, #4294967295
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80095da:	2312      	movs	r3, #18
 80095dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80095de:	e7db      	b.n	8009598 <_dtoa_r+0x250>
 80095e0:	2301      	movs	r3, #1
 80095e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e4:	e7f4      	b.n	80095d0 <_dtoa_r+0x288>
 80095e6:	f04f 0b01 	mov.w	fp, #1
 80095ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80095ee:	465b      	mov	r3, fp
 80095f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80095f4:	e7d0      	b.n	8009598 <_dtoa_r+0x250>
 80095f6:	3101      	adds	r1, #1
 80095f8:	0052      	lsls	r2, r2, #1
 80095fa:	e7d1      	b.n	80095a0 <_dtoa_r+0x258>
 80095fc:	f3af 8000 	nop.w
 8009600:	636f4361 	.word	0x636f4361
 8009604:	3fd287a7 	.word	0x3fd287a7
 8009608:	8b60c8b3 	.word	0x8b60c8b3
 800960c:	3fc68a28 	.word	0x3fc68a28
 8009610:	509f79fb 	.word	0x509f79fb
 8009614:	3fd34413 	.word	0x3fd34413
 8009618:	0800d0f9 	.word	0x0800d0f9
 800961c:	0800d1b3 	.word	0x0800d1b3
 8009620:	7ff00000 	.word	0x7ff00000
 8009624:	0800d0d1 	.word	0x0800d0d1
 8009628:	3ff80000 	.word	0x3ff80000
 800962c:	0800d328 	.word	0x0800d328
 8009630:	0800d20b 	.word	0x0800d20b
 8009634:	0800d1af 	.word	0x0800d1af
 8009638:	0800d0d0 	.word	0x0800d0d0
 800963c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009640:	6018      	str	r0, [r3, #0]
 8009642:	9b03      	ldr	r3, [sp, #12]
 8009644:	2b0e      	cmp	r3, #14
 8009646:	f200 80a1 	bhi.w	800978c <_dtoa_r+0x444>
 800964a:	2c00      	cmp	r4, #0
 800964c:	f000 809e 	beq.w	800978c <_dtoa_r+0x444>
 8009650:	2f00      	cmp	r7, #0
 8009652:	dd33      	ble.n	80096bc <_dtoa_r+0x374>
 8009654:	4b9c      	ldr	r3, [pc, #624]	@ (80098c8 <_dtoa_r+0x580>)
 8009656:	f007 020f 	and.w	r2, r7, #15
 800965a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800965e:	ed93 7b00 	vldr	d7, [r3]
 8009662:	05f8      	lsls	r0, r7, #23
 8009664:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009668:	ea4f 1427 	mov.w	r4, r7, asr #4
 800966c:	d516      	bpl.n	800969c <_dtoa_r+0x354>
 800966e:	4b97      	ldr	r3, [pc, #604]	@ (80098cc <_dtoa_r+0x584>)
 8009670:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009674:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009678:	f7f7 f8e8 	bl	800084c <__aeabi_ddiv>
 800967c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009680:	f004 040f 	and.w	r4, r4, #15
 8009684:	2603      	movs	r6, #3
 8009686:	4d91      	ldr	r5, [pc, #580]	@ (80098cc <_dtoa_r+0x584>)
 8009688:	b954      	cbnz	r4, 80096a0 <_dtoa_r+0x358>
 800968a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800968e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009692:	f7f7 f8db 	bl	800084c <__aeabi_ddiv>
 8009696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800969a:	e028      	b.n	80096ee <_dtoa_r+0x3a6>
 800969c:	2602      	movs	r6, #2
 800969e:	e7f2      	b.n	8009686 <_dtoa_r+0x33e>
 80096a0:	07e1      	lsls	r1, r4, #31
 80096a2:	d508      	bpl.n	80096b6 <_dtoa_r+0x36e>
 80096a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80096a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096ac:	f7f6 ffa4 	bl	80005f8 <__aeabi_dmul>
 80096b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80096b4:	3601      	adds	r6, #1
 80096b6:	1064      	asrs	r4, r4, #1
 80096b8:	3508      	adds	r5, #8
 80096ba:	e7e5      	b.n	8009688 <_dtoa_r+0x340>
 80096bc:	f000 80af 	beq.w	800981e <_dtoa_r+0x4d6>
 80096c0:	427c      	negs	r4, r7
 80096c2:	4b81      	ldr	r3, [pc, #516]	@ (80098c8 <_dtoa_r+0x580>)
 80096c4:	4d81      	ldr	r5, [pc, #516]	@ (80098cc <_dtoa_r+0x584>)
 80096c6:	f004 020f 	and.w	r2, r4, #15
 80096ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096d6:	f7f6 ff8f 	bl	80005f8 <__aeabi_dmul>
 80096da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096de:	1124      	asrs	r4, r4, #4
 80096e0:	2300      	movs	r3, #0
 80096e2:	2602      	movs	r6, #2
 80096e4:	2c00      	cmp	r4, #0
 80096e6:	f040 808f 	bne.w	8009808 <_dtoa_r+0x4c0>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1d3      	bne.n	8009696 <_dtoa_r+0x34e>
 80096ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8094 	beq.w	8009822 <_dtoa_r+0x4da>
 80096fa:	4b75      	ldr	r3, [pc, #468]	@ (80098d0 <_dtoa_r+0x588>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	4620      	mov	r0, r4
 8009700:	4629      	mov	r1, r5
 8009702:	f7f7 f9eb 	bl	8000adc <__aeabi_dcmplt>
 8009706:	2800      	cmp	r0, #0
 8009708:	f000 808b 	beq.w	8009822 <_dtoa_r+0x4da>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 8087 	beq.w	8009822 <_dtoa_r+0x4da>
 8009714:	f1bb 0f00 	cmp.w	fp, #0
 8009718:	dd34      	ble.n	8009784 <_dtoa_r+0x43c>
 800971a:	4620      	mov	r0, r4
 800971c:	4b6d      	ldr	r3, [pc, #436]	@ (80098d4 <_dtoa_r+0x58c>)
 800971e:	2200      	movs	r2, #0
 8009720:	4629      	mov	r1, r5
 8009722:	f7f6 ff69 	bl	80005f8 <__aeabi_dmul>
 8009726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800972a:	f107 38ff 	add.w	r8, r7, #4294967295
 800972e:	3601      	adds	r6, #1
 8009730:	465c      	mov	r4, fp
 8009732:	4630      	mov	r0, r6
 8009734:	f7f6 fef6 	bl	8000524 <__aeabi_i2d>
 8009738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800973c:	f7f6 ff5c 	bl	80005f8 <__aeabi_dmul>
 8009740:	4b65      	ldr	r3, [pc, #404]	@ (80098d8 <_dtoa_r+0x590>)
 8009742:	2200      	movs	r2, #0
 8009744:	f7f6 fda2 	bl	800028c <__adddf3>
 8009748:	4605      	mov	r5, r0
 800974a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800974e:	2c00      	cmp	r4, #0
 8009750:	d16a      	bne.n	8009828 <_dtoa_r+0x4e0>
 8009752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009756:	4b61      	ldr	r3, [pc, #388]	@ (80098dc <_dtoa_r+0x594>)
 8009758:	2200      	movs	r2, #0
 800975a:	f7f6 fd95 	bl	8000288 <__aeabi_dsub>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009766:	462a      	mov	r2, r5
 8009768:	4633      	mov	r3, r6
 800976a:	f7f7 f9d5 	bl	8000b18 <__aeabi_dcmpgt>
 800976e:	2800      	cmp	r0, #0
 8009770:	f040 8298 	bne.w	8009ca4 <_dtoa_r+0x95c>
 8009774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009778:	462a      	mov	r2, r5
 800977a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800977e:	f7f7 f9ad 	bl	8000adc <__aeabi_dcmplt>
 8009782:	bb38      	cbnz	r0, 80097d4 <_dtoa_r+0x48c>
 8009784:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009788:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800978c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800978e:	2b00      	cmp	r3, #0
 8009790:	f2c0 8157 	blt.w	8009a42 <_dtoa_r+0x6fa>
 8009794:	2f0e      	cmp	r7, #14
 8009796:	f300 8154 	bgt.w	8009a42 <_dtoa_r+0x6fa>
 800979a:	4b4b      	ldr	r3, [pc, #300]	@ (80098c8 <_dtoa_r+0x580>)
 800979c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097a0:	ed93 7b00 	vldr	d7, [r3]
 80097a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	ed8d 7b00 	vstr	d7, [sp]
 80097ac:	f280 80e5 	bge.w	800997a <_dtoa_r+0x632>
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f300 80e1 	bgt.w	800997a <_dtoa_r+0x632>
 80097b8:	d10c      	bne.n	80097d4 <_dtoa_r+0x48c>
 80097ba:	4b48      	ldr	r3, [pc, #288]	@ (80098dc <_dtoa_r+0x594>)
 80097bc:	2200      	movs	r2, #0
 80097be:	ec51 0b17 	vmov	r0, r1, d7
 80097c2:	f7f6 ff19 	bl	80005f8 <__aeabi_dmul>
 80097c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097ca:	f7f7 f99b 	bl	8000b04 <__aeabi_dcmpge>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f000 8266 	beq.w	8009ca0 <_dtoa_r+0x958>
 80097d4:	2400      	movs	r4, #0
 80097d6:	4625      	mov	r5, r4
 80097d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097da:	4656      	mov	r6, sl
 80097dc:	ea6f 0803 	mvn.w	r8, r3
 80097e0:	2700      	movs	r7, #0
 80097e2:	4621      	mov	r1, r4
 80097e4:	4648      	mov	r0, r9
 80097e6:	f000 fcbf 	bl	800a168 <_Bfree>
 80097ea:	2d00      	cmp	r5, #0
 80097ec:	f000 80bd 	beq.w	800996a <_dtoa_r+0x622>
 80097f0:	b12f      	cbz	r7, 80097fe <_dtoa_r+0x4b6>
 80097f2:	42af      	cmp	r7, r5
 80097f4:	d003      	beq.n	80097fe <_dtoa_r+0x4b6>
 80097f6:	4639      	mov	r1, r7
 80097f8:	4648      	mov	r0, r9
 80097fa:	f000 fcb5 	bl	800a168 <_Bfree>
 80097fe:	4629      	mov	r1, r5
 8009800:	4648      	mov	r0, r9
 8009802:	f000 fcb1 	bl	800a168 <_Bfree>
 8009806:	e0b0      	b.n	800996a <_dtoa_r+0x622>
 8009808:	07e2      	lsls	r2, r4, #31
 800980a:	d505      	bpl.n	8009818 <_dtoa_r+0x4d0>
 800980c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009810:	f7f6 fef2 	bl	80005f8 <__aeabi_dmul>
 8009814:	3601      	adds	r6, #1
 8009816:	2301      	movs	r3, #1
 8009818:	1064      	asrs	r4, r4, #1
 800981a:	3508      	adds	r5, #8
 800981c:	e762      	b.n	80096e4 <_dtoa_r+0x39c>
 800981e:	2602      	movs	r6, #2
 8009820:	e765      	b.n	80096ee <_dtoa_r+0x3a6>
 8009822:	9c03      	ldr	r4, [sp, #12]
 8009824:	46b8      	mov	r8, r7
 8009826:	e784      	b.n	8009732 <_dtoa_r+0x3ea>
 8009828:	4b27      	ldr	r3, [pc, #156]	@ (80098c8 <_dtoa_r+0x580>)
 800982a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800982c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009830:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009834:	4454      	add	r4, sl
 8009836:	2900      	cmp	r1, #0
 8009838:	d054      	beq.n	80098e4 <_dtoa_r+0x59c>
 800983a:	4929      	ldr	r1, [pc, #164]	@ (80098e0 <_dtoa_r+0x598>)
 800983c:	2000      	movs	r0, #0
 800983e:	f7f7 f805 	bl	800084c <__aeabi_ddiv>
 8009842:	4633      	mov	r3, r6
 8009844:	462a      	mov	r2, r5
 8009846:	f7f6 fd1f 	bl	8000288 <__aeabi_dsub>
 800984a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800984e:	4656      	mov	r6, sl
 8009850:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009854:	f7f7 f980 	bl	8000b58 <__aeabi_d2iz>
 8009858:	4605      	mov	r5, r0
 800985a:	f7f6 fe63 	bl	8000524 <__aeabi_i2d>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009866:	f7f6 fd0f 	bl	8000288 <__aeabi_dsub>
 800986a:	3530      	adds	r5, #48	@ 0x30
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009874:	f806 5b01 	strb.w	r5, [r6], #1
 8009878:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800987c:	f7f7 f92e 	bl	8000adc <__aeabi_dcmplt>
 8009880:	2800      	cmp	r0, #0
 8009882:	d172      	bne.n	800996a <_dtoa_r+0x622>
 8009884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009888:	4911      	ldr	r1, [pc, #68]	@ (80098d0 <_dtoa_r+0x588>)
 800988a:	2000      	movs	r0, #0
 800988c:	f7f6 fcfc 	bl	8000288 <__aeabi_dsub>
 8009890:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009894:	f7f7 f922 	bl	8000adc <__aeabi_dcmplt>
 8009898:	2800      	cmp	r0, #0
 800989a:	f040 80b4 	bne.w	8009a06 <_dtoa_r+0x6be>
 800989e:	42a6      	cmp	r6, r4
 80098a0:	f43f af70 	beq.w	8009784 <_dtoa_r+0x43c>
 80098a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80098a8:	4b0a      	ldr	r3, [pc, #40]	@ (80098d4 <_dtoa_r+0x58c>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	f7f6 fea4 	bl	80005f8 <__aeabi_dmul>
 80098b0:	4b08      	ldr	r3, [pc, #32]	@ (80098d4 <_dtoa_r+0x58c>)
 80098b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098b6:	2200      	movs	r2, #0
 80098b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098bc:	f7f6 fe9c 	bl	80005f8 <__aeabi_dmul>
 80098c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098c4:	e7c4      	b.n	8009850 <_dtoa_r+0x508>
 80098c6:	bf00      	nop
 80098c8:	0800d328 	.word	0x0800d328
 80098cc:	0800d300 	.word	0x0800d300
 80098d0:	3ff00000 	.word	0x3ff00000
 80098d4:	40240000 	.word	0x40240000
 80098d8:	401c0000 	.word	0x401c0000
 80098dc:	40140000 	.word	0x40140000
 80098e0:	3fe00000 	.word	0x3fe00000
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	f7f6 fe86 	bl	80005f8 <__aeabi_dmul>
 80098ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80098f2:	4656      	mov	r6, sl
 80098f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098f8:	f7f7 f92e 	bl	8000b58 <__aeabi_d2iz>
 80098fc:	4605      	mov	r5, r0
 80098fe:	f7f6 fe11 	bl	8000524 <__aeabi_i2d>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800990a:	f7f6 fcbd 	bl	8000288 <__aeabi_dsub>
 800990e:	3530      	adds	r5, #48	@ 0x30
 8009910:	f806 5b01 	strb.w	r5, [r6], #1
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	42a6      	cmp	r6, r4
 800991a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800991e:	f04f 0200 	mov.w	r2, #0
 8009922:	d124      	bne.n	800996e <_dtoa_r+0x626>
 8009924:	4baf      	ldr	r3, [pc, #700]	@ (8009be4 <_dtoa_r+0x89c>)
 8009926:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800992a:	f7f6 fcaf 	bl	800028c <__adddf3>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009936:	f7f7 f8ef 	bl	8000b18 <__aeabi_dcmpgt>
 800993a:	2800      	cmp	r0, #0
 800993c:	d163      	bne.n	8009a06 <_dtoa_r+0x6be>
 800993e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009942:	49a8      	ldr	r1, [pc, #672]	@ (8009be4 <_dtoa_r+0x89c>)
 8009944:	2000      	movs	r0, #0
 8009946:	f7f6 fc9f 	bl	8000288 <__aeabi_dsub>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009952:	f7f7 f8c3 	bl	8000adc <__aeabi_dcmplt>
 8009956:	2800      	cmp	r0, #0
 8009958:	f43f af14 	beq.w	8009784 <_dtoa_r+0x43c>
 800995c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800995e:	1e73      	subs	r3, r6, #1
 8009960:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009962:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009966:	2b30      	cmp	r3, #48	@ 0x30
 8009968:	d0f8      	beq.n	800995c <_dtoa_r+0x614>
 800996a:	4647      	mov	r7, r8
 800996c:	e03b      	b.n	80099e6 <_dtoa_r+0x69e>
 800996e:	4b9e      	ldr	r3, [pc, #632]	@ (8009be8 <_dtoa_r+0x8a0>)
 8009970:	f7f6 fe42 	bl	80005f8 <__aeabi_dmul>
 8009974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009978:	e7bc      	b.n	80098f4 <_dtoa_r+0x5ac>
 800997a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800997e:	4656      	mov	r6, sl
 8009980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009984:	4620      	mov	r0, r4
 8009986:	4629      	mov	r1, r5
 8009988:	f7f6 ff60 	bl	800084c <__aeabi_ddiv>
 800998c:	f7f7 f8e4 	bl	8000b58 <__aeabi_d2iz>
 8009990:	4680      	mov	r8, r0
 8009992:	f7f6 fdc7 	bl	8000524 <__aeabi_i2d>
 8009996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099aa:	f7f6 fc6d 	bl	8000288 <__aeabi_dsub>
 80099ae:	f806 4b01 	strb.w	r4, [r6], #1
 80099b2:	9d03      	ldr	r5, [sp, #12]
 80099b4:	eba6 040a 	sub.w	r4, r6, sl
 80099b8:	42a5      	cmp	r5, r4
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	d133      	bne.n	8009a28 <_dtoa_r+0x6e0>
 80099c0:	f7f6 fc64 	bl	800028c <__adddf3>
 80099c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099c8:	4604      	mov	r4, r0
 80099ca:	460d      	mov	r5, r1
 80099cc:	f7f7 f8a4 	bl	8000b18 <__aeabi_dcmpgt>
 80099d0:	b9c0      	cbnz	r0, 8009a04 <_dtoa_r+0x6bc>
 80099d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099d6:	4620      	mov	r0, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	f7f7 f875 	bl	8000ac8 <__aeabi_dcmpeq>
 80099de:	b110      	cbz	r0, 80099e6 <_dtoa_r+0x69e>
 80099e0:	f018 0f01 	tst.w	r8, #1
 80099e4:	d10e      	bne.n	8009a04 <_dtoa_r+0x6bc>
 80099e6:	9902      	ldr	r1, [sp, #8]
 80099e8:	4648      	mov	r0, r9
 80099ea:	f000 fbbd 	bl	800a168 <_Bfree>
 80099ee:	2300      	movs	r3, #0
 80099f0:	7033      	strb	r3, [r6, #0]
 80099f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099f4:	3701      	adds	r7, #1
 80099f6:	601f      	str	r7, [r3, #0]
 80099f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 824b 	beq.w	8009e96 <_dtoa_r+0xb4e>
 8009a00:	601e      	str	r6, [r3, #0]
 8009a02:	e248      	b.n	8009e96 <_dtoa_r+0xb4e>
 8009a04:	46b8      	mov	r8, r7
 8009a06:	4633      	mov	r3, r6
 8009a08:	461e      	mov	r6, r3
 8009a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a0e:	2a39      	cmp	r2, #57	@ 0x39
 8009a10:	d106      	bne.n	8009a20 <_dtoa_r+0x6d8>
 8009a12:	459a      	cmp	sl, r3
 8009a14:	d1f8      	bne.n	8009a08 <_dtoa_r+0x6c0>
 8009a16:	2230      	movs	r2, #48	@ 0x30
 8009a18:	f108 0801 	add.w	r8, r8, #1
 8009a1c:	f88a 2000 	strb.w	r2, [sl]
 8009a20:	781a      	ldrb	r2, [r3, #0]
 8009a22:	3201      	adds	r2, #1
 8009a24:	701a      	strb	r2, [r3, #0]
 8009a26:	e7a0      	b.n	800996a <_dtoa_r+0x622>
 8009a28:	4b6f      	ldr	r3, [pc, #444]	@ (8009be8 <_dtoa_r+0x8a0>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f7f6 fde4 	bl	80005f8 <__aeabi_dmul>
 8009a30:	2200      	movs	r2, #0
 8009a32:	2300      	movs	r3, #0
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	f7f7 f846 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d09f      	beq.n	8009980 <_dtoa_r+0x638>
 8009a40:	e7d1      	b.n	80099e6 <_dtoa_r+0x69e>
 8009a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a44:	2a00      	cmp	r2, #0
 8009a46:	f000 80ea 	beq.w	8009c1e <_dtoa_r+0x8d6>
 8009a4a:	9a07      	ldr	r2, [sp, #28]
 8009a4c:	2a01      	cmp	r2, #1
 8009a4e:	f300 80cd 	bgt.w	8009bec <_dtoa_r+0x8a4>
 8009a52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a54:	2a00      	cmp	r2, #0
 8009a56:	f000 80c1 	beq.w	8009bdc <_dtoa_r+0x894>
 8009a5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a5e:	9c08      	ldr	r4, [sp, #32]
 8009a60:	9e00      	ldr	r6, [sp, #0]
 8009a62:	9a00      	ldr	r2, [sp, #0]
 8009a64:	441a      	add	r2, r3
 8009a66:	9200      	str	r2, [sp, #0]
 8009a68:	9a06      	ldr	r2, [sp, #24]
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	441a      	add	r2, r3
 8009a6e:	4648      	mov	r0, r9
 8009a70:	9206      	str	r2, [sp, #24]
 8009a72:	f000 fc77 	bl	800a364 <__i2b>
 8009a76:	4605      	mov	r5, r0
 8009a78:	b166      	cbz	r6, 8009a94 <_dtoa_r+0x74c>
 8009a7a:	9b06      	ldr	r3, [sp, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dd09      	ble.n	8009a94 <_dtoa_r+0x74c>
 8009a80:	42b3      	cmp	r3, r6
 8009a82:	9a00      	ldr	r2, [sp, #0]
 8009a84:	bfa8      	it	ge
 8009a86:	4633      	movge	r3, r6
 8009a88:	1ad2      	subs	r2, r2, r3
 8009a8a:	9200      	str	r2, [sp, #0]
 8009a8c:	9a06      	ldr	r2, [sp, #24]
 8009a8e:	1af6      	subs	r6, r6, r3
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	9306      	str	r3, [sp, #24]
 8009a94:	9b08      	ldr	r3, [sp, #32]
 8009a96:	b30b      	cbz	r3, 8009adc <_dtoa_r+0x794>
 8009a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 80c6 	beq.w	8009c2c <_dtoa_r+0x8e4>
 8009aa0:	2c00      	cmp	r4, #0
 8009aa2:	f000 80c0 	beq.w	8009c26 <_dtoa_r+0x8de>
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4648      	mov	r0, r9
 8009aac:	f000 fd12 	bl	800a4d4 <__pow5mult>
 8009ab0:	9a02      	ldr	r2, [sp, #8]
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	4648      	mov	r0, r9
 8009ab8:	f000 fc6a 	bl	800a390 <__multiply>
 8009abc:	9902      	ldr	r1, [sp, #8]
 8009abe:	4680      	mov	r8, r0
 8009ac0:	4648      	mov	r0, r9
 8009ac2:	f000 fb51 	bl	800a168 <_Bfree>
 8009ac6:	9b08      	ldr	r3, [sp, #32]
 8009ac8:	1b1b      	subs	r3, r3, r4
 8009aca:	9308      	str	r3, [sp, #32]
 8009acc:	f000 80b1 	beq.w	8009c32 <_dtoa_r+0x8ea>
 8009ad0:	9a08      	ldr	r2, [sp, #32]
 8009ad2:	4641      	mov	r1, r8
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	f000 fcfd 	bl	800a4d4 <__pow5mult>
 8009ada:	9002      	str	r0, [sp, #8]
 8009adc:	2101      	movs	r1, #1
 8009ade:	4648      	mov	r0, r9
 8009ae0:	f000 fc40 	bl	800a364 <__i2b>
 8009ae4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 81d8 	beq.w	8009e9e <_dtoa_r+0xb56>
 8009aee:	461a      	mov	r2, r3
 8009af0:	4601      	mov	r1, r0
 8009af2:	4648      	mov	r0, r9
 8009af4:	f000 fcee 	bl	800a4d4 <__pow5mult>
 8009af8:	9b07      	ldr	r3, [sp, #28]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	4604      	mov	r4, r0
 8009afe:	f300 809f 	bgt.w	8009c40 <_dtoa_r+0x8f8>
 8009b02:	9b04      	ldr	r3, [sp, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f040 8097 	bne.w	8009c38 <_dtoa_r+0x8f0>
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f040 8093 	bne.w	8009c3c <_dtoa_r+0x8f4>
 8009b16:	9b05      	ldr	r3, [sp, #20]
 8009b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b1c:	0d1b      	lsrs	r3, r3, #20
 8009b1e:	051b      	lsls	r3, r3, #20
 8009b20:	b133      	cbz	r3, 8009b30 <_dtoa_r+0x7e8>
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	3301      	adds	r3, #1
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	9306      	str	r3, [sp, #24]
 8009b2e:	2301      	movs	r3, #1
 8009b30:	9308      	str	r3, [sp, #32]
 8009b32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 81b8 	beq.w	8009eaa <_dtoa_r+0xb62>
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b40:	6918      	ldr	r0, [r3, #16]
 8009b42:	f000 fbc3 	bl	800a2cc <__hi0bits>
 8009b46:	f1c0 0020 	rsb	r0, r0, #32
 8009b4a:	9b06      	ldr	r3, [sp, #24]
 8009b4c:	4418      	add	r0, r3
 8009b4e:	f010 001f 	ands.w	r0, r0, #31
 8009b52:	f000 8082 	beq.w	8009c5a <_dtoa_r+0x912>
 8009b56:	f1c0 0320 	rsb	r3, r0, #32
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	dd73      	ble.n	8009c46 <_dtoa_r+0x8fe>
 8009b5e:	9b00      	ldr	r3, [sp, #0]
 8009b60:	f1c0 001c 	rsb	r0, r0, #28
 8009b64:	4403      	add	r3, r0
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	9b06      	ldr	r3, [sp, #24]
 8009b6a:	4403      	add	r3, r0
 8009b6c:	4406      	add	r6, r0
 8009b6e:	9306      	str	r3, [sp, #24]
 8009b70:	9b00      	ldr	r3, [sp, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	dd05      	ble.n	8009b82 <_dtoa_r+0x83a>
 8009b76:	9902      	ldr	r1, [sp, #8]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4648      	mov	r0, r9
 8009b7c:	f000 fd04 	bl	800a588 <__lshift>
 8009b80:	9002      	str	r0, [sp, #8]
 8009b82:	9b06      	ldr	r3, [sp, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dd05      	ble.n	8009b94 <_dtoa_r+0x84c>
 8009b88:	4621      	mov	r1, r4
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	4648      	mov	r0, r9
 8009b8e:	f000 fcfb 	bl	800a588 <__lshift>
 8009b92:	4604      	mov	r4, r0
 8009b94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d061      	beq.n	8009c5e <_dtoa_r+0x916>
 8009b9a:	9802      	ldr	r0, [sp, #8]
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	f000 fd5f 	bl	800a660 <__mcmp>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	da5b      	bge.n	8009c5e <_dtoa_r+0x916>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9902      	ldr	r1, [sp, #8]
 8009baa:	220a      	movs	r2, #10
 8009bac:	4648      	mov	r0, r9
 8009bae:	f000 fafd 	bl	800a1ac <__multadd>
 8009bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb4:	9002      	str	r0, [sp, #8]
 8009bb6:	f107 38ff 	add.w	r8, r7, #4294967295
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 8177 	beq.w	8009eae <_dtoa_r+0xb66>
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	220a      	movs	r2, #10
 8009bc6:	4648      	mov	r0, r9
 8009bc8:	f000 faf0 	bl	800a1ac <__multadd>
 8009bcc:	f1bb 0f00 	cmp.w	fp, #0
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	dc6f      	bgt.n	8009cb4 <_dtoa_r+0x96c>
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	dc49      	bgt.n	8009c6e <_dtoa_r+0x926>
 8009bda:	e06b      	b.n	8009cb4 <_dtoa_r+0x96c>
 8009bdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009bde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009be2:	e73c      	b.n	8009a5e <_dtoa_r+0x716>
 8009be4:	3fe00000 	.word	0x3fe00000
 8009be8:	40240000 	.word	0x40240000
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	1e5c      	subs	r4, r3, #1
 8009bf0:	9b08      	ldr	r3, [sp, #32]
 8009bf2:	42a3      	cmp	r3, r4
 8009bf4:	db09      	blt.n	8009c0a <_dtoa_r+0x8c2>
 8009bf6:	1b1c      	subs	r4, r3, r4
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f6bf af30 	bge.w	8009a60 <_dtoa_r+0x718>
 8009c00:	9b00      	ldr	r3, [sp, #0]
 8009c02:	9a03      	ldr	r2, [sp, #12]
 8009c04:	1a9e      	subs	r6, r3, r2
 8009c06:	2300      	movs	r3, #0
 8009c08:	e72b      	b.n	8009a62 <_dtoa_r+0x71a>
 8009c0a:	9b08      	ldr	r3, [sp, #32]
 8009c0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c0e:	9408      	str	r4, [sp, #32]
 8009c10:	1ae3      	subs	r3, r4, r3
 8009c12:	441a      	add	r2, r3
 8009c14:	9e00      	ldr	r6, [sp, #0]
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	920d      	str	r2, [sp, #52]	@ 0x34
 8009c1a:	2400      	movs	r4, #0
 8009c1c:	e721      	b.n	8009a62 <_dtoa_r+0x71a>
 8009c1e:	9c08      	ldr	r4, [sp, #32]
 8009c20:	9e00      	ldr	r6, [sp, #0]
 8009c22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009c24:	e728      	b.n	8009a78 <_dtoa_r+0x730>
 8009c26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009c2a:	e751      	b.n	8009ad0 <_dtoa_r+0x788>
 8009c2c:	9a08      	ldr	r2, [sp, #32]
 8009c2e:	9902      	ldr	r1, [sp, #8]
 8009c30:	e750      	b.n	8009ad4 <_dtoa_r+0x78c>
 8009c32:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c36:	e751      	b.n	8009adc <_dtoa_r+0x794>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	e779      	b.n	8009b30 <_dtoa_r+0x7e8>
 8009c3c:	9b04      	ldr	r3, [sp, #16]
 8009c3e:	e777      	b.n	8009b30 <_dtoa_r+0x7e8>
 8009c40:	2300      	movs	r3, #0
 8009c42:	9308      	str	r3, [sp, #32]
 8009c44:	e779      	b.n	8009b3a <_dtoa_r+0x7f2>
 8009c46:	d093      	beq.n	8009b70 <_dtoa_r+0x828>
 8009c48:	9a00      	ldr	r2, [sp, #0]
 8009c4a:	331c      	adds	r3, #28
 8009c4c:	441a      	add	r2, r3
 8009c4e:	9200      	str	r2, [sp, #0]
 8009c50:	9a06      	ldr	r2, [sp, #24]
 8009c52:	441a      	add	r2, r3
 8009c54:	441e      	add	r6, r3
 8009c56:	9206      	str	r2, [sp, #24]
 8009c58:	e78a      	b.n	8009b70 <_dtoa_r+0x828>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	e7f4      	b.n	8009c48 <_dtoa_r+0x900>
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	46b8      	mov	r8, r7
 8009c64:	dc20      	bgt.n	8009ca8 <_dtoa_r+0x960>
 8009c66:	469b      	mov	fp, r3
 8009c68:	9b07      	ldr	r3, [sp, #28]
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	dd1e      	ble.n	8009cac <_dtoa_r+0x964>
 8009c6e:	f1bb 0f00 	cmp.w	fp, #0
 8009c72:	f47f adb1 	bne.w	80097d8 <_dtoa_r+0x490>
 8009c76:	4621      	mov	r1, r4
 8009c78:	465b      	mov	r3, fp
 8009c7a:	2205      	movs	r2, #5
 8009c7c:	4648      	mov	r0, r9
 8009c7e:	f000 fa95 	bl	800a1ac <__multadd>
 8009c82:	4601      	mov	r1, r0
 8009c84:	4604      	mov	r4, r0
 8009c86:	9802      	ldr	r0, [sp, #8]
 8009c88:	f000 fcea 	bl	800a660 <__mcmp>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f77f ada3 	ble.w	80097d8 <_dtoa_r+0x490>
 8009c92:	4656      	mov	r6, sl
 8009c94:	2331      	movs	r3, #49	@ 0x31
 8009c96:	f806 3b01 	strb.w	r3, [r6], #1
 8009c9a:	f108 0801 	add.w	r8, r8, #1
 8009c9e:	e59f      	b.n	80097e0 <_dtoa_r+0x498>
 8009ca0:	9c03      	ldr	r4, [sp, #12]
 8009ca2:	46b8      	mov	r8, r7
 8009ca4:	4625      	mov	r5, r4
 8009ca6:	e7f4      	b.n	8009c92 <_dtoa_r+0x94a>
 8009ca8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f000 8101 	beq.w	8009eb6 <_dtoa_r+0xb6e>
 8009cb4:	2e00      	cmp	r6, #0
 8009cb6:	dd05      	ble.n	8009cc4 <_dtoa_r+0x97c>
 8009cb8:	4629      	mov	r1, r5
 8009cba:	4632      	mov	r2, r6
 8009cbc:	4648      	mov	r0, r9
 8009cbe:	f000 fc63 	bl	800a588 <__lshift>
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	9b08      	ldr	r3, [sp, #32]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d05c      	beq.n	8009d84 <_dtoa_r+0xa3c>
 8009cca:	6869      	ldr	r1, [r5, #4]
 8009ccc:	4648      	mov	r0, r9
 8009cce:	f000 fa0b 	bl	800a0e8 <_Balloc>
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	b928      	cbnz	r0, 8009ce2 <_dtoa_r+0x99a>
 8009cd6:	4b82      	ldr	r3, [pc, #520]	@ (8009ee0 <_dtoa_r+0xb98>)
 8009cd8:	4602      	mov	r2, r0
 8009cda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009cde:	f7ff bb4a 	b.w	8009376 <_dtoa_r+0x2e>
 8009ce2:	692a      	ldr	r2, [r5, #16]
 8009ce4:	3202      	adds	r2, #2
 8009ce6:	0092      	lsls	r2, r2, #2
 8009ce8:	f105 010c 	add.w	r1, r5, #12
 8009cec:	300c      	adds	r0, #12
 8009cee:	f7ff fa6e 	bl	80091ce <memcpy>
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4648      	mov	r0, r9
 8009cf8:	f000 fc46 	bl	800a588 <__lshift>
 8009cfc:	f10a 0301 	add.w	r3, sl, #1
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	eb0a 030b 	add.w	r3, sl, fp
 8009d06:	9308      	str	r3, [sp, #32]
 8009d08:	9b04      	ldr	r3, [sp, #16]
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	462f      	mov	r7, r5
 8009d10:	9306      	str	r3, [sp, #24]
 8009d12:	4605      	mov	r5, r0
 8009d14:	9b00      	ldr	r3, [sp, #0]
 8009d16:	9802      	ldr	r0, [sp, #8]
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009d1e:	f7ff fa89 	bl	8009234 <quorem>
 8009d22:	4603      	mov	r3, r0
 8009d24:	3330      	adds	r3, #48	@ 0x30
 8009d26:	9003      	str	r0, [sp, #12]
 8009d28:	4639      	mov	r1, r7
 8009d2a:	9802      	ldr	r0, [sp, #8]
 8009d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d2e:	f000 fc97 	bl	800a660 <__mcmp>
 8009d32:	462a      	mov	r2, r5
 8009d34:	9004      	str	r0, [sp, #16]
 8009d36:	4621      	mov	r1, r4
 8009d38:	4648      	mov	r0, r9
 8009d3a:	f000 fcad 	bl	800a698 <__mdiff>
 8009d3e:	68c2      	ldr	r2, [r0, #12]
 8009d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d42:	4606      	mov	r6, r0
 8009d44:	bb02      	cbnz	r2, 8009d88 <_dtoa_r+0xa40>
 8009d46:	4601      	mov	r1, r0
 8009d48:	9802      	ldr	r0, [sp, #8]
 8009d4a:	f000 fc89 	bl	800a660 <__mcmp>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d50:	4602      	mov	r2, r0
 8009d52:	4631      	mov	r1, r6
 8009d54:	4648      	mov	r0, r9
 8009d56:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d5a:	f000 fa05 	bl	800a168 <_Bfree>
 8009d5e:	9b07      	ldr	r3, [sp, #28]
 8009d60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d62:	9e00      	ldr	r6, [sp, #0]
 8009d64:	ea42 0103 	orr.w	r1, r2, r3
 8009d68:	9b06      	ldr	r3, [sp, #24]
 8009d6a:	4319      	orrs	r1, r3
 8009d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6e:	d10d      	bne.n	8009d8c <_dtoa_r+0xa44>
 8009d70:	2b39      	cmp	r3, #57	@ 0x39
 8009d72:	d027      	beq.n	8009dc4 <_dtoa_r+0xa7c>
 8009d74:	9a04      	ldr	r2, [sp, #16]
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	dd01      	ble.n	8009d7e <_dtoa_r+0xa36>
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	3331      	adds	r3, #49	@ 0x31
 8009d7e:	f88b 3000 	strb.w	r3, [fp]
 8009d82:	e52e      	b.n	80097e2 <_dtoa_r+0x49a>
 8009d84:	4628      	mov	r0, r5
 8009d86:	e7b9      	b.n	8009cfc <_dtoa_r+0x9b4>
 8009d88:	2201      	movs	r2, #1
 8009d8a:	e7e2      	b.n	8009d52 <_dtoa_r+0xa0a>
 8009d8c:	9904      	ldr	r1, [sp, #16]
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	db04      	blt.n	8009d9c <_dtoa_r+0xa54>
 8009d92:	9807      	ldr	r0, [sp, #28]
 8009d94:	4301      	orrs	r1, r0
 8009d96:	9806      	ldr	r0, [sp, #24]
 8009d98:	4301      	orrs	r1, r0
 8009d9a:	d120      	bne.n	8009dde <_dtoa_r+0xa96>
 8009d9c:	2a00      	cmp	r2, #0
 8009d9e:	ddee      	ble.n	8009d7e <_dtoa_r+0xa36>
 8009da0:	9902      	ldr	r1, [sp, #8]
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2201      	movs	r2, #1
 8009da6:	4648      	mov	r0, r9
 8009da8:	f000 fbee 	bl	800a588 <__lshift>
 8009dac:	4621      	mov	r1, r4
 8009dae:	9002      	str	r0, [sp, #8]
 8009db0:	f000 fc56 	bl	800a660 <__mcmp>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	9b00      	ldr	r3, [sp, #0]
 8009db8:	dc02      	bgt.n	8009dc0 <_dtoa_r+0xa78>
 8009dba:	d1e0      	bne.n	8009d7e <_dtoa_r+0xa36>
 8009dbc:	07da      	lsls	r2, r3, #31
 8009dbe:	d5de      	bpl.n	8009d7e <_dtoa_r+0xa36>
 8009dc0:	2b39      	cmp	r3, #57	@ 0x39
 8009dc2:	d1da      	bne.n	8009d7a <_dtoa_r+0xa32>
 8009dc4:	2339      	movs	r3, #57	@ 0x39
 8009dc6:	f88b 3000 	strb.w	r3, [fp]
 8009dca:	4633      	mov	r3, r6
 8009dcc:	461e      	mov	r6, r3
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009dd4:	2a39      	cmp	r2, #57	@ 0x39
 8009dd6:	d04e      	beq.n	8009e76 <_dtoa_r+0xb2e>
 8009dd8:	3201      	adds	r2, #1
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	e501      	b.n	80097e2 <_dtoa_r+0x49a>
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	dd03      	ble.n	8009dea <_dtoa_r+0xaa2>
 8009de2:	2b39      	cmp	r3, #57	@ 0x39
 8009de4:	d0ee      	beq.n	8009dc4 <_dtoa_r+0xa7c>
 8009de6:	3301      	adds	r3, #1
 8009de8:	e7c9      	b.n	8009d7e <_dtoa_r+0xa36>
 8009dea:	9a00      	ldr	r2, [sp, #0]
 8009dec:	9908      	ldr	r1, [sp, #32]
 8009dee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009df2:	428a      	cmp	r2, r1
 8009df4:	d028      	beq.n	8009e48 <_dtoa_r+0xb00>
 8009df6:	9902      	ldr	r1, [sp, #8]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	220a      	movs	r2, #10
 8009dfc:	4648      	mov	r0, r9
 8009dfe:	f000 f9d5 	bl	800a1ac <__multadd>
 8009e02:	42af      	cmp	r7, r5
 8009e04:	9002      	str	r0, [sp, #8]
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	f04f 020a 	mov.w	r2, #10
 8009e0e:	4639      	mov	r1, r7
 8009e10:	4648      	mov	r0, r9
 8009e12:	d107      	bne.n	8009e24 <_dtoa_r+0xadc>
 8009e14:	f000 f9ca 	bl	800a1ac <__multadd>
 8009e18:	4607      	mov	r7, r0
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	9b00      	ldr	r3, [sp, #0]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	e777      	b.n	8009d14 <_dtoa_r+0x9cc>
 8009e24:	f000 f9c2 	bl	800a1ac <__multadd>
 8009e28:	4629      	mov	r1, r5
 8009e2a:	4607      	mov	r7, r0
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	220a      	movs	r2, #10
 8009e30:	4648      	mov	r0, r9
 8009e32:	f000 f9bb 	bl	800a1ac <__multadd>
 8009e36:	4605      	mov	r5, r0
 8009e38:	e7f0      	b.n	8009e1c <_dtoa_r+0xad4>
 8009e3a:	f1bb 0f00 	cmp.w	fp, #0
 8009e3e:	bfcc      	ite	gt
 8009e40:	465e      	movgt	r6, fp
 8009e42:	2601      	movle	r6, #1
 8009e44:	4456      	add	r6, sl
 8009e46:	2700      	movs	r7, #0
 8009e48:	9902      	ldr	r1, [sp, #8]
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	4648      	mov	r0, r9
 8009e50:	f000 fb9a 	bl	800a588 <__lshift>
 8009e54:	4621      	mov	r1, r4
 8009e56:	9002      	str	r0, [sp, #8]
 8009e58:	f000 fc02 	bl	800a660 <__mcmp>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	dcb4      	bgt.n	8009dca <_dtoa_r+0xa82>
 8009e60:	d102      	bne.n	8009e68 <_dtoa_r+0xb20>
 8009e62:	9b00      	ldr	r3, [sp, #0]
 8009e64:	07db      	lsls	r3, r3, #31
 8009e66:	d4b0      	bmi.n	8009dca <_dtoa_r+0xa82>
 8009e68:	4633      	mov	r3, r6
 8009e6a:	461e      	mov	r6, r3
 8009e6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e70:	2a30      	cmp	r2, #48	@ 0x30
 8009e72:	d0fa      	beq.n	8009e6a <_dtoa_r+0xb22>
 8009e74:	e4b5      	b.n	80097e2 <_dtoa_r+0x49a>
 8009e76:	459a      	cmp	sl, r3
 8009e78:	d1a8      	bne.n	8009dcc <_dtoa_r+0xa84>
 8009e7a:	2331      	movs	r3, #49	@ 0x31
 8009e7c:	f108 0801 	add.w	r8, r8, #1
 8009e80:	f88a 3000 	strb.w	r3, [sl]
 8009e84:	e4ad      	b.n	80097e2 <_dtoa_r+0x49a>
 8009e86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009ee4 <_dtoa_r+0xb9c>
 8009e8c:	b11b      	cbz	r3, 8009e96 <_dtoa_r+0xb4e>
 8009e8e:	f10a 0308 	add.w	r3, sl, #8
 8009e92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	4650      	mov	r0, sl
 8009e98:	b017      	add	sp, #92	@ 0x5c
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	9b07      	ldr	r3, [sp, #28]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	f77f ae2e 	ble.w	8009b02 <_dtoa_r+0x7ba>
 8009ea6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ea8:	9308      	str	r3, [sp, #32]
 8009eaa:	2001      	movs	r0, #1
 8009eac:	e64d      	b.n	8009b4a <_dtoa_r+0x802>
 8009eae:	f1bb 0f00 	cmp.w	fp, #0
 8009eb2:	f77f aed9 	ble.w	8009c68 <_dtoa_r+0x920>
 8009eb6:	4656      	mov	r6, sl
 8009eb8:	9802      	ldr	r0, [sp, #8]
 8009eba:	4621      	mov	r1, r4
 8009ebc:	f7ff f9ba 	bl	8009234 <quorem>
 8009ec0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009ec4:	f806 3b01 	strb.w	r3, [r6], #1
 8009ec8:	eba6 020a 	sub.w	r2, r6, sl
 8009ecc:	4593      	cmp	fp, r2
 8009ece:	ddb4      	ble.n	8009e3a <_dtoa_r+0xaf2>
 8009ed0:	9902      	ldr	r1, [sp, #8]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	220a      	movs	r2, #10
 8009ed6:	4648      	mov	r0, r9
 8009ed8:	f000 f968 	bl	800a1ac <__multadd>
 8009edc:	9002      	str	r0, [sp, #8]
 8009ede:	e7eb      	b.n	8009eb8 <_dtoa_r+0xb70>
 8009ee0:	0800d20b 	.word	0x0800d20b
 8009ee4:	0800d1a6 	.word	0x0800d1a6

08009ee8 <_free_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4605      	mov	r5, r0
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d041      	beq.n	8009f74 <_free_r+0x8c>
 8009ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef4:	1f0c      	subs	r4, r1, #4
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	bfb8      	it	lt
 8009efa:	18e4      	addlt	r4, r4, r3
 8009efc:	f000 f8e8 	bl	800a0d0 <__malloc_lock>
 8009f00:	4a1d      	ldr	r2, [pc, #116]	@ (8009f78 <_free_r+0x90>)
 8009f02:	6813      	ldr	r3, [r2, #0]
 8009f04:	b933      	cbnz	r3, 8009f14 <_free_r+0x2c>
 8009f06:	6063      	str	r3, [r4, #4]
 8009f08:	6014      	str	r4, [r2, #0]
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f10:	f000 b8e4 	b.w	800a0dc <__malloc_unlock>
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	d908      	bls.n	8009f2a <_free_r+0x42>
 8009f18:	6820      	ldr	r0, [r4, #0]
 8009f1a:	1821      	adds	r1, r4, r0
 8009f1c:	428b      	cmp	r3, r1
 8009f1e:	bf01      	itttt	eq
 8009f20:	6819      	ldreq	r1, [r3, #0]
 8009f22:	685b      	ldreq	r3, [r3, #4]
 8009f24:	1809      	addeq	r1, r1, r0
 8009f26:	6021      	streq	r1, [r4, #0]
 8009f28:	e7ed      	b.n	8009f06 <_free_r+0x1e>
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	b10b      	cbz	r3, 8009f34 <_free_r+0x4c>
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	d9fa      	bls.n	8009f2a <_free_r+0x42>
 8009f34:	6811      	ldr	r1, [r2, #0]
 8009f36:	1850      	adds	r0, r2, r1
 8009f38:	42a0      	cmp	r0, r4
 8009f3a:	d10b      	bne.n	8009f54 <_free_r+0x6c>
 8009f3c:	6820      	ldr	r0, [r4, #0]
 8009f3e:	4401      	add	r1, r0
 8009f40:	1850      	adds	r0, r2, r1
 8009f42:	4283      	cmp	r3, r0
 8009f44:	6011      	str	r1, [r2, #0]
 8009f46:	d1e0      	bne.n	8009f0a <_free_r+0x22>
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	6053      	str	r3, [r2, #4]
 8009f4e:	4408      	add	r0, r1
 8009f50:	6010      	str	r0, [r2, #0]
 8009f52:	e7da      	b.n	8009f0a <_free_r+0x22>
 8009f54:	d902      	bls.n	8009f5c <_free_r+0x74>
 8009f56:	230c      	movs	r3, #12
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	e7d6      	b.n	8009f0a <_free_r+0x22>
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	1821      	adds	r1, r4, r0
 8009f60:	428b      	cmp	r3, r1
 8009f62:	bf04      	itt	eq
 8009f64:	6819      	ldreq	r1, [r3, #0]
 8009f66:	685b      	ldreq	r3, [r3, #4]
 8009f68:	6063      	str	r3, [r4, #4]
 8009f6a:	bf04      	itt	eq
 8009f6c:	1809      	addeq	r1, r1, r0
 8009f6e:	6021      	streq	r1, [r4, #0]
 8009f70:	6054      	str	r4, [r2, #4]
 8009f72:	e7ca      	b.n	8009f0a <_free_r+0x22>
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop
 8009f78:	20000eac 	.word	0x20000eac

08009f7c <malloc>:
 8009f7c:	4b02      	ldr	r3, [pc, #8]	@ (8009f88 <malloc+0xc>)
 8009f7e:	4601      	mov	r1, r0
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	f000 b825 	b.w	8009fd0 <_malloc_r>
 8009f86:	bf00      	nop
 8009f88:	20000060 	.word	0x20000060

08009f8c <sbrk_aligned>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8009fcc <sbrk_aligned+0x40>)
 8009f90:	460c      	mov	r4, r1
 8009f92:	6831      	ldr	r1, [r6, #0]
 8009f94:	4605      	mov	r5, r0
 8009f96:	b911      	cbnz	r1, 8009f9e <sbrk_aligned+0x12>
 8009f98:	f001 ffca 	bl	800bf30 <_sbrk_r>
 8009f9c:	6030      	str	r0, [r6, #0]
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f001 ffc5 	bl	800bf30 <_sbrk_r>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d103      	bne.n	8009fb2 <sbrk_aligned+0x26>
 8009faa:	f04f 34ff 	mov.w	r4, #4294967295
 8009fae:	4620      	mov	r0, r4
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}
 8009fb2:	1cc4      	adds	r4, r0, #3
 8009fb4:	f024 0403 	bic.w	r4, r4, #3
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d0f8      	beq.n	8009fae <sbrk_aligned+0x22>
 8009fbc:	1a21      	subs	r1, r4, r0
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f001 ffb6 	bl	800bf30 <_sbrk_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d1f2      	bne.n	8009fae <sbrk_aligned+0x22>
 8009fc8:	e7ef      	b.n	8009faa <sbrk_aligned+0x1e>
 8009fca:	bf00      	nop
 8009fcc:	20000ea8 	.word	0x20000ea8

08009fd0 <_malloc_r>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	1ccd      	adds	r5, r1, #3
 8009fd6:	f025 0503 	bic.w	r5, r5, #3
 8009fda:	3508      	adds	r5, #8
 8009fdc:	2d0c      	cmp	r5, #12
 8009fde:	bf38      	it	cc
 8009fe0:	250c      	movcc	r5, #12
 8009fe2:	2d00      	cmp	r5, #0
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	db01      	blt.n	8009fec <_malloc_r+0x1c>
 8009fe8:	42a9      	cmp	r1, r5
 8009fea:	d904      	bls.n	8009ff6 <_malloc_r+0x26>
 8009fec:	230c      	movs	r3, #12
 8009fee:	6033      	str	r3, [r6, #0]
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0cc <_malloc_r+0xfc>
 8009ffa:	f000 f869 	bl	800a0d0 <__malloc_lock>
 8009ffe:	f8d8 3000 	ldr.w	r3, [r8]
 800a002:	461c      	mov	r4, r3
 800a004:	bb44      	cbnz	r4, 800a058 <_malloc_r+0x88>
 800a006:	4629      	mov	r1, r5
 800a008:	4630      	mov	r0, r6
 800a00a:	f7ff ffbf 	bl	8009f8c <sbrk_aligned>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	4604      	mov	r4, r0
 800a012:	d158      	bne.n	800a0c6 <_malloc_r+0xf6>
 800a014:	f8d8 4000 	ldr.w	r4, [r8]
 800a018:	4627      	mov	r7, r4
 800a01a:	2f00      	cmp	r7, #0
 800a01c:	d143      	bne.n	800a0a6 <_malloc_r+0xd6>
 800a01e:	2c00      	cmp	r4, #0
 800a020:	d04b      	beq.n	800a0ba <_malloc_r+0xea>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	4639      	mov	r1, r7
 800a026:	4630      	mov	r0, r6
 800a028:	eb04 0903 	add.w	r9, r4, r3
 800a02c:	f001 ff80 	bl	800bf30 <_sbrk_r>
 800a030:	4581      	cmp	r9, r0
 800a032:	d142      	bne.n	800a0ba <_malloc_r+0xea>
 800a034:	6821      	ldr	r1, [r4, #0]
 800a036:	1a6d      	subs	r5, r5, r1
 800a038:	4629      	mov	r1, r5
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ffa6 	bl	8009f8c <sbrk_aligned>
 800a040:	3001      	adds	r0, #1
 800a042:	d03a      	beq.n	800a0ba <_malloc_r+0xea>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	442b      	add	r3, r5
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	f8d8 3000 	ldr.w	r3, [r8]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	bb62      	cbnz	r2, 800a0ac <_malloc_r+0xdc>
 800a052:	f8c8 7000 	str.w	r7, [r8]
 800a056:	e00f      	b.n	800a078 <_malloc_r+0xa8>
 800a058:	6822      	ldr	r2, [r4, #0]
 800a05a:	1b52      	subs	r2, r2, r5
 800a05c:	d420      	bmi.n	800a0a0 <_malloc_r+0xd0>
 800a05e:	2a0b      	cmp	r2, #11
 800a060:	d917      	bls.n	800a092 <_malloc_r+0xc2>
 800a062:	1961      	adds	r1, r4, r5
 800a064:	42a3      	cmp	r3, r4
 800a066:	6025      	str	r5, [r4, #0]
 800a068:	bf18      	it	ne
 800a06a:	6059      	strne	r1, [r3, #4]
 800a06c:	6863      	ldr	r3, [r4, #4]
 800a06e:	bf08      	it	eq
 800a070:	f8c8 1000 	streq.w	r1, [r8]
 800a074:	5162      	str	r2, [r4, r5]
 800a076:	604b      	str	r3, [r1, #4]
 800a078:	4630      	mov	r0, r6
 800a07a:	f000 f82f 	bl	800a0dc <__malloc_unlock>
 800a07e:	f104 000b 	add.w	r0, r4, #11
 800a082:	1d23      	adds	r3, r4, #4
 800a084:	f020 0007 	bic.w	r0, r0, #7
 800a088:	1ac2      	subs	r2, r0, r3
 800a08a:	bf1c      	itt	ne
 800a08c:	1a1b      	subne	r3, r3, r0
 800a08e:	50a3      	strne	r3, [r4, r2]
 800a090:	e7af      	b.n	8009ff2 <_malloc_r+0x22>
 800a092:	6862      	ldr	r2, [r4, #4]
 800a094:	42a3      	cmp	r3, r4
 800a096:	bf0c      	ite	eq
 800a098:	f8c8 2000 	streq.w	r2, [r8]
 800a09c:	605a      	strne	r2, [r3, #4]
 800a09e:	e7eb      	b.n	800a078 <_malloc_r+0xa8>
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	6864      	ldr	r4, [r4, #4]
 800a0a4:	e7ae      	b.n	800a004 <_malloc_r+0x34>
 800a0a6:	463c      	mov	r4, r7
 800a0a8:	687f      	ldr	r7, [r7, #4]
 800a0aa:	e7b6      	b.n	800a01a <_malloc_r+0x4a>
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	42a3      	cmp	r3, r4
 800a0b2:	d1fb      	bne.n	800a0ac <_malloc_r+0xdc>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6053      	str	r3, [r2, #4]
 800a0b8:	e7de      	b.n	800a078 <_malloc_r+0xa8>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	6033      	str	r3, [r6, #0]
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f000 f80c 	bl	800a0dc <__malloc_unlock>
 800a0c4:	e794      	b.n	8009ff0 <_malloc_r+0x20>
 800a0c6:	6005      	str	r5, [r0, #0]
 800a0c8:	e7d6      	b.n	800a078 <_malloc_r+0xa8>
 800a0ca:	bf00      	nop
 800a0cc:	20000eac 	.word	0x20000eac

0800a0d0 <__malloc_lock>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	@ (800a0d8 <__malloc_lock+0x8>)
 800a0d2:	f7ff b87a 	b.w	80091ca <__retarget_lock_acquire_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	20000ea4 	.word	0x20000ea4

0800a0dc <__malloc_unlock>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	@ (800a0e4 <__malloc_unlock+0x8>)
 800a0de:	f7ff b875 	b.w	80091cc <__retarget_lock_release_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	20000ea4 	.word	0x20000ea4

0800a0e8 <_Balloc>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	69c6      	ldr	r6, [r0, #28]
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	b976      	cbnz	r6, 800a110 <_Balloc+0x28>
 800a0f2:	2010      	movs	r0, #16
 800a0f4:	f7ff ff42 	bl	8009f7c <malloc>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	61e0      	str	r0, [r4, #28]
 800a0fc:	b920      	cbnz	r0, 800a108 <_Balloc+0x20>
 800a0fe:	4b18      	ldr	r3, [pc, #96]	@ (800a160 <_Balloc+0x78>)
 800a100:	4818      	ldr	r0, [pc, #96]	@ (800a164 <_Balloc+0x7c>)
 800a102:	216b      	movs	r1, #107	@ 0x6b
 800a104:	f7ff f878 	bl	80091f8 <__assert_func>
 800a108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a10c:	6006      	str	r6, [r0, #0]
 800a10e:	60c6      	str	r6, [r0, #12]
 800a110:	69e6      	ldr	r6, [r4, #28]
 800a112:	68f3      	ldr	r3, [r6, #12]
 800a114:	b183      	cbz	r3, 800a138 <_Balloc+0x50>
 800a116:	69e3      	ldr	r3, [r4, #28]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a11e:	b9b8      	cbnz	r0, 800a150 <_Balloc+0x68>
 800a120:	2101      	movs	r1, #1
 800a122:	fa01 f605 	lsl.w	r6, r1, r5
 800a126:	1d72      	adds	r2, r6, #5
 800a128:	0092      	lsls	r2, r2, #2
 800a12a:	4620      	mov	r0, r4
 800a12c:	f001 ff1f 	bl	800bf6e <_calloc_r>
 800a130:	b160      	cbz	r0, 800a14c <_Balloc+0x64>
 800a132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a136:	e00e      	b.n	800a156 <_Balloc+0x6e>
 800a138:	2221      	movs	r2, #33	@ 0x21
 800a13a:	2104      	movs	r1, #4
 800a13c:	4620      	mov	r0, r4
 800a13e:	f001 ff16 	bl	800bf6e <_calloc_r>
 800a142:	69e3      	ldr	r3, [r4, #28]
 800a144:	60f0      	str	r0, [r6, #12]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e4      	bne.n	800a116 <_Balloc+0x2e>
 800a14c:	2000      	movs	r0, #0
 800a14e:	bd70      	pop	{r4, r5, r6, pc}
 800a150:	6802      	ldr	r2, [r0, #0]
 800a152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a156:	2300      	movs	r3, #0
 800a158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a15c:	e7f7      	b.n	800a14e <_Balloc+0x66>
 800a15e:	bf00      	nop
 800a160:	0800d0f9 	.word	0x0800d0f9
 800a164:	0800d21c 	.word	0x0800d21c

0800a168 <_Bfree>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	69c6      	ldr	r6, [r0, #28]
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	b976      	cbnz	r6, 800a190 <_Bfree+0x28>
 800a172:	2010      	movs	r0, #16
 800a174:	f7ff ff02 	bl	8009f7c <malloc>
 800a178:	4602      	mov	r2, r0
 800a17a:	61e8      	str	r0, [r5, #28]
 800a17c:	b920      	cbnz	r0, 800a188 <_Bfree+0x20>
 800a17e:	4b09      	ldr	r3, [pc, #36]	@ (800a1a4 <_Bfree+0x3c>)
 800a180:	4809      	ldr	r0, [pc, #36]	@ (800a1a8 <_Bfree+0x40>)
 800a182:	218f      	movs	r1, #143	@ 0x8f
 800a184:	f7ff f838 	bl	80091f8 <__assert_func>
 800a188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a18c:	6006      	str	r6, [r0, #0]
 800a18e:	60c6      	str	r6, [r0, #12]
 800a190:	b13c      	cbz	r4, 800a1a2 <_Bfree+0x3a>
 800a192:	69eb      	ldr	r3, [r5, #28]
 800a194:	6862      	ldr	r2, [r4, #4]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a19c:	6021      	str	r1, [r4, #0]
 800a19e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	0800d0f9 	.word	0x0800d0f9
 800a1a8:	0800d21c 	.word	0x0800d21c

0800a1ac <__multadd>:
 800a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b0:	690d      	ldr	r5, [r1, #16]
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	461e      	mov	r6, r3
 800a1b8:	f101 0c14 	add.w	ip, r1, #20
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f8dc 3000 	ldr.w	r3, [ip]
 800a1c2:	b299      	uxth	r1, r3
 800a1c4:	fb02 6101 	mla	r1, r2, r1, r6
 800a1c8:	0c1e      	lsrs	r6, r3, #16
 800a1ca:	0c0b      	lsrs	r3, r1, #16
 800a1cc:	fb02 3306 	mla	r3, r2, r6, r3
 800a1d0:	b289      	uxth	r1, r1
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1d8:	4285      	cmp	r5, r0
 800a1da:	f84c 1b04 	str.w	r1, [ip], #4
 800a1de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1e2:	dcec      	bgt.n	800a1be <__multadd+0x12>
 800a1e4:	b30e      	cbz	r6, 800a22a <__multadd+0x7e>
 800a1e6:	68a3      	ldr	r3, [r4, #8]
 800a1e8:	42ab      	cmp	r3, r5
 800a1ea:	dc19      	bgt.n	800a220 <__multadd+0x74>
 800a1ec:	6861      	ldr	r1, [r4, #4]
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	3101      	adds	r1, #1
 800a1f2:	f7ff ff79 	bl	800a0e8 <_Balloc>
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <__multadd+0x5a>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a230 <__multadd+0x84>)
 800a1fe:	480d      	ldr	r0, [pc, #52]	@ (800a234 <__multadd+0x88>)
 800a200:	21ba      	movs	r1, #186	@ 0xba
 800a202:	f7fe fff9 	bl	80091f8 <__assert_func>
 800a206:	6922      	ldr	r2, [r4, #16]
 800a208:	3202      	adds	r2, #2
 800a20a:	f104 010c 	add.w	r1, r4, #12
 800a20e:	0092      	lsls	r2, r2, #2
 800a210:	300c      	adds	r0, #12
 800a212:	f7fe ffdc 	bl	80091ce <memcpy>
 800a216:	4621      	mov	r1, r4
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff ffa5 	bl	800a168 <_Bfree>
 800a21e:	4644      	mov	r4, r8
 800a220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a224:	3501      	adds	r5, #1
 800a226:	615e      	str	r6, [r3, #20]
 800a228:	6125      	str	r5, [r4, #16]
 800a22a:	4620      	mov	r0, r4
 800a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a230:	0800d20b 	.word	0x0800d20b
 800a234:	0800d21c 	.word	0x0800d21c

0800a238 <__s2b>:
 800a238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a23c:	460c      	mov	r4, r1
 800a23e:	4615      	mov	r5, r2
 800a240:	461f      	mov	r7, r3
 800a242:	2209      	movs	r2, #9
 800a244:	3308      	adds	r3, #8
 800a246:	4606      	mov	r6, r0
 800a248:	fb93 f3f2 	sdiv	r3, r3, r2
 800a24c:	2100      	movs	r1, #0
 800a24e:	2201      	movs	r2, #1
 800a250:	429a      	cmp	r2, r3
 800a252:	db09      	blt.n	800a268 <__s2b+0x30>
 800a254:	4630      	mov	r0, r6
 800a256:	f7ff ff47 	bl	800a0e8 <_Balloc>
 800a25a:	b940      	cbnz	r0, 800a26e <__s2b+0x36>
 800a25c:	4602      	mov	r2, r0
 800a25e:	4b19      	ldr	r3, [pc, #100]	@ (800a2c4 <__s2b+0x8c>)
 800a260:	4819      	ldr	r0, [pc, #100]	@ (800a2c8 <__s2b+0x90>)
 800a262:	21d3      	movs	r1, #211	@ 0xd3
 800a264:	f7fe ffc8 	bl	80091f8 <__assert_func>
 800a268:	0052      	lsls	r2, r2, #1
 800a26a:	3101      	adds	r1, #1
 800a26c:	e7f0      	b.n	800a250 <__s2b+0x18>
 800a26e:	9b08      	ldr	r3, [sp, #32]
 800a270:	6143      	str	r3, [r0, #20]
 800a272:	2d09      	cmp	r5, #9
 800a274:	f04f 0301 	mov.w	r3, #1
 800a278:	6103      	str	r3, [r0, #16]
 800a27a:	dd16      	ble.n	800a2aa <__s2b+0x72>
 800a27c:	f104 0909 	add.w	r9, r4, #9
 800a280:	46c8      	mov	r8, r9
 800a282:	442c      	add	r4, r5
 800a284:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a288:	4601      	mov	r1, r0
 800a28a:	3b30      	subs	r3, #48	@ 0x30
 800a28c:	220a      	movs	r2, #10
 800a28e:	4630      	mov	r0, r6
 800a290:	f7ff ff8c 	bl	800a1ac <__multadd>
 800a294:	45a0      	cmp	r8, r4
 800a296:	d1f5      	bne.n	800a284 <__s2b+0x4c>
 800a298:	f1a5 0408 	sub.w	r4, r5, #8
 800a29c:	444c      	add	r4, r9
 800a29e:	1b2d      	subs	r5, r5, r4
 800a2a0:	1963      	adds	r3, r4, r5
 800a2a2:	42bb      	cmp	r3, r7
 800a2a4:	db04      	blt.n	800a2b0 <__s2b+0x78>
 800a2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2aa:	340a      	adds	r4, #10
 800a2ac:	2509      	movs	r5, #9
 800a2ae:	e7f6      	b.n	800a29e <__s2b+0x66>
 800a2b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	3b30      	subs	r3, #48	@ 0x30
 800a2b8:	220a      	movs	r2, #10
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ff76 	bl	800a1ac <__multadd>
 800a2c0:	e7ee      	b.n	800a2a0 <__s2b+0x68>
 800a2c2:	bf00      	nop
 800a2c4:	0800d20b 	.word	0x0800d20b
 800a2c8:	0800d21c 	.word	0x0800d21c

0800a2cc <__hi0bits>:
 800a2cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	bf36      	itet	cc
 800a2d4:	0403      	lslcc	r3, r0, #16
 800a2d6:	2000      	movcs	r0, #0
 800a2d8:	2010      	movcc	r0, #16
 800a2da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2de:	bf3c      	itt	cc
 800a2e0:	021b      	lslcc	r3, r3, #8
 800a2e2:	3008      	addcc	r0, #8
 800a2e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2e8:	bf3c      	itt	cc
 800a2ea:	011b      	lslcc	r3, r3, #4
 800a2ec:	3004      	addcc	r0, #4
 800a2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2f2:	bf3c      	itt	cc
 800a2f4:	009b      	lslcc	r3, r3, #2
 800a2f6:	3002      	addcc	r0, #2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	db05      	blt.n	800a308 <__hi0bits+0x3c>
 800a2fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a300:	f100 0001 	add.w	r0, r0, #1
 800a304:	bf08      	it	eq
 800a306:	2020      	moveq	r0, #32
 800a308:	4770      	bx	lr

0800a30a <__lo0bits>:
 800a30a:	6803      	ldr	r3, [r0, #0]
 800a30c:	4602      	mov	r2, r0
 800a30e:	f013 0007 	ands.w	r0, r3, #7
 800a312:	d00b      	beq.n	800a32c <__lo0bits+0x22>
 800a314:	07d9      	lsls	r1, r3, #31
 800a316:	d421      	bmi.n	800a35c <__lo0bits+0x52>
 800a318:	0798      	lsls	r0, r3, #30
 800a31a:	bf49      	itett	mi
 800a31c:	085b      	lsrmi	r3, r3, #1
 800a31e:	089b      	lsrpl	r3, r3, #2
 800a320:	2001      	movmi	r0, #1
 800a322:	6013      	strmi	r3, [r2, #0]
 800a324:	bf5c      	itt	pl
 800a326:	6013      	strpl	r3, [r2, #0]
 800a328:	2002      	movpl	r0, #2
 800a32a:	4770      	bx	lr
 800a32c:	b299      	uxth	r1, r3
 800a32e:	b909      	cbnz	r1, 800a334 <__lo0bits+0x2a>
 800a330:	0c1b      	lsrs	r3, r3, #16
 800a332:	2010      	movs	r0, #16
 800a334:	b2d9      	uxtb	r1, r3
 800a336:	b909      	cbnz	r1, 800a33c <__lo0bits+0x32>
 800a338:	3008      	adds	r0, #8
 800a33a:	0a1b      	lsrs	r3, r3, #8
 800a33c:	0719      	lsls	r1, r3, #28
 800a33e:	bf04      	itt	eq
 800a340:	091b      	lsreq	r3, r3, #4
 800a342:	3004      	addeq	r0, #4
 800a344:	0799      	lsls	r1, r3, #30
 800a346:	bf04      	itt	eq
 800a348:	089b      	lsreq	r3, r3, #2
 800a34a:	3002      	addeq	r0, #2
 800a34c:	07d9      	lsls	r1, r3, #31
 800a34e:	d403      	bmi.n	800a358 <__lo0bits+0x4e>
 800a350:	085b      	lsrs	r3, r3, #1
 800a352:	f100 0001 	add.w	r0, r0, #1
 800a356:	d003      	beq.n	800a360 <__lo0bits+0x56>
 800a358:	6013      	str	r3, [r2, #0]
 800a35a:	4770      	bx	lr
 800a35c:	2000      	movs	r0, #0
 800a35e:	4770      	bx	lr
 800a360:	2020      	movs	r0, #32
 800a362:	4770      	bx	lr

0800a364 <__i2b>:
 800a364:	b510      	push	{r4, lr}
 800a366:	460c      	mov	r4, r1
 800a368:	2101      	movs	r1, #1
 800a36a:	f7ff febd 	bl	800a0e8 <_Balloc>
 800a36e:	4602      	mov	r2, r0
 800a370:	b928      	cbnz	r0, 800a37e <__i2b+0x1a>
 800a372:	4b05      	ldr	r3, [pc, #20]	@ (800a388 <__i2b+0x24>)
 800a374:	4805      	ldr	r0, [pc, #20]	@ (800a38c <__i2b+0x28>)
 800a376:	f240 1145 	movw	r1, #325	@ 0x145
 800a37a:	f7fe ff3d 	bl	80091f8 <__assert_func>
 800a37e:	2301      	movs	r3, #1
 800a380:	6144      	str	r4, [r0, #20]
 800a382:	6103      	str	r3, [r0, #16]
 800a384:	bd10      	pop	{r4, pc}
 800a386:	bf00      	nop
 800a388:	0800d20b 	.word	0x0800d20b
 800a38c:	0800d21c 	.word	0x0800d21c

0800a390 <__multiply>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	4617      	mov	r7, r2
 800a396:	690a      	ldr	r2, [r1, #16]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	bfa8      	it	ge
 800a39e:	463b      	movge	r3, r7
 800a3a0:	4689      	mov	r9, r1
 800a3a2:	bfa4      	itt	ge
 800a3a4:	460f      	movge	r7, r1
 800a3a6:	4699      	movge	r9, r3
 800a3a8:	693d      	ldr	r5, [r7, #16]
 800a3aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6879      	ldr	r1, [r7, #4]
 800a3b2:	eb05 060a 	add.w	r6, r5, sl
 800a3b6:	42b3      	cmp	r3, r6
 800a3b8:	b085      	sub	sp, #20
 800a3ba:	bfb8      	it	lt
 800a3bc:	3101      	addlt	r1, #1
 800a3be:	f7ff fe93 	bl	800a0e8 <_Balloc>
 800a3c2:	b930      	cbnz	r0, 800a3d2 <__multiply+0x42>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	4b41      	ldr	r3, [pc, #260]	@ (800a4cc <__multiply+0x13c>)
 800a3c8:	4841      	ldr	r0, [pc, #260]	@ (800a4d0 <__multiply+0x140>)
 800a3ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3ce:	f7fe ff13 	bl	80091f8 <__assert_func>
 800a3d2:	f100 0414 	add.w	r4, r0, #20
 800a3d6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a3da:	4623      	mov	r3, r4
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4573      	cmp	r3, lr
 800a3e0:	d320      	bcc.n	800a424 <__multiply+0x94>
 800a3e2:	f107 0814 	add.w	r8, r7, #20
 800a3e6:	f109 0114 	add.w	r1, r9, #20
 800a3ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a3ee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a3f2:	9302      	str	r3, [sp, #8]
 800a3f4:	1beb      	subs	r3, r5, r7
 800a3f6:	3b15      	subs	r3, #21
 800a3f8:	f023 0303 	bic.w	r3, r3, #3
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	3715      	adds	r7, #21
 800a400:	42bd      	cmp	r5, r7
 800a402:	bf38      	it	cc
 800a404:	2304      	movcc	r3, #4
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	9b02      	ldr	r3, [sp, #8]
 800a40a:	9103      	str	r1, [sp, #12]
 800a40c:	428b      	cmp	r3, r1
 800a40e:	d80c      	bhi.n	800a42a <__multiply+0x9a>
 800a410:	2e00      	cmp	r6, #0
 800a412:	dd03      	ble.n	800a41c <__multiply+0x8c>
 800a414:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d055      	beq.n	800a4c8 <__multiply+0x138>
 800a41c:	6106      	str	r6, [r0, #16]
 800a41e:	b005      	add	sp, #20
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	f843 2b04 	str.w	r2, [r3], #4
 800a428:	e7d9      	b.n	800a3de <__multiply+0x4e>
 800a42a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a42e:	f1ba 0f00 	cmp.w	sl, #0
 800a432:	d01f      	beq.n	800a474 <__multiply+0xe4>
 800a434:	46c4      	mov	ip, r8
 800a436:	46a1      	mov	r9, r4
 800a438:	2700      	movs	r7, #0
 800a43a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a43e:	f8d9 3000 	ldr.w	r3, [r9]
 800a442:	fa1f fb82 	uxth.w	fp, r2
 800a446:	b29b      	uxth	r3, r3
 800a448:	fb0a 330b 	mla	r3, sl, fp, r3
 800a44c:	443b      	add	r3, r7
 800a44e:	f8d9 7000 	ldr.w	r7, [r9]
 800a452:	0c12      	lsrs	r2, r2, #16
 800a454:	0c3f      	lsrs	r7, r7, #16
 800a456:	fb0a 7202 	mla	r2, sl, r2, r7
 800a45a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a45e:	b29b      	uxth	r3, r3
 800a460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a464:	4565      	cmp	r5, ip
 800a466:	f849 3b04 	str.w	r3, [r9], #4
 800a46a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a46e:	d8e4      	bhi.n	800a43a <__multiply+0xaa>
 800a470:	9b01      	ldr	r3, [sp, #4]
 800a472:	50e7      	str	r7, [r4, r3]
 800a474:	9b03      	ldr	r3, [sp, #12]
 800a476:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a47a:	3104      	adds	r1, #4
 800a47c:	f1b9 0f00 	cmp.w	r9, #0
 800a480:	d020      	beq.n	800a4c4 <__multiply+0x134>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	4647      	mov	r7, r8
 800a486:	46a4      	mov	ip, r4
 800a488:	f04f 0a00 	mov.w	sl, #0
 800a48c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a490:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a494:	fb09 220b 	mla	r2, r9, fp, r2
 800a498:	4452      	add	r2, sl
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4a0:	f84c 3b04 	str.w	r3, [ip], #4
 800a4a4:	f857 3b04 	ldr.w	r3, [r7], #4
 800a4a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4ac:	f8bc 3000 	ldrh.w	r3, [ip]
 800a4b0:	fb09 330a 	mla	r3, r9, sl, r3
 800a4b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a4b8:	42bd      	cmp	r5, r7
 800a4ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4be:	d8e5      	bhi.n	800a48c <__multiply+0xfc>
 800a4c0:	9a01      	ldr	r2, [sp, #4]
 800a4c2:	50a3      	str	r3, [r4, r2]
 800a4c4:	3404      	adds	r4, #4
 800a4c6:	e79f      	b.n	800a408 <__multiply+0x78>
 800a4c8:	3e01      	subs	r6, #1
 800a4ca:	e7a1      	b.n	800a410 <__multiply+0x80>
 800a4cc:	0800d20b 	.word	0x0800d20b
 800a4d0:	0800d21c 	.word	0x0800d21c

0800a4d4 <__pow5mult>:
 800a4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d8:	4615      	mov	r5, r2
 800a4da:	f012 0203 	ands.w	r2, r2, #3
 800a4de:	4607      	mov	r7, r0
 800a4e0:	460e      	mov	r6, r1
 800a4e2:	d007      	beq.n	800a4f4 <__pow5mult+0x20>
 800a4e4:	4c25      	ldr	r4, [pc, #148]	@ (800a57c <__pow5mult+0xa8>)
 800a4e6:	3a01      	subs	r2, #1
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4ee:	f7ff fe5d 	bl	800a1ac <__multadd>
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	10ad      	asrs	r5, r5, #2
 800a4f6:	d03d      	beq.n	800a574 <__pow5mult+0xa0>
 800a4f8:	69fc      	ldr	r4, [r7, #28]
 800a4fa:	b97c      	cbnz	r4, 800a51c <__pow5mult+0x48>
 800a4fc:	2010      	movs	r0, #16
 800a4fe:	f7ff fd3d 	bl	8009f7c <malloc>
 800a502:	4602      	mov	r2, r0
 800a504:	61f8      	str	r0, [r7, #28]
 800a506:	b928      	cbnz	r0, 800a514 <__pow5mult+0x40>
 800a508:	4b1d      	ldr	r3, [pc, #116]	@ (800a580 <__pow5mult+0xac>)
 800a50a:	481e      	ldr	r0, [pc, #120]	@ (800a584 <__pow5mult+0xb0>)
 800a50c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a510:	f7fe fe72 	bl	80091f8 <__assert_func>
 800a514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a518:	6004      	str	r4, [r0, #0]
 800a51a:	60c4      	str	r4, [r0, #12]
 800a51c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a524:	b94c      	cbnz	r4, 800a53a <__pow5mult+0x66>
 800a526:	f240 2171 	movw	r1, #625	@ 0x271
 800a52a:	4638      	mov	r0, r7
 800a52c:	f7ff ff1a 	bl	800a364 <__i2b>
 800a530:	2300      	movs	r3, #0
 800a532:	f8c8 0008 	str.w	r0, [r8, #8]
 800a536:	4604      	mov	r4, r0
 800a538:	6003      	str	r3, [r0, #0]
 800a53a:	f04f 0900 	mov.w	r9, #0
 800a53e:	07eb      	lsls	r3, r5, #31
 800a540:	d50a      	bpl.n	800a558 <__pow5mult+0x84>
 800a542:	4631      	mov	r1, r6
 800a544:	4622      	mov	r2, r4
 800a546:	4638      	mov	r0, r7
 800a548:	f7ff ff22 	bl	800a390 <__multiply>
 800a54c:	4631      	mov	r1, r6
 800a54e:	4680      	mov	r8, r0
 800a550:	4638      	mov	r0, r7
 800a552:	f7ff fe09 	bl	800a168 <_Bfree>
 800a556:	4646      	mov	r6, r8
 800a558:	106d      	asrs	r5, r5, #1
 800a55a:	d00b      	beq.n	800a574 <__pow5mult+0xa0>
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	b938      	cbnz	r0, 800a570 <__pow5mult+0x9c>
 800a560:	4622      	mov	r2, r4
 800a562:	4621      	mov	r1, r4
 800a564:	4638      	mov	r0, r7
 800a566:	f7ff ff13 	bl	800a390 <__multiply>
 800a56a:	6020      	str	r0, [r4, #0]
 800a56c:	f8c0 9000 	str.w	r9, [r0]
 800a570:	4604      	mov	r4, r0
 800a572:	e7e4      	b.n	800a53e <__pow5mult+0x6a>
 800a574:	4630      	mov	r0, r6
 800a576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57a:	bf00      	nop
 800a57c:	0800d2f0 	.word	0x0800d2f0
 800a580:	0800d0f9 	.word	0x0800d0f9
 800a584:	0800d21c 	.word	0x0800d21c

0800a588 <__lshift>:
 800a588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a58c:	460c      	mov	r4, r1
 800a58e:	6849      	ldr	r1, [r1, #4]
 800a590:	6923      	ldr	r3, [r4, #16]
 800a592:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a596:	68a3      	ldr	r3, [r4, #8]
 800a598:	4607      	mov	r7, r0
 800a59a:	4691      	mov	r9, r2
 800a59c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5a0:	f108 0601 	add.w	r6, r8, #1
 800a5a4:	42b3      	cmp	r3, r6
 800a5a6:	db0b      	blt.n	800a5c0 <__lshift+0x38>
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f7ff fd9d 	bl	800a0e8 <_Balloc>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	b948      	cbnz	r0, 800a5c6 <__lshift+0x3e>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4b28      	ldr	r3, [pc, #160]	@ (800a658 <__lshift+0xd0>)
 800a5b6:	4829      	ldr	r0, [pc, #164]	@ (800a65c <__lshift+0xd4>)
 800a5b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5bc:	f7fe fe1c 	bl	80091f8 <__assert_func>
 800a5c0:	3101      	adds	r1, #1
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	e7ee      	b.n	800a5a4 <__lshift+0x1c>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f100 0114 	add.w	r1, r0, #20
 800a5cc:	f100 0210 	add.w	r2, r0, #16
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	4553      	cmp	r3, sl
 800a5d4:	db33      	blt.n	800a63e <__lshift+0xb6>
 800a5d6:	6920      	ldr	r0, [r4, #16]
 800a5d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5dc:	f104 0314 	add.w	r3, r4, #20
 800a5e0:	f019 091f 	ands.w	r9, r9, #31
 800a5e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5ec:	d02b      	beq.n	800a646 <__lshift+0xbe>
 800a5ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a5f2:	468a      	mov	sl, r1
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	fa00 f009 	lsl.w	r0, r0, r9
 800a5fc:	4310      	orrs	r0, r2
 800a5fe:	f84a 0b04 	str.w	r0, [sl], #4
 800a602:	f853 2b04 	ldr.w	r2, [r3], #4
 800a606:	459c      	cmp	ip, r3
 800a608:	fa22 f20e 	lsr.w	r2, r2, lr
 800a60c:	d8f3      	bhi.n	800a5f6 <__lshift+0x6e>
 800a60e:	ebac 0304 	sub.w	r3, ip, r4
 800a612:	3b15      	subs	r3, #21
 800a614:	f023 0303 	bic.w	r3, r3, #3
 800a618:	3304      	adds	r3, #4
 800a61a:	f104 0015 	add.w	r0, r4, #21
 800a61e:	4560      	cmp	r0, ip
 800a620:	bf88      	it	hi
 800a622:	2304      	movhi	r3, #4
 800a624:	50ca      	str	r2, [r1, r3]
 800a626:	b10a      	cbz	r2, 800a62c <__lshift+0xa4>
 800a628:	f108 0602 	add.w	r6, r8, #2
 800a62c:	3e01      	subs	r6, #1
 800a62e:	4638      	mov	r0, r7
 800a630:	612e      	str	r6, [r5, #16]
 800a632:	4621      	mov	r1, r4
 800a634:	f7ff fd98 	bl	800a168 <_Bfree>
 800a638:	4628      	mov	r0, r5
 800a63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a642:	3301      	adds	r3, #1
 800a644:	e7c5      	b.n	800a5d2 <__lshift+0x4a>
 800a646:	3904      	subs	r1, #4
 800a648:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a650:	459c      	cmp	ip, r3
 800a652:	d8f9      	bhi.n	800a648 <__lshift+0xc0>
 800a654:	e7ea      	b.n	800a62c <__lshift+0xa4>
 800a656:	bf00      	nop
 800a658:	0800d20b 	.word	0x0800d20b
 800a65c:	0800d21c 	.word	0x0800d21c

0800a660 <__mcmp>:
 800a660:	690a      	ldr	r2, [r1, #16]
 800a662:	4603      	mov	r3, r0
 800a664:	6900      	ldr	r0, [r0, #16]
 800a666:	1a80      	subs	r0, r0, r2
 800a668:	b530      	push	{r4, r5, lr}
 800a66a:	d10e      	bne.n	800a68a <__mcmp+0x2a>
 800a66c:	3314      	adds	r3, #20
 800a66e:	3114      	adds	r1, #20
 800a670:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a674:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a678:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a67c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a680:	4295      	cmp	r5, r2
 800a682:	d003      	beq.n	800a68c <__mcmp+0x2c>
 800a684:	d205      	bcs.n	800a692 <__mcmp+0x32>
 800a686:	f04f 30ff 	mov.w	r0, #4294967295
 800a68a:	bd30      	pop	{r4, r5, pc}
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	d3f3      	bcc.n	800a678 <__mcmp+0x18>
 800a690:	e7fb      	b.n	800a68a <__mcmp+0x2a>
 800a692:	2001      	movs	r0, #1
 800a694:	e7f9      	b.n	800a68a <__mcmp+0x2a>
	...

0800a698 <__mdiff>:
 800a698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	4689      	mov	r9, r1
 800a69e:	4606      	mov	r6, r0
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	4648      	mov	r0, r9
 800a6a4:	4614      	mov	r4, r2
 800a6a6:	f7ff ffdb 	bl	800a660 <__mcmp>
 800a6aa:	1e05      	subs	r5, r0, #0
 800a6ac:	d112      	bne.n	800a6d4 <__mdiff+0x3c>
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7ff fd19 	bl	800a0e8 <_Balloc>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	b928      	cbnz	r0, 800a6c6 <__mdiff+0x2e>
 800a6ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a7b8 <__mdiff+0x120>)
 800a6bc:	f240 2137 	movw	r1, #567	@ 0x237
 800a6c0:	483e      	ldr	r0, [pc, #248]	@ (800a7bc <__mdiff+0x124>)
 800a6c2:	f7fe fd99 	bl	80091f8 <__assert_func>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	b003      	add	sp, #12
 800a6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d4:	bfbc      	itt	lt
 800a6d6:	464b      	movlt	r3, r9
 800a6d8:	46a1      	movlt	r9, r4
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6e0:	bfba      	itte	lt
 800a6e2:	461c      	movlt	r4, r3
 800a6e4:	2501      	movlt	r5, #1
 800a6e6:	2500      	movge	r5, #0
 800a6e8:	f7ff fcfe 	bl	800a0e8 <_Balloc>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	b918      	cbnz	r0, 800a6f8 <__mdiff+0x60>
 800a6f0:	4b31      	ldr	r3, [pc, #196]	@ (800a7b8 <__mdiff+0x120>)
 800a6f2:	f240 2145 	movw	r1, #581	@ 0x245
 800a6f6:	e7e3      	b.n	800a6c0 <__mdiff+0x28>
 800a6f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6fc:	6926      	ldr	r6, [r4, #16]
 800a6fe:	60c5      	str	r5, [r0, #12]
 800a700:	f109 0310 	add.w	r3, r9, #16
 800a704:	f109 0514 	add.w	r5, r9, #20
 800a708:	f104 0e14 	add.w	lr, r4, #20
 800a70c:	f100 0b14 	add.w	fp, r0, #20
 800a710:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a714:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	46d9      	mov	r9, fp
 800a71c:	f04f 0c00 	mov.w	ip, #0
 800a720:	9b01      	ldr	r3, [sp, #4]
 800a722:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a726:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a72a:	9301      	str	r3, [sp, #4]
 800a72c:	fa1f f38a 	uxth.w	r3, sl
 800a730:	4619      	mov	r1, r3
 800a732:	b283      	uxth	r3, r0
 800a734:	1acb      	subs	r3, r1, r3
 800a736:	0c00      	lsrs	r0, r0, #16
 800a738:	4463      	add	r3, ip
 800a73a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a73e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a742:	b29b      	uxth	r3, r3
 800a744:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a748:	4576      	cmp	r6, lr
 800a74a:	f849 3b04 	str.w	r3, [r9], #4
 800a74e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a752:	d8e5      	bhi.n	800a720 <__mdiff+0x88>
 800a754:	1b33      	subs	r3, r6, r4
 800a756:	3b15      	subs	r3, #21
 800a758:	f023 0303 	bic.w	r3, r3, #3
 800a75c:	3415      	adds	r4, #21
 800a75e:	3304      	adds	r3, #4
 800a760:	42a6      	cmp	r6, r4
 800a762:	bf38      	it	cc
 800a764:	2304      	movcc	r3, #4
 800a766:	441d      	add	r5, r3
 800a768:	445b      	add	r3, fp
 800a76a:	461e      	mov	r6, r3
 800a76c:	462c      	mov	r4, r5
 800a76e:	4544      	cmp	r4, r8
 800a770:	d30e      	bcc.n	800a790 <__mdiff+0xf8>
 800a772:	f108 0103 	add.w	r1, r8, #3
 800a776:	1b49      	subs	r1, r1, r5
 800a778:	f021 0103 	bic.w	r1, r1, #3
 800a77c:	3d03      	subs	r5, #3
 800a77e:	45a8      	cmp	r8, r5
 800a780:	bf38      	it	cc
 800a782:	2100      	movcc	r1, #0
 800a784:	440b      	add	r3, r1
 800a786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a78a:	b191      	cbz	r1, 800a7b2 <__mdiff+0x11a>
 800a78c:	6117      	str	r7, [r2, #16]
 800a78e:	e79d      	b.n	800a6cc <__mdiff+0x34>
 800a790:	f854 1b04 	ldr.w	r1, [r4], #4
 800a794:	46e6      	mov	lr, ip
 800a796:	0c08      	lsrs	r0, r1, #16
 800a798:	fa1c fc81 	uxtah	ip, ip, r1
 800a79c:	4471      	add	r1, lr
 800a79e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7a2:	b289      	uxth	r1, r1
 800a7a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7a8:	f846 1b04 	str.w	r1, [r6], #4
 800a7ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7b0:	e7dd      	b.n	800a76e <__mdiff+0xd6>
 800a7b2:	3f01      	subs	r7, #1
 800a7b4:	e7e7      	b.n	800a786 <__mdiff+0xee>
 800a7b6:	bf00      	nop
 800a7b8:	0800d20b 	.word	0x0800d20b
 800a7bc:	0800d21c 	.word	0x0800d21c

0800a7c0 <__ulp>:
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	ed8d 0b00 	vstr	d0, [sp]
 800a7c6:	9a01      	ldr	r2, [sp, #4]
 800a7c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a808 <__ulp+0x48>)
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	dc08      	bgt.n	800a7e6 <__ulp+0x26>
 800a7d4:	425b      	negs	r3, r3
 800a7d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a7da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a7de:	da04      	bge.n	800a7ea <__ulp+0x2a>
 800a7e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a7e4:	4113      	asrs	r3, r2
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	e008      	b.n	800a7fc <__ulp+0x3c>
 800a7ea:	f1a2 0314 	sub.w	r3, r2, #20
 800a7ee:	2b1e      	cmp	r3, #30
 800a7f0:	bfda      	itte	le
 800a7f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a7f6:	40da      	lsrle	r2, r3
 800a7f8:	2201      	movgt	r2, #1
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	ec41 0b10 	vmov	d0, r0, r1
 800a804:	b002      	add	sp, #8
 800a806:	4770      	bx	lr
 800a808:	7ff00000 	.word	0x7ff00000

0800a80c <__b2d>:
 800a80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a810:	6906      	ldr	r6, [r0, #16]
 800a812:	f100 0814 	add.w	r8, r0, #20
 800a816:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a81a:	1f37      	subs	r7, r6, #4
 800a81c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a820:	4610      	mov	r0, r2
 800a822:	f7ff fd53 	bl	800a2cc <__hi0bits>
 800a826:	f1c0 0320 	rsb	r3, r0, #32
 800a82a:	280a      	cmp	r0, #10
 800a82c:	600b      	str	r3, [r1, #0]
 800a82e:	491b      	ldr	r1, [pc, #108]	@ (800a89c <__b2d+0x90>)
 800a830:	dc15      	bgt.n	800a85e <__b2d+0x52>
 800a832:	f1c0 0c0b 	rsb	ip, r0, #11
 800a836:	fa22 f30c 	lsr.w	r3, r2, ip
 800a83a:	45b8      	cmp	r8, r7
 800a83c:	ea43 0501 	orr.w	r5, r3, r1
 800a840:	bf34      	ite	cc
 800a842:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a846:	2300      	movcs	r3, #0
 800a848:	3015      	adds	r0, #21
 800a84a:	fa02 f000 	lsl.w	r0, r2, r0
 800a84e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a852:	4303      	orrs	r3, r0
 800a854:	461c      	mov	r4, r3
 800a856:	ec45 4b10 	vmov	d0, r4, r5
 800a85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a85e:	45b8      	cmp	r8, r7
 800a860:	bf3a      	itte	cc
 800a862:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a866:	f1a6 0708 	subcc.w	r7, r6, #8
 800a86a:	2300      	movcs	r3, #0
 800a86c:	380b      	subs	r0, #11
 800a86e:	d012      	beq.n	800a896 <__b2d+0x8a>
 800a870:	f1c0 0120 	rsb	r1, r0, #32
 800a874:	fa23 f401 	lsr.w	r4, r3, r1
 800a878:	4082      	lsls	r2, r0
 800a87a:	4322      	orrs	r2, r4
 800a87c:	4547      	cmp	r7, r8
 800a87e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a882:	bf8c      	ite	hi
 800a884:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a888:	2200      	movls	r2, #0
 800a88a:	4083      	lsls	r3, r0
 800a88c:	40ca      	lsrs	r2, r1
 800a88e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a892:	4313      	orrs	r3, r2
 800a894:	e7de      	b.n	800a854 <__b2d+0x48>
 800a896:	ea42 0501 	orr.w	r5, r2, r1
 800a89a:	e7db      	b.n	800a854 <__b2d+0x48>
 800a89c:	3ff00000 	.word	0x3ff00000

0800a8a0 <__d2b>:
 800a8a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	ec59 8b10 	vmov	r8, r9, d0
 800a8ac:	4616      	mov	r6, r2
 800a8ae:	f7ff fc1b 	bl	800a0e8 <_Balloc>
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	b930      	cbnz	r0, 800a8c4 <__d2b+0x24>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4b23      	ldr	r3, [pc, #140]	@ (800a948 <__d2b+0xa8>)
 800a8ba:	4824      	ldr	r0, [pc, #144]	@ (800a94c <__d2b+0xac>)
 800a8bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8c0:	f7fe fc9a 	bl	80091f8 <__assert_func>
 800a8c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8cc:	b10d      	cbz	r5, 800a8d2 <__d2b+0x32>
 800a8ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	f1b8 0300 	subs.w	r3, r8, #0
 800a8d8:	d023      	beq.n	800a922 <__d2b+0x82>
 800a8da:	4668      	mov	r0, sp
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	f7ff fd14 	bl	800a30a <__lo0bits>
 800a8e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8e6:	b1d0      	cbz	r0, 800a91e <__d2b+0x7e>
 800a8e8:	f1c0 0320 	rsb	r3, r0, #32
 800a8ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	40c2      	lsrs	r2, r0
 800a8f4:	6163      	str	r3, [r4, #20]
 800a8f6:	9201      	str	r2, [sp, #4]
 800a8f8:	9b01      	ldr	r3, [sp, #4]
 800a8fa:	61a3      	str	r3, [r4, #24]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	bf0c      	ite	eq
 800a900:	2201      	moveq	r2, #1
 800a902:	2202      	movne	r2, #2
 800a904:	6122      	str	r2, [r4, #16]
 800a906:	b1a5      	cbz	r5, 800a932 <__d2b+0x92>
 800a908:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a90c:	4405      	add	r5, r0
 800a90e:	603d      	str	r5, [r7, #0]
 800a910:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a914:	6030      	str	r0, [r6, #0]
 800a916:	4620      	mov	r0, r4
 800a918:	b003      	add	sp, #12
 800a91a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a91e:	6161      	str	r1, [r4, #20]
 800a920:	e7ea      	b.n	800a8f8 <__d2b+0x58>
 800a922:	a801      	add	r0, sp, #4
 800a924:	f7ff fcf1 	bl	800a30a <__lo0bits>
 800a928:	9b01      	ldr	r3, [sp, #4]
 800a92a:	6163      	str	r3, [r4, #20]
 800a92c:	3020      	adds	r0, #32
 800a92e:	2201      	movs	r2, #1
 800a930:	e7e8      	b.n	800a904 <__d2b+0x64>
 800a932:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a936:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a93a:	6038      	str	r0, [r7, #0]
 800a93c:	6918      	ldr	r0, [r3, #16]
 800a93e:	f7ff fcc5 	bl	800a2cc <__hi0bits>
 800a942:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a946:	e7e5      	b.n	800a914 <__d2b+0x74>
 800a948:	0800d20b 	.word	0x0800d20b
 800a94c:	0800d21c 	.word	0x0800d21c

0800a950 <__ratio>:
 800a950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	b085      	sub	sp, #20
 800a956:	e9cd 1000 	strd	r1, r0, [sp]
 800a95a:	a902      	add	r1, sp, #8
 800a95c:	f7ff ff56 	bl	800a80c <__b2d>
 800a960:	9800      	ldr	r0, [sp, #0]
 800a962:	a903      	add	r1, sp, #12
 800a964:	ec55 4b10 	vmov	r4, r5, d0
 800a968:	f7ff ff50 	bl	800a80c <__b2d>
 800a96c:	9b01      	ldr	r3, [sp, #4]
 800a96e:	6919      	ldr	r1, [r3, #16]
 800a970:	9b00      	ldr	r3, [sp, #0]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	1ac9      	subs	r1, r1, r3
 800a976:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a97a:	1a9b      	subs	r3, r3, r2
 800a97c:	ec5b ab10 	vmov	sl, fp, d0
 800a980:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a984:	2b00      	cmp	r3, #0
 800a986:	bfce      	itee	gt
 800a988:	462a      	movgt	r2, r5
 800a98a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a98e:	465a      	movle	r2, fp
 800a990:	462f      	mov	r7, r5
 800a992:	46d9      	mov	r9, fp
 800a994:	bfcc      	ite	gt
 800a996:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a99a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a99e:	464b      	mov	r3, r9
 800a9a0:	4652      	mov	r2, sl
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f5 ff51 	bl	800084c <__aeabi_ddiv>
 800a9aa:	ec41 0b10 	vmov	d0, r0, r1
 800a9ae:	b005      	add	sp, #20
 800a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9b4 <__copybits>:
 800a9b4:	3901      	subs	r1, #1
 800a9b6:	b570      	push	{r4, r5, r6, lr}
 800a9b8:	1149      	asrs	r1, r1, #5
 800a9ba:	6914      	ldr	r4, [r2, #16]
 800a9bc:	3101      	adds	r1, #1
 800a9be:	f102 0314 	add.w	r3, r2, #20
 800a9c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9ca:	1f05      	subs	r5, r0, #4
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	d30c      	bcc.n	800a9ea <__copybits+0x36>
 800a9d0:	1aa3      	subs	r3, r4, r2
 800a9d2:	3b11      	subs	r3, #17
 800a9d4:	f023 0303 	bic.w	r3, r3, #3
 800a9d8:	3211      	adds	r2, #17
 800a9da:	42a2      	cmp	r2, r4
 800a9dc:	bf88      	it	hi
 800a9de:	2300      	movhi	r3, #0
 800a9e0:	4418      	add	r0, r3
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	4288      	cmp	r0, r1
 800a9e6:	d305      	bcc.n	800a9f4 <__copybits+0x40>
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9f2:	e7eb      	b.n	800a9cc <__copybits+0x18>
 800a9f4:	f840 3b04 	str.w	r3, [r0], #4
 800a9f8:	e7f4      	b.n	800a9e4 <__copybits+0x30>

0800a9fa <__any_on>:
 800a9fa:	f100 0214 	add.w	r2, r0, #20
 800a9fe:	6900      	ldr	r0, [r0, #16]
 800aa00:	114b      	asrs	r3, r1, #5
 800aa02:	4298      	cmp	r0, r3
 800aa04:	b510      	push	{r4, lr}
 800aa06:	db11      	blt.n	800aa2c <__any_on+0x32>
 800aa08:	dd0a      	ble.n	800aa20 <__any_on+0x26>
 800aa0a:	f011 011f 	ands.w	r1, r1, #31
 800aa0e:	d007      	beq.n	800aa20 <__any_on+0x26>
 800aa10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa14:	fa24 f001 	lsr.w	r0, r4, r1
 800aa18:	fa00 f101 	lsl.w	r1, r0, r1
 800aa1c:	428c      	cmp	r4, r1
 800aa1e:	d10b      	bne.n	800aa38 <__any_on+0x3e>
 800aa20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d803      	bhi.n	800aa30 <__any_on+0x36>
 800aa28:	2000      	movs	r0, #0
 800aa2a:	bd10      	pop	{r4, pc}
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	e7f7      	b.n	800aa20 <__any_on+0x26>
 800aa30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa34:	2900      	cmp	r1, #0
 800aa36:	d0f5      	beq.n	800aa24 <__any_on+0x2a>
 800aa38:	2001      	movs	r0, #1
 800aa3a:	e7f6      	b.n	800aa2a <__any_on+0x30>

0800aa3c <sulp>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	4604      	mov	r4, r0
 800aa40:	460d      	mov	r5, r1
 800aa42:	ec45 4b10 	vmov	d0, r4, r5
 800aa46:	4616      	mov	r6, r2
 800aa48:	f7ff feba 	bl	800a7c0 <__ulp>
 800aa4c:	ec51 0b10 	vmov	r0, r1, d0
 800aa50:	b17e      	cbz	r6, 800aa72 <sulp+0x36>
 800aa52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dd09      	ble.n	800aa72 <sulp+0x36>
 800aa5e:	051b      	lsls	r3, r3, #20
 800aa60:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa64:	2400      	movs	r4, #0
 800aa66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	f7f5 fdc3 	bl	80005f8 <__aeabi_dmul>
 800aa72:	ec41 0b10 	vmov	d0, r0, r1
 800aa76:	bd70      	pop	{r4, r5, r6, pc}

0800aa78 <_strtod_l>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	b09f      	sub	sp, #124	@ 0x7c
 800aa7e:	460c      	mov	r4, r1
 800aa80:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa82:	2200      	movs	r2, #0
 800aa84:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa86:	9005      	str	r0, [sp, #20]
 800aa88:	f04f 0a00 	mov.w	sl, #0
 800aa8c:	f04f 0b00 	mov.w	fp, #0
 800aa90:	460a      	mov	r2, r1
 800aa92:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa94:	7811      	ldrb	r1, [r2, #0]
 800aa96:	292b      	cmp	r1, #43	@ 0x2b
 800aa98:	d04a      	beq.n	800ab30 <_strtod_l+0xb8>
 800aa9a:	d838      	bhi.n	800ab0e <_strtod_l+0x96>
 800aa9c:	290d      	cmp	r1, #13
 800aa9e:	d832      	bhi.n	800ab06 <_strtod_l+0x8e>
 800aaa0:	2908      	cmp	r1, #8
 800aaa2:	d832      	bhi.n	800ab0a <_strtod_l+0x92>
 800aaa4:	2900      	cmp	r1, #0
 800aaa6:	d03b      	beq.n	800ab20 <_strtod_l+0xa8>
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800aaac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aaae:	782a      	ldrb	r2, [r5, #0]
 800aab0:	2a30      	cmp	r2, #48	@ 0x30
 800aab2:	f040 80b2 	bne.w	800ac1a <_strtod_l+0x1a2>
 800aab6:	786a      	ldrb	r2, [r5, #1]
 800aab8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aabc:	2a58      	cmp	r2, #88	@ 0x58
 800aabe:	d16e      	bne.n	800ab9e <_strtod_l+0x126>
 800aac0:	9302      	str	r3, [sp, #8]
 800aac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	ab1a      	add	r3, sp, #104	@ 0x68
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	4a8f      	ldr	r2, [pc, #572]	@ (800ad08 <_strtod_l+0x290>)
 800aacc:	9805      	ldr	r0, [sp, #20]
 800aace:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aad0:	a919      	add	r1, sp, #100	@ 0x64
 800aad2:	f001 fac7 	bl	800c064 <__gethex>
 800aad6:	f010 060f 	ands.w	r6, r0, #15
 800aada:	4604      	mov	r4, r0
 800aadc:	d005      	beq.n	800aaea <_strtod_l+0x72>
 800aade:	2e06      	cmp	r6, #6
 800aae0:	d128      	bne.n	800ab34 <_strtod_l+0xbc>
 800aae2:	3501      	adds	r5, #1
 800aae4:	2300      	movs	r3, #0
 800aae6:	9519      	str	r5, [sp, #100]	@ 0x64
 800aae8:	930e      	str	r3, [sp, #56]	@ 0x38
 800aaea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f040 858e 	bne.w	800b60e <_strtod_l+0xb96>
 800aaf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaf4:	b1cb      	cbz	r3, 800ab2a <_strtod_l+0xb2>
 800aaf6:	4652      	mov	r2, sl
 800aaf8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aafc:	ec43 2b10 	vmov	d0, r2, r3
 800ab00:	b01f      	add	sp, #124	@ 0x7c
 800ab02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab06:	2920      	cmp	r1, #32
 800ab08:	d1ce      	bne.n	800aaa8 <_strtod_l+0x30>
 800ab0a:	3201      	adds	r2, #1
 800ab0c:	e7c1      	b.n	800aa92 <_strtod_l+0x1a>
 800ab0e:	292d      	cmp	r1, #45	@ 0x2d
 800ab10:	d1ca      	bne.n	800aaa8 <_strtod_l+0x30>
 800ab12:	2101      	movs	r1, #1
 800ab14:	910e      	str	r1, [sp, #56]	@ 0x38
 800ab16:	1c51      	adds	r1, r2, #1
 800ab18:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab1a:	7852      	ldrb	r2, [r2, #1]
 800ab1c:	2a00      	cmp	r2, #0
 800ab1e:	d1c5      	bne.n	800aaac <_strtod_l+0x34>
 800ab20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab22:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f040 8570 	bne.w	800b60a <_strtod_l+0xb92>
 800ab2a:	4652      	mov	r2, sl
 800ab2c:	465b      	mov	r3, fp
 800ab2e:	e7e5      	b.n	800aafc <_strtod_l+0x84>
 800ab30:	2100      	movs	r1, #0
 800ab32:	e7ef      	b.n	800ab14 <_strtod_l+0x9c>
 800ab34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab36:	b13a      	cbz	r2, 800ab48 <_strtod_l+0xd0>
 800ab38:	2135      	movs	r1, #53	@ 0x35
 800ab3a:	a81c      	add	r0, sp, #112	@ 0x70
 800ab3c:	f7ff ff3a 	bl	800a9b4 <__copybits>
 800ab40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab42:	9805      	ldr	r0, [sp, #20]
 800ab44:	f7ff fb10 	bl	800a168 <_Bfree>
 800ab48:	3e01      	subs	r6, #1
 800ab4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ab4c:	2e04      	cmp	r6, #4
 800ab4e:	d806      	bhi.n	800ab5e <_strtod_l+0xe6>
 800ab50:	e8df f006 	tbb	[pc, r6]
 800ab54:	201d0314 	.word	0x201d0314
 800ab58:	14          	.byte	0x14
 800ab59:	00          	.byte	0x00
 800ab5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ab5e:	05e1      	lsls	r1, r4, #23
 800ab60:	bf48      	it	mi
 800ab62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ab66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab6a:	0d1b      	lsrs	r3, r3, #20
 800ab6c:	051b      	lsls	r3, r3, #20
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1bb      	bne.n	800aaea <_strtod_l+0x72>
 800ab72:	f7fe faff 	bl	8009174 <__errno>
 800ab76:	2322      	movs	r3, #34	@ 0x22
 800ab78:	6003      	str	r3, [r0, #0]
 800ab7a:	e7b6      	b.n	800aaea <_strtod_l+0x72>
 800ab7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab8c:	e7e7      	b.n	800ab5e <_strtod_l+0xe6>
 800ab8e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ad10 <_strtod_l+0x298>
 800ab92:	e7e4      	b.n	800ab5e <_strtod_l+0xe6>
 800ab94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ab98:	f04f 3aff 	mov.w	sl, #4294967295
 800ab9c:	e7df      	b.n	800ab5e <_strtod_l+0xe6>
 800ab9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	2b30      	cmp	r3, #48	@ 0x30
 800aba8:	d0f9      	beq.n	800ab9e <_strtod_l+0x126>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d09d      	beq.n	800aaea <_strtod_l+0x72>
 800abae:	2301      	movs	r3, #1
 800abb0:	2700      	movs	r7, #0
 800abb2:	9308      	str	r3, [sp, #32]
 800abb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abb6:	930c      	str	r3, [sp, #48]	@ 0x30
 800abb8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800abba:	46b9      	mov	r9, r7
 800abbc:	220a      	movs	r2, #10
 800abbe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800abc0:	7805      	ldrb	r5, [r0, #0]
 800abc2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800abc6:	b2d9      	uxtb	r1, r3
 800abc8:	2909      	cmp	r1, #9
 800abca:	d928      	bls.n	800ac1e <_strtod_l+0x1a6>
 800abcc:	494f      	ldr	r1, [pc, #316]	@ (800ad0c <_strtod_l+0x294>)
 800abce:	2201      	movs	r2, #1
 800abd0:	f7fe f9ee 	bl	8008fb0 <strncmp>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d032      	beq.n	800ac3e <_strtod_l+0x1c6>
 800abd8:	2000      	movs	r0, #0
 800abda:	462a      	mov	r2, r5
 800abdc:	900a      	str	r0, [sp, #40]	@ 0x28
 800abde:	464d      	mov	r5, r9
 800abe0:	4603      	mov	r3, r0
 800abe2:	2a65      	cmp	r2, #101	@ 0x65
 800abe4:	d001      	beq.n	800abea <_strtod_l+0x172>
 800abe6:	2a45      	cmp	r2, #69	@ 0x45
 800abe8:	d114      	bne.n	800ac14 <_strtod_l+0x19c>
 800abea:	b91d      	cbnz	r5, 800abf4 <_strtod_l+0x17c>
 800abec:	9a08      	ldr	r2, [sp, #32]
 800abee:	4302      	orrs	r2, r0
 800abf0:	d096      	beq.n	800ab20 <_strtod_l+0xa8>
 800abf2:	2500      	movs	r5, #0
 800abf4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800abf6:	1c62      	adds	r2, r4, #1
 800abf8:	9219      	str	r2, [sp, #100]	@ 0x64
 800abfa:	7862      	ldrb	r2, [r4, #1]
 800abfc:	2a2b      	cmp	r2, #43	@ 0x2b
 800abfe:	d07a      	beq.n	800acf6 <_strtod_l+0x27e>
 800ac00:	2a2d      	cmp	r2, #45	@ 0x2d
 800ac02:	d07e      	beq.n	800ad02 <_strtod_l+0x28a>
 800ac04:	f04f 0c00 	mov.w	ip, #0
 800ac08:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ac0c:	2909      	cmp	r1, #9
 800ac0e:	f240 8085 	bls.w	800ad1c <_strtod_l+0x2a4>
 800ac12:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac14:	f04f 0800 	mov.w	r8, #0
 800ac18:	e0a5      	b.n	800ad66 <_strtod_l+0x2ee>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e7c8      	b.n	800abb0 <_strtod_l+0x138>
 800ac1e:	f1b9 0f08 	cmp.w	r9, #8
 800ac22:	bfd8      	it	le
 800ac24:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ac26:	f100 0001 	add.w	r0, r0, #1
 800ac2a:	bfda      	itte	le
 800ac2c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac30:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ac32:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ac36:	f109 0901 	add.w	r9, r9, #1
 800ac3a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac3c:	e7bf      	b.n	800abbe <_strtod_l+0x146>
 800ac3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac40:	1c5a      	adds	r2, r3, #1
 800ac42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac44:	785a      	ldrb	r2, [r3, #1]
 800ac46:	f1b9 0f00 	cmp.w	r9, #0
 800ac4a:	d03b      	beq.n	800acc4 <_strtod_l+0x24c>
 800ac4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac4e:	464d      	mov	r5, r9
 800ac50:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ac54:	2b09      	cmp	r3, #9
 800ac56:	d912      	bls.n	800ac7e <_strtod_l+0x206>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e7c2      	b.n	800abe2 <_strtod_l+0x16a>
 800ac5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac62:	785a      	ldrb	r2, [r3, #1]
 800ac64:	3001      	adds	r0, #1
 800ac66:	2a30      	cmp	r2, #48	@ 0x30
 800ac68:	d0f8      	beq.n	800ac5c <_strtod_l+0x1e4>
 800ac6a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ac6e:	2b08      	cmp	r3, #8
 800ac70:	f200 84d2 	bhi.w	800b618 <_strtod_l+0xba0>
 800ac74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac76:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac78:	2000      	movs	r0, #0
 800ac7a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	3a30      	subs	r2, #48	@ 0x30
 800ac80:	f100 0301 	add.w	r3, r0, #1
 800ac84:	d018      	beq.n	800acb8 <_strtod_l+0x240>
 800ac86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac88:	4419      	add	r1, r3
 800ac8a:	910a      	str	r1, [sp, #40]	@ 0x28
 800ac8c:	462e      	mov	r6, r5
 800ac8e:	f04f 0e0a 	mov.w	lr, #10
 800ac92:	1c71      	adds	r1, r6, #1
 800ac94:	eba1 0c05 	sub.w	ip, r1, r5
 800ac98:	4563      	cmp	r3, ip
 800ac9a:	dc15      	bgt.n	800acc8 <_strtod_l+0x250>
 800ac9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800aca0:	182b      	adds	r3, r5, r0
 800aca2:	2b08      	cmp	r3, #8
 800aca4:	f105 0501 	add.w	r5, r5, #1
 800aca8:	4405      	add	r5, r0
 800acaa:	dc1a      	bgt.n	800ace2 <_strtod_l+0x26a>
 800acac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acae:	230a      	movs	r3, #10
 800acb0:	fb03 2301 	mla	r3, r3, r1, r2
 800acb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acb6:	2300      	movs	r3, #0
 800acb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acba:	1c51      	adds	r1, r2, #1
 800acbc:	9119      	str	r1, [sp, #100]	@ 0x64
 800acbe:	7852      	ldrb	r2, [r2, #1]
 800acc0:	4618      	mov	r0, r3
 800acc2:	e7c5      	b.n	800ac50 <_strtod_l+0x1d8>
 800acc4:	4648      	mov	r0, r9
 800acc6:	e7ce      	b.n	800ac66 <_strtod_l+0x1ee>
 800acc8:	2e08      	cmp	r6, #8
 800acca:	dc05      	bgt.n	800acd8 <_strtod_l+0x260>
 800accc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800acce:	fb0e f606 	mul.w	r6, lr, r6
 800acd2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800acd4:	460e      	mov	r6, r1
 800acd6:	e7dc      	b.n	800ac92 <_strtod_l+0x21a>
 800acd8:	2910      	cmp	r1, #16
 800acda:	bfd8      	it	le
 800acdc:	fb0e f707 	mulle.w	r7, lr, r7
 800ace0:	e7f8      	b.n	800acd4 <_strtod_l+0x25c>
 800ace2:	2b0f      	cmp	r3, #15
 800ace4:	bfdc      	itt	le
 800ace6:	230a      	movle	r3, #10
 800ace8:	fb03 2707 	mlale	r7, r3, r7, r2
 800acec:	e7e3      	b.n	800acb6 <_strtod_l+0x23e>
 800acee:	2300      	movs	r3, #0
 800acf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800acf2:	2301      	movs	r3, #1
 800acf4:	e77a      	b.n	800abec <_strtod_l+0x174>
 800acf6:	f04f 0c00 	mov.w	ip, #0
 800acfa:	1ca2      	adds	r2, r4, #2
 800acfc:	9219      	str	r2, [sp, #100]	@ 0x64
 800acfe:	78a2      	ldrb	r2, [r4, #2]
 800ad00:	e782      	b.n	800ac08 <_strtod_l+0x190>
 800ad02:	f04f 0c01 	mov.w	ip, #1
 800ad06:	e7f8      	b.n	800acfa <_strtod_l+0x282>
 800ad08:	0800d404 	.word	0x0800d404
 800ad0c:	0800d275 	.word	0x0800d275
 800ad10:	7ff00000 	.word	0x7ff00000
 800ad14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad16:	1c51      	adds	r1, r2, #1
 800ad18:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad1a:	7852      	ldrb	r2, [r2, #1]
 800ad1c:	2a30      	cmp	r2, #48	@ 0x30
 800ad1e:	d0f9      	beq.n	800ad14 <_strtod_l+0x29c>
 800ad20:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ad24:	2908      	cmp	r1, #8
 800ad26:	f63f af75 	bhi.w	800ac14 <_strtod_l+0x19c>
 800ad2a:	3a30      	subs	r2, #48	@ 0x30
 800ad2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad30:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ad32:	f04f 080a 	mov.w	r8, #10
 800ad36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad38:	1c56      	adds	r6, r2, #1
 800ad3a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ad3c:	7852      	ldrb	r2, [r2, #1]
 800ad3e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ad42:	f1be 0f09 	cmp.w	lr, #9
 800ad46:	d939      	bls.n	800adbc <_strtod_l+0x344>
 800ad48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad4a:	1a76      	subs	r6, r6, r1
 800ad4c:	2e08      	cmp	r6, #8
 800ad4e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ad52:	dc03      	bgt.n	800ad5c <_strtod_l+0x2e4>
 800ad54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad56:	4588      	cmp	r8, r1
 800ad58:	bfa8      	it	ge
 800ad5a:	4688      	movge	r8, r1
 800ad5c:	f1bc 0f00 	cmp.w	ip, #0
 800ad60:	d001      	beq.n	800ad66 <_strtod_l+0x2ee>
 800ad62:	f1c8 0800 	rsb	r8, r8, #0
 800ad66:	2d00      	cmp	r5, #0
 800ad68:	d14e      	bne.n	800ae08 <_strtod_l+0x390>
 800ad6a:	9908      	ldr	r1, [sp, #32]
 800ad6c:	4308      	orrs	r0, r1
 800ad6e:	f47f aebc 	bne.w	800aaea <_strtod_l+0x72>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f47f aed4 	bne.w	800ab20 <_strtod_l+0xa8>
 800ad78:	2a69      	cmp	r2, #105	@ 0x69
 800ad7a:	d028      	beq.n	800adce <_strtod_l+0x356>
 800ad7c:	dc25      	bgt.n	800adca <_strtod_l+0x352>
 800ad7e:	2a49      	cmp	r2, #73	@ 0x49
 800ad80:	d025      	beq.n	800adce <_strtod_l+0x356>
 800ad82:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad84:	f47f aecc 	bne.w	800ab20 <_strtod_l+0xa8>
 800ad88:	499a      	ldr	r1, [pc, #616]	@ (800aff4 <_strtod_l+0x57c>)
 800ad8a:	a819      	add	r0, sp, #100	@ 0x64
 800ad8c:	f001 fb8c 	bl	800c4a8 <__match>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	f43f aec5 	beq.w	800ab20 <_strtod_l+0xa8>
 800ad96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	2b28      	cmp	r3, #40	@ 0x28
 800ad9c:	d12e      	bne.n	800adfc <_strtod_l+0x384>
 800ad9e:	4996      	ldr	r1, [pc, #600]	@ (800aff8 <_strtod_l+0x580>)
 800ada0:	aa1c      	add	r2, sp, #112	@ 0x70
 800ada2:	a819      	add	r0, sp, #100	@ 0x64
 800ada4:	f001 fb94 	bl	800c4d0 <__hexnan>
 800ada8:	2805      	cmp	r0, #5
 800adaa:	d127      	bne.n	800adfc <_strtod_l+0x384>
 800adac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800adb2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800adb6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800adba:	e696      	b.n	800aaea <_strtod_l+0x72>
 800adbc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adbe:	fb08 2101 	mla	r1, r8, r1, r2
 800adc2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800adc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800adc8:	e7b5      	b.n	800ad36 <_strtod_l+0x2be>
 800adca:	2a6e      	cmp	r2, #110	@ 0x6e
 800adcc:	e7da      	b.n	800ad84 <_strtod_l+0x30c>
 800adce:	498b      	ldr	r1, [pc, #556]	@ (800affc <_strtod_l+0x584>)
 800add0:	a819      	add	r0, sp, #100	@ 0x64
 800add2:	f001 fb69 	bl	800c4a8 <__match>
 800add6:	2800      	cmp	r0, #0
 800add8:	f43f aea2 	beq.w	800ab20 <_strtod_l+0xa8>
 800addc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adde:	4988      	ldr	r1, [pc, #544]	@ (800b000 <_strtod_l+0x588>)
 800ade0:	3b01      	subs	r3, #1
 800ade2:	a819      	add	r0, sp, #100	@ 0x64
 800ade4:	9319      	str	r3, [sp, #100]	@ 0x64
 800ade6:	f001 fb5f 	bl	800c4a8 <__match>
 800adea:	b910      	cbnz	r0, 800adf2 <_strtod_l+0x37a>
 800adec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adee:	3301      	adds	r3, #1
 800adf0:	9319      	str	r3, [sp, #100]	@ 0x64
 800adf2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b010 <_strtod_l+0x598>
 800adf6:	f04f 0a00 	mov.w	sl, #0
 800adfa:	e676      	b.n	800aaea <_strtod_l+0x72>
 800adfc:	4881      	ldr	r0, [pc, #516]	@ (800b004 <_strtod_l+0x58c>)
 800adfe:	f001 f8a7 	bl	800bf50 <nan>
 800ae02:	ec5b ab10 	vmov	sl, fp, d0
 800ae06:	e670      	b.n	800aaea <_strtod_l+0x72>
 800ae08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ae0c:	eba8 0303 	sub.w	r3, r8, r3
 800ae10:	f1b9 0f00 	cmp.w	r9, #0
 800ae14:	bf08      	it	eq
 800ae16:	46a9      	moveq	r9, r5
 800ae18:	2d10      	cmp	r5, #16
 800ae1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae1c:	462c      	mov	r4, r5
 800ae1e:	bfa8      	it	ge
 800ae20:	2410      	movge	r4, #16
 800ae22:	f7f5 fb6f 	bl	8000504 <__aeabi_ui2d>
 800ae26:	2d09      	cmp	r5, #9
 800ae28:	4682      	mov	sl, r0
 800ae2a:	468b      	mov	fp, r1
 800ae2c:	dc13      	bgt.n	800ae56 <_strtod_l+0x3de>
 800ae2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f43f ae5a 	beq.w	800aaea <_strtod_l+0x72>
 800ae36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae38:	dd78      	ble.n	800af2c <_strtod_l+0x4b4>
 800ae3a:	2b16      	cmp	r3, #22
 800ae3c:	dc5f      	bgt.n	800aefe <_strtod_l+0x486>
 800ae3e:	4972      	ldr	r1, [pc, #456]	@ (800b008 <_strtod_l+0x590>)
 800ae40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae48:	4652      	mov	r2, sl
 800ae4a:	465b      	mov	r3, fp
 800ae4c:	f7f5 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ae50:	4682      	mov	sl, r0
 800ae52:	468b      	mov	fp, r1
 800ae54:	e649      	b.n	800aaea <_strtod_l+0x72>
 800ae56:	4b6c      	ldr	r3, [pc, #432]	@ (800b008 <_strtod_l+0x590>)
 800ae58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ae60:	f7f5 fbca 	bl	80005f8 <__aeabi_dmul>
 800ae64:	4682      	mov	sl, r0
 800ae66:	4638      	mov	r0, r7
 800ae68:	468b      	mov	fp, r1
 800ae6a:	f7f5 fb4b 	bl	8000504 <__aeabi_ui2d>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	4650      	mov	r0, sl
 800ae74:	4659      	mov	r1, fp
 800ae76:	f7f5 fa09 	bl	800028c <__adddf3>
 800ae7a:	2d0f      	cmp	r5, #15
 800ae7c:	4682      	mov	sl, r0
 800ae7e:	468b      	mov	fp, r1
 800ae80:	ddd5      	ble.n	800ae2e <_strtod_l+0x3b6>
 800ae82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae84:	1b2c      	subs	r4, r5, r4
 800ae86:	441c      	add	r4, r3
 800ae88:	2c00      	cmp	r4, #0
 800ae8a:	f340 8093 	ble.w	800afb4 <_strtod_l+0x53c>
 800ae8e:	f014 030f 	ands.w	r3, r4, #15
 800ae92:	d00a      	beq.n	800aeaa <_strtod_l+0x432>
 800ae94:	495c      	ldr	r1, [pc, #368]	@ (800b008 <_strtod_l+0x590>)
 800ae96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	465b      	mov	r3, fp
 800ae9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea2:	f7f5 fba9 	bl	80005f8 <__aeabi_dmul>
 800aea6:	4682      	mov	sl, r0
 800aea8:	468b      	mov	fp, r1
 800aeaa:	f034 040f 	bics.w	r4, r4, #15
 800aeae:	d073      	beq.n	800af98 <_strtod_l+0x520>
 800aeb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aeb4:	dd49      	ble.n	800af4a <_strtod_l+0x4d2>
 800aeb6:	2400      	movs	r4, #0
 800aeb8:	46a0      	mov	r8, r4
 800aeba:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aebc:	46a1      	mov	r9, r4
 800aebe:	9a05      	ldr	r2, [sp, #20]
 800aec0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b010 <_strtod_l+0x598>
 800aec4:	2322      	movs	r3, #34	@ 0x22
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	f04f 0a00 	mov.w	sl, #0
 800aecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f43f ae0b 	beq.w	800aaea <_strtod_l+0x72>
 800aed4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aed6:	9805      	ldr	r0, [sp, #20]
 800aed8:	f7ff f946 	bl	800a168 <_Bfree>
 800aedc:	9805      	ldr	r0, [sp, #20]
 800aede:	4649      	mov	r1, r9
 800aee0:	f7ff f942 	bl	800a168 <_Bfree>
 800aee4:	9805      	ldr	r0, [sp, #20]
 800aee6:	4641      	mov	r1, r8
 800aee8:	f7ff f93e 	bl	800a168 <_Bfree>
 800aeec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aeee:	9805      	ldr	r0, [sp, #20]
 800aef0:	f7ff f93a 	bl	800a168 <_Bfree>
 800aef4:	9805      	ldr	r0, [sp, #20]
 800aef6:	4621      	mov	r1, r4
 800aef8:	f7ff f936 	bl	800a168 <_Bfree>
 800aefc:	e5f5      	b.n	800aaea <_strtod_l+0x72>
 800aefe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800af04:	4293      	cmp	r3, r2
 800af06:	dbbc      	blt.n	800ae82 <_strtod_l+0x40a>
 800af08:	4c3f      	ldr	r4, [pc, #252]	@ (800b008 <_strtod_l+0x590>)
 800af0a:	f1c5 050f 	rsb	r5, r5, #15
 800af0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800af12:	4652      	mov	r2, sl
 800af14:	465b      	mov	r3, fp
 800af16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af1a:	f7f5 fb6d 	bl	80005f8 <__aeabi_dmul>
 800af1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af20:	1b5d      	subs	r5, r3, r5
 800af22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af2a:	e78f      	b.n	800ae4c <_strtod_l+0x3d4>
 800af2c:	3316      	adds	r3, #22
 800af2e:	dba8      	blt.n	800ae82 <_strtod_l+0x40a>
 800af30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af32:	eba3 0808 	sub.w	r8, r3, r8
 800af36:	4b34      	ldr	r3, [pc, #208]	@ (800b008 <_strtod_l+0x590>)
 800af38:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800af3c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af40:	4650      	mov	r0, sl
 800af42:	4659      	mov	r1, fp
 800af44:	f7f5 fc82 	bl	800084c <__aeabi_ddiv>
 800af48:	e782      	b.n	800ae50 <_strtod_l+0x3d8>
 800af4a:	2300      	movs	r3, #0
 800af4c:	4f2f      	ldr	r7, [pc, #188]	@ (800b00c <_strtod_l+0x594>)
 800af4e:	1124      	asrs	r4, r4, #4
 800af50:	4650      	mov	r0, sl
 800af52:	4659      	mov	r1, fp
 800af54:	461e      	mov	r6, r3
 800af56:	2c01      	cmp	r4, #1
 800af58:	dc21      	bgt.n	800af9e <_strtod_l+0x526>
 800af5a:	b10b      	cbz	r3, 800af60 <_strtod_l+0x4e8>
 800af5c:	4682      	mov	sl, r0
 800af5e:	468b      	mov	fp, r1
 800af60:	492a      	ldr	r1, [pc, #168]	@ (800b00c <_strtod_l+0x594>)
 800af62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800af66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800af6a:	4652      	mov	r2, sl
 800af6c:	465b      	mov	r3, fp
 800af6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af72:	f7f5 fb41 	bl	80005f8 <__aeabi_dmul>
 800af76:	4b26      	ldr	r3, [pc, #152]	@ (800b010 <_strtod_l+0x598>)
 800af78:	460a      	mov	r2, r1
 800af7a:	400b      	ands	r3, r1
 800af7c:	4925      	ldr	r1, [pc, #148]	@ (800b014 <_strtod_l+0x59c>)
 800af7e:	428b      	cmp	r3, r1
 800af80:	4682      	mov	sl, r0
 800af82:	d898      	bhi.n	800aeb6 <_strtod_l+0x43e>
 800af84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af88:	428b      	cmp	r3, r1
 800af8a:	bf86      	itte	hi
 800af8c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b018 <_strtod_l+0x5a0>
 800af90:	f04f 3aff 	movhi.w	sl, #4294967295
 800af94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800af98:	2300      	movs	r3, #0
 800af9a:	9308      	str	r3, [sp, #32]
 800af9c:	e076      	b.n	800b08c <_strtod_l+0x614>
 800af9e:	07e2      	lsls	r2, r4, #31
 800afa0:	d504      	bpl.n	800afac <_strtod_l+0x534>
 800afa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afa6:	f7f5 fb27 	bl	80005f8 <__aeabi_dmul>
 800afaa:	2301      	movs	r3, #1
 800afac:	3601      	adds	r6, #1
 800afae:	1064      	asrs	r4, r4, #1
 800afb0:	3708      	adds	r7, #8
 800afb2:	e7d0      	b.n	800af56 <_strtod_l+0x4de>
 800afb4:	d0f0      	beq.n	800af98 <_strtod_l+0x520>
 800afb6:	4264      	negs	r4, r4
 800afb8:	f014 020f 	ands.w	r2, r4, #15
 800afbc:	d00a      	beq.n	800afd4 <_strtod_l+0x55c>
 800afbe:	4b12      	ldr	r3, [pc, #72]	@ (800b008 <_strtod_l+0x590>)
 800afc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afc4:	4650      	mov	r0, sl
 800afc6:	4659      	mov	r1, fp
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f7f5 fc3e 	bl	800084c <__aeabi_ddiv>
 800afd0:	4682      	mov	sl, r0
 800afd2:	468b      	mov	fp, r1
 800afd4:	1124      	asrs	r4, r4, #4
 800afd6:	d0df      	beq.n	800af98 <_strtod_l+0x520>
 800afd8:	2c1f      	cmp	r4, #31
 800afda:	dd1f      	ble.n	800b01c <_strtod_l+0x5a4>
 800afdc:	2400      	movs	r4, #0
 800afde:	46a0      	mov	r8, r4
 800afe0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800afe2:	46a1      	mov	r9, r4
 800afe4:	9a05      	ldr	r2, [sp, #20]
 800afe6:	2322      	movs	r3, #34	@ 0x22
 800afe8:	f04f 0a00 	mov.w	sl, #0
 800afec:	f04f 0b00 	mov.w	fp, #0
 800aff0:	6013      	str	r3, [r2, #0]
 800aff2:	e76b      	b.n	800aecc <_strtod_l+0x454>
 800aff4:	0800d0cd 	.word	0x0800d0cd
 800aff8:	0800d3f0 	.word	0x0800d3f0
 800affc:	0800d0c5 	.word	0x0800d0c5
 800b000:	0800d1a9 	.word	0x0800d1a9
 800b004:	0800d1a5 	.word	0x0800d1a5
 800b008:	0800d328 	.word	0x0800d328
 800b00c:	0800d300 	.word	0x0800d300
 800b010:	7ff00000 	.word	0x7ff00000
 800b014:	7ca00000 	.word	0x7ca00000
 800b018:	7fefffff 	.word	0x7fefffff
 800b01c:	f014 0310 	ands.w	r3, r4, #16
 800b020:	bf18      	it	ne
 800b022:	236a      	movne	r3, #106	@ 0x6a
 800b024:	4ea9      	ldr	r6, [pc, #676]	@ (800b2cc <_strtod_l+0x854>)
 800b026:	9308      	str	r3, [sp, #32]
 800b028:	4650      	mov	r0, sl
 800b02a:	4659      	mov	r1, fp
 800b02c:	2300      	movs	r3, #0
 800b02e:	07e7      	lsls	r7, r4, #31
 800b030:	d504      	bpl.n	800b03c <_strtod_l+0x5c4>
 800b032:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b036:	f7f5 fadf 	bl	80005f8 <__aeabi_dmul>
 800b03a:	2301      	movs	r3, #1
 800b03c:	1064      	asrs	r4, r4, #1
 800b03e:	f106 0608 	add.w	r6, r6, #8
 800b042:	d1f4      	bne.n	800b02e <_strtod_l+0x5b6>
 800b044:	b10b      	cbz	r3, 800b04a <_strtod_l+0x5d2>
 800b046:	4682      	mov	sl, r0
 800b048:	468b      	mov	fp, r1
 800b04a:	9b08      	ldr	r3, [sp, #32]
 800b04c:	b1b3      	cbz	r3, 800b07c <_strtod_l+0x604>
 800b04e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b052:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b056:	2b00      	cmp	r3, #0
 800b058:	4659      	mov	r1, fp
 800b05a:	dd0f      	ble.n	800b07c <_strtod_l+0x604>
 800b05c:	2b1f      	cmp	r3, #31
 800b05e:	dd56      	ble.n	800b10e <_strtod_l+0x696>
 800b060:	2b34      	cmp	r3, #52	@ 0x34
 800b062:	bfde      	ittt	le
 800b064:	f04f 33ff 	movle.w	r3, #4294967295
 800b068:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b06c:	4093      	lslle	r3, r2
 800b06e:	f04f 0a00 	mov.w	sl, #0
 800b072:	bfcc      	ite	gt
 800b074:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b078:	ea03 0b01 	andle.w	fp, r3, r1
 800b07c:	2200      	movs	r2, #0
 800b07e:	2300      	movs	r3, #0
 800b080:	4650      	mov	r0, sl
 800b082:	4659      	mov	r1, fp
 800b084:	f7f5 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d1a7      	bne.n	800afdc <_strtod_l+0x564>
 800b08c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b092:	9805      	ldr	r0, [sp, #20]
 800b094:	462b      	mov	r3, r5
 800b096:	464a      	mov	r2, r9
 800b098:	f7ff f8ce 	bl	800a238 <__s2b>
 800b09c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f43f af09 	beq.w	800aeb6 <_strtod_l+0x43e>
 800b0a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0a8:	2a00      	cmp	r2, #0
 800b0aa:	eba3 0308 	sub.w	r3, r3, r8
 800b0ae:	bfa8      	it	ge
 800b0b0:	2300      	movge	r3, #0
 800b0b2:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0b4:	2400      	movs	r4, #0
 800b0b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b0ba:	9316      	str	r3, [sp, #88]	@ 0x58
 800b0bc:	46a0      	mov	r8, r4
 800b0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c0:	9805      	ldr	r0, [sp, #20]
 800b0c2:	6859      	ldr	r1, [r3, #4]
 800b0c4:	f7ff f810 	bl	800a0e8 <_Balloc>
 800b0c8:	4681      	mov	r9, r0
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	f43f aef7 	beq.w	800aebe <_strtod_l+0x446>
 800b0d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0d2:	691a      	ldr	r2, [r3, #16]
 800b0d4:	3202      	adds	r2, #2
 800b0d6:	f103 010c 	add.w	r1, r3, #12
 800b0da:	0092      	lsls	r2, r2, #2
 800b0dc:	300c      	adds	r0, #12
 800b0de:	f7fe f876 	bl	80091ce <memcpy>
 800b0e2:	ec4b ab10 	vmov	d0, sl, fp
 800b0e6:	9805      	ldr	r0, [sp, #20]
 800b0e8:	aa1c      	add	r2, sp, #112	@ 0x70
 800b0ea:	a91b      	add	r1, sp, #108	@ 0x6c
 800b0ec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b0f0:	f7ff fbd6 	bl	800a8a0 <__d2b>
 800b0f4:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f43f aee1 	beq.w	800aebe <_strtod_l+0x446>
 800b0fc:	9805      	ldr	r0, [sp, #20]
 800b0fe:	2101      	movs	r1, #1
 800b100:	f7ff f930 	bl	800a364 <__i2b>
 800b104:	4680      	mov	r8, r0
 800b106:	b948      	cbnz	r0, 800b11c <_strtod_l+0x6a4>
 800b108:	f04f 0800 	mov.w	r8, #0
 800b10c:	e6d7      	b.n	800aebe <_strtod_l+0x446>
 800b10e:	f04f 32ff 	mov.w	r2, #4294967295
 800b112:	fa02 f303 	lsl.w	r3, r2, r3
 800b116:	ea03 0a0a 	and.w	sl, r3, sl
 800b11a:	e7af      	b.n	800b07c <_strtod_l+0x604>
 800b11c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b11e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b120:	2d00      	cmp	r5, #0
 800b122:	bfab      	itete	ge
 800b124:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b126:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b128:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b12a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b12c:	bfac      	ite	ge
 800b12e:	18ef      	addge	r7, r5, r3
 800b130:	1b5e      	sublt	r6, r3, r5
 800b132:	9b08      	ldr	r3, [sp, #32]
 800b134:	1aed      	subs	r5, r5, r3
 800b136:	4415      	add	r5, r2
 800b138:	4b65      	ldr	r3, [pc, #404]	@ (800b2d0 <_strtod_l+0x858>)
 800b13a:	3d01      	subs	r5, #1
 800b13c:	429d      	cmp	r5, r3
 800b13e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b142:	da50      	bge.n	800b1e6 <_strtod_l+0x76e>
 800b144:	1b5b      	subs	r3, r3, r5
 800b146:	2b1f      	cmp	r3, #31
 800b148:	eba2 0203 	sub.w	r2, r2, r3
 800b14c:	f04f 0101 	mov.w	r1, #1
 800b150:	dc3d      	bgt.n	800b1ce <_strtod_l+0x756>
 800b152:	fa01 f303 	lsl.w	r3, r1, r3
 800b156:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b158:	2300      	movs	r3, #0
 800b15a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b15c:	18bd      	adds	r5, r7, r2
 800b15e:	9b08      	ldr	r3, [sp, #32]
 800b160:	42af      	cmp	r7, r5
 800b162:	4416      	add	r6, r2
 800b164:	441e      	add	r6, r3
 800b166:	463b      	mov	r3, r7
 800b168:	bfa8      	it	ge
 800b16a:	462b      	movge	r3, r5
 800b16c:	42b3      	cmp	r3, r6
 800b16e:	bfa8      	it	ge
 800b170:	4633      	movge	r3, r6
 800b172:	2b00      	cmp	r3, #0
 800b174:	bfc2      	ittt	gt
 800b176:	1aed      	subgt	r5, r5, r3
 800b178:	1af6      	subgt	r6, r6, r3
 800b17a:	1aff      	subgt	r7, r7, r3
 800b17c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dd16      	ble.n	800b1b0 <_strtod_l+0x738>
 800b182:	4641      	mov	r1, r8
 800b184:	9805      	ldr	r0, [sp, #20]
 800b186:	461a      	mov	r2, r3
 800b188:	f7ff f9a4 	bl	800a4d4 <__pow5mult>
 800b18c:	4680      	mov	r8, r0
 800b18e:	2800      	cmp	r0, #0
 800b190:	d0ba      	beq.n	800b108 <_strtod_l+0x690>
 800b192:	4601      	mov	r1, r0
 800b194:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b196:	9805      	ldr	r0, [sp, #20]
 800b198:	f7ff f8fa 	bl	800a390 <__multiply>
 800b19c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	f43f ae8d 	beq.w	800aebe <_strtod_l+0x446>
 800b1a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1a6:	9805      	ldr	r0, [sp, #20]
 800b1a8:	f7fe ffde 	bl	800a168 <_Bfree>
 800b1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1b0:	2d00      	cmp	r5, #0
 800b1b2:	dc1d      	bgt.n	800b1f0 <_strtod_l+0x778>
 800b1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	dd23      	ble.n	800b202 <_strtod_l+0x78a>
 800b1ba:	4649      	mov	r1, r9
 800b1bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b1be:	9805      	ldr	r0, [sp, #20]
 800b1c0:	f7ff f988 	bl	800a4d4 <__pow5mult>
 800b1c4:	4681      	mov	r9, r0
 800b1c6:	b9e0      	cbnz	r0, 800b202 <_strtod_l+0x78a>
 800b1c8:	f04f 0900 	mov.w	r9, #0
 800b1cc:	e677      	b.n	800aebe <_strtod_l+0x446>
 800b1ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b1d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b1d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b1da:	35e2      	adds	r5, #226	@ 0xe2
 800b1dc:	fa01 f305 	lsl.w	r3, r1, r5
 800b1e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b1e4:	e7ba      	b.n	800b15c <_strtod_l+0x6e4>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1ee:	e7b5      	b.n	800b15c <_strtod_l+0x6e4>
 800b1f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1f2:	9805      	ldr	r0, [sp, #20]
 800b1f4:	462a      	mov	r2, r5
 800b1f6:	f7ff f9c7 	bl	800a588 <__lshift>
 800b1fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d1d9      	bne.n	800b1b4 <_strtod_l+0x73c>
 800b200:	e65d      	b.n	800aebe <_strtod_l+0x446>
 800b202:	2e00      	cmp	r6, #0
 800b204:	dd07      	ble.n	800b216 <_strtod_l+0x79e>
 800b206:	4649      	mov	r1, r9
 800b208:	9805      	ldr	r0, [sp, #20]
 800b20a:	4632      	mov	r2, r6
 800b20c:	f7ff f9bc 	bl	800a588 <__lshift>
 800b210:	4681      	mov	r9, r0
 800b212:	2800      	cmp	r0, #0
 800b214:	d0d8      	beq.n	800b1c8 <_strtod_l+0x750>
 800b216:	2f00      	cmp	r7, #0
 800b218:	dd08      	ble.n	800b22c <_strtod_l+0x7b4>
 800b21a:	4641      	mov	r1, r8
 800b21c:	9805      	ldr	r0, [sp, #20]
 800b21e:	463a      	mov	r2, r7
 800b220:	f7ff f9b2 	bl	800a588 <__lshift>
 800b224:	4680      	mov	r8, r0
 800b226:	2800      	cmp	r0, #0
 800b228:	f43f ae49 	beq.w	800aebe <_strtod_l+0x446>
 800b22c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b22e:	9805      	ldr	r0, [sp, #20]
 800b230:	464a      	mov	r2, r9
 800b232:	f7ff fa31 	bl	800a698 <__mdiff>
 800b236:	4604      	mov	r4, r0
 800b238:	2800      	cmp	r0, #0
 800b23a:	f43f ae40 	beq.w	800aebe <_strtod_l+0x446>
 800b23e:	68c3      	ldr	r3, [r0, #12]
 800b240:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b242:	2300      	movs	r3, #0
 800b244:	60c3      	str	r3, [r0, #12]
 800b246:	4641      	mov	r1, r8
 800b248:	f7ff fa0a 	bl	800a660 <__mcmp>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	da45      	bge.n	800b2dc <_strtod_l+0x864>
 800b250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b252:	ea53 030a 	orrs.w	r3, r3, sl
 800b256:	d16b      	bne.n	800b330 <_strtod_l+0x8b8>
 800b258:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d167      	bne.n	800b330 <_strtod_l+0x8b8>
 800b260:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b264:	0d1b      	lsrs	r3, r3, #20
 800b266:	051b      	lsls	r3, r3, #20
 800b268:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b26c:	d960      	bls.n	800b330 <_strtod_l+0x8b8>
 800b26e:	6963      	ldr	r3, [r4, #20]
 800b270:	b913      	cbnz	r3, 800b278 <_strtod_l+0x800>
 800b272:	6923      	ldr	r3, [r4, #16]
 800b274:	2b01      	cmp	r3, #1
 800b276:	dd5b      	ble.n	800b330 <_strtod_l+0x8b8>
 800b278:	4621      	mov	r1, r4
 800b27a:	2201      	movs	r2, #1
 800b27c:	9805      	ldr	r0, [sp, #20]
 800b27e:	f7ff f983 	bl	800a588 <__lshift>
 800b282:	4641      	mov	r1, r8
 800b284:	4604      	mov	r4, r0
 800b286:	f7ff f9eb 	bl	800a660 <__mcmp>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	dd50      	ble.n	800b330 <_strtod_l+0x8b8>
 800b28e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b292:	9a08      	ldr	r2, [sp, #32]
 800b294:	0d1b      	lsrs	r3, r3, #20
 800b296:	051b      	lsls	r3, r3, #20
 800b298:	2a00      	cmp	r2, #0
 800b29a:	d06a      	beq.n	800b372 <_strtod_l+0x8fa>
 800b29c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b2a0:	d867      	bhi.n	800b372 <_strtod_l+0x8fa>
 800b2a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b2a6:	f67f ae9d 	bls.w	800afe4 <_strtod_l+0x56c>
 800b2aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d4 <_strtod_l+0x85c>)
 800b2ac:	4650      	mov	r0, sl
 800b2ae:	4659      	mov	r1, fp
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f7f5 f9a1 	bl	80005f8 <__aeabi_dmul>
 800b2b6:	4b08      	ldr	r3, [pc, #32]	@ (800b2d8 <_strtod_l+0x860>)
 800b2b8:	400b      	ands	r3, r1
 800b2ba:	4682      	mov	sl, r0
 800b2bc:	468b      	mov	fp, r1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f47f ae08 	bne.w	800aed4 <_strtod_l+0x45c>
 800b2c4:	9a05      	ldr	r2, [sp, #20]
 800b2c6:	2322      	movs	r3, #34	@ 0x22
 800b2c8:	6013      	str	r3, [r2, #0]
 800b2ca:	e603      	b.n	800aed4 <_strtod_l+0x45c>
 800b2cc:	0800d418 	.word	0x0800d418
 800b2d0:	fffffc02 	.word	0xfffffc02
 800b2d4:	39500000 	.word	0x39500000
 800b2d8:	7ff00000 	.word	0x7ff00000
 800b2dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b2e0:	d165      	bne.n	800b3ae <_strtod_l+0x936>
 800b2e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b2e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2e8:	b35a      	cbz	r2, 800b342 <_strtod_l+0x8ca>
 800b2ea:	4a9f      	ldr	r2, [pc, #636]	@ (800b568 <_strtod_l+0xaf0>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d12b      	bne.n	800b348 <_strtod_l+0x8d0>
 800b2f0:	9b08      	ldr	r3, [sp, #32]
 800b2f2:	4651      	mov	r1, sl
 800b2f4:	b303      	cbz	r3, 800b338 <_strtod_l+0x8c0>
 800b2f6:	4b9d      	ldr	r3, [pc, #628]	@ (800b56c <_strtod_l+0xaf4>)
 800b2f8:	465a      	mov	r2, fp
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b300:	f04f 32ff 	mov.w	r2, #4294967295
 800b304:	d81b      	bhi.n	800b33e <_strtod_l+0x8c6>
 800b306:	0d1b      	lsrs	r3, r3, #20
 800b308:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b30c:	fa02 f303 	lsl.w	r3, r2, r3
 800b310:	4299      	cmp	r1, r3
 800b312:	d119      	bne.n	800b348 <_strtod_l+0x8d0>
 800b314:	4b96      	ldr	r3, [pc, #600]	@ (800b570 <_strtod_l+0xaf8>)
 800b316:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b318:	429a      	cmp	r2, r3
 800b31a:	d102      	bne.n	800b322 <_strtod_l+0x8aa>
 800b31c:	3101      	adds	r1, #1
 800b31e:	f43f adce 	beq.w	800aebe <_strtod_l+0x446>
 800b322:	4b92      	ldr	r3, [pc, #584]	@ (800b56c <_strtod_l+0xaf4>)
 800b324:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b326:	401a      	ands	r2, r3
 800b328:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b32c:	f04f 0a00 	mov.w	sl, #0
 800b330:	9b08      	ldr	r3, [sp, #32]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1b9      	bne.n	800b2aa <_strtod_l+0x832>
 800b336:	e5cd      	b.n	800aed4 <_strtod_l+0x45c>
 800b338:	f04f 33ff 	mov.w	r3, #4294967295
 800b33c:	e7e8      	b.n	800b310 <_strtod_l+0x898>
 800b33e:	4613      	mov	r3, r2
 800b340:	e7e6      	b.n	800b310 <_strtod_l+0x898>
 800b342:	ea53 030a 	orrs.w	r3, r3, sl
 800b346:	d0a2      	beq.n	800b28e <_strtod_l+0x816>
 800b348:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b34a:	b1db      	cbz	r3, 800b384 <_strtod_l+0x90c>
 800b34c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b34e:	4213      	tst	r3, r2
 800b350:	d0ee      	beq.n	800b330 <_strtod_l+0x8b8>
 800b352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b354:	9a08      	ldr	r2, [sp, #32]
 800b356:	4650      	mov	r0, sl
 800b358:	4659      	mov	r1, fp
 800b35a:	b1bb      	cbz	r3, 800b38c <_strtod_l+0x914>
 800b35c:	f7ff fb6e 	bl	800aa3c <sulp>
 800b360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b364:	ec53 2b10 	vmov	r2, r3, d0
 800b368:	f7f4 ff90 	bl	800028c <__adddf3>
 800b36c:	4682      	mov	sl, r0
 800b36e:	468b      	mov	fp, r1
 800b370:	e7de      	b.n	800b330 <_strtod_l+0x8b8>
 800b372:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b376:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b37a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b37e:	f04f 3aff 	mov.w	sl, #4294967295
 800b382:	e7d5      	b.n	800b330 <_strtod_l+0x8b8>
 800b384:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b386:	ea13 0f0a 	tst.w	r3, sl
 800b38a:	e7e1      	b.n	800b350 <_strtod_l+0x8d8>
 800b38c:	f7ff fb56 	bl	800aa3c <sulp>
 800b390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b394:	ec53 2b10 	vmov	r2, r3, d0
 800b398:	f7f4 ff76 	bl	8000288 <__aeabi_dsub>
 800b39c:	2200      	movs	r2, #0
 800b39e:	2300      	movs	r3, #0
 800b3a0:	4682      	mov	sl, r0
 800b3a2:	468b      	mov	fp, r1
 800b3a4:	f7f5 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d0c1      	beq.n	800b330 <_strtod_l+0x8b8>
 800b3ac:	e61a      	b.n	800afe4 <_strtod_l+0x56c>
 800b3ae:	4641      	mov	r1, r8
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f7ff facd 	bl	800a950 <__ratio>
 800b3b6:	ec57 6b10 	vmov	r6, r7, d0
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	f7f5 fb94 	bl	8000af0 <__aeabi_dcmple>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d06f      	beq.n	800b4ac <_strtod_l+0xa34>
 800b3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d17a      	bne.n	800b4c8 <_strtod_l+0xa50>
 800b3d2:	f1ba 0f00 	cmp.w	sl, #0
 800b3d6:	d158      	bne.n	800b48a <_strtod_l+0xa12>
 800b3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d15a      	bne.n	800b498 <_strtod_l+0xa20>
 800b3e2:	4b64      	ldr	r3, [pc, #400]	@ (800b574 <_strtod_l+0xafc>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	f7f5 fb77 	bl	8000adc <__aeabi_dcmplt>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d159      	bne.n	800b4a6 <_strtod_l+0xa2e>
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	4b60      	ldr	r3, [pc, #384]	@ (800b578 <_strtod_l+0xb00>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f7f5 f8fd 	bl	80005f8 <__aeabi_dmul>
 800b3fe:	4606      	mov	r6, r0
 800b400:	460f      	mov	r7, r1
 800b402:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b406:	9606      	str	r6, [sp, #24]
 800b408:	9307      	str	r3, [sp, #28]
 800b40a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b40e:	4d57      	ldr	r5, [pc, #348]	@ (800b56c <_strtod_l+0xaf4>)
 800b410:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b416:	401d      	ands	r5, r3
 800b418:	4b58      	ldr	r3, [pc, #352]	@ (800b57c <_strtod_l+0xb04>)
 800b41a:	429d      	cmp	r5, r3
 800b41c:	f040 80b2 	bne.w	800b584 <_strtod_l+0xb0c>
 800b420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b422:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b426:	ec4b ab10 	vmov	d0, sl, fp
 800b42a:	f7ff f9c9 	bl	800a7c0 <__ulp>
 800b42e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b432:	ec51 0b10 	vmov	r0, r1, d0
 800b436:	f7f5 f8df 	bl	80005f8 <__aeabi_dmul>
 800b43a:	4652      	mov	r2, sl
 800b43c:	465b      	mov	r3, fp
 800b43e:	f7f4 ff25 	bl	800028c <__adddf3>
 800b442:	460b      	mov	r3, r1
 800b444:	4949      	ldr	r1, [pc, #292]	@ (800b56c <_strtod_l+0xaf4>)
 800b446:	4a4e      	ldr	r2, [pc, #312]	@ (800b580 <_strtod_l+0xb08>)
 800b448:	4019      	ands	r1, r3
 800b44a:	4291      	cmp	r1, r2
 800b44c:	4682      	mov	sl, r0
 800b44e:	d942      	bls.n	800b4d6 <_strtod_l+0xa5e>
 800b450:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b452:	4b47      	ldr	r3, [pc, #284]	@ (800b570 <_strtod_l+0xaf8>)
 800b454:	429a      	cmp	r2, r3
 800b456:	d103      	bne.n	800b460 <_strtod_l+0x9e8>
 800b458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b45a:	3301      	adds	r3, #1
 800b45c:	f43f ad2f 	beq.w	800aebe <_strtod_l+0x446>
 800b460:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b570 <_strtod_l+0xaf8>
 800b464:	f04f 3aff 	mov.w	sl, #4294967295
 800b468:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b46a:	9805      	ldr	r0, [sp, #20]
 800b46c:	f7fe fe7c 	bl	800a168 <_Bfree>
 800b470:	9805      	ldr	r0, [sp, #20]
 800b472:	4649      	mov	r1, r9
 800b474:	f7fe fe78 	bl	800a168 <_Bfree>
 800b478:	9805      	ldr	r0, [sp, #20]
 800b47a:	4641      	mov	r1, r8
 800b47c:	f7fe fe74 	bl	800a168 <_Bfree>
 800b480:	9805      	ldr	r0, [sp, #20]
 800b482:	4621      	mov	r1, r4
 800b484:	f7fe fe70 	bl	800a168 <_Bfree>
 800b488:	e619      	b.n	800b0be <_strtod_l+0x646>
 800b48a:	f1ba 0f01 	cmp.w	sl, #1
 800b48e:	d103      	bne.n	800b498 <_strtod_l+0xa20>
 800b490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b492:	2b00      	cmp	r3, #0
 800b494:	f43f ada6 	beq.w	800afe4 <_strtod_l+0x56c>
 800b498:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b548 <_strtod_l+0xad0>
 800b49c:	4f35      	ldr	r7, [pc, #212]	@ (800b574 <_strtod_l+0xafc>)
 800b49e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4a2:	2600      	movs	r6, #0
 800b4a4:	e7b1      	b.n	800b40a <_strtod_l+0x992>
 800b4a6:	4f34      	ldr	r7, [pc, #208]	@ (800b578 <_strtod_l+0xb00>)
 800b4a8:	2600      	movs	r6, #0
 800b4aa:	e7aa      	b.n	800b402 <_strtod_l+0x98a>
 800b4ac:	4b32      	ldr	r3, [pc, #200]	@ (800b578 <_strtod_l+0xb00>)
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	4639      	mov	r1, r7
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f7f5 f8a0 	bl	80005f8 <__aeabi_dmul>
 800b4b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460f      	mov	r7, r1
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d09f      	beq.n	800b402 <_strtod_l+0x98a>
 800b4c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4c6:	e7a0      	b.n	800b40a <_strtod_l+0x992>
 800b4c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b550 <_strtod_l+0xad8>
 800b4cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4d0:	ec57 6b17 	vmov	r6, r7, d7
 800b4d4:	e799      	b.n	800b40a <_strtod_l+0x992>
 800b4d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b4da:	9b08      	ldr	r3, [sp, #32]
 800b4dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1c1      	bne.n	800b468 <_strtod_l+0x9f0>
 800b4e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4e8:	0d1b      	lsrs	r3, r3, #20
 800b4ea:	051b      	lsls	r3, r3, #20
 800b4ec:	429d      	cmp	r5, r3
 800b4ee:	d1bb      	bne.n	800b468 <_strtod_l+0x9f0>
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f7f5 fbe0 	bl	8000cb8 <__aeabi_d2lz>
 800b4f8:	f7f5 f850 	bl	800059c <__aeabi_l2d>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4630      	mov	r0, r6
 800b502:	4639      	mov	r1, r7
 800b504:	f7f4 fec0 	bl	8000288 <__aeabi_dsub>
 800b508:	460b      	mov	r3, r1
 800b50a:	4602      	mov	r2, r0
 800b50c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b510:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b516:	ea46 060a 	orr.w	r6, r6, sl
 800b51a:	431e      	orrs	r6, r3
 800b51c:	d06f      	beq.n	800b5fe <_strtod_l+0xb86>
 800b51e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b558 <_strtod_l+0xae0>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f5 fada 	bl	8000adc <__aeabi_dcmplt>
 800b528:	2800      	cmp	r0, #0
 800b52a:	f47f acd3 	bne.w	800aed4 <_strtod_l+0x45c>
 800b52e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b560 <_strtod_l+0xae8>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b538:	f7f5 faee 	bl	8000b18 <__aeabi_dcmpgt>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d093      	beq.n	800b468 <_strtod_l+0x9f0>
 800b540:	e4c8      	b.n	800aed4 <_strtod_l+0x45c>
 800b542:	bf00      	nop
 800b544:	f3af 8000 	nop.w
 800b548:	00000000 	.word	0x00000000
 800b54c:	bff00000 	.word	0xbff00000
 800b550:	00000000 	.word	0x00000000
 800b554:	3ff00000 	.word	0x3ff00000
 800b558:	94a03595 	.word	0x94a03595
 800b55c:	3fdfffff 	.word	0x3fdfffff
 800b560:	35afe535 	.word	0x35afe535
 800b564:	3fe00000 	.word	0x3fe00000
 800b568:	000fffff 	.word	0x000fffff
 800b56c:	7ff00000 	.word	0x7ff00000
 800b570:	7fefffff 	.word	0x7fefffff
 800b574:	3ff00000 	.word	0x3ff00000
 800b578:	3fe00000 	.word	0x3fe00000
 800b57c:	7fe00000 	.word	0x7fe00000
 800b580:	7c9fffff 	.word	0x7c9fffff
 800b584:	9b08      	ldr	r3, [sp, #32]
 800b586:	b323      	cbz	r3, 800b5d2 <_strtod_l+0xb5a>
 800b588:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b58c:	d821      	bhi.n	800b5d2 <_strtod_l+0xb5a>
 800b58e:	a328      	add	r3, pc, #160	@ (adr r3, 800b630 <_strtod_l+0xbb8>)
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	4630      	mov	r0, r6
 800b596:	4639      	mov	r1, r7
 800b598:	f7f5 faaa 	bl	8000af0 <__aeabi_dcmple>
 800b59c:	b1a0      	cbz	r0, 800b5c8 <_strtod_l+0xb50>
 800b59e:	4639      	mov	r1, r7
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f7f5 fb01 	bl	8000ba8 <__aeabi_d2uiz>
 800b5a6:	2801      	cmp	r0, #1
 800b5a8:	bf38      	it	cc
 800b5aa:	2001      	movcc	r0, #1
 800b5ac:	f7f4 ffaa 	bl	8000504 <__aeabi_ui2d>
 800b5b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460f      	mov	r7, r1
 800b5b6:	b9fb      	cbnz	r3, 800b5f8 <_strtod_l+0xb80>
 800b5b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b5be:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b5c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b5c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b5ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b5ce:	1b5b      	subs	r3, r3, r5
 800b5d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b5d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b5d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b5da:	f7ff f8f1 	bl	800a7c0 <__ulp>
 800b5de:	4650      	mov	r0, sl
 800b5e0:	ec53 2b10 	vmov	r2, r3, d0
 800b5e4:	4659      	mov	r1, fp
 800b5e6:	f7f5 f807 	bl	80005f8 <__aeabi_dmul>
 800b5ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b5ee:	f7f4 fe4d 	bl	800028c <__adddf3>
 800b5f2:	4682      	mov	sl, r0
 800b5f4:	468b      	mov	fp, r1
 800b5f6:	e770      	b.n	800b4da <_strtod_l+0xa62>
 800b5f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b5fc:	e7e0      	b.n	800b5c0 <_strtod_l+0xb48>
 800b5fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800b638 <_strtod_l+0xbc0>)
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f7f5 fa6a 	bl	8000adc <__aeabi_dcmplt>
 800b608:	e798      	b.n	800b53c <_strtod_l+0xac4>
 800b60a:	2300      	movs	r3, #0
 800b60c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b60e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b610:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	f7ff ba6d 	b.w	800aaf2 <_strtod_l+0x7a>
 800b618:	2a65      	cmp	r2, #101	@ 0x65
 800b61a:	f43f ab68 	beq.w	800acee <_strtod_l+0x276>
 800b61e:	2a45      	cmp	r2, #69	@ 0x45
 800b620:	f43f ab65 	beq.w	800acee <_strtod_l+0x276>
 800b624:	2301      	movs	r3, #1
 800b626:	f7ff bba0 	b.w	800ad6a <_strtod_l+0x2f2>
 800b62a:	bf00      	nop
 800b62c:	f3af 8000 	nop.w
 800b630:	ffc00000 	.word	0xffc00000
 800b634:	41dfffff 	.word	0x41dfffff
 800b638:	94a03595 	.word	0x94a03595
 800b63c:	3fcfffff 	.word	0x3fcfffff

0800b640 <_strtod_r>:
 800b640:	4b01      	ldr	r3, [pc, #4]	@ (800b648 <_strtod_r+0x8>)
 800b642:	f7ff ba19 	b.w	800aa78 <_strtod_l>
 800b646:	bf00      	nop
 800b648:	200000b0 	.word	0x200000b0

0800b64c <_strtol_l.isra.0>:
 800b64c:	2b24      	cmp	r3, #36	@ 0x24
 800b64e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b652:	4686      	mov	lr, r0
 800b654:	4690      	mov	r8, r2
 800b656:	d801      	bhi.n	800b65c <_strtol_l.isra.0+0x10>
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d106      	bne.n	800b66a <_strtol_l.isra.0+0x1e>
 800b65c:	f7fd fd8a 	bl	8009174 <__errno>
 800b660:	2316      	movs	r3, #22
 800b662:	6003      	str	r3, [r0, #0]
 800b664:	2000      	movs	r0, #0
 800b666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66a:	4834      	ldr	r0, [pc, #208]	@ (800b73c <_strtol_l.isra.0+0xf0>)
 800b66c:	460d      	mov	r5, r1
 800b66e:	462a      	mov	r2, r5
 800b670:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b674:	5d06      	ldrb	r6, [r0, r4]
 800b676:	f016 0608 	ands.w	r6, r6, #8
 800b67a:	d1f8      	bne.n	800b66e <_strtol_l.isra.0+0x22>
 800b67c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b67e:	d110      	bne.n	800b6a2 <_strtol_l.isra.0+0x56>
 800b680:	782c      	ldrb	r4, [r5, #0]
 800b682:	2601      	movs	r6, #1
 800b684:	1c95      	adds	r5, r2, #2
 800b686:	f033 0210 	bics.w	r2, r3, #16
 800b68a:	d115      	bne.n	800b6b8 <_strtol_l.isra.0+0x6c>
 800b68c:	2c30      	cmp	r4, #48	@ 0x30
 800b68e:	d10d      	bne.n	800b6ac <_strtol_l.isra.0+0x60>
 800b690:	782a      	ldrb	r2, [r5, #0]
 800b692:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b696:	2a58      	cmp	r2, #88	@ 0x58
 800b698:	d108      	bne.n	800b6ac <_strtol_l.isra.0+0x60>
 800b69a:	786c      	ldrb	r4, [r5, #1]
 800b69c:	3502      	adds	r5, #2
 800b69e:	2310      	movs	r3, #16
 800b6a0:	e00a      	b.n	800b6b8 <_strtol_l.isra.0+0x6c>
 800b6a2:	2c2b      	cmp	r4, #43	@ 0x2b
 800b6a4:	bf04      	itt	eq
 800b6a6:	782c      	ldrbeq	r4, [r5, #0]
 800b6a8:	1c95      	addeq	r5, r2, #2
 800b6aa:	e7ec      	b.n	800b686 <_strtol_l.isra.0+0x3a>
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1f6      	bne.n	800b69e <_strtol_l.isra.0+0x52>
 800b6b0:	2c30      	cmp	r4, #48	@ 0x30
 800b6b2:	bf14      	ite	ne
 800b6b4:	230a      	movne	r3, #10
 800b6b6:	2308      	moveq	r3, #8
 800b6b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b6bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	fbbc f9f3 	udiv	r9, ip, r3
 800b6c6:	4610      	mov	r0, r2
 800b6c8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b6cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b6d0:	2f09      	cmp	r7, #9
 800b6d2:	d80f      	bhi.n	800b6f4 <_strtol_l.isra.0+0xa8>
 800b6d4:	463c      	mov	r4, r7
 800b6d6:	42a3      	cmp	r3, r4
 800b6d8:	dd1b      	ble.n	800b712 <_strtol_l.isra.0+0xc6>
 800b6da:	1c57      	adds	r7, r2, #1
 800b6dc:	d007      	beq.n	800b6ee <_strtol_l.isra.0+0xa2>
 800b6de:	4581      	cmp	r9, r0
 800b6e0:	d314      	bcc.n	800b70c <_strtol_l.isra.0+0xc0>
 800b6e2:	d101      	bne.n	800b6e8 <_strtol_l.isra.0+0x9c>
 800b6e4:	45a2      	cmp	sl, r4
 800b6e6:	db11      	blt.n	800b70c <_strtol_l.isra.0+0xc0>
 800b6e8:	fb00 4003 	mla	r0, r0, r3, r4
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6f2:	e7eb      	b.n	800b6cc <_strtol_l.isra.0+0x80>
 800b6f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b6f8:	2f19      	cmp	r7, #25
 800b6fa:	d801      	bhi.n	800b700 <_strtol_l.isra.0+0xb4>
 800b6fc:	3c37      	subs	r4, #55	@ 0x37
 800b6fe:	e7ea      	b.n	800b6d6 <_strtol_l.isra.0+0x8a>
 800b700:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b704:	2f19      	cmp	r7, #25
 800b706:	d804      	bhi.n	800b712 <_strtol_l.isra.0+0xc6>
 800b708:	3c57      	subs	r4, #87	@ 0x57
 800b70a:	e7e4      	b.n	800b6d6 <_strtol_l.isra.0+0x8a>
 800b70c:	f04f 32ff 	mov.w	r2, #4294967295
 800b710:	e7ed      	b.n	800b6ee <_strtol_l.isra.0+0xa2>
 800b712:	1c53      	adds	r3, r2, #1
 800b714:	d108      	bne.n	800b728 <_strtol_l.isra.0+0xdc>
 800b716:	2322      	movs	r3, #34	@ 0x22
 800b718:	f8ce 3000 	str.w	r3, [lr]
 800b71c:	4660      	mov	r0, ip
 800b71e:	f1b8 0f00 	cmp.w	r8, #0
 800b722:	d0a0      	beq.n	800b666 <_strtol_l.isra.0+0x1a>
 800b724:	1e69      	subs	r1, r5, #1
 800b726:	e006      	b.n	800b736 <_strtol_l.isra.0+0xea>
 800b728:	b106      	cbz	r6, 800b72c <_strtol_l.isra.0+0xe0>
 800b72a:	4240      	negs	r0, r0
 800b72c:	f1b8 0f00 	cmp.w	r8, #0
 800b730:	d099      	beq.n	800b666 <_strtol_l.isra.0+0x1a>
 800b732:	2a00      	cmp	r2, #0
 800b734:	d1f6      	bne.n	800b724 <_strtol_l.isra.0+0xd8>
 800b736:	f8c8 1000 	str.w	r1, [r8]
 800b73a:	e794      	b.n	800b666 <_strtol_l.isra.0+0x1a>
 800b73c:	0800d441 	.word	0x0800d441

0800b740 <_strtol_r>:
 800b740:	f7ff bf84 	b.w	800b64c <_strtol_l.isra.0>

0800b744 <__ssputs_r>:
 800b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	688e      	ldr	r6, [r1, #8]
 800b74a:	461f      	mov	r7, r3
 800b74c:	42be      	cmp	r6, r7
 800b74e:	680b      	ldr	r3, [r1, #0]
 800b750:	4682      	mov	sl, r0
 800b752:	460c      	mov	r4, r1
 800b754:	4690      	mov	r8, r2
 800b756:	d82d      	bhi.n	800b7b4 <__ssputs_r+0x70>
 800b758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b75c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b760:	d026      	beq.n	800b7b0 <__ssputs_r+0x6c>
 800b762:	6965      	ldr	r5, [r4, #20]
 800b764:	6909      	ldr	r1, [r1, #16]
 800b766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b76a:	eba3 0901 	sub.w	r9, r3, r1
 800b76e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b772:	1c7b      	adds	r3, r7, #1
 800b774:	444b      	add	r3, r9
 800b776:	106d      	asrs	r5, r5, #1
 800b778:	429d      	cmp	r5, r3
 800b77a:	bf38      	it	cc
 800b77c:	461d      	movcc	r5, r3
 800b77e:	0553      	lsls	r3, r2, #21
 800b780:	d527      	bpl.n	800b7d2 <__ssputs_r+0x8e>
 800b782:	4629      	mov	r1, r5
 800b784:	f7fe fc24 	bl	8009fd0 <_malloc_r>
 800b788:	4606      	mov	r6, r0
 800b78a:	b360      	cbz	r0, 800b7e6 <__ssputs_r+0xa2>
 800b78c:	6921      	ldr	r1, [r4, #16]
 800b78e:	464a      	mov	r2, r9
 800b790:	f7fd fd1d 	bl	80091ce <memcpy>
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b79a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	6126      	str	r6, [r4, #16]
 800b7a2:	6165      	str	r5, [r4, #20]
 800b7a4:	444e      	add	r6, r9
 800b7a6:	eba5 0509 	sub.w	r5, r5, r9
 800b7aa:	6026      	str	r6, [r4, #0]
 800b7ac:	60a5      	str	r5, [r4, #8]
 800b7ae:	463e      	mov	r6, r7
 800b7b0:	42be      	cmp	r6, r7
 800b7b2:	d900      	bls.n	800b7b6 <__ssputs_r+0x72>
 800b7b4:	463e      	mov	r6, r7
 800b7b6:	6820      	ldr	r0, [r4, #0]
 800b7b8:	4632      	mov	r2, r6
 800b7ba:	4641      	mov	r1, r8
 800b7bc:	f000 fb7c 	bl	800beb8 <memmove>
 800b7c0:	68a3      	ldr	r3, [r4, #8]
 800b7c2:	1b9b      	subs	r3, r3, r6
 800b7c4:	60a3      	str	r3, [r4, #8]
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	4433      	add	r3, r6
 800b7ca:	6023      	str	r3, [r4, #0]
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d2:	462a      	mov	r2, r5
 800b7d4:	f000 ff29 	bl	800c62a <_realloc_r>
 800b7d8:	4606      	mov	r6, r0
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d1e0      	bne.n	800b7a0 <__ssputs_r+0x5c>
 800b7de:	6921      	ldr	r1, [r4, #16]
 800b7e0:	4650      	mov	r0, sl
 800b7e2:	f7fe fb81 	bl	8009ee8 <_free_r>
 800b7e6:	230c      	movs	r3, #12
 800b7e8:	f8ca 3000 	str.w	r3, [sl]
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7f2:	81a3      	strh	r3, [r4, #12]
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	e7e9      	b.n	800b7ce <__ssputs_r+0x8a>
	...

0800b7fc <_svfiprintf_r>:
 800b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	4698      	mov	r8, r3
 800b802:	898b      	ldrh	r3, [r1, #12]
 800b804:	061b      	lsls	r3, r3, #24
 800b806:	b09d      	sub	sp, #116	@ 0x74
 800b808:	4607      	mov	r7, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	4614      	mov	r4, r2
 800b80e:	d510      	bpl.n	800b832 <_svfiprintf_r+0x36>
 800b810:	690b      	ldr	r3, [r1, #16]
 800b812:	b973      	cbnz	r3, 800b832 <_svfiprintf_r+0x36>
 800b814:	2140      	movs	r1, #64	@ 0x40
 800b816:	f7fe fbdb 	bl	8009fd0 <_malloc_r>
 800b81a:	6028      	str	r0, [r5, #0]
 800b81c:	6128      	str	r0, [r5, #16]
 800b81e:	b930      	cbnz	r0, 800b82e <_svfiprintf_r+0x32>
 800b820:	230c      	movs	r3, #12
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	b01d      	add	sp, #116	@ 0x74
 800b82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82e:	2340      	movs	r3, #64	@ 0x40
 800b830:	616b      	str	r3, [r5, #20]
 800b832:	2300      	movs	r3, #0
 800b834:	9309      	str	r3, [sp, #36]	@ 0x24
 800b836:	2320      	movs	r3, #32
 800b838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b83c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b840:	2330      	movs	r3, #48	@ 0x30
 800b842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9e0 <_svfiprintf_r+0x1e4>
 800b846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b84a:	f04f 0901 	mov.w	r9, #1
 800b84e:	4623      	mov	r3, r4
 800b850:	469a      	mov	sl, r3
 800b852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b856:	b10a      	cbz	r2, 800b85c <_svfiprintf_r+0x60>
 800b858:	2a25      	cmp	r2, #37	@ 0x25
 800b85a:	d1f9      	bne.n	800b850 <_svfiprintf_r+0x54>
 800b85c:	ebba 0b04 	subs.w	fp, sl, r4
 800b860:	d00b      	beq.n	800b87a <_svfiprintf_r+0x7e>
 800b862:	465b      	mov	r3, fp
 800b864:	4622      	mov	r2, r4
 800b866:	4629      	mov	r1, r5
 800b868:	4638      	mov	r0, r7
 800b86a:	f7ff ff6b 	bl	800b744 <__ssputs_r>
 800b86e:	3001      	adds	r0, #1
 800b870:	f000 80a7 	beq.w	800b9c2 <_svfiprintf_r+0x1c6>
 800b874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b876:	445a      	add	r2, fp
 800b878:	9209      	str	r2, [sp, #36]	@ 0x24
 800b87a:	f89a 3000 	ldrb.w	r3, [sl]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 809f 	beq.w	800b9c2 <_svfiprintf_r+0x1c6>
 800b884:	2300      	movs	r3, #0
 800b886:	f04f 32ff 	mov.w	r2, #4294967295
 800b88a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88e:	f10a 0a01 	add.w	sl, sl, #1
 800b892:	9304      	str	r3, [sp, #16]
 800b894:	9307      	str	r3, [sp, #28]
 800b896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b89a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b89c:	4654      	mov	r4, sl
 800b89e:	2205      	movs	r2, #5
 800b8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a4:	484e      	ldr	r0, [pc, #312]	@ (800b9e0 <_svfiprintf_r+0x1e4>)
 800b8a6:	f7f4 fc93 	bl	80001d0 <memchr>
 800b8aa:	9a04      	ldr	r2, [sp, #16]
 800b8ac:	b9d8      	cbnz	r0, 800b8e6 <_svfiprintf_r+0xea>
 800b8ae:	06d0      	lsls	r0, r2, #27
 800b8b0:	bf44      	itt	mi
 800b8b2:	2320      	movmi	r3, #32
 800b8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8b8:	0711      	lsls	r1, r2, #28
 800b8ba:	bf44      	itt	mi
 800b8bc:	232b      	movmi	r3, #43	@ 0x2b
 800b8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8c8:	d015      	beq.n	800b8f6 <_svfiprintf_r+0xfa>
 800b8ca:	9a07      	ldr	r2, [sp, #28]
 800b8cc:	4654      	mov	r4, sl
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f04f 0c0a 	mov.w	ip, #10
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8da:	3b30      	subs	r3, #48	@ 0x30
 800b8dc:	2b09      	cmp	r3, #9
 800b8de:	d94b      	bls.n	800b978 <_svfiprintf_r+0x17c>
 800b8e0:	b1b0      	cbz	r0, 800b910 <_svfiprintf_r+0x114>
 800b8e2:	9207      	str	r2, [sp, #28]
 800b8e4:	e014      	b.n	800b910 <_svfiprintf_r+0x114>
 800b8e6:	eba0 0308 	sub.w	r3, r0, r8
 800b8ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	46a2      	mov	sl, r4
 800b8f4:	e7d2      	b.n	800b89c <_svfiprintf_r+0xa0>
 800b8f6:	9b03      	ldr	r3, [sp, #12]
 800b8f8:	1d19      	adds	r1, r3, #4
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	9103      	str	r1, [sp, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bfbb      	ittet	lt
 800b902:	425b      	neglt	r3, r3
 800b904:	f042 0202 	orrlt.w	r2, r2, #2
 800b908:	9307      	strge	r3, [sp, #28]
 800b90a:	9307      	strlt	r3, [sp, #28]
 800b90c:	bfb8      	it	lt
 800b90e:	9204      	strlt	r2, [sp, #16]
 800b910:	7823      	ldrb	r3, [r4, #0]
 800b912:	2b2e      	cmp	r3, #46	@ 0x2e
 800b914:	d10a      	bne.n	800b92c <_svfiprintf_r+0x130>
 800b916:	7863      	ldrb	r3, [r4, #1]
 800b918:	2b2a      	cmp	r3, #42	@ 0x2a
 800b91a:	d132      	bne.n	800b982 <_svfiprintf_r+0x186>
 800b91c:	9b03      	ldr	r3, [sp, #12]
 800b91e:	1d1a      	adds	r2, r3, #4
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	9203      	str	r2, [sp, #12]
 800b924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b928:	3402      	adds	r4, #2
 800b92a:	9305      	str	r3, [sp, #20]
 800b92c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9f0 <_svfiprintf_r+0x1f4>
 800b930:	7821      	ldrb	r1, [r4, #0]
 800b932:	2203      	movs	r2, #3
 800b934:	4650      	mov	r0, sl
 800b936:	f7f4 fc4b 	bl	80001d0 <memchr>
 800b93a:	b138      	cbz	r0, 800b94c <_svfiprintf_r+0x150>
 800b93c:	9b04      	ldr	r3, [sp, #16]
 800b93e:	eba0 000a 	sub.w	r0, r0, sl
 800b942:	2240      	movs	r2, #64	@ 0x40
 800b944:	4082      	lsls	r2, r0
 800b946:	4313      	orrs	r3, r2
 800b948:	3401      	adds	r4, #1
 800b94a:	9304      	str	r3, [sp, #16]
 800b94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b950:	4824      	ldr	r0, [pc, #144]	@ (800b9e4 <_svfiprintf_r+0x1e8>)
 800b952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b956:	2206      	movs	r2, #6
 800b958:	f7f4 fc3a 	bl	80001d0 <memchr>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d036      	beq.n	800b9ce <_svfiprintf_r+0x1d2>
 800b960:	4b21      	ldr	r3, [pc, #132]	@ (800b9e8 <_svfiprintf_r+0x1ec>)
 800b962:	bb1b      	cbnz	r3, 800b9ac <_svfiprintf_r+0x1b0>
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	3307      	adds	r3, #7
 800b968:	f023 0307 	bic.w	r3, r3, #7
 800b96c:	3308      	adds	r3, #8
 800b96e:	9303      	str	r3, [sp, #12]
 800b970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b972:	4433      	add	r3, r6
 800b974:	9309      	str	r3, [sp, #36]	@ 0x24
 800b976:	e76a      	b.n	800b84e <_svfiprintf_r+0x52>
 800b978:	fb0c 3202 	mla	r2, ip, r2, r3
 800b97c:	460c      	mov	r4, r1
 800b97e:	2001      	movs	r0, #1
 800b980:	e7a8      	b.n	800b8d4 <_svfiprintf_r+0xd8>
 800b982:	2300      	movs	r3, #0
 800b984:	3401      	adds	r4, #1
 800b986:	9305      	str	r3, [sp, #20]
 800b988:	4619      	mov	r1, r3
 800b98a:	f04f 0c0a 	mov.w	ip, #10
 800b98e:	4620      	mov	r0, r4
 800b990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b994:	3a30      	subs	r2, #48	@ 0x30
 800b996:	2a09      	cmp	r2, #9
 800b998:	d903      	bls.n	800b9a2 <_svfiprintf_r+0x1a6>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d0c6      	beq.n	800b92c <_svfiprintf_r+0x130>
 800b99e:	9105      	str	r1, [sp, #20]
 800b9a0:	e7c4      	b.n	800b92c <_svfiprintf_r+0x130>
 800b9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e7f0      	b.n	800b98e <_svfiprintf_r+0x192>
 800b9ac:	ab03      	add	r3, sp, #12
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	462a      	mov	r2, r5
 800b9b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b9ec <_svfiprintf_r+0x1f0>)
 800b9b4:	a904      	add	r1, sp, #16
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	f7fc facc 	bl	8007f54 <_printf_float>
 800b9bc:	1c42      	adds	r2, r0, #1
 800b9be:	4606      	mov	r6, r0
 800b9c0:	d1d6      	bne.n	800b970 <_svfiprintf_r+0x174>
 800b9c2:	89ab      	ldrh	r3, [r5, #12]
 800b9c4:	065b      	lsls	r3, r3, #25
 800b9c6:	f53f af2d 	bmi.w	800b824 <_svfiprintf_r+0x28>
 800b9ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9cc:	e72c      	b.n	800b828 <_svfiprintf_r+0x2c>
 800b9ce:	ab03      	add	r3, sp, #12
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	462a      	mov	r2, r5
 800b9d4:	4b05      	ldr	r3, [pc, #20]	@ (800b9ec <_svfiprintf_r+0x1f0>)
 800b9d6:	a904      	add	r1, sp, #16
 800b9d8:	4638      	mov	r0, r7
 800b9da:	f7fc fd53 	bl	8008484 <_printf_i>
 800b9de:	e7ed      	b.n	800b9bc <_svfiprintf_r+0x1c0>
 800b9e0:	0800d277 	.word	0x0800d277
 800b9e4:	0800d281 	.word	0x0800d281
 800b9e8:	08007f55 	.word	0x08007f55
 800b9ec:	0800b745 	.word	0x0800b745
 800b9f0:	0800d27d 	.word	0x0800d27d

0800b9f4 <__sfputc_r>:
 800b9f4:	6893      	ldr	r3, [r2, #8]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	b410      	push	{r4}
 800b9fc:	6093      	str	r3, [r2, #8]
 800b9fe:	da08      	bge.n	800ba12 <__sfputc_r+0x1e>
 800ba00:	6994      	ldr	r4, [r2, #24]
 800ba02:	42a3      	cmp	r3, r4
 800ba04:	db01      	blt.n	800ba0a <__sfputc_r+0x16>
 800ba06:	290a      	cmp	r1, #10
 800ba08:	d103      	bne.n	800ba12 <__sfputc_r+0x1e>
 800ba0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba0e:	f7fd ba32 	b.w	8008e76 <__swbuf_r>
 800ba12:	6813      	ldr	r3, [r2, #0]
 800ba14:	1c58      	adds	r0, r3, #1
 800ba16:	6010      	str	r0, [r2, #0]
 800ba18:	7019      	strb	r1, [r3, #0]
 800ba1a:	4608      	mov	r0, r1
 800ba1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <__sfputs_r>:
 800ba22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba24:	4606      	mov	r6, r0
 800ba26:	460f      	mov	r7, r1
 800ba28:	4614      	mov	r4, r2
 800ba2a:	18d5      	adds	r5, r2, r3
 800ba2c:	42ac      	cmp	r4, r5
 800ba2e:	d101      	bne.n	800ba34 <__sfputs_r+0x12>
 800ba30:	2000      	movs	r0, #0
 800ba32:	e007      	b.n	800ba44 <__sfputs_r+0x22>
 800ba34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba38:	463a      	mov	r2, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7ff ffda 	bl	800b9f4 <__sfputc_r>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d1f3      	bne.n	800ba2c <__sfputs_r+0xa>
 800ba44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba48 <_vfiprintf_r>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	b09d      	sub	sp, #116	@ 0x74
 800ba50:	4614      	mov	r4, r2
 800ba52:	4698      	mov	r8, r3
 800ba54:	4606      	mov	r6, r0
 800ba56:	b118      	cbz	r0, 800ba60 <_vfiprintf_r+0x18>
 800ba58:	6a03      	ldr	r3, [r0, #32]
 800ba5a:	b90b      	cbnz	r3, 800ba60 <_vfiprintf_r+0x18>
 800ba5c:	f7fd f8ca 	bl	8008bf4 <__sinit>
 800ba60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba62:	07d9      	lsls	r1, r3, #31
 800ba64:	d405      	bmi.n	800ba72 <_vfiprintf_r+0x2a>
 800ba66:	89ab      	ldrh	r3, [r5, #12]
 800ba68:	059a      	lsls	r2, r3, #22
 800ba6a:	d402      	bmi.n	800ba72 <_vfiprintf_r+0x2a>
 800ba6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba6e:	f7fd fbac 	bl	80091ca <__retarget_lock_acquire_recursive>
 800ba72:	89ab      	ldrh	r3, [r5, #12]
 800ba74:	071b      	lsls	r3, r3, #28
 800ba76:	d501      	bpl.n	800ba7c <_vfiprintf_r+0x34>
 800ba78:	692b      	ldr	r3, [r5, #16]
 800ba7a:	b99b      	cbnz	r3, 800baa4 <_vfiprintf_r+0x5c>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f7fd fa38 	bl	8008ef4 <__swsetup_r>
 800ba84:	b170      	cbz	r0, 800baa4 <_vfiprintf_r+0x5c>
 800ba86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba88:	07dc      	lsls	r4, r3, #31
 800ba8a:	d504      	bpl.n	800ba96 <_vfiprintf_r+0x4e>
 800ba8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba90:	b01d      	add	sp, #116	@ 0x74
 800ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba96:	89ab      	ldrh	r3, [r5, #12]
 800ba98:	0598      	lsls	r0, r3, #22
 800ba9a:	d4f7      	bmi.n	800ba8c <_vfiprintf_r+0x44>
 800ba9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba9e:	f7fd fb95 	bl	80091cc <__retarget_lock_release_recursive>
 800baa2:	e7f3      	b.n	800ba8c <_vfiprintf_r+0x44>
 800baa4:	2300      	movs	r3, #0
 800baa6:	9309      	str	r3, [sp, #36]	@ 0x24
 800baa8:	2320      	movs	r3, #32
 800baaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800baae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bab2:	2330      	movs	r3, #48	@ 0x30
 800bab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc64 <_vfiprintf_r+0x21c>
 800bab8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800babc:	f04f 0901 	mov.w	r9, #1
 800bac0:	4623      	mov	r3, r4
 800bac2:	469a      	mov	sl, r3
 800bac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bac8:	b10a      	cbz	r2, 800bace <_vfiprintf_r+0x86>
 800baca:	2a25      	cmp	r2, #37	@ 0x25
 800bacc:	d1f9      	bne.n	800bac2 <_vfiprintf_r+0x7a>
 800bace:	ebba 0b04 	subs.w	fp, sl, r4
 800bad2:	d00b      	beq.n	800baec <_vfiprintf_r+0xa4>
 800bad4:	465b      	mov	r3, fp
 800bad6:	4622      	mov	r2, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	4630      	mov	r0, r6
 800badc:	f7ff ffa1 	bl	800ba22 <__sfputs_r>
 800bae0:	3001      	adds	r0, #1
 800bae2:	f000 80a7 	beq.w	800bc34 <_vfiprintf_r+0x1ec>
 800bae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bae8:	445a      	add	r2, fp
 800baea:	9209      	str	r2, [sp, #36]	@ 0x24
 800baec:	f89a 3000 	ldrb.w	r3, [sl]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 809f 	beq.w	800bc34 <_vfiprintf_r+0x1ec>
 800baf6:	2300      	movs	r3, #0
 800baf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb00:	f10a 0a01 	add.w	sl, sl, #1
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	9307      	str	r3, [sp, #28]
 800bb08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb0e:	4654      	mov	r4, sl
 800bb10:	2205      	movs	r2, #5
 800bb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb16:	4853      	ldr	r0, [pc, #332]	@ (800bc64 <_vfiprintf_r+0x21c>)
 800bb18:	f7f4 fb5a 	bl	80001d0 <memchr>
 800bb1c:	9a04      	ldr	r2, [sp, #16]
 800bb1e:	b9d8      	cbnz	r0, 800bb58 <_vfiprintf_r+0x110>
 800bb20:	06d1      	lsls	r1, r2, #27
 800bb22:	bf44      	itt	mi
 800bb24:	2320      	movmi	r3, #32
 800bb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb2a:	0713      	lsls	r3, r2, #28
 800bb2c:	bf44      	itt	mi
 800bb2e:	232b      	movmi	r3, #43	@ 0x2b
 800bb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb34:	f89a 3000 	ldrb.w	r3, [sl]
 800bb38:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb3a:	d015      	beq.n	800bb68 <_vfiprintf_r+0x120>
 800bb3c:	9a07      	ldr	r2, [sp, #28]
 800bb3e:	4654      	mov	r4, sl
 800bb40:	2000      	movs	r0, #0
 800bb42:	f04f 0c0a 	mov.w	ip, #10
 800bb46:	4621      	mov	r1, r4
 800bb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb4c:	3b30      	subs	r3, #48	@ 0x30
 800bb4e:	2b09      	cmp	r3, #9
 800bb50:	d94b      	bls.n	800bbea <_vfiprintf_r+0x1a2>
 800bb52:	b1b0      	cbz	r0, 800bb82 <_vfiprintf_r+0x13a>
 800bb54:	9207      	str	r2, [sp, #28]
 800bb56:	e014      	b.n	800bb82 <_vfiprintf_r+0x13a>
 800bb58:	eba0 0308 	sub.w	r3, r0, r8
 800bb5c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb60:	4313      	orrs	r3, r2
 800bb62:	9304      	str	r3, [sp, #16]
 800bb64:	46a2      	mov	sl, r4
 800bb66:	e7d2      	b.n	800bb0e <_vfiprintf_r+0xc6>
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	1d19      	adds	r1, r3, #4
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	9103      	str	r1, [sp, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	bfbb      	ittet	lt
 800bb74:	425b      	neglt	r3, r3
 800bb76:	f042 0202 	orrlt.w	r2, r2, #2
 800bb7a:	9307      	strge	r3, [sp, #28]
 800bb7c:	9307      	strlt	r3, [sp, #28]
 800bb7e:	bfb8      	it	lt
 800bb80:	9204      	strlt	r2, [sp, #16]
 800bb82:	7823      	ldrb	r3, [r4, #0]
 800bb84:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb86:	d10a      	bne.n	800bb9e <_vfiprintf_r+0x156>
 800bb88:	7863      	ldrb	r3, [r4, #1]
 800bb8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb8c:	d132      	bne.n	800bbf4 <_vfiprintf_r+0x1ac>
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	1d1a      	adds	r2, r3, #4
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	9203      	str	r2, [sp, #12]
 800bb96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb9a:	3402      	adds	r4, #2
 800bb9c:	9305      	str	r3, [sp, #20]
 800bb9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc74 <_vfiprintf_r+0x22c>
 800bba2:	7821      	ldrb	r1, [r4, #0]
 800bba4:	2203      	movs	r2, #3
 800bba6:	4650      	mov	r0, sl
 800bba8:	f7f4 fb12 	bl	80001d0 <memchr>
 800bbac:	b138      	cbz	r0, 800bbbe <_vfiprintf_r+0x176>
 800bbae:	9b04      	ldr	r3, [sp, #16]
 800bbb0:	eba0 000a 	sub.w	r0, r0, sl
 800bbb4:	2240      	movs	r2, #64	@ 0x40
 800bbb6:	4082      	lsls	r2, r0
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	3401      	adds	r4, #1
 800bbbc:	9304      	str	r3, [sp, #16]
 800bbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc2:	4829      	ldr	r0, [pc, #164]	@ (800bc68 <_vfiprintf_r+0x220>)
 800bbc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbc8:	2206      	movs	r2, #6
 800bbca:	f7f4 fb01 	bl	80001d0 <memchr>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d03f      	beq.n	800bc52 <_vfiprintf_r+0x20a>
 800bbd2:	4b26      	ldr	r3, [pc, #152]	@ (800bc6c <_vfiprintf_r+0x224>)
 800bbd4:	bb1b      	cbnz	r3, 800bc1e <_vfiprintf_r+0x1d6>
 800bbd6:	9b03      	ldr	r3, [sp, #12]
 800bbd8:	3307      	adds	r3, #7
 800bbda:	f023 0307 	bic.w	r3, r3, #7
 800bbde:	3308      	adds	r3, #8
 800bbe0:	9303      	str	r3, [sp, #12]
 800bbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbe4:	443b      	add	r3, r7
 800bbe6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbe8:	e76a      	b.n	800bac0 <_vfiprintf_r+0x78>
 800bbea:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbee:	460c      	mov	r4, r1
 800bbf0:	2001      	movs	r0, #1
 800bbf2:	e7a8      	b.n	800bb46 <_vfiprintf_r+0xfe>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	3401      	adds	r4, #1
 800bbf8:	9305      	str	r3, [sp, #20]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	f04f 0c0a 	mov.w	ip, #10
 800bc00:	4620      	mov	r0, r4
 800bc02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc06:	3a30      	subs	r2, #48	@ 0x30
 800bc08:	2a09      	cmp	r2, #9
 800bc0a:	d903      	bls.n	800bc14 <_vfiprintf_r+0x1cc>
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d0c6      	beq.n	800bb9e <_vfiprintf_r+0x156>
 800bc10:	9105      	str	r1, [sp, #20]
 800bc12:	e7c4      	b.n	800bb9e <_vfiprintf_r+0x156>
 800bc14:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc18:	4604      	mov	r4, r0
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e7f0      	b.n	800bc00 <_vfiprintf_r+0x1b8>
 800bc1e:	ab03      	add	r3, sp, #12
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	462a      	mov	r2, r5
 800bc24:	4b12      	ldr	r3, [pc, #72]	@ (800bc70 <_vfiprintf_r+0x228>)
 800bc26:	a904      	add	r1, sp, #16
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f7fc f993 	bl	8007f54 <_printf_float>
 800bc2e:	4607      	mov	r7, r0
 800bc30:	1c78      	adds	r0, r7, #1
 800bc32:	d1d6      	bne.n	800bbe2 <_vfiprintf_r+0x19a>
 800bc34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc36:	07d9      	lsls	r1, r3, #31
 800bc38:	d405      	bmi.n	800bc46 <_vfiprintf_r+0x1fe>
 800bc3a:	89ab      	ldrh	r3, [r5, #12]
 800bc3c:	059a      	lsls	r2, r3, #22
 800bc3e:	d402      	bmi.n	800bc46 <_vfiprintf_r+0x1fe>
 800bc40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc42:	f7fd fac3 	bl	80091cc <__retarget_lock_release_recursive>
 800bc46:	89ab      	ldrh	r3, [r5, #12]
 800bc48:	065b      	lsls	r3, r3, #25
 800bc4a:	f53f af1f 	bmi.w	800ba8c <_vfiprintf_r+0x44>
 800bc4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc50:	e71e      	b.n	800ba90 <_vfiprintf_r+0x48>
 800bc52:	ab03      	add	r3, sp, #12
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	462a      	mov	r2, r5
 800bc58:	4b05      	ldr	r3, [pc, #20]	@ (800bc70 <_vfiprintf_r+0x228>)
 800bc5a:	a904      	add	r1, sp, #16
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7fc fc11 	bl	8008484 <_printf_i>
 800bc62:	e7e4      	b.n	800bc2e <_vfiprintf_r+0x1e6>
 800bc64:	0800d277 	.word	0x0800d277
 800bc68:	0800d281 	.word	0x0800d281
 800bc6c:	08007f55 	.word	0x08007f55
 800bc70:	0800ba23 	.word	0x0800ba23
 800bc74:	0800d27d 	.word	0x0800d27d

0800bc78 <__sflush_r>:
 800bc78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc80:	0716      	lsls	r6, r2, #28
 800bc82:	4605      	mov	r5, r0
 800bc84:	460c      	mov	r4, r1
 800bc86:	d454      	bmi.n	800bd32 <__sflush_r+0xba>
 800bc88:	684b      	ldr	r3, [r1, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	dc02      	bgt.n	800bc94 <__sflush_r+0x1c>
 800bc8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	dd48      	ble.n	800bd26 <__sflush_r+0xae>
 800bc94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc96:	2e00      	cmp	r6, #0
 800bc98:	d045      	beq.n	800bd26 <__sflush_r+0xae>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bca0:	682f      	ldr	r7, [r5, #0]
 800bca2:	6a21      	ldr	r1, [r4, #32]
 800bca4:	602b      	str	r3, [r5, #0]
 800bca6:	d030      	beq.n	800bd0a <__sflush_r+0x92>
 800bca8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	0759      	lsls	r1, r3, #29
 800bcae:	d505      	bpl.n	800bcbc <__sflush_r+0x44>
 800bcb0:	6863      	ldr	r3, [r4, #4]
 800bcb2:	1ad2      	subs	r2, r2, r3
 800bcb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcb6:	b10b      	cbz	r3, 800bcbc <__sflush_r+0x44>
 800bcb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcba:	1ad2      	subs	r2, r2, r3
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcc0:	6a21      	ldr	r1, [r4, #32]
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	47b0      	blx	r6
 800bcc6:	1c43      	adds	r3, r0, #1
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	d106      	bne.n	800bcda <__sflush_r+0x62>
 800bccc:	6829      	ldr	r1, [r5, #0]
 800bcce:	291d      	cmp	r1, #29
 800bcd0:	d82b      	bhi.n	800bd2a <__sflush_r+0xb2>
 800bcd2:	4a2a      	ldr	r2, [pc, #168]	@ (800bd7c <__sflush_r+0x104>)
 800bcd4:	40ca      	lsrs	r2, r1
 800bcd6:	07d6      	lsls	r6, r2, #31
 800bcd8:	d527      	bpl.n	800bd2a <__sflush_r+0xb2>
 800bcda:	2200      	movs	r2, #0
 800bcdc:	6062      	str	r2, [r4, #4]
 800bcde:	04d9      	lsls	r1, r3, #19
 800bce0:	6922      	ldr	r2, [r4, #16]
 800bce2:	6022      	str	r2, [r4, #0]
 800bce4:	d504      	bpl.n	800bcf0 <__sflush_r+0x78>
 800bce6:	1c42      	adds	r2, r0, #1
 800bce8:	d101      	bne.n	800bcee <__sflush_r+0x76>
 800bcea:	682b      	ldr	r3, [r5, #0]
 800bcec:	b903      	cbnz	r3, 800bcf0 <__sflush_r+0x78>
 800bcee:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcf2:	602f      	str	r7, [r5, #0]
 800bcf4:	b1b9      	cbz	r1, 800bd26 <__sflush_r+0xae>
 800bcf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcfa:	4299      	cmp	r1, r3
 800bcfc:	d002      	beq.n	800bd04 <__sflush_r+0x8c>
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f7fe f8f2 	bl	8009ee8 <_free_r>
 800bd04:	2300      	movs	r3, #0
 800bd06:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd08:	e00d      	b.n	800bd26 <__sflush_r+0xae>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	47b0      	blx	r6
 800bd10:	4602      	mov	r2, r0
 800bd12:	1c50      	adds	r0, r2, #1
 800bd14:	d1c9      	bne.n	800bcaa <__sflush_r+0x32>
 800bd16:	682b      	ldr	r3, [r5, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d0c6      	beq.n	800bcaa <__sflush_r+0x32>
 800bd1c:	2b1d      	cmp	r3, #29
 800bd1e:	d001      	beq.n	800bd24 <__sflush_r+0xac>
 800bd20:	2b16      	cmp	r3, #22
 800bd22:	d11e      	bne.n	800bd62 <__sflush_r+0xea>
 800bd24:	602f      	str	r7, [r5, #0]
 800bd26:	2000      	movs	r0, #0
 800bd28:	e022      	b.n	800bd70 <__sflush_r+0xf8>
 800bd2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd2e:	b21b      	sxth	r3, r3
 800bd30:	e01b      	b.n	800bd6a <__sflush_r+0xf2>
 800bd32:	690f      	ldr	r7, [r1, #16]
 800bd34:	2f00      	cmp	r7, #0
 800bd36:	d0f6      	beq.n	800bd26 <__sflush_r+0xae>
 800bd38:	0793      	lsls	r3, r2, #30
 800bd3a:	680e      	ldr	r6, [r1, #0]
 800bd3c:	bf08      	it	eq
 800bd3e:	694b      	ldreq	r3, [r1, #20]
 800bd40:	600f      	str	r7, [r1, #0]
 800bd42:	bf18      	it	ne
 800bd44:	2300      	movne	r3, #0
 800bd46:	eba6 0807 	sub.w	r8, r6, r7
 800bd4a:	608b      	str	r3, [r1, #8]
 800bd4c:	f1b8 0f00 	cmp.w	r8, #0
 800bd50:	dde9      	ble.n	800bd26 <__sflush_r+0xae>
 800bd52:	6a21      	ldr	r1, [r4, #32]
 800bd54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd56:	4643      	mov	r3, r8
 800bd58:	463a      	mov	r2, r7
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	47b0      	blx	r6
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	dc08      	bgt.n	800bd74 <__sflush_r+0xfc>
 800bd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd74:	4407      	add	r7, r0
 800bd76:	eba8 0800 	sub.w	r8, r8, r0
 800bd7a:	e7e7      	b.n	800bd4c <__sflush_r+0xd4>
 800bd7c:	20400001 	.word	0x20400001

0800bd80 <_fflush_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	690b      	ldr	r3, [r1, #16]
 800bd84:	4605      	mov	r5, r0
 800bd86:	460c      	mov	r4, r1
 800bd88:	b913      	cbnz	r3, 800bd90 <_fflush_r+0x10>
 800bd8a:	2500      	movs	r5, #0
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	bd38      	pop	{r3, r4, r5, pc}
 800bd90:	b118      	cbz	r0, 800bd9a <_fflush_r+0x1a>
 800bd92:	6a03      	ldr	r3, [r0, #32]
 800bd94:	b90b      	cbnz	r3, 800bd9a <_fflush_r+0x1a>
 800bd96:	f7fc ff2d 	bl	8008bf4 <__sinit>
 800bd9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0f3      	beq.n	800bd8a <_fflush_r+0xa>
 800bda2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bda4:	07d0      	lsls	r0, r2, #31
 800bda6:	d404      	bmi.n	800bdb2 <_fflush_r+0x32>
 800bda8:	0599      	lsls	r1, r3, #22
 800bdaa:	d402      	bmi.n	800bdb2 <_fflush_r+0x32>
 800bdac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdae:	f7fd fa0c 	bl	80091ca <__retarget_lock_acquire_recursive>
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	f7ff ff5f 	bl	800bc78 <__sflush_r>
 800bdba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdbc:	07da      	lsls	r2, r3, #31
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	d4e4      	bmi.n	800bd8c <_fflush_r+0xc>
 800bdc2:	89a3      	ldrh	r3, [r4, #12]
 800bdc4:	059b      	lsls	r3, r3, #22
 800bdc6:	d4e1      	bmi.n	800bd8c <_fflush_r+0xc>
 800bdc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdca:	f7fd f9ff 	bl	80091cc <__retarget_lock_release_recursive>
 800bdce:	e7dd      	b.n	800bd8c <_fflush_r+0xc>

0800bdd0 <fiprintf>:
 800bdd0:	b40e      	push	{r1, r2, r3}
 800bdd2:	b503      	push	{r0, r1, lr}
 800bdd4:	4601      	mov	r1, r0
 800bdd6:	ab03      	add	r3, sp, #12
 800bdd8:	4805      	ldr	r0, [pc, #20]	@ (800bdf0 <fiprintf+0x20>)
 800bdda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdde:	6800      	ldr	r0, [r0, #0]
 800bde0:	9301      	str	r3, [sp, #4]
 800bde2:	f7ff fe31 	bl	800ba48 <_vfiprintf_r>
 800bde6:	b002      	add	sp, #8
 800bde8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdec:	b003      	add	sp, #12
 800bdee:	4770      	bx	lr
 800bdf0:	20000060 	.word	0x20000060

0800bdf4 <__swhatbuf_r>:
 800bdf4:	b570      	push	{r4, r5, r6, lr}
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdfc:	2900      	cmp	r1, #0
 800bdfe:	b096      	sub	sp, #88	@ 0x58
 800be00:	4615      	mov	r5, r2
 800be02:	461e      	mov	r6, r3
 800be04:	da0d      	bge.n	800be22 <__swhatbuf_r+0x2e>
 800be06:	89a3      	ldrh	r3, [r4, #12]
 800be08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be0c:	f04f 0100 	mov.w	r1, #0
 800be10:	bf14      	ite	ne
 800be12:	2340      	movne	r3, #64	@ 0x40
 800be14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be18:	2000      	movs	r0, #0
 800be1a:	6031      	str	r1, [r6, #0]
 800be1c:	602b      	str	r3, [r5, #0]
 800be1e:	b016      	add	sp, #88	@ 0x58
 800be20:	bd70      	pop	{r4, r5, r6, pc}
 800be22:	466a      	mov	r2, sp
 800be24:	f000 f862 	bl	800beec <_fstat_r>
 800be28:	2800      	cmp	r0, #0
 800be2a:	dbec      	blt.n	800be06 <__swhatbuf_r+0x12>
 800be2c:	9901      	ldr	r1, [sp, #4]
 800be2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be36:	4259      	negs	r1, r3
 800be38:	4159      	adcs	r1, r3
 800be3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be3e:	e7eb      	b.n	800be18 <__swhatbuf_r+0x24>

0800be40 <__smakebuf_r>:
 800be40:	898b      	ldrh	r3, [r1, #12]
 800be42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be44:	079d      	lsls	r5, r3, #30
 800be46:	4606      	mov	r6, r0
 800be48:	460c      	mov	r4, r1
 800be4a:	d507      	bpl.n	800be5c <__smakebuf_r+0x1c>
 800be4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	6123      	str	r3, [r4, #16]
 800be54:	2301      	movs	r3, #1
 800be56:	6163      	str	r3, [r4, #20]
 800be58:	b003      	add	sp, #12
 800be5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be5c:	ab01      	add	r3, sp, #4
 800be5e:	466a      	mov	r2, sp
 800be60:	f7ff ffc8 	bl	800bdf4 <__swhatbuf_r>
 800be64:	9f00      	ldr	r7, [sp, #0]
 800be66:	4605      	mov	r5, r0
 800be68:	4639      	mov	r1, r7
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7fe f8b0 	bl	8009fd0 <_malloc_r>
 800be70:	b948      	cbnz	r0, 800be86 <__smakebuf_r+0x46>
 800be72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be76:	059a      	lsls	r2, r3, #22
 800be78:	d4ee      	bmi.n	800be58 <__smakebuf_r+0x18>
 800be7a:	f023 0303 	bic.w	r3, r3, #3
 800be7e:	f043 0302 	orr.w	r3, r3, #2
 800be82:	81a3      	strh	r3, [r4, #12]
 800be84:	e7e2      	b.n	800be4c <__smakebuf_r+0xc>
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	6020      	str	r0, [r4, #0]
 800be8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be8e:	81a3      	strh	r3, [r4, #12]
 800be90:	9b01      	ldr	r3, [sp, #4]
 800be92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be96:	b15b      	cbz	r3, 800beb0 <__smakebuf_r+0x70>
 800be98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be9c:	4630      	mov	r0, r6
 800be9e:	f000 f837 	bl	800bf10 <_isatty_r>
 800bea2:	b128      	cbz	r0, 800beb0 <__smakebuf_r+0x70>
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	f023 0303 	bic.w	r3, r3, #3
 800beaa:	f043 0301 	orr.w	r3, r3, #1
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	89a3      	ldrh	r3, [r4, #12]
 800beb2:	431d      	orrs	r5, r3
 800beb4:	81a5      	strh	r5, [r4, #12]
 800beb6:	e7cf      	b.n	800be58 <__smakebuf_r+0x18>

0800beb8 <memmove>:
 800beb8:	4288      	cmp	r0, r1
 800beba:	b510      	push	{r4, lr}
 800bebc:	eb01 0402 	add.w	r4, r1, r2
 800bec0:	d902      	bls.n	800bec8 <memmove+0x10>
 800bec2:	4284      	cmp	r4, r0
 800bec4:	4623      	mov	r3, r4
 800bec6:	d807      	bhi.n	800bed8 <memmove+0x20>
 800bec8:	1e43      	subs	r3, r0, #1
 800beca:	42a1      	cmp	r1, r4
 800becc:	d008      	beq.n	800bee0 <memmove+0x28>
 800bece:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bed6:	e7f8      	b.n	800beca <memmove+0x12>
 800bed8:	4402      	add	r2, r0
 800beda:	4601      	mov	r1, r0
 800bedc:	428a      	cmp	r2, r1
 800bede:	d100      	bne.n	800bee2 <memmove+0x2a>
 800bee0:	bd10      	pop	{r4, pc}
 800bee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800beea:	e7f7      	b.n	800bedc <memmove+0x24>

0800beec <_fstat_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d07      	ldr	r5, [pc, #28]	@ (800bf0c <_fstat_r+0x20>)
 800bef0:	2300      	movs	r3, #0
 800bef2:	4604      	mov	r4, r0
 800bef4:	4608      	mov	r0, r1
 800bef6:	4611      	mov	r1, r2
 800bef8:	602b      	str	r3, [r5, #0]
 800befa:	f7f5 fbbe 	bl	800167a <_fstat>
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	d102      	bne.n	800bf08 <_fstat_r+0x1c>
 800bf02:	682b      	ldr	r3, [r5, #0]
 800bf04:	b103      	cbz	r3, 800bf08 <_fstat_r+0x1c>
 800bf06:	6023      	str	r3, [r4, #0]
 800bf08:	bd38      	pop	{r3, r4, r5, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20000ea0 	.word	0x20000ea0

0800bf10 <_isatty_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d06      	ldr	r5, [pc, #24]	@ (800bf2c <_isatty_r+0x1c>)
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	4608      	mov	r0, r1
 800bf1a:	602b      	str	r3, [r5, #0]
 800bf1c:	f7f5 fbbd 	bl	800169a <_isatty>
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	d102      	bne.n	800bf2a <_isatty_r+0x1a>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	b103      	cbz	r3, 800bf2a <_isatty_r+0x1a>
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	bd38      	pop	{r3, r4, r5, pc}
 800bf2c:	20000ea0 	.word	0x20000ea0

0800bf30 <_sbrk_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4d06      	ldr	r5, [pc, #24]	@ (800bf4c <_sbrk_r+0x1c>)
 800bf34:	2300      	movs	r3, #0
 800bf36:	4604      	mov	r4, r0
 800bf38:	4608      	mov	r0, r1
 800bf3a:	602b      	str	r3, [r5, #0]
 800bf3c:	f7f5 fbc6 	bl	80016cc <_sbrk>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_sbrk_r+0x1a>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_sbrk_r+0x1a>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	20000ea0 	.word	0x20000ea0

0800bf50 <nan>:
 800bf50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf58 <nan+0x8>
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	00000000 	.word	0x00000000
 800bf5c:	7ff80000 	.word	0x7ff80000

0800bf60 <abort>:
 800bf60:	b508      	push	{r3, lr}
 800bf62:	2006      	movs	r0, #6
 800bf64:	f000 fbc4 	bl	800c6f0 <raise>
 800bf68:	2001      	movs	r0, #1
 800bf6a:	f7f5 fb36 	bl	80015da <_exit>

0800bf6e <_calloc_r>:
 800bf6e:	b570      	push	{r4, r5, r6, lr}
 800bf70:	fba1 5402 	umull	r5, r4, r1, r2
 800bf74:	b934      	cbnz	r4, 800bf84 <_calloc_r+0x16>
 800bf76:	4629      	mov	r1, r5
 800bf78:	f7fe f82a 	bl	8009fd0 <_malloc_r>
 800bf7c:	4606      	mov	r6, r0
 800bf7e:	b928      	cbnz	r0, 800bf8c <_calloc_r+0x1e>
 800bf80:	4630      	mov	r0, r6
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	220c      	movs	r2, #12
 800bf86:	6002      	str	r2, [r0, #0]
 800bf88:	2600      	movs	r6, #0
 800bf8a:	e7f9      	b.n	800bf80 <_calloc_r+0x12>
 800bf8c:	462a      	mov	r2, r5
 800bf8e:	4621      	mov	r1, r4
 800bf90:	f7fd f806 	bl	8008fa0 <memset>
 800bf94:	e7f4      	b.n	800bf80 <_calloc_r+0x12>

0800bf96 <rshift>:
 800bf96:	6903      	ldr	r3, [r0, #16]
 800bf98:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfa0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bfa4:	f100 0414 	add.w	r4, r0, #20
 800bfa8:	dd45      	ble.n	800c036 <rshift+0xa0>
 800bfaa:	f011 011f 	ands.w	r1, r1, #31
 800bfae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bfb2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bfb6:	d10c      	bne.n	800bfd2 <rshift+0x3c>
 800bfb8:	f100 0710 	add.w	r7, r0, #16
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	42b1      	cmp	r1, r6
 800bfc0:	d334      	bcc.n	800c02c <rshift+0x96>
 800bfc2:	1a9b      	subs	r3, r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	1eea      	subs	r2, r5, #3
 800bfc8:	4296      	cmp	r6, r2
 800bfca:	bf38      	it	cc
 800bfcc:	2300      	movcc	r3, #0
 800bfce:	4423      	add	r3, r4
 800bfd0:	e015      	b.n	800bffe <rshift+0x68>
 800bfd2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bfd6:	f1c1 0820 	rsb	r8, r1, #32
 800bfda:	40cf      	lsrs	r7, r1
 800bfdc:	f105 0e04 	add.w	lr, r5, #4
 800bfe0:	46a1      	mov	r9, r4
 800bfe2:	4576      	cmp	r6, lr
 800bfe4:	46f4      	mov	ip, lr
 800bfe6:	d815      	bhi.n	800c014 <rshift+0x7e>
 800bfe8:	1a9a      	subs	r2, r3, r2
 800bfea:	0092      	lsls	r2, r2, #2
 800bfec:	3a04      	subs	r2, #4
 800bfee:	3501      	adds	r5, #1
 800bff0:	42ae      	cmp	r6, r5
 800bff2:	bf38      	it	cc
 800bff4:	2200      	movcc	r2, #0
 800bff6:	18a3      	adds	r3, r4, r2
 800bff8:	50a7      	str	r7, [r4, r2]
 800bffa:	b107      	cbz	r7, 800bffe <rshift+0x68>
 800bffc:	3304      	adds	r3, #4
 800bffe:	1b1a      	subs	r2, r3, r4
 800c000:	42a3      	cmp	r3, r4
 800c002:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c006:	bf08      	it	eq
 800c008:	2300      	moveq	r3, #0
 800c00a:	6102      	str	r2, [r0, #16]
 800c00c:	bf08      	it	eq
 800c00e:	6143      	streq	r3, [r0, #20]
 800c010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c014:	f8dc c000 	ldr.w	ip, [ip]
 800c018:	fa0c fc08 	lsl.w	ip, ip, r8
 800c01c:	ea4c 0707 	orr.w	r7, ip, r7
 800c020:	f849 7b04 	str.w	r7, [r9], #4
 800c024:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c028:	40cf      	lsrs	r7, r1
 800c02a:	e7da      	b.n	800bfe2 <rshift+0x4c>
 800c02c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c030:	f847 cf04 	str.w	ip, [r7, #4]!
 800c034:	e7c3      	b.n	800bfbe <rshift+0x28>
 800c036:	4623      	mov	r3, r4
 800c038:	e7e1      	b.n	800bffe <rshift+0x68>

0800c03a <__hexdig_fun>:
 800c03a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c03e:	2b09      	cmp	r3, #9
 800c040:	d802      	bhi.n	800c048 <__hexdig_fun+0xe>
 800c042:	3820      	subs	r0, #32
 800c044:	b2c0      	uxtb	r0, r0
 800c046:	4770      	bx	lr
 800c048:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c04c:	2b05      	cmp	r3, #5
 800c04e:	d801      	bhi.n	800c054 <__hexdig_fun+0x1a>
 800c050:	3847      	subs	r0, #71	@ 0x47
 800c052:	e7f7      	b.n	800c044 <__hexdig_fun+0xa>
 800c054:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c058:	2b05      	cmp	r3, #5
 800c05a:	d801      	bhi.n	800c060 <__hexdig_fun+0x26>
 800c05c:	3827      	subs	r0, #39	@ 0x27
 800c05e:	e7f1      	b.n	800c044 <__hexdig_fun+0xa>
 800c060:	2000      	movs	r0, #0
 800c062:	4770      	bx	lr

0800c064 <__gethex>:
 800c064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c068:	b085      	sub	sp, #20
 800c06a:	468a      	mov	sl, r1
 800c06c:	9302      	str	r3, [sp, #8]
 800c06e:	680b      	ldr	r3, [r1, #0]
 800c070:	9001      	str	r0, [sp, #4]
 800c072:	4690      	mov	r8, r2
 800c074:	1c9c      	adds	r4, r3, #2
 800c076:	46a1      	mov	r9, r4
 800c078:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c07c:	2830      	cmp	r0, #48	@ 0x30
 800c07e:	d0fa      	beq.n	800c076 <__gethex+0x12>
 800c080:	eba9 0303 	sub.w	r3, r9, r3
 800c084:	f1a3 0b02 	sub.w	fp, r3, #2
 800c088:	f7ff ffd7 	bl	800c03a <__hexdig_fun>
 800c08c:	4605      	mov	r5, r0
 800c08e:	2800      	cmp	r0, #0
 800c090:	d168      	bne.n	800c164 <__gethex+0x100>
 800c092:	49a0      	ldr	r1, [pc, #640]	@ (800c314 <__gethex+0x2b0>)
 800c094:	2201      	movs	r2, #1
 800c096:	4648      	mov	r0, r9
 800c098:	f7fc ff8a 	bl	8008fb0 <strncmp>
 800c09c:	4607      	mov	r7, r0
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d167      	bne.n	800c172 <__gethex+0x10e>
 800c0a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c0a6:	4626      	mov	r6, r4
 800c0a8:	f7ff ffc7 	bl	800c03a <__hexdig_fun>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d062      	beq.n	800c176 <__gethex+0x112>
 800c0b0:	4623      	mov	r3, r4
 800c0b2:	7818      	ldrb	r0, [r3, #0]
 800c0b4:	2830      	cmp	r0, #48	@ 0x30
 800c0b6:	4699      	mov	r9, r3
 800c0b8:	f103 0301 	add.w	r3, r3, #1
 800c0bc:	d0f9      	beq.n	800c0b2 <__gethex+0x4e>
 800c0be:	f7ff ffbc 	bl	800c03a <__hexdig_fun>
 800c0c2:	fab0 f580 	clz	r5, r0
 800c0c6:	096d      	lsrs	r5, r5, #5
 800c0c8:	f04f 0b01 	mov.w	fp, #1
 800c0cc:	464a      	mov	r2, r9
 800c0ce:	4616      	mov	r6, r2
 800c0d0:	3201      	adds	r2, #1
 800c0d2:	7830      	ldrb	r0, [r6, #0]
 800c0d4:	f7ff ffb1 	bl	800c03a <__hexdig_fun>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d1f8      	bne.n	800c0ce <__gethex+0x6a>
 800c0dc:	498d      	ldr	r1, [pc, #564]	@ (800c314 <__gethex+0x2b0>)
 800c0de:	2201      	movs	r2, #1
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7fc ff65 	bl	8008fb0 <strncmp>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d13f      	bne.n	800c16a <__gethex+0x106>
 800c0ea:	b944      	cbnz	r4, 800c0fe <__gethex+0x9a>
 800c0ec:	1c74      	adds	r4, r6, #1
 800c0ee:	4622      	mov	r2, r4
 800c0f0:	4616      	mov	r6, r2
 800c0f2:	3201      	adds	r2, #1
 800c0f4:	7830      	ldrb	r0, [r6, #0]
 800c0f6:	f7ff ffa0 	bl	800c03a <__hexdig_fun>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d1f8      	bne.n	800c0f0 <__gethex+0x8c>
 800c0fe:	1ba4      	subs	r4, r4, r6
 800c100:	00a7      	lsls	r7, r4, #2
 800c102:	7833      	ldrb	r3, [r6, #0]
 800c104:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c108:	2b50      	cmp	r3, #80	@ 0x50
 800c10a:	d13e      	bne.n	800c18a <__gethex+0x126>
 800c10c:	7873      	ldrb	r3, [r6, #1]
 800c10e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c110:	d033      	beq.n	800c17a <__gethex+0x116>
 800c112:	2b2d      	cmp	r3, #45	@ 0x2d
 800c114:	d034      	beq.n	800c180 <__gethex+0x11c>
 800c116:	1c71      	adds	r1, r6, #1
 800c118:	2400      	movs	r4, #0
 800c11a:	7808      	ldrb	r0, [r1, #0]
 800c11c:	f7ff ff8d 	bl	800c03a <__hexdig_fun>
 800c120:	1e43      	subs	r3, r0, #1
 800c122:	b2db      	uxtb	r3, r3
 800c124:	2b18      	cmp	r3, #24
 800c126:	d830      	bhi.n	800c18a <__gethex+0x126>
 800c128:	f1a0 0210 	sub.w	r2, r0, #16
 800c12c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c130:	f7ff ff83 	bl	800c03a <__hexdig_fun>
 800c134:	f100 3cff 	add.w	ip, r0, #4294967295
 800c138:	fa5f fc8c 	uxtb.w	ip, ip
 800c13c:	f1bc 0f18 	cmp.w	ip, #24
 800c140:	f04f 030a 	mov.w	r3, #10
 800c144:	d91e      	bls.n	800c184 <__gethex+0x120>
 800c146:	b104      	cbz	r4, 800c14a <__gethex+0xe6>
 800c148:	4252      	negs	r2, r2
 800c14a:	4417      	add	r7, r2
 800c14c:	f8ca 1000 	str.w	r1, [sl]
 800c150:	b1ed      	cbz	r5, 800c18e <__gethex+0x12a>
 800c152:	f1bb 0f00 	cmp.w	fp, #0
 800c156:	bf0c      	ite	eq
 800c158:	2506      	moveq	r5, #6
 800c15a:	2500      	movne	r5, #0
 800c15c:	4628      	mov	r0, r5
 800c15e:	b005      	add	sp, #20
 800c160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c164:	2500      	movs	r5, #0
 800c166:	462c      	mov	r4, r5
 800c168:	e7b0      	b.n	800c0cc <__gethex+0x68>
 800c16a:	2c00      	cmp	r4, #0
 800c16c:	d1c7      	bne.n	800c0fe <__gethex+0x9a>
 800c16e:	4627      	mov	r7, r4
 800c170:	e7c7      	b.n	800c102 <__gethex+0x9e>
 800c172:	464e      	mov	r6, r9
 800c174:	462f      	mov	r7, r5
 800c176:	2501      	movs	r5, #1
 800c178:	e7c3      	b.n	800c102 <__gethex+0x9e>
 800c17a:	2400      	movs	r4, #0
 800c17c:	1cb1      	adds	r1, r6, #2
 800c17e:	e7cc      	b.n	800c11a <__gethex+0xb6>
 800c180:	2401      	movs	r4, #1
 800c182:	e7fb      	b.n	800c17c <__gethex+0x118>
 800c184:	fb03 0002 	mla	r0, r3, r2, r0
 800c188:	e7ce      	b.n	800c128 <__gethex+0xc4>
 800c18a:	4631      	mov	r1, r6
 800c18c:	e7de      	b.n	800c14c <__gethex+0xe8>
 800c18e:	eba6 0309 	sub.w	r3, r6, r9
 800c192:	3b01      	subs	r3, #1
 800c194:	4629      	mov	r1, r5
 800c196:	2b07      	cmp	r3, #7
 800c198:	dc0a      	bgt.n	800c1b0 <__gethex+0x14c>
 800c19a:	9801      	ldr	r0, [sp, #4]
 800c19c:	f7fd ffa4 	bl	800a0e8 <_Balloc>
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	b940      	cbnz	r0, 800c1b6 <__gethex+0x152>
 800c1a4:	4b5c      	ldr	r3, [pc, #368]	@ (800c318 <__gethex+0x2b4>)
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	21e4      	movs	r1, #228	@ 0xe4
 800c1aa:	485c      	ldr	r0, [pc, #368]	@ (800c31c <__gethex+0x2b8>)
 800c1ac:	f7fd f824 	bl	80091f8 <__assert_func>
 800c1b0:	3101      	adds	r1, #1
 800c1b2:	105b      	asrs	r3, r3, #1
 800c1b4:	e7ef      	b.n	800c196 <__gethex+0x132>
 800c1b6:	f100 0a14 	add.w	sl, r0, #20
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	4655      	mov	r5, sl
 800c1be:	469b      	mov	fp, r3
 800c1c0:	45b1      	cmp	r9, r6
 800c1c2:	d337      	bcc.n	800c234 <__gethex+0x1d0>
 800c1c4:	f845 bb04 	str.w	fp, [r5], #4
 800c1c8:	eba5 050a 	sub.w	r5, r5, sl
 800c1cc:	10ad      	asrs	r5, r5, #2
 800c1ce:	6125      	str	r5, [r4, #16]
 800c1d0:	4658      	mov	r0, fp
 800c1d2:	f7fe f87b 	bl	800a2cc <__hi0bits>
 800c1d6:	016d      	lsls	r5, r5, #5
 800c1d8:	f8d8 6000 	ldr.w	r6, [r8]
 800c1dc:	1a2d      	subs	r5, r5, r0
 800c1de:	42b5      	cmp	r5, r6
 800c1e0:	dd54      	ble.n	800c28c <__gethex+0x228>
 800c1e2:	1bad      	subs	r5, r5, r6
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f7fe fc07 	bl	800a9fa <__any_on>
 800c1ec:	4681      	mov	r9, r0
 800c1ee:	b178      	cbz	r0, 800c210 <__gethex+0x1ac>
 800c1f0:	1e6b      	subs	r3, r5, #1
 800c1f2:	1159      	asrs	r1, r3, #5
 800c1f4:	f003 021f 	and.w	r2, r3, #31
 800c1f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c1fc:	f04f 0901 	mov.w	r9, #1
 800c200:	fa09 f202 	lsl.w	r2, r9, r2
 800c204:	420a      	tst	r2, r1
 800c206:	d003      	beq.n	800c210 <__gethex+0x1ac>
 800c208:	454b      	cmp	r3, r9
 800c20a:	dc36      	bgt.n	800c27a <__gethex+0x216>
 800c20c:	f04f 0902 	mov.w	r9, #2
 800c210:	4629      	mov	r1, r5
 800c212:	4620      	mov	r0, r4
 800c214:	f7ff febf 	bl	800bf96 <rshift>
 800c218:	442f      	add	r7, r5
 800c21a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c21e:	42bb      	cmp	r3, r7
 800c220:	da42      	bge.n	800c2a8 <__gethex+0x244>
 800c222:	9801      	ldr	r0, [sp, #4]
 800c224:	4621      	mov	r1, r4
 800c226:	f7fd ff9f 	bl	800a168 <_Bfree>
 800c22a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c22c:	2300      	movs	r3, #0
 800c22e:	6013      	str	r3, [r2, #0]
 800c230:	25a3      	movs	r5, #163	@ 0xa3
 800c232:	e793      	b.n	800c15c <__gethex+0xf8>
 800c234:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c238:	2a2e      	cmp	r2, #46	@ 0x2e
 800c23a:	d012      	beq.n	800c262 <__gethex+0x1fe>
 800c23c:	2b20      	cmp	r3, #32
 800c23e:	d104      	bne.n	800c24a <__gethex+0x1e6>
 800c240:	f845 bb04 	str.w	fp, [r5], #4
 800c244:	f04f 0b00 	mov.w	fp, #0
 800c248:	465b      	mov	r3, fp
 800c24a:	7830      	ldrb	r0, [r6, #0]
 800c24c:	9303      	str	r3, [sp, #12]
 800c24e:	f7ff fef4 	bl	800c03a <__hexdig_fun>
 800c252:	9b03      	ldr	r3, [sp, #12]
 800c254:	f000 000f 	and.w	r0, r0, #15
 800c258:	4098      	lsls	r0, r3
 800c25a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c25e:	3304      	adds	r3, #4
 800c260:	e7ae      	b.n	800c1c0 <__gethex+0x15c>
 800c262:	45b1      	cmp	r9, r6
 800c264:	d8ea      	bhi.n	800c23c <__gethex+0x1d8>
 800c266:	492b      	ldr	r1, [pc, #172]	@ (800c314 <__gethex+0x2b0>)
 800c268:	9303      	str	r3, [sp, #12]
 800c26a:	2201      	movs	r2, #1
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7fc fe9f 	bl	8008fb0 <strncmp>
 800c272:	9b03      	ldr	r3, [sp, #12]
 800c274:	2800      	cmp	r0, #0
 800c276:	d1e1      	bne.n	800c23c <__gethex+0x1d8>
 800c278:	e7a2      	b.n	800c1c0 <__gethex+0x15c>
 800c27a:	1ea9      	subs	r1, r5, #2
 800c27c:	4620      	mov	r0, r4
 800c27e:	f7fe fbbc 	bl	800a9fa <__any_on>
 800c282:	2800      	cmp	r0, #0
 800c284:	d0c2      	beq.n	800c20c <__gethex+0x1a8>
 800c286:	f04f 0903 	mov.w	r9, #3
 800c28a:	e7c1      	b.n	800c210 <__gethex+0x1ac>
 800c28c:	da09      	bge.n	800c2a2 <__gethex+0x23e>
 800c28e:	1b75      	subs	r5, r6, r5
 800c290:	4621      	mov	r1, r4
 800c292:	9801      	ldr	r0, [sp, #4]
 800c294:	462a      	mov	r2, r5
 800c296:	f7fe f977 	bl	800a588 <__lshift>
 800c29a:	1b7f      	subs	r7, r7, r5
 800c29c:	4604      	mov	r4, r0
 800c29e:	f100 0a14 	add.w	sl, r0, #20
 800c2a2:	f04f 0900 	mov.w	r9, #0
 800c2a6:	e7b8      	b.n	800c21a <__gethex+0x1b6>
 800c2a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c2ac:	42bd      	cmp	r5, r7
 800c2ae:	dd6f      	ble.n	800c390 <__gethex+0x32c>
 800c2b0:	1bed      	subs	r5, r5, r7
 800c2b2:	42ae      	cmp	r6, r5
 800c2b4:	dc34      	bgt.n	800c320 <__gethex+0x2bc>
 800c2b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d022      	beq.n	800c304 <__gethex+0x2a0>
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d024      	beq.n	800c30c <__gethex+0x2a8>
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d115      	bne.n	800c2f2 <__gethex+0x28e>
 800c2c6:	42ae      	cmp	r6, r5
 800c2c8:	d113      	bne.n	800c2f2 <__gethex+0x28e>
 800c2ca:	2e01      	cmp	r6, #1
 800c2cc:	d10b      	bne.n	800c2e6 <__gethex+0x282>
 800c2ce:	9a02      	ldr	r2, [sp, #8]
 800c2d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c2d4:	6013      	str	r3, [r2, #0]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	6123      	str	r3, [r4, #16]
 800c2da:	f8ca 3000 	str.w	r3, [sl]
 800c2de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2e0:	2562      	movs	r5, #98	@ 0x62
 800c2e2:	601c      	str	r4, [r3, #0]
 800c2e4:	e73a      	b.n	800c15c <__gethex+0xf8>
 800c2e6:	1e71      	subs	r1, r6, #1
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f7fe fb86 	bl	800a9fa <__any_on>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d1ed      	bne.n	800c2ce <__gethex+0x26a>
 800c2f2:	9801      	ldr	r0, [sp, #4]
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	f7fd ff37 	bl	800a168 <_Bfree>
 800c2fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	2550      	movs	r5, #80	@ 0x50
 800c302:	e72b      	b.n	800c15c <__gethex+0xf8>
 800c304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1f3      	bne.n	800c2f2 <__gethex+0x28e>
 800c30a:	e7e0      	b.n	800c2ce <__gethex+0x26a>
 800c30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1dd      	bne.n	800c2ce <__gethex+0x26a>
 800c312:	e7ee      	b.n	800c2f2 <__gethex+0x28e>
 800c314:	0800d275 	.word	0x0800d275
 800c318:	0800d20b 	.word	0x0800d20b
 800c31c:	0800d290 	.word	0x0800d290
 800c320:	1e6f      	subs	r7, r5, #1
 800c322:	f1b9 0f00 	cmp.w	r9, #0
 800c326:	d130      	bne.n	800c38a <__gethex+0x326>
 800c328:	b127      	cbz	r7, 800c334 <__gethex+0x2d0>
 800c32a:	4639      	mov	r1, r7
 800c32c:	4620      	mov	r0, r4
 800c32e:	f7fe fb64 	bl	800a9fa <__any_on>
 800c332:	4681      	mov	r9, r0
 800c334:	117a      	asrs	r2, r7, #5
 800c336:	2301      	movs	r3, #1
 800c338:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c33c:	f007 071f 	and.w	r7, r7, #31
 800c340:	40bb      	lsls	r3, r7
 800c342:	4213      	tst	r3, r2
 800c344:	4629      	mov	r1, r5
 800c346:	4620      	mov	r0, r4
 800c348:	bf18      	it	ne
 800c34a:	f049 0902 	orrne.w	r9, r9, #2
 800c34e:	f7ff fe22 	bl	800bf96 <rshift>
 800c352:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c356:	1b76      	subs	r6, r6, r5
 800c358:	2502      	movs	r5, #2
 800c35a:	f1b9 0f00 	cmp.w	r9, #0
 800c35e:	d047      	beq.n	800c3f0 <__gethex+0x38c>
 800c360:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c364:	2b02      	cmp	r3, #2
 800c366:	d015      	beq.n	800c394 <__gethex+0x330>
 800c368:	2b03      	cmp	r3, #3
 800c36a:	d017      	beq.n	800c39c <__gethex+0x338>
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d109      	bne.n	800c384 <__gethex+0x320>
 800c370:	f019 0f02 	tst.w	r9, #2
 800c374:	d006      	beq.n	800c384 <__gethex+0x320>
 800c376:	f8da 3000 	ldr.w	r3, [sl]
 800c37a:	ea49 0903 	orr.w	r9, r9, r3
 800c37e:	f019 0f01 	tst.w	r9, #1
 800c382:	d10e      	bne.n	800c3a2 <__gethex+0x33e>
 800c384:	f045 0510 	orr.w	r5, r5, #16
 800c388:	e032      	b.n	800c3f0 <__gethex+0x38c>
 800c38a:	f04f 0901 	mov.w	r9, #1
 800c38e:	e7d1      	b.n	800c334 <__gethex+0x2d0>
 800c390:	2501      	movs	r5, #1
 800c392:	e7e2      	b.n	800c35a <__gethex+0x2f6>
 800c394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c396:	f1c3 0301 	rsb	r3, r3, #1
 800c39a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d0f0      	beq.n	800c384 <__gethex+0x320>
 800c3a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c3a6:	f104 0314 	add.w	r3, r4, #20
 800c3aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c3ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c3b2:	f04f 0c00 	mov.w	ip, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c3c0:	d01b      	beq.n	800c3fa <__gethex+0x396>
 800c3c2:	3201      	adds	r2, #1
 800c3c4:	6002      	str	r2, [r0, #0]
 800c3c6:	2d02      	cmp	r5, #2
 800c3c8:	f104 0314 	add.w	r3, r4, #20
 800c3cc:	d13c      	bne.n	800c448 <__gethex+0x3e4>
 800c3ce:	f8d8 2000 	ldr.w	r2, [r8]
 800c3d2:	3a01      	subs	r2, #1
 800c3d4:	42b2      	cmp	r2, r6
 800c3d6:	d109      	bne.n	800c3ec <__gethex+0x388>
 800c3d8:	1171      	asrs	r1, r6, #5
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3e0:	f006 061f 	and.w	r6, r6, #31
 800c3e4:	fa02 f606 	lsl.w	r6, r2, r6
 800c3e8:	421e      	tst	r6, r3
 800c3ea:	d13a      	bne.n	800c462 <__gethex+0x3fe>
 800c3ec:	f045 0520 	orr.w	r5, r5, #32
 800c3f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3f2:	601c      	str	r4, [r3, #0]
 800c3f4:	9b02      	ldr	r3, [sp, #8]
 800c3f6:	601f      	str	r7, [r3, #0]
 800c3f8:	e6b0      	b.n	800c15c <__gethex+0xf8>
 800c3fa:	4299      	cmp	r1, r3
 800c3fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c400:	d8d9      	bhi.n	800c3b6 <__gethex+0x352>
 800c402:	68a3      	ldr	r3, [r4, #8]
 800c404:	459b      	cmp	fp, r3
 800c406:	db17      	blt.n	800c438 <__gethex+0x3d4>
 800c408:	6861      	ldr	r1, [r4, #4]
 800c40a:	9801      	ldr	r0, [sp, #4]
 800c40c:	3101      	adds	r1, #1
 800c40e:	f7fd fe6b 	bl	800a0e8 <_Balloc>
 800c412:	4681      	mov	r9, r0
 800c414:	b918      	cbnz	r0, 800c41e <__gethex+0x3ba>
 800c416:	4b1a      	ldr	r3, [pc, #104]	@ (800c480 <__gethex+0x41c>)
 800c418:	4602      	mov	r2, r0
 800c41a:	2184      	movs	r1, #132	@ 0x84
 800c41c:	e6c5      	b.n	800c1aa <__gethex+0x146>
 800c41e:	6922      	ldr	r2, [r4, #16]
 800c420:	3202      	adds	r2, #2
 800c422:	f104 010c 	add.w	r1, r4, #12
 800c426:	0092      	lsls	r2, r2, #2
 800c428:	300c      	adds	r0, #12
 800c42a:	f7fc fed0 	bl	80091ce <memcpy>
 800c42e:	4621      	mov	r1, r4
 800c430:	9801      	ldr	r0, [sp, #4]
 800c432:	f7fd fe99 	bl	800a168 <_Bfree>
 800c436:	464c      	mov	r4, r9
 800c438:	6923      	ldr	r3, [r4, #16]
 800c43a:	1c5a      	adds	r2, r3, #1
 800c43c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c440:	6122      	str	r2, [r4, #16]
 800c442:	2201      	movs	r2, #1
 800c444:	615a      	str	r2, [r3, #20]
 800c446:	e7be      	b.n	800c3c6 <__gethex+0x362>
 800c448:	6922      	ldr	r2, [r4, #16]
 800c44a:	455a      	cmp	r2, fp
 800c44c:	dd0b      	ble.n	800c466 <__gethex+0x402>
 800c44e:	2101      	movs	r1, #1
 800c450:	4620      	mov	r0, r4
 800c452:	f7ff fda0 	bl	800bf96 <rshift>
 800c456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c45a:	3701      	adds	r7, #1
 800c45c:	42bb      	cmp	r3, r7
 800c45e:	f6ff aee0 	blt.w	800c222 <__gethex+0x1be>
 800c462:	2501      	movs	r5, #1
 800c464:	e7c2      	b.n	800c3ec <__gethex+0x388>
 800c466:	f016 061f 	ands.w	r6, r6, #31
 800c46a:	d0fa      	beq.n	800c462 <__gethex+0x3fe>
 800c46c:	4453      	add	r3, sl
 800c46e:	f1c6 0620 	rsb	r6, r6, #32
 800c472:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c476:	f7fd ff29 	bl	800a2cc <__hi0bits>
 800c47a:	42b0      	cmp	r0, r6
 800c47c:	dbe7      	blt.n	800c44e <__gethex+0x3ea>
 800c47e:	e7f0      	b.n	800c462 <__gethex+0x3fe>
 800c480:	0800d20b 	.word	0x0800d20b

0800c484 <L_shift>:
 800c484:	f1c2 0208 	rsb	r2, r2, #8
 800c488:	0092      	lsls	r2, r2, #2
 800c48a:	b570      	push	{r4, r5, r6, lr}
 800c48c:	f1c2 0620 	rsb	r6, r2, #32
 800c490:	6843      	ldr	r3, [r0, #4]
 800c492:	6804      	ldr	r4, [r0, #0]
 800c494:	fa03 f506 	lsl.w	r5, r3, r6
 800c498:	432c      	orrs	r4, r5
 800c49a:	40d3      	lsrs	r3, r2
 800c49c:	6004      	str	r4, [r0, #0]
 800c49e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c4a2:	4288      	cmp	r0, r1
 800c4a4:	d3f4      	bcc.n	800c490 <L_shift+0xc>
 800c4a6:	bd70      	pop	{r4, r5, r6, pc}

0800c4a8 <__match>:
 800c4a8:	b530      	push	{r4, r5, lr}
 800c4aa:	6803      	ldr	r3, [r0, #0]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4b2:	b914      	cbnz	r4, 800c4ba <__match+0x12>
 800c4b4:	6003      	str	r3, [r0, #0]
 800c4b6:	2001      	movs	r0, #1
 800c4b8:	bd30      	pop	{r4, r5, pc}
 800c4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c4c2:	2d19      	cmp	r5, #25
 800c4c4:	bf98      	it	ls
 800c4c6:	3220      	addls	r2, #32
 800c4c8:	42a2      	cmp	r2, r4
 800c4ca:	d0f0      	beq.n	800c4ae <__match+0x6>
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	e7f3      	b.n	800c4b8 <__match+0x10>

0800c4d0 <__hexnan>:
 800c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d4:	680b      	ldr	r3, [r1, #0]
 800c4d6:	6801      	ldr	r1, [r0, #0]
 800c4d8:	115e      	asrs	r6, r3, #5
 800c4da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c4de:	f013 031f 	ands.w	r3, r3, #31
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	bf18      	it	ne
 800c4e6:	3604      	addne	r6, #4
 800c4e8:	2500      	movs	r5, #0
 800c4ea:	1f37      	subs	r7, r6, #4
 800c4ec:	4682      	mov	sl, r0
 800c4ee:	4690      	mov	r8, r2
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c4f6:	46b9      	mov	r9, r7
 800c4f8:	463c      	mov	r4, r7
 800c4fa:	9502      	str	r5, [sp, #8]
 800c4fc:	46ab      	mov	fp, r5
 800c4fe:	784a      	ldrb	r2, [r1, #1]
 800c500:	1c4b      	adds	r3, r1, #1
 800c502:	9303      	str	r3, [sp, #12]
 800c504:	b342      	cbz	r2, 800c558 <__hexnan+0x88>
 800c506:	4610      	mov	r0, r2
 800c508:	9105      	str	r1, [sp, #20]
 800c50a:	9204      	str	r2, [sp, #16]
 800c50c:	f7ff fd95 	bl	800c03a <__hexdig_fun>
 800c510:	2800      	cmp	r0, #0
 800c512:	d151      	bne.n	800c5b8 <__hexnan+0xe8>
 800c514:	9a04      	ldr	r2, [sp, #16]
 800c516:	9905      	ldr	r1, [sp, #20]
 800c518:	2a20      	cmp	r2, #32
 800c51a:	d818      	bhi.n	800c54e <__hexnan+0x7e>
 800c51c:	9b02      	ldr	r3, [sp, #8]
 800c51e:	459b      	cmp	fp, r3
 800c520:	dd13      	ble.n	800c54a <__hexnan+0x7a>
 800c522:	454c      	cmp	r4, r9
 800c524:	d206      	bcs.n	800c534 <__hexnan+0x64>
 800c526:	2d07      	cmp	r5, #7
 800c528:	dc04      	bgt.n	800c534 <__hexnan+0x64>
 800c52a:	462a      	mov	r2, r5
 800c52c:	4649      	mov	r1, r9
 800c52e:	4620      	mov	r0, r4
 800c530:	f7ff ffa8 	bl	800c484 <L_shift>
 800c534:	4544      	cmp	r4, r8
 800c536:	d952      	bls.n	800c5de <__hexnan+0x10e>
 800c538:	2300      	movs	r3, #0
 800c53a:	f1a4 0904 	sub.w	r9, r4, #4
 800c53e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c542:	f8cd b008 	str.w	fp, [sp, #8]
 800c546:	464c      	mov	r4, r9
 800c548:	461d      	mov	r5, r3
 800c54a:	9903      	ldr	r1, [sp, #12]
 800c54c:	e7d7      	b.n	800c4fe <__hexnan+0x2e>
 800c54e:	2a29      	cmp	r2, #41	@ 0x29
 800c550:	d157      	bne.n	800c602 <__hexnan+0x132>
 800c552:	3102      	adds	r1, #2
 800c554:	f8ca 1000 	str.w	r1, [sl]
 800c558:	f1bb 0f00 	cmp.w	fp, #0
 800c55c:	d051      	beq.n	800c602 <__hexnan+0x132>
 800c55e:	454c      	cmp	r4, r9
 800c560:	d206      	bcs.n	800c570 <__hexnan+0xa0>
 800c562:	2d07      	cmp	r5, #7
 800c564:	dc04      	bgt.n	800c570 <__hexnan+0xa0>
 800c566:	462a      	mov	r2, r5
 800c568:	4649      	mov	r1, r9
 800c56a:	4620      	mov	r0, r4
 800c56c:	f7ff ff8a 	bl	800c484 <L_shift>
 800c570:	4544      	cmp	r4, r8
 800c572:	d936      	bls.n	800c5e2 <__hexnan+0x112>
 800c574:	f1a8 0204 	sub.w	r2, r8, #4
 800c578:	4623      	mov	r3, r4
 800c57a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c57e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c582:	429f      	cmp	r7, r3
 800c584:	d2f9      	bcs.n	800c57a <__hexnan+0xaa>
 800c586:	1b3b      	subs	r3, r7, r4
 800c588:	f023 0303 	bic.w	r3, r3, #3
 800c58c:	3304      	adds	r3, #4
 800c58e:	3401      	adds	r4, #1
 800c590:	3e03      	subs	r6, #3
 800c592:	42b4      	cmp	r4, r6
 800c594:	bf88      	it	hi
 800c596:	2304      	movhi	r3, #4
 800c598:	4443      	add	r3, r8
 800c59a:	2200      	movs	r2, #0
 800c59c:	f843 2b04 	str.w	r2, [r3], #4
 800c5a0:	429f      	cmp	r7, r3
 800c5a2:	d2fb      	bcs.n	800c59c <__hexnan+0xcc>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	b91b      	cbnz	r3, 800c5b0 <__hexnan+0xe0>
 800c5a8:	4547      	cmp	r7, r8
 800c5aa:	d128      	bne.n	800c5fe <__hexnan+0x12e>
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	603b      	str	r3, [r7, #0]
 800c5b0:	2005      	movs	r0, #5
 800c5b2:	b007      	add	sp, #28
 800c5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b8:	3501      	adds	r5, #1
 800c5ba:	2d08      	cmp	r5, #8
 800c5bc:	f10b 0b01 	add.w	fp, fp, #1
 800c5c0:	dd06      	ble.n	800c5d0 <__hexnan+0x100>
 800c5c2:	4544      	cmp	r4, r8
 800c5c4:	d9c1      	bls.n	800c54a <__hexnan+0x7a>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5cc:	2501      	movs	r5, #1
 800c5ce:	3c04      	subs	r4, #4
 800c5d0:	6822      	ldr	r2, [r4, #0]
 800c5d2:	f000 000f 	and.w	r0, r0, #15
 800c5d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c5da:	6020      	str	r0, [r4, #0]
 800c5dc:	e7b5      	b.n	800c54a <__hexnan+0x7a>
 800c5de:	2508      	movs	r5, #8
 800c5e0:	e7b3      	b.n	800c54a <__hexnan+0x7a>
 800c5e2:	9b01      	ldr	r3, [sp, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d0dd      	beq.n	800c5a4 <__hexnan+0xd4>
 800c5e8:	f1c3 0320 	rsb	r3, r3, #32
 800c5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f0:	40da      	lsrs	r2, r3
 800c5f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c5fc:	e7d2      	b.n	800c5a4 <__hexnan+0xd4>
 800c5fe:	3f04      	subs	r7, #4
 800c600:	e7d0      	b.n	800c5a4 <__hexnan+0xd4>
 800c602:	2004      	movs	r0, #4
 800c604:	e7d5      	b.n	800c5b2 <__hexnan+0xe2>

0800c606 <__ascii_mbtowc>:
 800c606:	b082      	sub	sp, #8
 800c608:	b901      	cbnz	r1, 800c60c <__ascii_mbtowc+0x6>
 800c60a:	a901      	add	r1, sp, #4
 800c60c:	b142      	cbz	r2, 800c620 <__ascii_mbtowc+0x1a>
 800c60e:	b14b      	cbz	r3, 800c624 <__ascii_mbtowc+0x1e>
 800c610:	7813      	ldrb	r3, [r2, #0]
 800c612:	600b      	str	r3, [r1, #0]
 800c614:	7812      	ldrb	r2, [r2, #0]
 800c616:	1e10      	subs	r0, r2, #0
 800c618:	bf18      	it	ne
 800c61a:	2001      	movne	r0, #1
 800c61c:	b002      	add	sp, #8
 800c61e:	4770      	bx	lr
 800c620:	4610      	mov	r0, r2
 800c622:	e7fb      	b.n	800c61c <__ascii_mbtowc+0x16>
 800c624:	f06f 0001 	mvn.w	r0, #1
 800c628:	e7f8      	b.n	800c61c <__ascii_mbtowc+0x16>

0800c62a <_realloc_r>:
 800c62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c62e:	4607      	mov	r7, r0
 800c630:	4614      	mov	r4, r2
 800c632:	460d      	mov	r5, r1
 800c634:	b921      	cbnz	r1, 800c640 <_realloc_r+0x16>
 800c636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c63a:	4611      	mov	r1, r2
 800c63c:	f7fd bcc8 	b.w	8009fd0 <_malloc_r>
 800c640:	b92a      	cbnz	r2, 800c64e <_realloc_r+0x24>
 800c642:	f7fd fc51 	bl	8009ee8 <_free_r>
 800c646:	4625      	mov	r5, r4
 800c648:	4628      	mov	r0, r5
 800c64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c64e:	f000 f86b 	bl	800c728 <_malloc_usable_size_r>
 800c652:	4284      	cmp	r4, r0
 800c654:	4606      	mov	r6, r0
 800c656:	d802      	bhi.n	800c65e <_realloc_r+0x34>
 800c658:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c65c:	d8f4      	bhi.n	800c648 <_realloc_r+0x1e>
 800c65e:	4621      	mov	r1, r4
 800c660:	4638      	mov	r0, r7
 800c662:	f7fd fcb5 	bl	8009fd0 <_malloc_r>
 800c666:	4680      	mov	r8, r0
 800c668:	b908      	cbnz	r0, 800c66e <_realloc_r+0x44>
 800c66a:	4645      	mov	r5, r8
 800c66c:	e7ec      	b.n	800c648 <_realloc_r+0x1e>
 800c66e:	42b4      	cmp	r4, r6
 800c670:	4622      	mov	r2, r4
 800c672:	4629      	mov	r1, r5
 800c674:	bf28      	it	cs
 800c676:	4632      	movcs	r2, r6
 800c678:	f7fc fda9 	bl	80091ce <memcpy>
 800c67c:	4629      	mov	r1, r5
 800c67e:	4638      	mov	r0, r7
 800c680:	f7fd fc32 	bl	8009ee8 <_free_r>
 800c684:	e7f1      	b.n	800c66a <_realloc_r+0x40>

0800c686 <__ascii_wctomb>:
 800c686:	4603      	mov	r3, r0
 800c688:	4608      	mov	r0, r1
 800c68a:	b141      	cbz	r1, 800c69e <__ascii_wctomb+0x18>
 800c68c:	2aff      	cmp	r2, #255	@ 0xff
 800c68e:	d904      	bls.n	800c69a <__ascii_wctomb+0x14>
 800c690:	228a      	movs	r2, #138	@ 0x8a
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	f04f 30ff 	mov.w	r0, #4294967295
 800c698:	4770      	bx	lr
 800c69a:	700a      	strb	r2, [r1, #0]
 800c69c:	2001      	movs	r0, #1
 800c69e:	4770      	bx	lr

0800c6a0 <_raise_r>:
 800c6a0:	291f      	cmp	r1, #31
 800c6a2:	b538      	push	{r3, r4, r5, lr}
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	d904      	bls.n	800c6b4 <_raise_r+0x14>
 800c6aa:	2316      	movs	r3, #22
 800c6ac:	6003      	str	r3, [r0, #0]
 800c6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b2:	bd38      	pop	{r3, r4, r5, pc}
 800c6b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c6b6:	b112      	cbz	r2, 800c6be <_raise_r+0x1e>
 800c6b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6bc:	b94b      	cbnz	r3, 800c6d2 <_raise_r+0x32>
 800c6be:	4628      	mov	r0, r5
 800c6c0:	f000 f830 	bl	800c724 <_getpid_r>
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	4601      	mov	r1, r0
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ce:	f000 b817 	b.w	800c700 <_kill_r>
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d00a      	beq.n	800c6ec <_raise_r+0x4c>
 800c6d6:	1c59      	adds	r1, r3, #1
 800c6d8:	d103      	bne.n	800c6e2 <_raise_r+0x42>
 800c6da:	2316      	movs	r3, #22
 800c6dc:	6003      	str	r3, [r0, #0]
 800c6de:	2001      	movs	r0, #1
 800c6e0:	e7e7      	b.n	800c6b2 <_raise_r+0x12>
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	4798      	blx	r3
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	e7e0      	b.n	800c6b2 <_raise_r+0x12>

0800c6f0 <raise>:
 800c6f0:	4b02      	ldr	r3, [pc, #8]	@ (800c6fc <raise+0xc>)
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	6818      	ldr	r0, [r3, #0]
 800c6f6:	f7ff bfd3 	b.w	800c6a0 <_raise_r>
 800c6fa:	bf00      	nop
 800c6fc:	20000060 	.word	0x20000060

0800c700 <_kill_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	4d07      	ldr	r5, [pc, #28]	@ (800c720 <_kill_r+0x20>)
 800c704:	2300      	movs	r3, #0
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	4611      	mov	r1, r2
 800c70c:	602b      	str	r3, [r5, #0]
 800c70e:	f7f4 ff54 	bl	80015ba <_kill>
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	d102      	bne.n	800c71c <_kill_r+0x1c>
 800c716:	682b      	ldr	r3, [r5, #0]
 800c718:	b103      	cbz	r3, 800c71c <_kill_r+0x1c>
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	bd38      	pop	{r3, r4, r5, pc}
 800c71e:	bf00      	nop
 800c720:	20000ea0 	.word	0x20000ea0

0800c724 <_getpid_r>:
 800c724:	f7f4 bf41 	b.w	80015aa <_getpid>

0800c728 <_malloc_usable_size_r>:
 800c728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c72c:	1f18      	subs	r0, r3, #4
 800c72e:	2b00      	cmp	r3, #0
 800c730:	bfbc      	itt	lt
 800c732:	580b      	ldrlt	r3, [r1, r0]
 800c734:	18c0      	addlt	r0, r0, r3
 800c736:	4770      	bx	lr

0800c738 <_init>:
 800c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73a:	bf00      	nop
 800c73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c73e:	bc08      	pop	{r3}
 800c740:	469e      	mov	lr, r3
 800c742:	4770      	bx	lr

0800c744 <_fini>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	bf00      	nop
 800c748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74a:	bc08      	pop	{r3}
 800c74c:	469e      	mov	lr, r3
 800c74e:	4770      	bx	lr
