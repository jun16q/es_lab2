
WiFi_Client_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe4  0800c878  0800c878  0000d878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d85c  0800d85c  0000f21c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d85c  0800d85c  0000e85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d864  0800d864  0000f21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d864  0800d864  0000e864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d868  0800d868  0000e868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800d86c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000f21c  2**0
                  CONTENTS
 10 .bss          00000c94  2000021c  2000021c  0000f21c  2**2
                  ALLOC
 11 ._user_heap_stack 00017000  20000eb0  20000eb0  0000f21c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY
 13 .debug_line   000173ba  00000000  00000000  0000f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000009d  00000000  00000000  00026606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00014b1d  00000000  00000000  000266a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002e22  00000000  00000000  0003b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001340  00000000  00000000  0003dfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0fba  00000000  00000000  0003f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000eeb  00000000  00000000  001302e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00028781  00000000  00000000  001311cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015994e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000678c  00000000  00000000  00159994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c860 	.word	0x0800c860

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800c860 	.word	0x0800c860

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001024:	f002 fa86 	bl	8003534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	@ (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	@ (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104e:	f008 f92b 	bl	80092a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001052:	f000 f861 	bl	8001118 <main>

08001056 <LoopForever>:

LoopForever:
    b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001058:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001064:	0800d86c 	.word	0x0800d86c
  ldr r2, =_sbss
 8001068:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 800106c:	20000eb0 	.word	0x20000eb0

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <Motion_INT_Init>:
  * @brief  Initialize Motion Detection GPIO and EXTI (with test button)
  * @param  None
  * @retval None
  */
static void Motion_INT_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* Enable GPIO clocks */
  MOTION_INT_GPIO_CLK_ENABLE();
 800108a:	4b20      	ldr	r3, [pc, #128]	@ (800110c <Motion_INT_Init+0x98>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a1f      	ldr	r2, [pc, #124]	@ (800110c <Motion_INT_Init+0x98>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <Motion_INT_Init+0x98>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  TEST_BUTTON_CLK_ENABLE();
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <Motion_INT_Init+0x98>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a19      	ldr	r2, [pc, #100]	@ (800110c <Motion_INT_Init+0x98>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <Motion_INT_Init+0x98>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin for motion interrupt */
  GPIO_InitStruct.Pin = MOTION_INT_PIN;
 80010ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTION_INT_GPIO_PORT, &GPIO_InitStruct);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4619      	mov	r1, r3
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <Motion_INT_Init+0x9c>)
 80010d2:	f002 fc57 	bl	8003984 <HAL_GPIO_Init>

  /* Configure test button (User Button) for debugging */
  GPIO_InitStruct.Pin = TEST_BUTTON_PIN;
 80010d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Button press (falling edge)
 80010dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TEST_BUTTON_PORT, &GPIO_InitStruct);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <Motion_INT_Init+0xa0>)
 80010ee:	f002 fc49 	bl	8003984 <HAL_GPIO_Init>

  /* Enable EXTI interrupts */
  HAL_NVIC_SetPriority(MOTION_INT_EXTI_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2028      	movs	r0, #40	@ 0x28
 80010f8:	f002 fbcd 	bl	8003896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MOTION_INT_EXTI_IRQn);
 80010fc:	2028      	movs	r0, #40	@ 0x28
 80010fe:	f002 fbe6 	bl	80038ce <HAL_NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	48000c00 	.word	0x48000c00
 8001114:	48000800 	.word	0x48000800

08001118 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b08e      	sub	sp, #56	@ 0x38
 800111c:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6] = {0};
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	809a      	strh	r2, [r3, #4]
  uint8_t  IP_Addr[4] = {0};
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  static uint8_t TxData[200];
  int32_t Socket = -1;
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;
 8001132:	230a      	movs	r3, #10
 8001134:	847b      	strh	r3, [r7, #34]	@ 0x22

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001136:	f002 fa33 	bl	80035a0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800113a:	f000 f977 	bl	800142c <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 800113e:	2000      	movs	r0, #0
 8001140:	f001 fe04 	bl	8002d4c <BSP_LED_Init>

#if defined (TERMINAL_USE)
  /* Initialize UART for terminal output */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8001144:	4b99      	ldr	r3, [pc, #612]	@ (80013ac <main+0x294>)
 8001146:	4a9a      	ldr	r2, [pc, #616]	@ (80013b0 <main+0x298>)
 8001148:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 9600;
 800114a:	4b98      	ldr	r3, [pc, #608]	@ (80013ac <main+0x294>)
 800114c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001150:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b96      	ldr	r3, [pc, #600]	@ (80013ac <main+0x294>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b94      	ldr	r3, [pc, #592]	@ (80013ac <main+0x294>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800115e:	4b93      	ldr	r3, [pc, #588]	@ (80013ac <main+0x294>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b91      	ldr	r3, [pc, #580]	@ (80013ac <main+0x294>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b90      	ldr	r3, [pc, #576]	@ (80013ac <main+0x294>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b8e      	ldr	r3, [pc, #568]	@ (80013ac <main+0x294>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b8d      	ldr	r3, [pc, #564]	@ (80013ac <main+0x294>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117c:	4b8b      	ldr	r3, [pc, #556]	@ (80013ac <main+0x294>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	@ 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 8001182:	498a      	ldr	r1, [pc, #552]	@ (80013ac <main+0x294>)
 8001184:	2000      	movs	r0, #0
 8001186:	f001 fe27 	bl	8002dd8 <BSP_COM_Init>
#endif /* TERMINAL_USE */

  TERMOUT("****** WIFI Module with Motion Detection Demo ****** \r\n\n");
 800118a:	488a      	ldr	r0, [pc, #552]	@ (80013b4 <main+0x29c>)
 800118c:	f007 fe64 	bl	8008e58 <puts>
  TERMOUT("Motion Detection Instructions :\r\n");
 8001190:	4889      	ldr	r0, [pc, #548]	@ (80013b8 <main+0x2a0>)
 8001192:	f007 fe61 	bl	8008e58 <puts>
  TERMOUT("1- The LSM6DSL accelerometer will detect significant motion\r\n");
 8001196:	4889      	ldr	r0, [pc, #548]	@ (80013bc <main+0x2a4>)
 8001198:	f007 fe5e 	bl	8008e58 <puts>
  TERMOUT("2- Motion events will be sent to the TCP server\r\n");
 800119c:	4888      	ldr	r0, [pc, #544]	@ (80013c0 <main+0x2a8>)
 800119e:	f007 fe5b 	bl	8008e58 <puts>
  TERMOUT("3- Regular accelerometer data is also transmitted\r\n\n");
 80011a2:	4888      	ldr	r0, [pc, #544]	@ (80013c4 <main+0x2ac>)
 80011a4:	f007 fe58 	bl	8008e58 <puts>

  /* Initialize accelerometer */
  if(BSP_ACCELERO_Init() == ACCELERO_OK)
 80011a8:	f001 ffd2 	bl	8003150 <BSP_ACCELERO_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d111      	bne.n	80011d6 <main+0xbe>
  {
    TERMOUT("> Accelerometer initialized successfully\r\n");
 80011b2:	4885      	ldr	r0, [pc, #532]	@ (80013c8 <main+0x2b0>)
 80011b4:	f007 fe50 	bl	8008e58 <puts>

    /* Initialize motion detection GPIO */
    Motion_INT_Init();
 80011b8:	f7ff ff5c 	bl	8001074 <Motion_INT_Init>

    /* Enable significant motion detection interrupt */
    if(BSP_ACCELERO_Enable_Motion_Detection_IT() == ACCELERO_OK)
 80011bc:	f002 f808 	bl	80031d0 <BSP_ACCELERO_Enable_Motion_Detection_IT>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d103      	bne.n	80011ce <main+0xb6>
    {
      TERMOUT("> Motion detection enabled successfully\r\n");
 80011c6:	4881      	ldr	r0, [pc, #516]	@ (80013cc <main+0x2b4>)
 80011c8:	f007 fe46 	bl	8008e58 <puts>
 80011cc:	e006      	b.n	80011dc <main+0xc4>
    }
    else
    {
      TERMOUT("> ERROR: Failed to enable motion detection\r\n");
 80011ce:	4880      	ldr	r0, [pc, #512]	@ (80013d0 <main+0x2b8>)
 80011d0:	f007 fe42 	bl	8008e58 <puts>
 80011d4:	e002      	b.n	80011dc <main+0xc4>
    }
  }
  else
  {
    TERMOUT("> ERROR: Failed to initialize accelerometer\r\n");
 80011d6:	487f      	ldr	r0, [pc, #508]	@ (80013d4 <main+0x2bc>)
 80011d8:	f007 fe3e 	bl	8008e58 <puts>
  }

  /* Initialize WIFI module */
  if(WIFI_Init() == WIFI_STATUS_OK)
 80011dc:	f001 fcc6 	bl	8002b6c <WIFI_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 8090 	bne.w	8001308 <main+0x1f0>
  {
    TERMOUT("> WIFI Module Initialized.\r\n");
 80011e8:	487b      	ldr	r0, [pc, #492]	@ (80013d8 <main+0x2c0>)
 80011ea:	f007 fe35 	bl	8008e58 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2106      	movs	r1, #6
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fd07 	bl	8002c08 <WIFI_GetMAC_Address>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d112      	bne.n	8001226 <main+0x10e>
    {
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\r\n",
 8001200:	7c3b      	ldrb	r3, [r7, #16]
 8001202:	4618      	mov	r0, r3
 8001204:	7c7b      	ldrb	r3, [r7, #17]
 8001206:	461c      	mov	r4, r3
 8001208:	7cbb      	ldrb	r3, [r7, #18]
 800120a:	461d      	mov	r5, r3
 800120c:	7cfb      	ldrb	r3, [r7, #19]
 800120e:	7d3a      	ldrb	r2, [r7, #20]
 8001210:	7d79      	ldrb	r1, [r7, #21]
 8001212:	9102      	str	r1, [sp, #8]
 8001214:	9201      	str	r2, [sp, #4]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	462b      	mov	r3, r5
 800121a:	4622      	mov	r2, r4
 800121c:	4601      	mov	r1, r0
 800121e:	486f      	ldr	r0, [pc, #444]	@ (80013dc <main+0x2c4>)
 8001220:	f007 fdb2 	bl	8008d88 <iprintf>
 8001224:	e005      	b.n	8001232 <main+0x11a>
               MAC_Addr[0], MAC_Addr[1], MAC_Addr[2],
               MAC_Addr[3], MAC_Addr[4], MAC_Addr[5]);
    }
    else
    {
      TERMOUT("> ERROR : CANNOT get MAC address\r\n");
 8001226:	486e      	ldr	r0, [pc, #440]	@ (80013e0 <main+0x2c8>)
 8001228:	f007 fe16 	bl	8008e58 <puts>
      BSP_LED_On(LED2);
 800122c:	2000      	movs	r0, #0
 800122e:	f001 fdbd 	bl	8002dac <BSP_LED_On>
    }

    if(WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8001232:	2203      	movs	r2, #3
 8001234:	496b      	ldr	r1, [pc, #428]	@ (80013e4 <main+0x2cc>)
 8001236:	486c      	ldr	r0, [pc, #432]	@ (80013e8 <main+0x2d0>)
 8001238:	f001 fcc4 	bl	8002bc4 <WIFI_Connect>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d15b      	bne.n	80012fa <main+0x1e2>
    {
      TERMOUT("> es-wifi module connected \r\n");
 8001242:	486a      	ldr	r0, [pc, #424]	@ (80013ec <main+0x2d4>)
 8001244:	f007 fe08 	bl	8008e58 <puts>
      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2104      	movs	r1, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fcfa 	bl	8002c48 <WIFI_GetIP_Address>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d148      	bne.n	80012ec <main+0x1d4>
      {
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\r\n",
 800125a:	7b3b      	ldrb	r3, [r7, #12]
 800125c:	4619      	mov	r1, r3
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	461a      	mov	r2, r3
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	4618      	mov	r0, r3
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	4603      	mov	r3, r0
 800126c:	4860      	ldr	r0, [pc, #384]	@ (80013f0 <main+0x2d8>)
 800126e:	f007 fd8b 	bl	8008d88 <iprintf>
               IP_Addr[0], IP_Addr[1], IP_Addr[2], IP_Addr[3]);

        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\r\n",
 8001272:	4b60      	ldr	r3, [pc, #384]	@ (80013f4 <main+0x2dc>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	4b5e      	ldr	r3, [pc, #376]	@ (80013f4 <main+0x2dc>)
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	4618      	mov	r0, r3
 800127e:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <main+0x2dc>)
 8001280:	789b      	ldrb	r3, [r3, #2]
 8001282:	461c      	mov	r4, r3
 8001284:	4b5b      	ldr	r3, [pc, #364]	@ (80013f4 <main+0x2dc>)
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	461a      	mov	r2, r3
 800128a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	9200      	str	r2, [sp, #0]
 8001292:	4623      	mov	r3, r4
 8001294:	4602      	mov	r2, r0
 8001296:	4858      	ldr	r0, [pc, #352]	@ (80013f8 <main+0x2e0>)
 8001298:	f007 fd76 	bl	8008d88 <iprintf>
               RemoteIP[0], RemoteIP[1], RemoteIP[2], RemoteIP[3], RemotePORT);

        while (Trials--)
 800129c:	e013      	b.n	80012c6 <main+0x1ae>
        {
          if(WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 800129e:	2300      	movs	r3, #0
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	4b52      	ldr	r3, [pc, #328]	@ (80013f4 <main+0x2dc>)
 80012aa:	4a54      	ldr	r2, [pc, #336]	@ (80013fc <main+0x2e4>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	2000      	movs	r0, #0
 80012b0:	f001 fcee 	bl	8002c90 <WIFI_OpenClientConnection>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <main+0x1ae>
          {
            TERMOUT("> TCP Connection opened successfully.\r\n");
 80012ba:	4851      	ldr	r0, [pc, #324]	@ (8001400 <main+0x2e8>)
 80012bc:	f007 fdcc 	bl	8008e58 <puts>
            Socket = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012c4:	e007      	b.n	80012d6 <main+0x1be>
        while (Trials--)
 80012c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	3a01      	subs	r2, #1
 80012ce:	b292      	uxth	r2, r2
 80012d0:	847a      	strh	r2, [r7, #34]	@ 0x22
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e3      	bne.n	800129e <main+0x186>
          }
        }
        if(Socket == -1)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d11a      	bne.n	8001314 <main+0x1fc>
        {
          TERMOUT("> ERROR : Cannot open Connection\r\n");
 80012de:	4849      	ldr	r0, [pc, #292]	@ (8001404 <main+0x2ec>)
 80012e0:	f007 fdba 	bl	8008e58 <puts>
          BSP_LED_On(LED2);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f001 fd61 	bl	8002dac <BSP_LED_On>
 80012ea:	e013      	b.n	8001314 <main+0x1fc>
        }
      }
      else
      {
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\r\n");
 80012ec:	4846      	ldr	r0, [pc, #280]	@ (8001408 <main+0x2f0>)
 80012ee:	f007 fdb3 	bl	8008e58 <puts>
        BSP_LED_On(LED2);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f001 fd5a 	bl	8002dac <BSP_LED_On>
 80012f8:	e00c      	b.n	8001314 <main+0x1fc>
      }
    }
    else
    {
      TERMOUT("> ERROR : es-wifi module NOT connected\r\n");
 80012fa:	4844      	ldr	r0, [pc, #272]	@ (800140c <main+0x2f4>)
 80012fc:	f007 fdac 	bl	8008e58 <puts>
      BSP_LED_On(LED2);
 8001300:	2000      	movs	r0, #0
 8001302:	f001 fd53 	bl	8002dac <BSP_LED_On>
 8001306:	e005      	b.n	8001314 <main+0x1fc>
    }
  }
  else
  {
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\r\n");
 8001308:	4841      	ldr	r0, [pc, #260]	@ (8001410 <main+0x2f8>)
 800130a:	f007 fda5 	bl	8008e58 <puts>
    BSP_LED_On(LED2);
 800130e:	2000      	movs	r0, #0
 8001310:	f001 fd4c 	bl	8002dac <BSP_LED_On>
  }

  int16_t pDataXYZ[3] = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	809a      	strh	r2, [r3, #4]
  uint32_t last_motion_time = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]

  while(1)
  {
    if(Socket != -1)
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001326:	d0fb      	beq.n	8001320 <main+0x208>
    {
      /* Check if motion was detected */
      if(motion_detected)
 8001328:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <main+0x2fc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d032      	beq.n	8001398 <main+0x280>
      {
        motion_detected = 0;
 8001332:	4b38      	ldr	r3, [pc, #224]	@ (8001414 <main+0x2fc>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
        motion_count++;
 8001338:	4b37      	ldr	r3, [pc, #220]	@ (8001418 <main+0x300>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a36      	ldr	r2, [pc, #216]	@ (8001418 <main+0x300>)
 8001340:	6013      	str	r3, [r2, #0]
        last_motion_time = HAL_GetTick();
 8001342:	f002 f99d 	bl	8003680 <HAL_GetTick>
 8001346:	61f8      	str	r0, [r7, #28]

        /* Send motion detection event */
        snprintf((char*)TxData, sizeof(TxData),
 8001348:	4b33      	ldr	r3, [pc, #204]	@ (8001418 <main+0x300>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	4a32      	ldr	r2, [pc, #200]	@ (800141c <main+0x304>)
 8001354:	21c8      	movs	r1, #200	@ 0xc8
 8001356:	4832      	ldr	r0, [pc, #200]	@ (8001420 <main+0x308>)
 8001358:	f007 fd86 	bl	8008e68 <sniprintf>
                 "MOTION_DETECTED,Count=%lu,Time=%lu\r\n",
                 motion_count, last_motion_time);

        TERMOUT(">> Significant Motion Detected! Count: %lu\r\n", motion_count);
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <main+0x300>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	4830      	ldr	r0, [pc, #192]	@ (8001424 <main+0x30c>)
 8001364:	f007 fd10 	bl	8008d88 <iprintf>

        ret = WIFI_SendData(Socket, TxData, strlen((char*)TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8001368:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800136a:	482d      	ldr	r0, [pc, #180]	@ (8001420 <main+0x308>)
 800136c:	f7fe ff80 	bl	8000270 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b29a      	uxth	r2, r3
 8001374:	f107 030a 	add.w	r3, r7, #10
 8001378:	f242 7110 	movw	r1, #10000	@ 0x2710
 800137c:	9100      	str	r1, [sp, #0]
 800137e:	4928      	ldr	r1, [pc, #160]	@ (8001420 <main+0x308>)
 8001380:	4620      	mov	r0, r4
 8001382:	f001 fcc1 	bl	8002d08 <WIFI_SendData>
 8001386:	4603      	mov	r3, r0
 8001388:	61bb      	str	r3, [r7, #24]
        if (ret != WIFI_STATUS_OK)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <main+0x280>
        {
          TERMOUT("> ERROR : Failed to Send Motion Data, connection closed\r\n");
 8001390:	4825      	ldr	r0, [pc, #148]	@ (8001428 <main+0x310>)
 8001392:	f007 fd61 	bl	8008e58 <puts>
          break;
 8001396:	e003      	b.n	80013a0 <main+0x288>
        }
      }

      HAL_Delay(100);
 8001398:	2064      	movs	r0, #100	@ 0x64
 800139a:	f002 f97d 	bl	8003698 <HAL_Delay>
    if(Socket != -1)
 800139e:	e7bf      	b.n	8001320 <main+0x208>
 80013a0:	2300      	movs	r3, #0
    }
  }
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3728      	adds	r7, #40	@ 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000cd4 	.word	0x20000cd4
 80013b0:	40013800 	.word	0x40013800
 80013b4:	0800c878 	.word	0x0800c878
 80013b8:	0800c8b0 	.word	0x0800c8b0
 80013bc:	0800c8d4 	.word	0x0800c8d4
 80013c0:	0800c914 	.word	0x0800c914
 80013c4:	0800c948 	.word	0x0800c948
 80013c8:	0800c97c 	.word	0x0800c97c
 80013cc:	0800c9a8 	.word	0x0800c9a8
 80013d0:	0800c9d4 	.word	0x0800c9d4
 80013d4:	0800ca00 	.word	0x0800ca00
 80013d8:	0800ca30 	.word	0x0800ca30
 80013dc:	0800ca4c 	.word	0x0800ca4c
 80013e0:	0800ca80 	.word	0x0800ca80
 80013e4:	0800caa4 	.word	0x0800caa4
 80013e8:	0800cab0 	.word	0x0800cab0
 80013ec:	0800cab8 	.word	0x0800cab8
 80013f0:	0800cad8 	.word	0x0800cad8
 80013f4:	20000000 	.word	0x20000000
 80013f8:	0800cb08 	.word	0x0800cb08
 80013fc:	0800cb3c 	.word	0x0800cb3c
 8001400:	0800cb48 	.word	0x0800cb48
 8001404:	0800cb70 	.word	0x0800cb70
 8001408:	0800cb94 	.word	0x0800cb94
 800140c:	0800cbc4 	.word	0x0800cbc4
 8001410:	0800cbec 	.word	0x0800cbec
 8001414:	20000238 	.word	0x20000238
 8001418:	2000023c 	.word	0x2000023c
 800141c:	0800cc1c 	.word	0x0800cc1c
 8001420:	20000240 	.word	0x20000240
 8001424:	0800cc44 	.word	0x0800cc44
 8001428:	0800cc74 	.word	0x0800cc74

0800142c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b096      	sub	sp, #88	@ 0x58
 8001430:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001432:	2310      	movs	r3, #16
 8001434:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800143a:	2360      	movs	r3, #96	@ 0x60
 800143c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001446:	2301      	movs	r3, #1
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800144a:	2301      	movs	r3, #1
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 800144e:	2328      	movs	r3, #40	@ 0x28
 8001450:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001452:	2302      	movs	r3, #2
 8001454:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001456:	2307      	movs	r3, #7
 8001458:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800145a:	2304      	movs	r3, #4
 800145c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145e:	463b      	mov	r3, r7
 8001460:	4618      	mov	r0, r3
 8001462:	f003 faa9 	bl	80049b8 <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x44>
  {
    /* Initialization Error */
    while(1);
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001470:	230f      	movs	r3, #15
 8001472:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001474:	2303      	movs	r3, #3
 8001476:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	657b      	str	r3, [r7, #84]	@ 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001484:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001488:	2104      	movs	r1, #4
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fe70 	bl	8005170 <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x6e>
  {
    /* Initialization Error */
    while(1);
 8001496:	bf00      	nop
 8001498:	e7fd      	b.n	8001496 <SystemClock_Config+0x6a>
  }
}
 800149a:	bf00      	nop
 800149c:	3758      	adds	r7, #88	@ 0x58
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 80014ac:	1d39      	adds	r1, r7, #4
 80014ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014b2:	2201      	movs	r2, #1
 80014b4:	4803      	ldr	r0, [pc, #12]	@ (80014c4 <__io_putchar+0x20>)
 80014b6:	f005 ffe6 	bl	8007486 <HAL_UART_Transmit>
  return ch;
 80014ba:	687b      	ldr	r3, [r7, #4]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000cd4 	.word	0x20000cd4

080014c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014d8:	d012      	beq.n	8001500 <HAL_GPIO_EXTI_Callback+0x38>
 80014da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014de:	dc16      	bgt.n	800150e <HAL_GPIO_EXTI_Callback+0x46>
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_EXTI_Callback+0x24>
 80014e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_EXTI_Callback+0x2a>
      TERMOUT("Test button pressed - simulating motion!\r\n");
      break;
    }
    default:
    {
      break;
 80014ea:	e010      	b.n	800150e <HAL_GPIO_EXTI_Callback+0x46>
      SPI_WIFI_ISR();
 80014ec:	f001 fb2e 	bl	8002b4c <SPI_WIFI_ISR>
      break;
 80014f0:	e00e      	b.n	8001510 <HAL_GPIO_EXTI_Callback+0x48>
      motion_detected = 1; /* Set motion detection flag */
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_GPIO_EXTI_Callback+0x50>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
      TERMOUT("Motion interrupt triggered!\r\n");
 80014f8:	4808      	ldr	r0, [pc, #32]	@ (800151c <HAL_GPIO_EXTI_Callback+0x54>)
 80014fa:	f007 fcad 	bl	8008e58 <puts>
      break;
 80014fe:	e007      	b.n	8001510 <HAL_GPIO_EXTI_Callback+0x48>
      motion_detected = 1; /* Set motion detection flag */
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <HAL_GPIO_EXTI_Callback+0x50>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
      TERMOUT("Test button pressed - simulating motion!\r\n");
 8001506:	4806      	ldr	r0, [pc, #24]	@ (8001520 <HAL_GPIO_EXTI_Callback+0x58>)
 8001508:	f007 fca6 	bl	8008e58 <puts>
      break;
 800150c:	e000      	b.n	8001510 <HAL_GPIO_EXTI_Callback+0x48>
      break;
 800150e:	bf00      	nop
    }
  }
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000238 	.word	0x20000238
 800151c:	0800ccb0 	.word	0x0800ccb0
 8001520:	0800ccd0 	.word	0x0800ccd0

08001524 <EXTI15_10_IRQHandler>:
  * @brief  EXTI15_10_IRQHandler for motion detection and test button
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Check if it's the motion detection pin interrupt */
  if(__HAL_GPIO_EXTI_GET_IT(MOTION_INT_PIN) != RESET)
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <EXTI15_10_IRQHandler+0x30>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <EXTI15_10_IRQHandler+0x18>
  {
    HAL_GPIO_EXTI_IRQHandler(MOTION_INT_PIN);
 8001534:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001538:	f002 fbfe 	bl	8003d38 <HAL_GPIO_EXTI_IRQHandler>
  }

  /* Check if it's the test button interrupt */
  if(__HAL_GPIO_EXTI_GET_IT(TEST_BUTTON_PIN) != RESET)
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <EXTI15_10_IRQHandler+0x30>)
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <EXTI15_10_IRQHandler+0x2c>
  {
    HAL_GPIO_EXTI_IRQHandler(TEST_BUTTON_PIN);
 8001548:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800154c:	f002 fbf4 	bl	8003d38 <HAL_GPIO_EXTI_IRQHandler>
  }
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40010400 	.word	0x40010400

08001558 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <SPI3_IRQHandler+0x10>)
 800155e:	f005 f8b7 	bl	80066d0 <HAL_SPI_IRQHandler>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000030c 	.word	0x2000030c

0800156c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800157e:	bf00      	nop
 8001580:	e7fd      	b.n	800157e <HardFault_Handler+0x4>

08001582 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001586:	bf00      	nop
 8001588:	e7fd      	b.n	8001586 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800158e:	bf00      	nop
 8001590:	e7fd      	b.n	800158e <BusFault_Handler+0x4>

08001592 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001596:	bf00      	nop
 8001598:	e7fd      	b.n	8001596 <UsageFault_Handler+0x4>

0800159a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80015c8:	f002 f846 	bl	8003658 <HAL_IncTick>
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80015d4:	2002      	movs	r0, #2
 80015d6:	f002 fbaf 	bl	8003d38 <HAL_GPIO_EXTI_IRQHandler>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}

080015de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  return 1;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_kill>:

int _kill(int pid, int sig)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015f8:	f007 fe50 	bl	800929c <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2216      	movs	r2, #22
 8001600:	601a      	str	r2, [r3, #0]
  return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_exit>:

void _exit (int status)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001616:	f04f 31ff 	mov.w	r1, #4294967295
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffe7 	bl	80015ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <_exit+0x12>

08001624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e00a      	b.n	800164c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001636:	f3af 8000 	nop.w
 800163a:	4601      	mov	r1, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	b2ca      	uxtb	r2, r1
 8001644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf0      	blt.n	8001636 <_read+0x12>
  }

  return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e009      	b.n	8001684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff13 	bl	80014a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf1      	blt.n	8001670 <_write+0x12>
  }
  return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_close>:

int _close(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016be:	605a      	str	r2, [r3, #4]
  return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_isatty>:

int _isatty(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	@ (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f007 fdb4 	bl	800929c <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20018000 	.word	0x20018000
 8001760:	00007000 	.word	0x00007000
 8001764:	20000308 	.word	0x20000308
 8001768:	20000eb0 	.word	0x20000eb0

0800176c <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b2f      	cmp	r3, #47	@ 0x2f
 800177a:	d906      	bls.n	800178a <Hex2Num+0x1e>
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2b39      	cmp	r3, #57	@ 0x39
 8001780:	d803      	bhi.n	800178a <Hex2Num+0x1e>
        return a - '0';
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	3b30      	subs	r3, #48	@ 0x30
 8001786:	b2db      	uxtb	r3, r3
 8001788:	e014      	b.n	80017b4 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b60      	cmp	r3, #96	@ 0x60
 800178e:	d906      	bls.n	800179e <Hex2Num+0x32>
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b66      	cmp	r3, #102	@ 0x66
 8001794:	d803      	bhi.n	800179e <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	3b57      	subs	r3, #87	@ 0x57
 800179a:	b2db      	uxtb	r3, r3
 800179c:	e00a      	b.n	80017b4 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b40      	cmp	r3, #64	@ 0x40
 80017a2:	d906      	bls.n	80017b2 <Hex2Num+0x46>
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b46      	cmp	r3, #70	@ 0x46
 80017a8:	d803      	bhi.n	80017b2 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	3b37      	subs	r3, #55	@ 0x37
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	e000      	b.n	80017b4 <Hex2Num+0x48>
    }

    return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 80017d2:	e012      	b.n	80017fa <ParseHexNumber+0x3a>
        sum <<= 4;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ffc4 	bl	800176c <Hex2Num>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	4413      	add	r3, r2
 80017ec:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3301      	adds	r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
        done_count++;
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	3301      	adds	r3, #1
 80017f8:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8001800:	d903      	bls.n	800180a <ParseHexNumber+0x4a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b39      	cmp	r3, #57	@ 0x39
 8001808:	d90f      	bls.n	800182a <ParseHexNumber+0x6a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b60      	cmp	r3, #96	@ 0x60
 8001810:	d903      	bls.n	800181a <ParseHexNumber+0x5a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b66      	cmp	r3, #102	@ 0x66
 8001818:	d907      	bls.n	800182a <ParseHexNumber+0x6a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b40      	cmp	r3, #64	@ 0x40
 8001820:	d906      	bls.n	8001830 <ParseHexNumber+0x70>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b46      	cmp	r3, #70	@ 0x46
 8001828:	d802      	bhi.n	8001830 <ParseHexNumber+0x70>
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d9d1      	bls.n	80017d4 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <ParseHexNumber+0x7c>
        *cnt = done_count;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	7bba      	ldrb	r2, [r7, #14]
 800183a:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8001846:	b480      	push	{r7}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b2d      	cmp	r3, #45	@ 0x2d
 8001862:	d119      	bne.n	8001898 <ParseNumber+0x52>
        minus = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3301      	adds	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
        done_count++;
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	3301      	adds	r3, #1
 8001872:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001874:	e010      	b.n	8001898 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	461a      	mov	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	3b30      	subs	r3, #48	@ 0x30
 8001888:	4413      	add	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
        ptr++;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3301      	adds	r3, #1
 8001890:	607b      	str	r3, [r7, #4]
        done_count++;
 8001892:	7bbb      	ldrb	r3, [r7, #14]
 8001894:	3301      	adds	r3, #1
 8001896:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b2f      	cmp	r3, #47	@ 0x2f
 800189e:	d903      	bls.n	80018a8 <ParseNumber+0x62>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b39      	cmp	r3, #57	@ 0x39
 80018a6:	d9e6      	bls.n	8001876 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <ParseNumber+0x6e>
        *cnt = done_count;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	7bba      	ldrb	r2, [r7, #14]
 80018b2:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <ParseNumber+0x7a>
        return 0 - sum;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	425b      	negs	r3, r3
 80018be:	e000      	b.n	80018c2 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 80018c0:	68bb      	ldr	r3, [r7, #8]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 80018ce:	b590      	push	{r4, r7, lr}
 80018d0:	b087      	sub	sp, #28
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d027      	beq.n	8001934 <ParseMAC+0x66>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d024      	beq.n	8001934 <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80018ea:	e018      	b.n	800191e <ParseMAC+0x50>
    uint8_t done_count = 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80018f6:	d00d      	beq.n	8001914 <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	75fa      	strb	r2, [r7, #23]
 80018fe:	461a      	mov	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	189c      	adds	r4, r3, r2
 8001904:	f107 0316 	add.w	r3, r7, #22
 8001908:	4619      	mov	r1, r3
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff ff58 	bl	80017c0 <ParseHexNumber>
 8001910:	4603      	mov	r3, r0
 8001912:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 8001914:	7dbb      	ldrb	r3, [r7, #22]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	d906      	bls.n	8001934 <ParseMAC+0x66>
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d803      	bhi.n	8001934 <ParseMAC+0x66>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1db      	bne.n	80018ec <ParseMAC+0x1e>
   }
  }
}
 8001934:	bf00      	nop
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}

0800193c <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d027      	beq.n	80019a2 <ParseIP+0x66>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d024      	beq.n	80019a2 <ParseIP+0x66>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d921      	bls.n	80019a2 <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800195e:	e019      	b.n	8001994 <ParseIP+0x58>
    uint8_t done_count = 1;
 8001960:	2301      	movs	r3, #1
 8001962:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b2e      	cmp	r3, #46	@ 0x2e
 800196a:	d00e      	beq.n	800198a <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 800196c:	f107 0316 	add.w	r3, r7, #22
 8001970:	4619      	mov	r1, r3
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f7ff ff67 	bl	8001846 <ParseNumber>
 8001978:	4601      	mov	r1, r0
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	75fa      	strb	r2, [r7, #23]
 8001980:	461a      	mov	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	4413      	add	r3, r2
 8001986:	b2ca      	uxtb	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 800198a:	7dbb      	ldrb	r3, [r7, #22]
 800198c:	461a      	mov	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d803      	bhi.n	80019a2 <ParseIP+0x66>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1de      	bne.n	8001960 <ParseIP+0x24>
   }
  }
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	3302      	adds	r3, #2
 80019be:	4940      	ldr	r1, [pc, #256]	@ (8001ac0 <AT_ParseInfo+0x114>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f007 fbaf 	bl	8009124 <strtok>
 80019c6:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80019c8:	e071      	b.n	8001aae <AT_ParseInfo+0x102>
    switch (num++) {
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	72fa      	strb	r2, [r7, #11]
 80019d0:	2b06      	cmp	r3, #6
 80019d2:	d866      	bhi.n	8001aa2 <AT_ParseInfo+0xf6>
 80019d4:	a201      	add	r2, pc, #4	@ (adr r2, 80019dc <AT_ParseInfo+0x30>)
 80019d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019da:	bf00      	nop
 80019dc:	080019f9 	.word	0x080019f9
 80019e0:	08001a0d 	.word	0x08001a0d
 80019e4:	08001a25 	.word	0x08001a25
 80019e8:	08001a3d 	.word	0x08001a3d
 80019ec:	08001a55 	.word	0x08001a55
 80019f0:	08001a6d 	.word	0x08001a6d
 80019f4:	08001a81 	.word	0x08001a81
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	221f      	movs	r2, #31
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f007 fb7c 	bl	80090fc <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	77da      	strb	r2, [r3, #31]
      break;
 8001a0a:	e04b      	b.n	8001aa4 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3320      	adds	r3, #32
 8001a10:	2217      	movs	r2, #23
 8001a12:	68f9      	ldr	r1, [r7, #12]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f007 fb71 	bl	80090fc <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 8001a22:	e03f      	b.n	8001aa4 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3338      	adds	r3, #56	@ 0x38
 8001a28:	220f      	movs	r2, #15
 8001a2a:	68f9      	ldr	r1, [r7, #12]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f007 fb65 	bl	80090fc <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001a3a:	e033      	b.n	8001aa4 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3348      	adds	r3, #72	@ 0x48
 8001a40:	220f      	movs	r2, #15
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f007 fb59 	bl	80090fc <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 8001a52:	e027      	b.n	8001aa4 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3358      	adds	r3, #88	@ 0x58
 8001a58:	220f      	movs	r2, #15
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f007 fb4d 	bl	80090fc <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 8001a6a:	e01b      	b.n	8001aa4 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff fee9 	bl	8001846 <ParseNumber>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 8001a7e:	e011      	b.n	8001aa4 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8001a80:	4910      	ldr	r1, [pc, #64]	@ (8001ac4 <AT_ParseInfo+0x118>)
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f007 fb4e 	bl	8009124 <strtok>
 8001a88:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3368      	adds	r3, #104	@ 0x68
 8001a8e:	221f      	movs	r2, #31
 8001a90:	68f9      	ldr	r1, [r7, #12]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f007 fb32 	bl	80090fc <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 8001aa0:	e000      	b.n	8001aa4 <AT_ParseInfo+0xf8>

    default: break;
 8001aa2:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001aa4:	4906      	ldr	r1, [pc, #24]	@ (8001ac0 <AT_ParseInfo+0x114>)
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f007 fb3c 	bl	8009124 <strtok>
 8001aac:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d18a      	bne.n	80019ca <AT_ParseInfo+0x1e>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	0800cd2c 	.word	0x0800cd2c
 8001ac4:	0800cd30 	.word	0x0800cd30

08001ac8 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3302      	adds	r3, #2
 8001ada:	4959      	ldr	r1, [pc, #356]	@ (8001c40 <AT_ParseConnSettings+0x178>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f007 fb21 	bl	8009124 <strtok>
 8001ae2:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001ae4:	e0a2      	b.n	8001c2c <AT_ParseConnSettings+0x164>
    switch (num++) {
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	73fa      	strb	r2, [r7, #15]
 8001aec:	2b0b      	cmp	r3, #11
 8001aee:	f200 808c 	bhi.w	8001c0a <AT_ParseConnSettings+0x142>
 8001af2:	a201      	add	r2, pc, #4	@ (adr r2, 8001af8 <AT_ParseConnSettings+0x30>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b29 	.word	0x08001b29
 8001afc:	08001b3f 	.word	0x08001b3f
 8001b00:	08001b57 	.word	0x08001b57
 8001b04:	08001b6b 	.word	0x08001b6b
 8001b08:	08001b7f 	.word	0x08001b7f
 8001b0c:	08001b93 	.word	0x08001b93
 8001b10:	08001ba3 	.word	0x08001ba3
 8001b14:	08001bb3 	.word	0x08001bb3
 8001b18:	08001bc3 	.word	0x08001bc3
 8001b1c:	08001bd3 	.word	0x08001bd3
 8001b20:	08001be3 	.word	0x08001be3
 8001b24:	08001bf7 	.word	0x08001bf7
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f007 fae4 	bl	80090fc <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8001b3c:	e066      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3321      	adds	r3, #33	@ 0x21
 8001b42:	2220      	movs	r2, #32
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f007 fad8 	bl	80090fc <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 8001b54:	e05a      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001b56:	2100      	movs	r1, #0
 8001b58:	68b8      	ldr	r0, [r7, #8]
 8001b5a:	f7ff fe74 	bl	8001846 <ParseNumber>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8001b68:	e050      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	68b8      	ldr	r0, [r7, #8]
 8001b6e:	f7ff fe6a 	bl	8001846 <ParseNumber>
 8001b72:	4603      	mov	r3, r0
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8001b7c:	e046      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001b7e:	2100      	movs	r1, #0
 8001b80:	68b8      	ldr	r0, [r7, #8]
 8001b82:	f7ff fe60 	bl	8001846 <ParseNumber>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001b90:	e03c      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3348      	adds	r3, #72	@ 0x48
 8001b96:	2204      	movs	r2, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	68b8      	ldr	r0, [r7, #8]
 8001b9c:	f7ff fece 	bl	800193c <ParseIP>
      break;
 8001ba0:	e034      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	334c      	adds	r3, #76	@ 0x4c
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	68b8      	ldr	r0, [r7, #8]
 8001bac:	f7ff fec6 	bl	800193c <ParseIP>
      break;
 8001bb0:	e02c      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	3350      	adds	r3, #80	@ 0x50
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	68b8      	ldr	r0, [r7, #8]
 8001bbc:	f7ff febe 	bl	800193c <ParseIP>
      break;
 8001bc0:	e024      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	3354      	adds	r3, #84	@ 0x54
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	68b8      	ldr	r0, [r7, #8]
 8001bcc:	f7ff feb6 	bl	800193c <ParseIP>
      break;
 8001bd0:	e01c      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3358      	adds	r3, #88	@ 0x58
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	68b8      	ldr	r0, [r7, #8]
 8001bdc:	f7ff feae 	bl	800193c <ParseIP>
      break;
 8001be0:	e014      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8001be2:	2100      	movs	r1, #0
 8001be4:	68b8      	ldr	r0, [r7, #8]
 8001be6:	f7ff fe2e 	bl	8001846 <ParseNumber>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8001bf4:	e00a      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	68b8      	ldr	r0, [r7, #8]
 8001bfa:	f7ff fe24 	bl	8001846 <ParseNumber>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8001c08:	e000      	b.n	8001c0c <AT_ParseConnSettings+0x144>

    default:
      break;
 8001c0a:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001c0c:	490c      	ldr	r1, [pc, #48]	@ (8001c40 <AT_ParseConnSettings+0x178>)
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f007 fa88 	bl	8009124 <strtok>
 8001c14:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <AT_ParseConnSettings+0x164>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c24:	d102      	bne.n	8001c2c <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f47f af59 	bne.w	8001ae6 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	0800cd2c 	.word	0x0800cd2c

08001c44 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d056      	beq.n	8001d10 <AT_ExecuteCommand+0xcc>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d051      	beq.n	8001d10 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8001c72:	68b8      	ldr	r0, [r7, #8]
 8001c74:	f7fe fafc 	bl	8000270 <strlen>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b299      	uxth	r1, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001c82:	461a      	mov	r2, r3
 8001c84:	68b8      	ldr	r0, [r7, #8]
 8001c86:	47a0      	blx	r4
 8001c88:	4603      	mov	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	dd3e      	ble.n	8001d10 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001c9e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001caa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dd27      	ble.n	8001d02 <AT_ExecuteCommand+0xbe>
 8001cb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cb6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001cba:	dc22      	bgt.n	8001d02 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001cbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cc0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001cc4:	d105      	bne.n	8001cd2 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001cc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001cd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8001cde:	490f      	ldr	r1, [pc, #60]	@ (8001d1c <AT_ExecuteCommand+0xd8>)
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f007 fa7b 	bl	80091dc <strstr>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e010      	b.n	8001d12 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8001cf0:	490b      	ldr	r1, [pc, #44]	@ (8001d20 <AT_ExecuteCommand+0xdc>)
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f007 fa72 	bl	80091dc <strstr>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e007      	b.n	8001d12 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001d02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d06:	f113 0f04 	cmn.w	r3, #4
 8001d0a:	d101      	bne.n	8001d10 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001d0c:	2306      	movs	r3, #6
 8001d0e:	e000      	b.n	8001d12 <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001d10:	2304      	movs	r3, #4
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	0800cd44 	.word	0x0800cd44
 8001d20:	0800cd50 	.word	0x0800cd50

08001d24 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 8001d3e:	68b8      	ldr	r0, [r7, #8]
 8001d40:	f7fe fa96 	bl	8000270 <strlen>
 8001d44:	4603      	mov	r3, r0
 8001d46:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001d48:	8a7b      	ldrh	r3, [r7, #18]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <AT_RequestSendData+0x32>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e05d      	b.n	8001e12 <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d057      	beq.n	8001e10 <AT_RequestSendData+0xec>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d052      	beq.n	8001e10 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001d76:	8a79      	ldrh	r1, [r7, #18]
 8001d78:	68b8      	ldr	r0, [r7, #8]
 8001d7a:	4798      	blx	r3
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001d80:	8a3a      	ldrh	r2, [r7, #16]
 8001d82:	8a7b      	ldrh	r3, [r7, #18]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d143      	bne.n	8001e10 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001d94:	8879      	ldrh	r1, [r7, #2]
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001d9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d131      	bne.n	8001e0c <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001db4:	2100      	movs	r1, #0
 8001db6:	6a38      	ldr	r0, [r7, #32]
 8001db8:	4798      	blx	r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001dbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	dd19      	ble.n	8001dfa <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8001dc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dca:	6a3a      	ldr	r2, [r7, #32]
 8001dcc:	4413      	add	r3, r2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001dd2:	4912      	ldr	r1, [pc, #72]	@ (8001e1c <AT_RequestSendData+0xf8>)
 8001dd4:	6a38      	ldr	r0, [r7, #32]
 8001dd6:	f007 fa01 	bl	80091dc <strstr>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e016      	b.n	8001e12 <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001de4:	490e      	ldr	r1, [pc, #56]	@ (8001e20 <AT_RequestSendData+0xfc>)
 8001de6:	6a38      	ldr	r0, [r7, #32]
 8001de8:	f007 f9f8 	bl	80091dc <strstr>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001df2:	2305      	movs	r3, #5
 8001df4:	e00d      	b.n	8001e12 <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001df6:	2302      	movs	r3, #2
 8001df8:	e00b      	b.n	8001e12 <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001dfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dfe:	f113 0f04 	cmn.w	r3, #4
 8001e02:	d101      	bne.n	8001e08 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001e04:	2306      	movs	r3, #6
 8001e06:	e004      	b.n	8001e12 <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e002      	b.n	8001e12 <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e000      	b.n	8001e12 <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8001e10:	2304      	movs	r3, #4
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	0800cd44 	.word	0x0800cd44
 8001e20:	0800cd50 	.word	0x0800cd50

08001e24 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001e36:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	4798      	blx	r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d113      	bne.n	8001e7c <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	490a      	ldr	r1, [pc, #40]	@ (8001e88 <ES_WIFI_Init+0x64>)
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fef0 	bl	8001c44 <AT_ExecuteCommand>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fd98 	bl	80019ac <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	0800cd60 	.word	0x0800cd60

08001e8c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00b      	beq.n	8001eb8 <ES_WIFI_RegisterBusIO+0x2c>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <ES_WIFI_RegisterBusIO+0x2c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <ES_WIFI_RegisterBusIO+0x2c>
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <ES_WIFI_RegisterBusIO+0x2c>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e014      	b.n	8001ee6 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	4932      	ldr	r1, [pc, #200]	@ (8001fd4 <ES_WIFI_Connect+0xe0>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f006 ffe1 	bl	8008ed4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7ff fe8f 	bl	8001c44 <AT_ExecuteCommand>
 8001f26:	4603      	mov	r3, r0
 8001f28:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d14b      	bne.n	8001fc8 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4927      	ldr	r1, [pc, #156]	@ (8001fd8 <ES_WIFI_Connect+0xe4>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f006 ffca 	bl	8008ed4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff fe78 	bl	8001c44 <AT_ExecuteCommand>
 8001f54:	4603      	mov	r3, r0
 8001f56:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d134      	bne.n	8001fc8 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	491b      	ldr	r1, [pc, #108]	@ (8001fdc <ES_WIFI_Connect+0xe8>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f006 ffaf 	bl	8008ed4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f82:	461a      	mov	r2, r3
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff fe5d 	bl	8001c44 <AT_ExecuteCommand>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001f8e:	7dfb      	ldrb	r3, [r7, #23]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d119      	bne.n	8001fc8 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f9a:	4911      	ldr	r1, [pc, #68]	@ (8001fe0 <ES_WIFI_Connect+0xec>)
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f006 ff99 	bl	8008ed4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7ff fe47 	bl	8001c44 <AT_ExecuteCommand>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d103      	bne.n	8001fc8 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	0800cd78 	.word	0x0800cd78
 8001fd8:	0800cd80 	.word	0x0800cd80
 8001fdc:	0800cd88 	.word	0x0800cd88
 8001fe0:	0800cd90 	.word	0x0800cd90

08001fe4 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ff2:	4913      	ldr	r1, [pc, #76]	@ (8002040 <ES_WIFI_IsConnected+0x5c>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f006 ff6d 	bl	8008ed4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002006:	461a      	mov	r2, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fe1b 	bl	8001c44 <AT_ExecuteCommand>
 800200e:	4603      	mov	r3, r0
 8002010:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10b      	bne.n	8002030 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800201e:	2b31      	cmp	r3, #49	@ 0x31
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	0800cd94 	.word	0x0800cd94

08002044 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002052:	4910      	ldr	r1, [pc, #64]	@ (8002094 <ES_WIFI_GetNetworkSettings+0x50>)
 8002054:	4618      	mov	r0, r3
 8002056:	f006 ff3d 	bl	8008ed4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002066:	461a      	mov	r2, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fdeb 	bl	8001c44 <AT_ExecuteCommand>
 800206e:	4603      	mov	r3, r0
 8002070:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d108      	bne.n	800208a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	338d      	adds	r3, #141	@ 0x8d
 8002082:	4619      	mov	r1, r3
 8002084:	4610      	mov	r0, r2
 8002086:	f7ff fd1f 	bl	8001ac8 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	0800cd9c 	.word	0x0800cd9c

08002098 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	4613      	mov	r3, r2
 80020a4:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020ac:	4913      	ldr	r1, [pc, #76]	@ (80020fc <ES_WIFI_GetMACAddress+0x64>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f006 ff10 	bl	8008ed4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020c0:	461a      	mov	r2, r3
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f7ff fdbe 	bl	8001c44 <AT_ExecuteCommand>
 80020c8:	4603      	mov	r3, r0
 80020ca:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10e      	bne.n	80020f0 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020d8:	3302      	adds	r3, #2
 80020da:	4909      	ldr	r1, [pc, #36]	@ (8002100 <ES_WIFI_GetMACAddress+0x68>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f007 f821 	bl	8009124 <strtok>
 80020e2:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6938      	ldr	r0, [r7, #16]
 80020ec:	f7ff fbef 	bl	80018ce <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0800cdec 	.word	0x0800cdec
 8002100:	0800cdf0 	.word	0x0800cdf0

08002104 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b087      	sub	sp, #28
 8002108:	af02      	add	r7, sp, #8
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <ES_WIFI_StartClientConnection+0x1e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d105      	bne.n	800212e <ES_WIFI_StartClientConnection+0x2a>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	885b      	ldrh	r3, [r3, #2]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <ES_WIFI_StartClientConnection+0x2a>
 800212a:	2302      	movs	r3, #2
 800212c:	e0b1      	b.n	8002292 <ES_WIFI_StartClientConnection+0x18e>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	785b      	ldrb	r3, [r3, #1]
 8002138:	461a      	mov	r2, r3
 800213a:	4958      	ldr	r1, [pc, #352]	@ (800229c <ES_WIFI_StartClientConnection+0x198>)
 800213c:	f006 feca 	bl	8008ed4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800214c:	461a      	mov	r2, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fd78 	bl	8001c44 <AT_ExecuteCommand>
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d114      	bne.n	8002188 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	494d      	ldr	r1, [pc, #308]	@ (80022a0 <ES_WIFI_StartClientConnection+0x19c>)
 800216c:	f006 feb2 	bl	8008ed4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800217c:	461a      	mov	r2, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fd60 	bl	8001c44 <AT_ExecuteCommand>
 8002184:	4603      	mov	r3, r0
 8002186:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d114      	bne.n	80021b8 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	889b      	ldrh	r3, [r3, #4]
 8002198:	461a      	mov	r2, r3
 800219a:	4942      	ldr	r1, [pc, #264]	@ (80022a4 <ES_WIFI_StartClientConnection+0x1a0>)
 800219c:	f006 fe9a 	bl	8008ed4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021ac:	461a      	mov	r2, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fd48 	bl	8001c44 <AT_ExecuteCommand>
 80021b4:	4603      	mov	r3, r0
 80021b6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d114      	bne.n	80021e8 <ES_WIFI_StartClientConnection+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	885b      	ldrh	r3, [r3, #2]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4937      	ldr	r1, [pc, #220]	@ (80022a8 <ES_WIFI_StartClientConnection+0x1a4>)
 80021cc:	f006 fe82 	bl	8008ed4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021dc:	461a      	mov	r2, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fd30 	bl	8001c44 <AT_ExecuteCommand>
 80021e4:	4603      	mov	r3, r0
 80021e6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d120      	bne.n	8002230 <ES_WIFI_StartClientConnection+0x12c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	799b      	ldrb	r3, [r3, #6]
 80021f8:	4619      	mov	r1, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	79db      	ldrb	r3, [r3, #7]
 80021fe:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002204:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	9200      	str	r2, [sp, #0]
 800220e:	4623      	mov	r3, r4
 8002210:	460a      	mov	r2, r1
 8002212:	4926      	ldr	r1, [pc, #152]	@ (80022ac <ES_WIFI_StartClientConnection+0x1a8>)
 8002214:	f006 fe5e 	bl	8008ed4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002224:	461a      	mov	r2, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fd0c 	bl	8001c44 <AT_ExecuteCommand>
 800222c:	4603      	mov	r3, r0
 800222e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d116      	bne.n	8002264 <ES_WIFI_StartClientConnection+0x160>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d112      	bne.n	8002264 <ES_WIFI_StartClientConnection+0x160>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002244:	491a      	ldr	r1, [pc, #104]	@ (80022b0 <ES_WIFI_StartClientConnection+0x1ac>)
 8002246:	4618      	mov	r0, r3
 8002248:	f006 fe44 	bl	8008ed4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002258:	461a      	mov	r2, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fcf2 	bl	8001c44 <AT_ExecuteCommand>
 8002260:	4603      	mov	r3, r0
 8002262:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d112      	bne.n	8002290 <ES_WIFI_StartClientConnection+0x18c>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002270:	4910      	ldr	r1, [pc, #64]	@ (80022b4 <ES_WIFI_StartClientConnection+0x1b0>)
 8002272:	4618      	mov	r0, r3
 8002274:	f006 fe2e 	bl	8008ed4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002284:	461a      	mov	r2, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fcdc 	bl	8001c44 <AT_ExecuteCommand>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}
 800229a:	bf00      	nop
 800229c:	0800ce54 	.word	0x0800ce54
 80022a0:	0800ce5c 	.word	0x0800ce5c
 80022a4:	0800ce64 	.word	0x0800ce64
 80022a8:	0800ce6c 	.word	0x0800ce6c
 80022ac:	0800ce74 	.word	0x0800ce74
 80022b0:	0800ce84 	.word	0x0800ce84
 80022b4:	0800ce8c 	.word	0x0800ce8c

080022b8 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	461a      	mov	r2, r3
 80022c4:	460b      	mov	r3, r1
 80022c6:	72fb      	strb	r3, [r7, #11]
 80022c8:	4613      	mov	r3, r2
 80022ca:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80022cc:	2302      	movs	r3, #2
 80022ce:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80022d6:	2301      	movs	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e001      	b.n	80022e0 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 80022e0:	893b      	ldrh	r3, [r7, #8]
 80022e2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80022e6:	d302      	bcc.n	80022ee <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 80022e8:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80022ec:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	893a      	ldrh	r2, [r7, #8]
 80022f2:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022fa:	7afa      	ldrb	r2, [r7, #11]
 80022fc:	4942      	ldr	r1, [pc, #264]	@ (8002408 <ES_WIFI_SendData+0x150>)
 80022fe:	4618      	mov	r0, r3
 8002300:	f006 fde8 	bl	8008ed4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002310:	461a      	mov	r2, r3
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f7ff fc96 	bl	8001c44 <AT_ExecuteCommand>
 8002318:	4603      	mov	r3, r0
 800231a:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d15e      	bne.n	80023e0 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4938      	ldr	r1, [pc, #224]	@ (800240c <ES_WIFI_SendData+0x154>)
 800232c:	4618      	mov	r0, r3
 800232e:	f006 fdd1 	bl	8008ed4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800233e:	461a      	mov	r2, r3
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f7ff fc7f 	bl	8001c44 <AT_ExecuteCommand>
 8002346:	4603      	mov	r3, r0
 8002348:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d13d      	bne.n	80023cc <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002356:	893a      	ldrh	r2, [r7, #8]
 8002358:	492d      	ldr	r1, [pc, #180]	@ (8002410 <ES_WIFI_SendData+0x158>)
 800235a:	4618      	mov	r0, r3
 800235c:	f006 fdba 	bl	8008ed4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800236c:	893a      	ldrh	r2, [r7, #8]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7ff fcd5 	bl	8001d24 <AT_RequestSendData>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d119      	bne.n	80023b8 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800238a:	4922      	ldr	r1, [pc, #136]	@ (8002414 <ES_WIFI_SendData+0x15c>)
 800238c:	4618      	mov	r0, r3
 800238e:	f006 ff25 	bl	80091dc <strstr>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d02c      	beq.n	80023f2 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002398:	f640 1201 	movw	r2, #2305	@ 0x901
 800239c:	491e      	ldr	r1, [pc, #120]	@ (8002418 <ES_WIFI_SendData+0x160>)
 800239e:	481f      	ldr	r0, [pc, #124]	@ (800241c <ES_WIFI_SendData+0x164>)
 80023a0:	f006 fcf2 	bl	8008d88 <iprintf>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80023aa:	4619      	mov	r1, r3
 80023ac:	481c      	ldr	r0, [pc, #112]	@ (8002420 <ES_WIFI_SendData+0x168>)
 80023ae:	f006 fceb 	bl	8008d88 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 80023b2:	2302      	movs	r3, #2
 80023b4:	74fb      	strb	r3, [r7, #19]
 80023b6:	e01c      	b.n	80023f2 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 80023b8:	f640 1207 	movw	r2, #2311	@ 0x907
 80023bc:	4916      	ldr	r1, [pc, #88]	@ (8002418 <ES_WIFI_SendData+0x160>)
 80023be:	4817      	ldr	r0, [pc, #92]	@ (800241c <ES_WIFI_SendData+0x164>)
 80023c0:	f006 fce2 	bl	8008d88 <iprintf>
 80023c4:	4817      	ldr	r0, [pc, #92]	@ (8002424 <ES_WIFI_SendData+0x16c>)
 80023c6:	f006 fd47 	bl	8008e58 <puts>
 80023ca:	e012      	b.n	80023f2 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 80023cc:	f640 120c 	movw	r2, #2316	@ 0x90c
 80023d0:	4911      	ldr	r1, [pc, #68]	@ (8002418 <ES_WIFI_SendData+0x160>)
 80023d2:	4812      	ldr	r0, [pc, #72]	@ (800241c <ES_WIFI_SendData+0x164>)
 80023d4:	f006 fcd8 	bl	8008d88 <iprintf>
 80023d8:	4813      	ldr	r0, [pc, #76]	@ (8002428 <ES_WIFI_SendData+0x170>)
 80023da:	f006 fd3d 	bl	8008e58 <puts>
 80023de:	e008      	b.n	80023f2 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80023e0:	f640 1211 	movw	r2, #2321	@ 0x911
 80023e4:	490c      	ldr	r1, [pc, #48]	@ (8002418 <ES_WIFI_SendData+0x160>)
 80023e6:	480d      	ldr	r0, [pc, #52]	@ (800241c <ES_WIFI_SendData+0x164>)
 80023e8:	f006 fcce 	bl	8008d88 <iprintf>
 80023ec:	480f      	ldr	r0, [pc, #60]	@ (800242c <ES_WIFI_SendData+0x174>)
 80023ee:	f006 fd33 	bl	8008e58 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d102      	bne.n	80023fe <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	2200      	movs	r2, #0
 80023fc:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 80023fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	0800ce54 	.word	0x0800ce54
 800240c:	0800d050 	.word	0x0800d050
 8002410:	0800d058 	.word	0x0800d058
 8002414:	0800d064 	.word	0x0800d064
 8002418:	0800cee4 	.word	0x0800cee4
 800241c:	0800cf44 	.word	0x0800cf44
 8002420:	0800d06c 	.word	0x0800d06c
 8002424:	0800d088 	.word	0x0800d088
 8002428:	0800d0a4 	.word	0x0800d0a4
 800242c:	0800d0b8 	.word	0x0800d0b8

08002430 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08c      	sub	sp, #48	@ 0x30
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8002438:	4b57      	ldr	r3, [pc, #348]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243c:	4a56      	ldr	r2, [pc, #344]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 800243e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002442:	6593      	str	r3, [r2, #88]	@ 0x58
 8002444:	4b54      	ldr	r3, [pc, #336]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	4b51      	ldr	r3, [pc, #324]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002454:	4a50      	ldr	r2, [pc, #320]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245c:	4b4e      	ldr	r3, [pc, #312]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 800245e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002468:	4b4b      	ldr	r3, [pc, #300]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 800246a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246c:	4a4a      	ldr	r2, [pc, #296]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002474:	4b48      	ldr	r3, [pc, #288]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002480:	4b45      	ldr	r3, [pc, #276]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002484:	4a44      	ldr	r2, [pc, #272]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 8002486:	f043 0310 	orr.w	r3, r3, #16
 800248a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800248c:	4b42      	ldr	r3, [pc, #264]	@ (8002598 <SPI_WIFI_MspInit+0x168>)
 800248e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002498:	2200      	movs	r2, #0
 800249a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800249e:	483f      	ldr	r0, [pc, #252]	@ (800259c <SPI_WIFI_MspInit+0x16c>)
 80024a0:	f001 fc32 	bl	8003d08 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80024a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024a8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	4619      	mov	r1, r3
 80024bc:	4837      	ldr	r0, [pc, #220]	@ (800259c <SPI_WIFI_MspInit+0x16c>)
 80024be:	f001 fa61 	bl	8003984 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80024c2:	2302      	movs	r3, #2
 80024c4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80024c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024ca:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	4619      	mov	r1, r3
 80024da:	4831      	ldr	r0, [pc, #196]	@ (80025a0 <SPI_WIFI_MspInit+0x170>)
 80024dc:	f001 fa52 	bl	8003984 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80024e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024e4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80024e6:	2301      	movs	r3, #1
 80024e8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80024f6:	f107 031c 	add.w	r3, r7, #28
 80024fa:	4619      	mov	r1, r3
 80024fc:	4828      	ldr	r0, [pc, #160]	@ (80025a0 <SPI_WIFI_MspInit+0x170>)
 80024fe:	f001 fa41 	bl	8003984 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8002502:	2201      	movs	r2, #1
 8002504:	2101      	movs	r1, #1
 8002506:	4826      	ldr	r0, [pc, #152]	@ (80025a0 <SPI_WIFI_MspInit+0x170>)
 8002508:	f001 fbfe 	bl	8003d08 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800250c:	2301      	movs	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002518:	2301      	movs	r3, #1
 800251a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	4619      	mov	r1, r3
 8002522:	481f      	ldr	r0, [pc, #124]	@ (80025a0 <SPI_WIFI_MspInit+0x170>)
 8002524:	f001 fa2e 	bl	8003984 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8002528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800252c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002536:	2301      	movs	r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800253a:	2306      	movs	r3, #6
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800253e:	f107 031c 	add.w	r3, r7, #28
 8002542:	4619      	mov	r1, r3
 8002544:	4817      	ldr	r0, [pc, #92]	@ (80025a4 <SPI_WIFI_MspInit+0x174>)
 8002546:	f001 fa1d 	bl	8003984 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800254a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800254e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002558:	2301      	movs	r3, #1
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800255c:	2306      	movs	r3, #6
 800255e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	480f      	ldr	r0, [pc, #60]	@ (80025a4 <SPI_WIFI_MspInit+0x174>)
 8002568:	f001 fa0c 	bl	8003984 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800256c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002570:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002576:	2301      	movs	r3, #1
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800257a:	2301      	movs	r3, #1
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800257e:	2306      	movs	r3, #6
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002582:	f107 031c 	add.w	r3, r7, #28
 8002586:	4619      	mov	r1, r3
 8002588:	4806      	ldr	r0, [pc, #24]	@ (80025a4 <SPI_WIFI_MspInit+0x174>)
 800258a:	f001 f9fb 	bl	8003984 <HAL_GPIO_Init>
}
 800258e:	bf00      	nop
 8002590:	3730      	adds	r7, #48	@ 0x30
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	48000400 	.word	0x48000400
 80025a0:	48001000 	.word	0x48001000
 80025a4:	48000800 	.word	0x48000800

080025a8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d145      	bne.n	8002648 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80025bc:	4b27      	ldr	r3, [pc, #156]	@ (800265c <SPI_WIFI_Init+0xb4>)
 80025be:	4a28      	ldr	r2, [pc, #160]	@ (8002660 <SPI_WIFI_Init+0xb8>)
 80025c0:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80025c2:	4826      	ldr	r0, [pc, #152]	@ (800265c <SPI_WIFI_Init+0xb4>)
 80025c4:	f7ff ff34 	bl	8002430 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 80025c8:	4b24      	ldr	r3, [pc, #144]	@ (800265c <SPI_WIFI_Init+0xb4>)
 80025ca:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025ce:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80025d0:	4b22      	ldr	r3, [pc, #136]	@ (800265c <SPI_WIFI_Init+0xb4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80025d6:	4b21      	ldr	r3, [pc, #132]	@ (800265c <SPI_WIFI_Init+0xb4>)
 80025d8:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80025dc:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80025de:	4b1f      	ldr	r3, [pc, #124]	@ (800265c <SPI_WIFI_Init+0xb4>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <SPI_WIFI_Init+0xb4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80025ea:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <SPI_WIFI_Init+0xb4>)
 80025ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80025f2:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <SPI_WIFI_Init+0xb4>)
 80025f4:	2210      	movs	r2, #16
 80025f6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <SPI_WIFI_Init+0xb4>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80025fe:	4b17      	ldr	r3, [pc, #92]	@ (800265c <SPI_WIFI_Init+0xb4>)
 8002600:	2200      	movs	r2, #0
 8002602:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002604:	4b15      	ldr	r3, [pc, #84]	@ (800265c <SPI_WIFI_Init+0xb4>)
 8002606:	2200      	movs	r2, #0
 8002608:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 800260a:	4b14      	ldr	r3, [pc, #80]	@ (800265c <SPI_WIFI_Init+0xb4>)
 800260c:	2200      	movs	r2, #0
 800260e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002610:	4812      	ldr	r0, [pc, #72]	@ (800265c <SPI_WIFI_Init+0xb4>)
 8002612:	f002 ffd1 	bl	80055b8 <HAL_SPI_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
 8002620:	e018      	b.n	8002654 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	2007      	movs	r0, #7
 8002628:	f001 f935 	bl	8003896 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800262c:	2007      	movs	r0, #7
 800262e:	f001 f94e 	bl	80038ce <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	2033      	movs	r0, #51	@ 0x33
 8002638:	f001 f92d 	bl	8003896 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800263c:	2033      	movs	r0, #51	@ 0x33
 800263e:	f001 f946 	bl	80038ce <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8002642:	200a      	movs	r0, #10
 8002644:	f000 fa08 	bl	8002a58 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8002648:	f000 f80c 	bl	8002664 <SPI_WIFI_ResetModule>
 800264c:	4603      	mov	r3, r0
 800264e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000030c 	.word	0x2000030c
 8002660:	40003c00 	.word	0x40003c00

08002664 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800266a:	f001 f809 	bl	8003680 <HAL_GetTick>
 800266e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800267a:	4835      	ldr	r0, [pc, #212]	@ (8002750 <SPI_WIFI_ResetModule+0xec>)
 800267c:	f001 fb44 	bl	8003d08 <HAL_GPIO_WritePin>
 8002680:	200a      	movs	r0, #10
 8002682:	f001 f809 	bl	8003698 <HAL_Delay>
 8002686:	2201      	movs	r2, #1
 8002688:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800268c:	4830      	ldr	r0, [pc, #192]	@ (8002750 <SPI_WIFI_ResetModule+0xec>)
 800268e:	f001 fb3b 	bl	8003d08 <HAL_GPIO_WritePin>
 8002692:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002696:	f000 ffff 	bl	8003698 <HAL_Delay>
  WIFI_ENABLE_NSS();
 800269a:	2200      	movs	r2, #0
 800269c:	2101      	movs	r1, #1
 800269e:	482c      	ldr	r0, [pc, #176]	@ (8002750 <SPI_WIFI_ResetModule+0xec>)
 80026a0:	f001 fb32 	bl	8003d08 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80026a4:	200f      	movs	r0, #15
 80026a6:	f000 f9d7 	bl	8002a58 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 80026aa:	e02b      	b.n	8002704 <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d907      	bls.n	80026c2 <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 80026b2:	2201      	movs	r2, #1
 80026b4:	2101      	movs	r1, #1
 80026b6:	4826      	ldr	r0, [pc, #152]	@ (8002750 <SPI_WIFI_ResetModule+0xec>)
 80026b8:	f001 fb26 	bl	8003d08 <HAL_GPIO_WritePin>
      return -1;
 80026bc:	f04f 33ff 	mov.w	r3, #4294967295
 80026c0:	e042      	b.n	8002748 <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	463a      	mov	r2, r7
 80026c6:	18d1      	adds	r1, r2, r3
 80026c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026cc:	2201      	movs	r2, #1
 80026ce:	4821      	ldr	r0, [pc, #132]	@ (8002754 <SPI_WIFI_ResetModule+0xf0>)
 80026d0:	f003 f87a 	bl	80057c8 <HAL_SPI_Receive>
 80026d4:	4603      	mov	r3, r0
 80026d6:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	3302      	adds	r3, #2
 80026dc:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80026de:	f000 ffcf 	bl	8003680 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ec:	d202      	bcs.n	80026f4 <SPI_WIFI_ResetModule+0x90>
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 80026f4:	2201      	movs	r2, #1
 80026f6:	2101      	movs	r1, #1
 80026f8:	4815      	ldr	r0, [pc, #84]	@ (8002750 <SPI_WIFI_ResetModule+0xec>)
 80026fa:	f001 fb05 	bl	8003d08 <HAL_GPIO_WritePin>
      return -1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e021      	b.n	8002748 <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 8002704:	2102      	movs	r1, #2
 8002706:	4812      	ldr	r0, [pc, #72]	@ (8002750 <SPI_WIFI_ResetModule+0xec>)
 8002708:	f001 fae6 	bl	8003cd8 <HAL_GPIO_ReadPin>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d0cc      	beq.n	80026ac <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8002712:	2201      	movs	r2, #1
 8002714:	2101      	movs	r1, #1
 8002716:	480e      	ldr	r0, [pc, #56]	@ (8002750 <SPI_WIFI_ResetModule+0xec>)
 8002718:	f001 faf6 	bl	8003d08 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800271c:	783b      	ldrb	r3, [r7, #0]
 800271e:	2b15      	cmp	r3, #21
 8002720:	d10e      	bne.n	8002740 <SPI_WIFI_ResetModule+0xdc>
 8002722:	787b      	ldrb	r3, [r7, #1]
 8002724:	2b15      	cmp	r3, #21
 8002726:	d10b      	bne.n	8002740 <SPI_WIFI_ResetModule+0xdc>
 8002728:	78bb      	ldrb	r3, [r7, #2]
 800272a:	2b0d      	cmp	r3, #13
 800272c:	d108      	bne.n	8002740 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 800272e:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002730:	2b0a      	cmp	r3, #10
 8002732:	d105      	bne.n	8002740 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002734:	793b      	ldrb	r3, [r7, #4]
 8002736:	2b3e      	cmp	r3, #62	@ 0x3e
 8002738:	d102      	bne.n	8002740 <SPI_WIFI_ResetModule+0xdc>
 800273a:	797b      	ldrb	r3, [r7, #5]
 800273c:	2b20      	cmp	r3, #32
 800273e:	d002      	beq.n	8002746 <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	e000      	b.n	8002748 <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	48001000 	.word	0x48001000
 8002754:	2000030c 	.word	0x2000030c

08002758 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800275c:	4802      	ldr	r0, [pc, #8]	@ (8002768 <SPI_WIFI_DeInit+0x10>)
 800275e:	f002 fff7 	bl	8005750 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	2000030c 	.word	0x2000030c

0800276c <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002774:	f000 ff84 	bl	8003680 <HAL_GetTick>
 8002778:	4603      	mov	r3, r0
 800277a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 800277c:	e00a      	b.n	8002794 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800277e:	f000 ff7f 	bl	8003680 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad2      	subs	r2, r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d902      	bls.n	8002794 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	e007      	b.n	80027a4 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002794:	2102      	movs	r1, #2
 8002796:	4805      	ldr	r0, [pc, #20]	@ (80027ac <wait_cmddata_rdy_high+0x40>)
 8002798:	f001 fa9e 	bl	8003cd8 <HAL_GPIO_ReadPin>
 800279c:	4603      	mov	r3, r0
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d1ed      	bne.n	800277e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	48001000 	.word	0x48001000

080027b0 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80027b8:	f000 ff62 	bl	8003680 <HAL_GetTick>
 80027bc:	4603      	mov	r3, r0
 80027be:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 80027c0:	e00a      	b.n	80027d8 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80027c2:	f000 ff5d 	bl	8003680 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1ad2      	subs	r2, r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d902      	bls.n	80027d8 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	e004      	b.n	80027e2 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <wait_cmddata_rdy_rising_event+0x3c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d0f0      	beq.n	80027c2 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80027e0:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000378 	.word	0x20000378

080027f0 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80027f8:	f000 ff42 	bl	8003680 <HAL_GetTick>
 80027fc:	4603      	mov	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8002800:	e00a      	b.n	8002818 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002802:	f000 ff3d 	bl	8003680 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad2      	subs	r2, r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	d902      	bls.n	8002818 <wait_spi_rx_event+0x28>
    {
      return -1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e004      	b.n	8002822 <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8002818:	4b04      	ldr	r3, [pc, #16]	@ (800282c <wait_spi_rx_event+0x3c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d0f0      	beq.n	8002802 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8002820:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000370 	.word	0x20000370

08002830 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002838:	f000 ff22 	bl	8003680 <HAL_GetTick>
 800283c:	4603      	mov	r3, r0
 800283e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8002840:	e00a      	b.n	8002858 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002842:	f000 ff1d 	bl	8003680 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad2      	subs	r2, r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	429a      	cmp	r2, r3
 8002850:	d902      	bls.n	8002858 <wait_spi_tx_event+0x28>
    {
      return -1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e004      	b.n	8002862 <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <wait_spi_tx_event+0x3c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d0f0      	beq.n	8002842 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8002860:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000374 	.word	0x20000374

08002870 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	460b      	mov	r3, r1
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8002882:	2201      	movs	r2, #1
 8002884:	2101      	movs	r1, #1
 8002886:	4834      	ldr	r0, [pc, #208]	@ (8002958 <SPI_WIFI_ReceiveData+0xe8>)
 8002888:	f001 fa3e 	bl	8003d08 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800288c:	2003      	movs	r0, #3
 800288e:	f000 f8e3 	bl	8002a58 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff8b 	bl	80027b0 <wait_cmddata_rdy_rising_event>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	da02      	bge.n	80028a6 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80028a0:	f06f 0302 	mvn.w	r3, #2
 80028a4:	e054      	b.n	8002950 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80028a6:	2200      	movs	r2, #0
 80028a8:	2101      	movs	r1, #1
 80028aa:	482b      	ldr	r0, [pc, #172]	@ (8002958 <SPI_WIFI_ReceiveData+0xe8>)
 80028ac:	f001 fa2c 	bl	8003d08 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80028b0:	200f      	movs	r0, #15
 80028b2:	f000 f8d1 	bl	8002a58 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80028b6:	e03d      	b.n	8002934 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 80028b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80028bc:	897b      	ldrh	r3, [r7, #10]
 80028be:	429a      	cmp	r2, r3
 80028c0:	db02      	blt.n	80028c8 <SPI_WIFI_ReceiveData+0x58>
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d13c      	bne.n	8002942 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 80028c8:	4b24      	ldr	r3, [pc, #144]	@ (800295c <SPI_WIFI_ReceiveData+0xec>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	2201      	movs	r2, #1
 80028d4:	4619      	mov	r1, r3
 80028d6:	4822      	ldr	r0, [pc, #136]	@ (8002960 <SPI_WIFI_ReceiveData+0xf0>)
 80028d8:	f003 fd56 	bl	8006388 <HAL_SPI_Receive_IT>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 80028e2:	2201      	movs	r2, #1
 80028e4:	2101      	movs	r1, #1
 80028e6:	481c      	ldr	r0, [pc, #112]	@ (8002958 <SPI_WIFI_ReceiveData+0xe8>)
 80028e8:	f001 fa0e 	bl	8003d08 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	e02e      	b.n	8002950 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff7b 	bl	80027f0 <wait_spi_rx_event>

      pData[0] = tmp[0];
 80028fa:	7d3a      	ldrb	r2, [r7, #20]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3301      	adds	r3, #1
 8002904:	7d7a      	ldrb	r2, [r7, #21]
 8002906:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002908:	8afb      	ldrh	r3, [r7, #22]
 800290a:	3302      	adds	r3, #2
 800290c:	b29b      	uxth	r3, r3
 800290e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3302      	adds	r3, #2
 8002914:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 8002916:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800291a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800291e:	db09      	blt.n	8002934 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002920:	2201      	movs	r2, #1
 8002922:	2101      	movs	r1, #1
 8002924:	480c      	ldr	r0, [pc, #48]	@ (8002958 <SPI_WIFI_ReceiveData+0xe8>)
 8002926:	f001 f9ef 	bl	8003d08 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800292a:	f7ff fe9b 	bl	8002664 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800292e:	f06f 0303 	mvn.w	r3, #3
 8002932:	e00d      	b.n	8002950 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002934:	2102      	movs	r1, #2
 8002936:	4808      	ldr	r0, [pc, #32]	@ (8002958 <SPI_WIFI_ReceiveData+0xe8>)
 8002938:	f001 f9ce 	bl	8003cd8 <HAL_GPIO_ReadPin>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d0ba      	beq.n	80028b8 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8002942:	2201      	movs	r2, #1
 8002944:	2101      	movs	r1, #1
 8002946:	4804      	ldr	r0, [pc, #16]	@ (8002958 <SPI_WIFI_ReceiveData+0xe8>)
 8002948:	f001 f9de 	bl	8003d08 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800294c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	48001000 	.word	0x48001000
 800295c:	20000370 	.word	0x20000370
 8002960:	2000030c 	.word	0x2000030c

08002964 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	460b      	mov	r3, r1
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fef9 	bl	800276c <wait_cmddata_rdy_high>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	da02      	bge.n	8002986 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002980:	f04f 33ff 	mov.w	r3, #4294967295
 8002984:	e04f      	b.n	8002a26 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8002986:	4b2a      	ldr	r3, [pc, #168]	@ (8002a30 <SPI_WIFI_SendData+0xcc>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800298c:	2200      	movs	r2, #0
 800298e:	2101      	movs	r1, #1
 8002990:	4828      	ldr	r0, [pc, #160]	@ (8002a34 <SPI_WIFI_SendData+0xd0>)
 8002992:	f001 f9b9 	bl	8003d08 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002996:	200f      	movs	r0, #15
 8002998:	f000 f85e 	bl	8002a58 <SPI_WIFI_DelayUs>
  if (len > 1)
 800299c:	897b      	ldrh	r3, [r7, #10]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d919      	bls.n	80029d6 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 80029a2:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <SPI_WIFI_SendData+0xd4>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 80029a8:	897b      	ldrh	r3, [r7, #10]
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	68f9      	ldr	r1, [r7, #12]
 80029b2:	4822      	ldr	r0, [pc, #136]	@ (8002a3c <SPI_WIFI_SendData+0xd8>)
 80029b4:	f003 fc4c 	bl	8006250 <HAL_SPI_Transmit_IT>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80029be:	2201      	movs	r2, #1
 80029c0:	2101      	movs	r1, #1
 80029c2:	481c      	ldr	r0, [pc, #112]	@ (8002a34 <SPI_WIFI_SendData+0xd0>)
 80029c4:	f001 f9a0 	bl	8003d08 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
 80029cc:	e02b      	b.n	8002a26 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff2d 	bl	8002830 <wait_spi_tx_event>
  }

  if (len & 1)
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 80029e0:	897b      	ldrh	r3, [r7, #10]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80029ec:	230a      	movs	r3, #10
 80029ee:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <SPI_WIFI_SendData+0xd4>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	2201      	movs	r2, #1
 80029fc:	4619      	mov	r1, r3
 80029fe:	480f      	ldr	r0, [pc, #60]	@ (8002a3c <SPI_WIFI_SendData+0xd8>)
 8002a00:	f003 fc26 	bl	8006250 <HAL_SPI_Transmit_IT>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4809      	ldr	r0, [pc, #36]	@ (8002a34 <SPI_WIFI_SendData+0xd0>)
 8002a10:	f001 f97a 	bl	8003d08 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
 8002a18:	e005      	b.n	8002a26 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff07 	bl	8002830 <wait_spi_tx_event>
  }
  return len;
 8002a22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000378 	.word	0x20000378
 8002a34:	48001000 	.word	0x48001000
 8002a38:	20000374 	.word	0x20000374
 8002a3c:	2000030c 	.word	0x2000030c

08002a40 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fe25 	bl	8003698 <HAL_Delay>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8002a68:	4b20      	ldr	r3, [pc, #128]	@ (8002aec <SPI_WIFI_DelayUs+0x94>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d122      	bne.n	8002ab6 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8002a70:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <SPI_WIFI_DelayUs+0x98>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	@ (8002af4 <SPI_WIFI_DelayUs+0x9c>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002a86:	f000 fdfb 	bl	8003680 <HAL_GetTick>
 8002a8a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002a8c:	e002      	b.n	8002a94 <SPI_WIFI_DelayUs+0x3c>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f9      	bne.n	8002a8e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8002a9a:	f000 fdf1 	bl	8003680 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <SPI_WIFI_DelayUs+0x94>)
 8002aa6:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002aa8:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <SPI_WIFI_DelayUs+0x94>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <SPI_WIFI_DelayUs+0x5e>
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8002aec <SPI_WIFI_DelayUs+0x94>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <SPI_WIFI_DelayUs+0x98>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a0f      	ldr	r2, [pc, #60]	@ (8002af8 <SPI_WIFI_DelayUs+0xa0>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	0c9a      	lsrs	r2, r3, #18
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <SPI_WIFI_DelayUs+0x94>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002ad6:	e002      	b.n	8002ade <SPI_WIFI_DelayUs+0x86>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f9      	bne.n	8002ad8 <SPI_WIFI_DelayUs+0x80>
  return;
 8002ae4:	bf00      	nop
}
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	2000037c 	.word	0x2000037c
 8002af0:	20000048 	.word	0x20000048
 8002af4:	10624dd3 	.word	0x10624dd3
 8002af8:	431bde83 	.word	0x431bde83

08002afc <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_SPI_RxCpltCallback+0x24>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002b0c:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <HAL_SPI_RxCpltCallback+0x24>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000370 	.word	0x20000370

08002b24 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <HAL_SPI_TxCpltCallback+0x24>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <HAL_SPI_TxCpltCallback+0x24>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000374 	.word	0x20000374

08002b4c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <SPI_WIFI_ISR+0x1c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d102      	bne.n	8002b5e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002b58:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <SPI_WIFI_ISR+0x1c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
   }
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	20000378 	.word	0x20000378

08002b6c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <WIFI_Init+0x40>)
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <WIFI_Init+0x44>)
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <WIFI_Init+0x48>)
 8002b80:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb8 <WIFI_Init+0x4c>)
 8002b82:	490e      	ldr	r1, [pc, #56]	@ (8002bbc <WIFI_Init+0x50>)
 8002b84:	480e      	ldr	r0, [pc, #56]	@ (8002bc0 <WIFI_Init+0x54>)
 8002b86:	f7ff f981 	bl	8001e8c <ES_WIFI_RegisterBusIO>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d107      	bne.n	8002ba0 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002b90:	480b      	ldr	r0, [pc, #44]	@ (8002bc0 <WIFI_Init+0x54>)
 8002b92:	f7ff f947 	bl	8001e24 <ES_WIFI_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	08002871 	.word	0x08002871
 8002bb0:	08002965 	.word	0x08002965
 8002bb4:	08002a41 	.word	0x08002a41
 8002bb8:	08002759 	.word	0x08002759
 8002bbc:	080025a9 	.word	0x080025a9
 8002bc0:	20000380 	.word	0x20000380

08002bc4 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	4809      	ldr	r0, [pc, #36]	@ (8002c04 <WIFI_Connect+0x40>)
 8002bde:	f7ff f989 	bl	8001ef4 <ES_WIFI_Connect>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d107      	bne.n	8002bf8 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002be8:	4806      	ldr	r0, [pc, #24]	@ (8002c04 <WIFI_Connect+0x40>)
 8002bea:	f7ff fa2b 	bl	8002044 <ES_WIFI_GetNetworkSettings>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000380 	.word	0x20000380

08002c08 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00d      	beq.n	8002c3a <WIFI_GetMAC_Address+0x32>
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	461a      	mov	r2, r3
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4806      	ldr	r0, [pc, #24]	@ (8002c44 <WIFI_GetMAC_Address+0x3c>)
 8002c2c:	f7ff fa34 	bl	8002098 <ES_WIFI_GetMACAddress>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000380 	.word	0x20000380

08002c48 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <WIFI_GetIP_Address+0x38>
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d90d      	bls.n	8002c80 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002c64:	4809      	ldr	r0, [pc, #36]	@ (8002c8c <WIFI_GetIP_Address+0x44>)
 8002c66:	f7ff f9bd 	bl	8001fe4 <ES_WIFI_IsConnected>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <WIFI_GetIP_Address+0x44>)
 8002c72:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000380 	.word	0x20000380

08002c90 <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	@ 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8002cac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002cae:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8002cb0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002cb2:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002cb4:	7afb      	ldrb	r3, [r7, #11]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	3303      	adds	r3, #3
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4807      	ldr	r0, [pc, #28]	@ (8002d04 <WIFI_OpenClientConnection+0x74>)
 8002ce8:	f7ff fa0c 	bl	8002104 <ES_WIFI_StartClientConnection>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8002cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3728      	adds	r7, #40	@ 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000380 	.word	0x20000380

08002d08 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	b2d9      	uxtb	r1, r3
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	4806      	ldr	r0, [pc, #24]	@ (8002d48 <WIFI_SendData+0x40>)
 8002d30:	f7ff fac2 	bl	80022b8 <ES_WIFI_SendData>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000380 	.word	0x20000380

08002d4c <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <BSP_LED_Init+0x28>
 8002d5c:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <BSP_LED_Init+0x58>)
 8002d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d60:	4a10      	ldr	r2, [pc, #64]	@ (8002da4 <BSP_LED_Init+0x58>)
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d68:	4b0e      	ldr	r3, [pc, #56]	@ (8002da4 <BSP_LED_Init+0x58>)
 8002d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002d74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d78:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d82:	2302      	movs	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	4a07      	ldr	r2, [pc, #28]	@ (8002da8 <BSP_LED_Init+0x5c>)
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	f107 020c 	add.w	r2, r7, #12
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fdf5 	bl	8003984 <HAL_GPIO_Init>
}
 8002d9a:	bf00      	nop
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	20000004 	.word	0x20000004

08002dac <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	4a06      	ldr	r2, [pc, #24]	@ (8002dd4 <BSP_LED_On+0x28>)
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dc2:	b291      	uxth	r1, r2
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 ff9e 	bl	8003d08 <HAL_GPIO_WritePin>
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000004 	.word	0x20000004

08002dd8 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	@ 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10b      	bne.n	8002e02 <BSP_COM_Init+0x2a>
 8002dea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea0 <BSP_COM_Init+0xc8>)
 8002dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea0 <BSP_COM_Init+0xc8>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002df6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea0 <BSP_COM_Init+0xc8>)
 8002df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10b      	bne.n	8002e20 <BSP_COM_Init+0x48>
 8002e08:	4b25      	ldr	r3, [pc, #148]	@ (8002ea0 <BSP_COM_Init+0xc8>)
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0c:	4a24      	ldr	r2, [pc, #144]	@ (8002ea0 <BSP_COM_Init+0xc8>)
 8002e0e:	f043 0302 	orr.w	r3, r3, #2
 8002e12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e14:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <BSP_COM_Init+0xc8>)
 8002e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <BSP_COM_Init+0x66>
 8002e26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <BSP_COM_Init+0xc8>)
 8002e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <BSP_COM_Init+0xc8>)
 8002e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <BSP_COM_Init+0xc8>)
 8002e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8002e3e:	2340      	movs	r3, #64	@ 0x40
 8002e40:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e46:	2302      	movs	r3, #2
 8002e48:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002e4e:	2307      	movs	r3, #7
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	4a13      	ldr	r2, [pc, #76]	@ (8002ea4 <BSP_COM_Init+0xcc>)
 8002e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5a:	f107 0214 	add.w	r2, r7, #20
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fd8f 	bl	8003984 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8002e6e:	2307      	movs	r3, #7
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea8 <BSP_COM_Init+0xd0>)
 8002e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7a:	f107 0214 	add.w	r2, r7, #20
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fd7f 	bl	8003984 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	4a08      	ldr	r2, [pc, #32]	@ (8002eac <BSP_COM_Init+0xd4>)
 8002e8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8002e92:	6838      	ldr	r0, [r7, #0]
 8002e94:	f004 fa9f 	bl	80073d6 <HAL_UART_Init>
}
 8002e98:	bf00      	nop
 8002e9a:	3728      	adds	r7, #40	@ 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	2000000c 	.word	0x2000000c
 8002ea8:	20000010 	.word	0x20000010
 8002eac:	20000008 	.word	0x20000008

08002eb0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	@ 0x28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002eb8:	4b27      	ldr	r3, [pc, #156]	@ (8002f58 <I2Cx_MspInit+0xa8>)
 8002eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ebc:	4a26      	ldr	r2, [pc, #152]	@ (8002f58 <I2Cx_MspInit+0xa8>)
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ec4:	4b24      	ldr	r3, [pc, #144]	@ (8002f58 <I2Cx_MspInit+0xa8>)
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002ed0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ed4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002ed6:	2312      	movs	r3, #18
 8002ed8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	4619      	mov	r1, r3
 8002eec:	481b      	ldr	r0, [pc, #108]	@ (8002f5c <I2Cx_MspInit+0xac>)
 8002eee:	f000 fd49 	bl	8003984 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4818      	ldr	r0, [pc, #96]	@ (8002f5c <I2Cx_MspInit+0xac>)
 8002efa:	f000 fd43 	bl	8003984 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002efe:	4b16      	ldr	r3, [pc, #88]	@ (8002f58 <I2Cx_MspInit+0xa8>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f02:	4a15      	ldr	r2, [pc, #84]	@ (8002f58 <I2Cx_MspInit+0xa8>)
 8002f04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f0a:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <I2Cx_MspInit+0xa8>)
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002f16:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <I2Cx_MspInit+0xa8>)
 8002f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f58 <I2Cx_MspInit+0xa8>)
 8002f1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f20:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <I2Cx_MspInit+0xa8>)
 8002f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f26:	4a0c      	ldr	r2, [pc, #48]	@ (8002f58 <I2Cx_MspInit+0xa8>)
 8002f28:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002f2c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	210f      	movs	r1, #15
 8002f32:	2021      	movs	r0, #33	@ 0x21
 8002f34:	f000 fcaf 	bl	8003896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002f38:	2021      	movs	r0, #33	@ 0x21
 8002f3a:	f000 fcc8 	bl	80038ce <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	210f      	movs	r1, #15
 8002f42:	2022      	movs	r0, #34	@ 0x22
 8002f44:	f000 fca7 	bl	8003896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002f48:	2022      	movs	r0, #34	@ 0x22
 8002f4a:	f000 fcc0 	bl	80038ce <HAL_NVIC_EnableIRQ>
}
 8002f4e:	bf00      	nop
 8002f50:	3728      	adds	r7, #40	@ 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	48000400 	.word	0x48000400

08002f60 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a12      	ldr	r2, [pc, #72]	@ (8002fb4 <I2Cx_Init+0x54>)
 8002f6c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a11      	ldr	r2, [pc, #68]	@ (8002fb8 <I2Cx_Init+0x58>)
 8002f72:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff89 	bl	8002eb0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fee2 	bl	8003d68 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f001 fcac 	bl	8004904 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40005800 	.word	0x40005800
 8002fb8:	00702681 	.word	0x00702681

08002fbc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	@ 0x28
 8002fc0:	af04      	add	r7, sp, #16
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	72fb      	strb	r3, [r7, #11]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	813b      	strh	r3, [r7, #8]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002fda:	7afb      	ldrb	r3, [r7, #11]
 8002fdc:	b299      	uxth	r1, r3
 8002fde:	88f8      	ldrh	r0, [r7, #6]
 8002fe0:	893a      	ldrh	r2, [r7, #8]
 8002fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fe6:	9302      	str	r3, [sp, #8]
 8002fe8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f001 f8aa 	bl	800414c <HAL_I2C_Mem_Read>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003002:	7afb      	ldrb	r3, [r7, #11]
 8003004:	4619      	mov	r1, r3
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f832 	bl	8003070 <I2Cx_Error>
  }
  return status;
 800300c:	7dfb      	ldrb	r3, [r7, #23]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b08a      	sub	sp, #40	@ 0x28
 800301a:	af04      	add	r7, sp, #16
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	4608      	mov	r0, r1
 8003020:	4611      	mov	r1, r2
 8003022:	461a      	mov	r2, r3
 8003024:	4603      	mov	r3, r0
 8003026:	72fb      	strb	r3, [r7, #11]
 8003028:	460b      	mov	r3, r1
 800302a:	813b      	strh	r3, [r7, #8]
 800302c:	4613      	mov	r3, r2
 800302e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003034:	7afb      	ldrb	r3, [r7, #11]
 8003036:	b299      	uxth	r1, r3
 8003038:	88f8      	ldrh	r0, [r7, #6]
 800303a:	893a      	ldrh	r2, [r7, #8]
 800303c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003040:	9302      	str	r3, [sp, #8]
 8003042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	4603      	mov	r3, r0
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 ff69 	bl	8003f24 <HAL_I2C_Mem_Write>
 8003052:	4603      	mov	r3, r0
 8003054:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800305c:	7afb      	ldrb	r3, [r7, #11]
 800305e:	4619      	mov	r1, r3
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f805 	bl	8003070 <I2Cx_Error>
  }
  return status;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 ff0e 	bl	8003e9e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff6c 	bl	8002f60 <I2Cx_Init>
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003094:	4802      	ldr	r0, [pc, #8]	@ (80030a0 <SENSOR_IO_Init+0x10>)
 8003096:	f7ff ff63 	bl	8002f60 <I2Cx_Init>
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000c80 	.word	0x20000c80

080030a4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
 80030ae:	460b      	mov	r3, r1
 80030b0:	71bb      	strb	r3, [r7, #6]
 80030b2:	4613      	mov	r3, r2
 80030b4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80030b6:	79bb      	ldrb	r3, [r7, #6]
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	79f9      	ldrb	r1, [r7, #7]
 80030bc:	2301      	movs	r3, #1
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	1d7b      	adds	r3, r7, #5
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2301      	movs	r3, #1
 80030c6:	4803      	ldr	r0, [pc, #12]	@ (80030d4 <SENSOR_IO_Write+0x30>)
 80030c8:	f7ff ffa5 	bl	8003016 <I2Cx_WriteMultiple>
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000c80 	.word	0x20000c80

080030d8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	4603      	mov	r3, r0
 80030e0:	460a      	mov	r2, r1
 80030e2:	71fb      	strb	r3, [r7, #7]
 80030e4:	4613      	mov	r3, r2
 80030e6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80030ec:	79bb      	ldrb	r3, [r7, #6]
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	79f9      	ldrb	r1, [r7, #7]
 80030f2:	2301      	movs	r3, #1
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	f107 030f 	add.w	r3, r7, #15
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2301      	movs	r3, #1
 80030fe:	4804      	ldr	r0, [pc, #16]	@ (8003110 <SENSOR_IO_Read+0x38>)
 8003100:	f7ff ff5c 	bl	8002fbc <I2Cx_ReadMultiple>

  return read_value;
 8003104:	7bfb      	ldrb	r3, [r7, #15]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000c80 	.word	0x20000c80

08003114 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af02      	add	r7, sp, #8
 800311a:	603a      	str	r2, [r7, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
 8003122:	460b      	mov	r3, r1
 8003124:	71bb      	strb	r3, [r7, #6]
 8003126:	4613      	mov	r3, r2
 8003128:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800312a:	79bb      	ldrb	r3, [r7, #6]
 800312c:	b29a      	uxth	r2, r3
 800312e:	79f9      	ldrb	r1, [r7, #7]
 8003130:	88bb      	ldrh	r3, [r7, #4]
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2301      	movs	r3, #1
 800313a:	4804      	ldr	r0, [pc, #16]	@ (800314c <SENSOR_IO_ReadMultiple+0x38>)
 800313c:	f7ff ff3e 	bl	8002fbc <I2Cx_ReadMultiple>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000c80 	.word	0x20000c80

08003150 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800315a:	2300      	movs	r3, #0
 800315c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800315e:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <BSP_ACCELERO_Init+0x78>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	4798      	blx	r3
 8003164:	4603      	mov	r3, r0
 8003166:	2b6a      	cmp	r3, #106	@ 0x6a
 8003168:	d002      	beq.n	8003170 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	e025      	b.n	80031bc <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003170:	4b16      	ldr	r3, [pc, #88]	@ (80031cc <BSP_ACCELERO_Init+0x7c>)
 8003172:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <BSP_ACCELERO_Init+0x78>)
 8003174:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003176:	2330      	movs	r3, #48	@ 0x30
 8003178:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800317e:	2300      	movs	r3, #0
 8003180:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003182:	2340      	movs	r3, #64	@ 0x40
 8003184:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	72fb      	strb	r3, [r7, #11]

    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800318e:	797a      	ldrb	r2, [r7, #5]
 8003190:	7abb      	ldrb	r3, [r7, #10]
 8003192:	4313      	orrs	r3, r2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003198:	7a3b      	ldrb	r3, [r7, #8]
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	b21b      	sxth	r3, r3
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	b21a      	sxth	r2, r3
 80031a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <BSP_ACCELERO_Init+0x7c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	89ba      	ldrh	r2, [r7, #12]
 80031b8:	4610      	mov	r0, r2
 80031ba:	4798      	blx	r3
  }

  return ret;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000014 	.word	0x20000014
 80031cc:	20000d5c 	.word	0x20000d5c

080031d0 <BSP_ACCELERO_Enable_Motion_Detection_IT>:
/**
  * @brief  Enable LSM6DSL Significant Motion Detection interrupt.
  * @retval ACCEL-ERO_OK if success, ACCELERO_ERROR otherwise.
  */
int32_t BSP_ACCELERO_Enable_Motion_Detection_IT(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
  uint8_t reg_val;
  uint8_t check_val;

  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_SM_STEP_THS, 0x02);
 80031d6:	2202      	movs	r2, #2
 80031d8:	2113      	movs	r1, #19
 80031da:	20d4      	movs	r0, #212	@ 0xd4
 80031dc:	f7ff ff62 	bl	80030a4 <SENSOR_IO_Write>
  check_val = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_SM_STEP_THS);
 80031e0:	2113      	movs	r1, #19
 80031e2:	20d4      	movs	r0, #212	@ 0xd4
 80031e4:	f7ff ff78 	bl	80030d8 <SENSOR_IO_Read>
 80031e8:	4603      	mov	r3, r0
 80031ea:	71fb      	strb	r3, [r7, #7]
  printf("DEBUG: SM_THS (0x17) | Wrote: 0x02, Read back: 0x%02X\r\n", check_val);
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	4619      	mov	r1, r3
 80031f0:	483c      	ldr	r0, [pc, #240]	@ (80032e4 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x114>)
 80031f2:	f005 fdc9 	bl	8008d88 <iprintf>
  if (check_val != 0x02) {
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d002      	beq.n	8003202 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x32>
    printf("ERROR: SM_THS write failed!\r\n");
 80031fc:	483a      	ldr	r0, [pc, #232]	@ (80032e8 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x118>)
 80031fe:	f005 fe2b 	bl	8008e58 <puts>
  }

  reg_val = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL10_C);
 8003202:	2119      	movs	r1, #25
 8003204:	20d4      	movs	r0, #212	@ 0xd4
 8003206:	f7ff ff67 	bl	80030d8 <SENSOR_IO_Read>
 800320a:	4603      	mov	r3, r0
 800320c:	71bb      	strb	r3, [r7, #6]
  reg_val |= 0x04;
 800320e:	79bb      	ldrb	r3, [r7, #6]
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	71bb      	strb	r3, [r7, #6]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL10_C, reg_val);
 8003216:	79bb      	ldrb	r3, [r7, #6]
 8003218:	461a      	mov	r2, r3
 800321a:	2119      	movs	r1, #25
 800321c:	20d4      	movs	r0, #212	@ 0xd4
 800321e:	f7ff ff41 	bl	80030a4 <SENSOR_IO_Write>
  check_val = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL10_C);
 8003222:	2119      	movs	r1, #25
 8003224:	20d4      	movs	r0, #212	@ 0xd4
 8003226:	f7ff ff57 	bl	80030d8 <SENSOR_IO_Read>
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
  printf("DEBUG: CTRL10_C (0x19)| Wrote: 0x%02X, Read back: 0x%02X\r\n", reg_val, check_val);
 800322e:	79bb      	ldrb	r3, [r7, #6]
 8003230:	79fa      	ldrb	r2, [r7, #7]
 8003232:	4619      	mov	r1, r3
 8003234:	482d      	ldr	r0, [pc, #180]	@ (80032ec <BSP_ACCELERO_Enable_Motion_Detection_IT+0x11c>)
 8003236:	f005 fda7 	bl	8008d88 <iprintf>
  if (check_val != reg_val) {
 800323a:	79fa      	ldrb	r2, [r7, #7]
 800323c:	79bb      	ldrb	r3, [r7, #6]
 800323e:	429a      	cmp	r2, r3
 8003240:	d002      	beq.n	8003248 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x78>
    printf("ERROR: CTRL10_C write failed!\r\n");
 8003242:	482b      	ldr	r0, [pc, #172]	@ (80032f0 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x120>)
 8003244:	f005 fe08 	bl	8008e58 <puts>
  }

  reg_val = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1);
 8003248:	2158      	movs	r1, #88	@ 0x58
 800324a:	20d4      	movs	r0, #212	@ 0xd4
 800324c:	f7ff ff44 	bl	80030d8 <SENSOR_IO_Read>
 8003250:	4603      	mov	r3, r0
 8003252:	71bb      	strb	r3, [r7, #6]
  reg_val |= 0x01;
 8003254:	79bb      	ldrb	r3, [r7, #6]
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	71bb      	strb	r3, [r7, #6]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1, reg_val);
 800325c:	79bb      	ldrb	r3, [r7, #6]
 800325e:	461a      	mov	r2, r3
 8003260:	2158      	movs	r1, #88	@ 0x58
 8003262:	20d4      	movs	r0, #212	@ 0xd4
 8003264:	f7ff ff1e 	bl	80030a4 <SENSOR_IO_Write>
  check_val = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1);
 8003268:	2158      	movs	r1, #88	@ 0x58
 800326a:	20d4      	movs	r0, #212	@ 0xd4
 800326c:	f7ff ff34 	bl	80030d8 <SENSOR_IO_Read>
 8003270:	4603      	mov	r3, r0
 8003272:	71fb      	strb	r3, [r7, #7]
  printf("DEBUG: TAP_CFG1 (0x58)| Wrote: 0x%02X, Read back: 0x%02X\r\n", reg_val, check_val);
 8003274:	79bb      	ldrb	r3, [r7, #6]
 8003276:	79fa      	ldrb	r2, [r7, #7]
 8003278:	4619      	mov	r1, r3
 800327a:	481e      	ldr	r0, [pc, #120]	@ (80032f4 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x124>)
 800327c:	f005 fd84 	bl	8008d88 <iprintf>
  if (check_val != reg_val) {
 8003280:	79fa      	ldrb	r2, [r7, #7]
 8003282:	79bb      	ldrb	r3, [r7, #6]
 8003284:	429a      	cmp	r2, r3
 8003286:	d002      	beq.n	800328e <BSP_ACCELERO_Enable_Motion_Detection_IT+0xbe>
      printf("ERROR: TAP_CFG1 write failed!\r\n");
 8003288:	481b      	ldr	r0, [pc, #108]	@ (80032f8 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x128>)
 800328a:	f005 fde5 	bl	8008e58 <puts>
  }

  reg_val = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG);
 800328e:	215e      	movs	r1, #94	@ 0x5e
 8003290:	20d4      	movs	r0, #212	@ 0xd4
 8003292:	f7ff ff21 	bl	80030d8 <SENSOR_IO_Read>
 8003296:	4603      	mov	r3, r0
 8003298:	71bb      	strb	r3, [r7, #6]
  reg_val |= 0x40;
 800329a:	79bb      	ldrb	r3, [r7, #6]
 800329c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a0:	71bb      	strb	r3, [r7, #6]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, reg_val);
 80032a2:	79bb      	ldrb	r3, [r7, #6]
 80032a4:	461a      	mov	r2, r3
 80032a6:	215e      	movs	r1, #94	@ 0x5e
 80032a8:	20d4      	movs	r0, #212	@ 0xd4
 80032aa:	f7ff fefb 	bl	80030a4 <SENSOR_IO_Write>
  check_val = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG);
 80032ae:	215e      	movs	r1, #94	@ 0x5e
 80032b0:	20d4      	movs	r0, #212	@ 0xd4
 80032b2:	f7ff ff11 	bl	80030d8 <SENSOR_IO_Read>
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  printf("DEBUG: MD1_CFG (0x5E) | Wrote: 0x%02X, Read back: 0x%02X\r\n", reg_val, check_val);
 80032ba:	79bb      	ldrb	r3, [r7, #6]
 80032bc:	79fa      	ldrb	r2, [r7, #7]
 80032be:	4619      	mov	r1, r3
 80032c0:	480e      	ldr	r0, [pc, #56]	@ (80032fc <BSP_ACCELERO_Enable_Motion_Detection_IT+0x12c>)
 80032c2:	f005 fd61 	bl	8008d88 <iprintf>
  if (check_val != reg_val) {
 80032c6:	79fa      	ldrb	r2, [r7, #7]
 80032c8:	79bb      	ldrb	r3, [r7, #6]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d002      	beq.n	80032d4 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x104>
    printf("ERROR: MD1_CFG write failed!\r\n");
 80032ce:	480c      	ldr	r0, [pc, #48]	@ (8003300 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x130>)
 80032d0:	f005 fdc2 	bl	8008e58 <puts>
  }

  printf("--- Motion Detection Setup Finished ---\r\n\n");
 80032d4:	480b      	ldr	r0, [pc, #44]	@ (8003304 <BSP_ACCELERO_Enable_Motion_Detection_IT+0x134>)
 80032d6:	f005 fdbf 	bl	8008e58 <puts>

  return ACCELERO_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	0800d1fc 	.word	0x0800d1fc
 80032e8:	0800d234 	.word	0x0800d234
 80032ec:	0800d254 	.word	0x0800d254
 80032f0:	0800d290 	.word	0x0800d290
 80032f4:	0800d2b0 	.word	0x0800d2b0
 80032f8:	0800d2ec 	.word	0x0800d2ec
 80032fc:	0800d30c 	.word	0x0800d30c
 8003300:	0800d348 	.word	0x0800d348
 8003304:	0800d368 	.word	0x0800d368

08003308 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003316:	2110      	movs	r1, #16
 8003318:	20d4      	movs	r0, #212	@ 0xd4
 800331a:	f7ff fedd 	bl	80030d8 <SENSOR_IO_Read>
 800331e:	4603      	mov	r3, r0
 8003320:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003326:	7bbb      	ldrb	r3, [r7, #14]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800332e:	7bba      	ldrb	r2, [r7, #14]
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	4313      	orrs	r3, r2
 8003334:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003336:	7bbb      	ldrb	r3, [r7, #14]
 8003338:	461a      	mov	r2, r3
 800333a:	2110      	movs	r1, #16
 800333c:	20d4      	movs	r0, #212	@ 0xd4
 800333e:	f7ff feb1 	bl	80030a4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003342:	2112      	movs	r1, #18
 8003344:	20d4      	movs	r0, #212	@ 0xd4
 8003346:	f7ff fec7 	bl	80030d8 <SENSOR_IO_Read>
 800334a:	4603      	mov	r3, r0
 800334c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	b29b      	uxth	r3, r3
 8003354:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003356:	7bbb      	ldrb	r3, [r7, #14]
 8003358:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800335c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800335e:	7bba      	ldrb	r2, [r7, #14]
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	4313      	orrs	r3, r2
 8003364:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003366:	7bbb      	ldrb	r3, [r7, #14]
 8003368:	461a      	mov	r2, r3
 800336a:	2112      	movs	r1, #18
 800336c:	20d4      	movs	r0, #212	@ 0xd4
 800336e:	f7ff fe99 	bl	80030a4 <SENSOR_IO_Write>
}
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003380:	2300      	movs	r3, #0
 8003382:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003384:	2110      	movs	r1, #16
 8003386:	20d4      	movs	r0, #212	@ 0xd4
 8003388:	f7ff fea6 	bl	80030d8 <SENSOR_IO_Read>
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	461a      	mov	r2, r3
 800339c:	2110      	movs	r1, #16
 800339e:	20d4      	movs	r0, #212	@ 0xd4
 80033a0:	f7ff fe80 	bl	80030a4 <SENSOR_IO_Write>
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80033b0:	f7ff fe6e 	bl	8003090 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80033b4:	210f      	movs	r1, #15
 80033b6:	20d4      	movs	r0, #212	@ 0xd4
 80033b8:	f7ff fe8e 	bl	80030d8 <SENSOR_IO_Read>
 80033bc:	4603      	mov	r3, r0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80033d0:	2115      	movs	r1, #21
 80033d2:	20d4      	movs	r0, #212	@ 0xd4
 80033d4:	f7ff fe80 	bl	80030d8 <SENSOR_IO_Read>
 80033d8:	4603      	mov	r3, r0
 80033da:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	f023 0310 	bic.w	r3, r3, #16
 80033e2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	f043 0310 	orr.w	r3, r3, #16
 80033f0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	461a      	mov	r2, r3
 80033f6:	2115      	movs	r1, #21
 80033f8:	20d4      	movs	r0, #212	@ 0xd4
 80033fa:	f7ff fe53 	bl	80030a4 <SENSOR_IO_Write>
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800341e:	2110      	movs	r1, #16
 8003420:	20d4      	movs	r0, #212	@ 0xd4
 8003422:	f7ff fe59 	bl	80030d8 <SENSOR_IO_Read>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800342a:	f107 0208 	add.w	r2, r7, #8
 800342e:	2306      	movs	r3, #6
 8003430:	2128      	movs	r1, #40	@ 0x28
 8003432:	20d4      	movs	r0, #212	@ 0xd4
 8003434:	f7ff fe6e 	bl	8003114 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003438:	2300      	movs	r3, #0
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e01a      	b.n	8003474 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800343e:	7ffb      	ldrb	r3, [r7, #31]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	3301      	adds	r3, #1
 8003444:	3320      	adds	r3, #32
 8003446:	443b      	add	r3, r7
 8003448:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	b29b      	uxth	r3, r3
 8003450:	7ffa      	ldrb	r2, [r7, #31]
 8003452:	0052      	lsls	r2, r2, #1
 8003454:	3220      	adds	r2, #32
 8003456:	443a      	add	r2, r7
 8003458:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800345c:	4413      	add	r3, r2
 800345e:	b29a      	uxth	r2, r3
 8003460:	7ffb      	ldrb	r3, [r7, #31]
 8003462:	b212      	sxth	r2, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	3320      	adds	r3, #32
 8003468:	443b      	add	r3, r7
 800346a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800346e:	7ffb      	ldrb	r3, [r7, #31]
 8003470:	3301      	adds	r3, #1
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	7ffb      	ldrb	r3, [r7, #31]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d9e1      	bls.n	800343e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800347a:	7dfb      	ldrb	r3, [r7, #23]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b0c      	cmp	r3, #12
 8003482:	d829      	bhi.n	80034d8 <LSM6DSL_AccReadXYZ+0xd0>
 8003484:	a201      	add	r2, pc, #4	@ (adr r2, 800348c <LSM6DSL_AccReadXYZ+0x84>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	080034c1 	.word	0x080034c1
 8003490:	080034d9 	.word	0x080034d9
 8003494:	080034d9 	.word	0x080034d9
 8003498:	080034d9 	.word	0x080034d9
 800349c:	080034d3 	.word	0x080034d3
 80034a0:	080034d9 	.word	0x080034d9
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080034d9 	.word	0x080034d9
 80034ac:	080034c7 	.word	0x080034c7
 80034b0:	080034d9 	.word	0x080034d9
 80034b4:	080034d9 	.word	0x080034d9
 80034b8:	080034d9 	.word	0x080034d9
 80034bc:	080034cd 	.word	0x080034cd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80034c0:	4b18      	ldr	r3, [pc, #96]	@ (8003524 <LSM6DSL_AccReadXYZ+0x11c>)
 80034c2:	61bb      	str	r3, [r7, #24]
    break;
 80034c4:	e008      	b.n	80034d8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80034c6:	4b18      	ldr	r3, [pc, #96]	@ (8003528 <LSM6DSL_AccReadXYZ+0x120>)
 80034c8:	61bb      	str	r3, [r7, #24]
    break;
 80034ca:	e005      	b.n	80034d8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80034cc:	4b17      	ldr	r3, [pc, #92]	@ (800352c <LSM6DSL_AccReadXYZ+0x124>)
 80034ce:	61bb      	str	r3, [r7, #24]
    break;
 80034d0:	e002      	b.n	80034d8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80034d2:	4b17      	ldr	r3, [pc, #92]	@ (8003530 <LSM6DSL_AccReadXYZ+0x128>)
 80034d4:	61bb      	str	r3, [r7, #24]
    break;    
 80034d6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80034d8:	2300      	movs	r3, #0
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e01a      	b.n	8003514 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	3320      	adds	r3, #32
 80034e4:	443b      	add	r3, r7
 80034e6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80034f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fa:	7ffb      	ldrb	r3, [r7, #31]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003506:	ee17 2a90 	vmov	r2, s15
 800350a:	b212      	sxth	r2, r2
 800350c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	3301      	adds	r3, #1
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	7ffb      	ldrb	r3, [r7, #31]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d9e1      	bls.n	80034de <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800351a:	bf00      	nop
 800351c:	bf00      	nop
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	3d79db23 	.word	0x3d79db23
 8003528:	3df9db23 	.word	0x3df9db23
 800352c:	3e79db23 	.word	0x3e79db23
 8003530:	3ef9db23 	.word	0x3ef9db23

08003534 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003538:	4b17      	ldr	r3, [pc, #92]	@ (8003598 <SystemInit+0x64>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353e:	4a16      	ldr	r2, [pc, #88]	@ (8003598 <SystemInit+0x64>)
 8003540:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003548:	4b14      	ldr	r3, [pc, #80]	@ (800359c <SystemInit+0x68>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a13      	ldr	r2, [pc, #76]	@ (800359c <SystemInit+0x68>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003554:	4b11      	ldr	r3, [pc, #68]	@ (800359c <SystemInit+0x68>)
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800355a:	4b10      	ldr	r3, [pc, #64]	@ (800359c <SystemInit+0x68>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a0f      	ldr	r2, [pc, #60]	@ (800359c <SystemInit+0x68>)
 8003560:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003564:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003568:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800356a:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <SystemInit+0x68>)
 800356c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003570:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003572:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <SystemInit+0x68>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a09      	ldr	r2, [pc, #36]	@ (800359c <SystemInit+0x68>)
 8003578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800357c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800357e:	4b07      	ldr	r3, [pc, #28]	@ (800359c <SystemInit+0x68>)
 8003580:	2200      	movs	r2, #0
 8003582:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003584:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <SystemInit+0x64>)
 8003586:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800358a:	609a      	str	r2, [r3, #8]
#endif
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed00 	.word	0xe000ed00
 800359c:	40021000 	.word	0x40021000

080035a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035aa:	2003      	movs	r0, #3
 80035ac:	f000 f968 	bl	8003880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035b0:	200f      	movs	r0, #15
 80035b2:	f000 f815 	bl	80035e0 <HAL_InitTick>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	71fb      	strb	r3, [r7, #7]
 80035c0:	e001      	b.n	80035c6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035c2:	f000 f805 	bl	80035d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035c6:	79fb      	ldrb	r3, [r7, #7]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80035ec:	4b17      	ldr	r3, [pc, #92]	@ (800364c <HAL_InitTick+0x6c>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d023      	beq.n	800363c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80035f4:	4b16      	ldr	r3, [pc, #88]	@ (8003650 <HAL_InitTick+0x70>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b14      	ldr	r3, [pc, #80]	@ (800364c <HAL_InitTick+0x6c>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003602:	fbb3 f3f1 	udiv	r3, r3, r1
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f96d 	bl	80038ea <HAL_SYSTICK_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10f      	bne.n	8003636 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d809      	bhi.n	8003630 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800361c:	2200      	movs	r2, #0
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	f04f 30ff 	mov.w	r0, #4294967295
 8003624:	f000 f937 	bl	8003896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003628:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <HAL_InitTick+0x74>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e007      	b.n	8003640 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e004      	b.n	8003640 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	e001      	b.n	8003640 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000050 	.word	0x20000050
 8003650:	20000048 	.word	0x20000048
 8003654:	2000004c 	.word	0x2000004c

08003658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_IncTick+0x20>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	4b06      	ldr	r3, [pc, #24]	@ (800367c <HAL_IncTick+0x24>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4413      	add	r3, r2
 8003668:	4a04      	ldr	r2, [pc, #16]	@ (800367c <HAL_IncTick+0x24>)
 800366a:	6013      	str	r3, [r2, #0]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000050 	.word	0x20000050
 800367c:	20000d60 	.word	0x20000d60

08003680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return uwTick;
 8003684:	4b03      	ldr	r3, [pc, #12]	@ (8003694 <HAL_GetTick+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000d60 	.word	0x20000d60

08003698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036a0:	f7ff ffee 	bl	8003680 <HAL_GetTick>
 80036a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d005      	beq.n	80036be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80036b2:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <HAL_Delay+0x44>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036be:	bf00      	nop
 80036c0:	f7ff ffde 	bl	8003680 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d8f7      	bhi.n	80036c0 <HAL_Delay+0x28>
  {
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000050 	.word	0x20000050

080036e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036fc:	4013      	ands	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800370c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003712:	4a04      	ldr	r2, [pc, #16]	@ (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	60d3      	str	r3, [r2, #12]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800372c:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <__NVIC_GetPriorityGrouping+0x18>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	0a1b      	lsrs	r3, r3, #8
 8003732:	f003 0307 	and.w	r3, r3, #7
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	db0b      	blt.n	800376e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	4907      	ldr	r1, [pc, #28]	@ (800377c <__NVIC_EnableIRQ+0x38>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2001      	movs	r0, #1
 8003766:	fa00 f202 	lsl.w	r2, r0, r2
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000e100 	.word	0xe000e100

08003780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	2b00      	cmp	r3, #0
 8003792:	db0a      	blt.n	80037aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	490c      	ldr	r1, [pc, #48]	@ (80037cc <__NVIC_SetPriority+0x4c>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	440b      	add	r3, r1
 80037a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a8:	e00a      	b.n	80037c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4908      	ldr	r1, [pc, #32]	@ (80037d0 <__NVIC_SetPriority+0x50>)
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	3b04      	subs	r3, #4
 80037b8:	0112      	lsls	r2, r2, #4
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	440b      	add	r3, r1
 80037be:	761a      	strb	r2, [r3, #24]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000e100 	.word	0xe000e100
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f1c3 0307 	rsb	r3, r3, #7
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	bf28      	it	cs
 80037f2:	2304      	movcs	r3, #4
 80037f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d902      	bls.n	8003804 <NVIC_EncodePriority+0x30>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3b03      	subs	r3, #3
 8003802:	e000      	b.n	8003806 <NVIC_EncodePriority+0x32>
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003808:	f04f 32ff 	mov.w	r2, #4294967295
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	401a      	ands	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800381c:	f04f 31ff 	mov.w	r1, #4294967295
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	43d9      	mvns	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	4313      	orrs	r3, r2
         );
}
 800382e:	4618      	mov	r0, r3
 8003830:	3724      	adds	r7, #36	@ 0x24
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800384c:	d301      	bcc.n	8003852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800384e:	2301      	movs	r3, #1
 8003850:	e00f      	b.n	8003872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003852:	4a0a      	ldr	r2, [pc, #40]	@ (800387c <SysTick_Config+0x40>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800385a:	210f      	movs	r1, #15
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	f7ff ff8e 	bl	8003780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003864:	4b05      	ldr	r3, [pc, #20]	@ (800387c <SysTick_Config+0x40>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800386a:	4b04      	ldr	r3, [pc, #16]	@ (800387c <SysTick_Config+0x40>)
 800386c:	2207      	movs	r2, #7
 800386e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	e000e010 	.word	0xe000e010

08003880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff29 	bl	80036e0 <__NVIC_SetPriorityGrouping>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038a8:	f7ff ff3e 	bl	8003728 <__NVIC_GetPriorityGrouping>
 80038ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	6978      	ldr	r0, [r7, #20]
 80038b4:	f7ff ff8e 	bl	80037d4 <NVIC_EncodePriority>
 80038b8:	4602      	mov	r2, r0
 80038ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ff5d 	bl	8003780 <__NVIC_SetPriority>
}
 80038c6:	bf00      	nop
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff31 	bl	8003744 <__NVIC_EnableIRQ>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ffa2 	bl	800383c <SysTick_Config>
 80038f8:	4603      	mov	r3, r0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d005      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
 8003924:	e029      	b.n	800397a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 020e 	bic.w	r2, r2, #14
 8003934:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	f003 021c 	and.w	r2, r3, #28
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	2101      	movs	r1, #1
 8003954:	fa01 f202 	lsl.w	r2, r1, r2
 8003958:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
    }
  }
  return status;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003992:	e17f      	b.n	8003c94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	4013      	ands	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8171 	beq.w	8003c8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d005      	beq.n	80039c4 <HAL_GPIO_Init+0x40>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d130      	bne.n	8003a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	2203      	movs	r2, #3
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039fa:	2201      	movs	r2, #1
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 0201 	and.w	r2, r3, #1
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d118      	bne.n	8003a64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a38:	2201      	movs	r2, #1
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	f003 0201 	and.w	r2, r3, #1
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d017      	beq.n	8003aa0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d123      	bne.n	8003af4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	08da      	lsrs	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3208      	adds	r2, #8
 8003ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	08da      	lsrs	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3208      	adds	r2, #8
 8003aee:	6939      	ldr	r1, [r7, #16]
 8003af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0203 	and.w	r2, r3, #3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80ac 	beq.w	8003c8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b36:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb4 <HAL_GPIO_Init+0x330>)
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	4a5e      	ldr	r2, [pc, #376]	@ (8003cb4 <HAL_GPIO_Init+0x330>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b42:	4b5c      	ldr	r3, [pc, #368]	@ (8003cb4 <HAL_GPIO_Init+0x330>)
 8003b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b4e:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb8 <HAL_GPIO_Init+0x334>)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	3302      	adds	r3, #2
 8003b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	220f      	movs	r2, #15
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b78:	d025      	beq.n	8003bc6 <HAL_GPIO_Init+0x242>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4f      	ldr	r2, [pc, #316]	@ (8003cbc <HAL_GPIO_Init+0x338>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01f      	beq.n	8003bc2 <HAL_GPIO_Init+0x23e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4e      	ldr	r2, [pc, #312]	@ (8003cc0 <HAL_GPIO_Init+0x33c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d019      	beq.n	8003bbe <HAL_GPIO_Init+0x23a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4d      	ldr	r2, [pc, #308]	@ (8003cc4 <HAL_GPIO_Init+0x340>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <HAL_GPIO_Init+0x236>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4c      	ldr	r2, [pc, #304]	@ (8003cc8 <HAL_GPIO_Init+0x344>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00d      	beq.n	8003bb6 <HAL_GPIO_Init+0x232>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4b      	ldr	r2, [pc, #300]	@ (8003ccc <HAL_GPIO_Init+0x348>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <HAL_GPIO_Init+0x22e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4a      	ldr	r2, [pc, #296]	@ (8003cd0 <HAL_GPIO_Init+0x34c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <HAL_GPIO_Init+0x22a>
 8003baa:	2306      	movs	r3, #6
 8003bac:	e00c      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bae:	2307      	movs	r3, #7
 8003bb0:	e00a      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bb2:	2305      	movs	r3, #5
 8003bb4:	e008      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	e006      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e004      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e002      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	f002 0203 	and.w	r2, r2, #3
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	4093      	lsls	r3, r2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd8:	4937      	ldr	r1, [pc, #220]	@ (8003cb8 <HAL_GPIO_Init+0x334>)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	3302      	adds	r3, #2
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003be6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd4 <HAL_GPIO_Init+0x350>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c0a:	4a32      	ldr	r2, [pc, #200]	@ (8003cd4 <HAL_GPIO_Init+0x350>)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c10:	4b30      	ldr	r3, [pc, #192]	@ (8003cd4 <HAL_GPIO_Init+0x350>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c34:	4a27      	ldr	r2, [pc, #156]	@ (8003cd4 <HAL_GPIO_Init+0x350>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c3a:	4b26      	ldr	r3, [pc, #152]	@ (8003cd4 <HAL_GPIO_Init+0x350>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd4 <HAL_GPIO_Init+0x350>)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c64:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd4 <HAL_GPIO_Init+0x350>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4013      	ands	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c88:	4a12      	ldr	r2, [pc, #72]	@ (8003cd4 <HAL_GPIO_Init+0x350>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	3301      	adds	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f47f ae78 	bne.w	8003994 <HAL_GPIO_Init+0x10>
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	48000400 	.word	0x48000400
 8003cc0:	48000800 	.word	0x48000800
 8003cc4:	48000c00 	.word	0x48000c00
 8003cc8:	48001000 	.word	0x48001000
 8003ccc:	48001400 	.word	0x48001400
 8003cd0:	48001800 	.word	0x48001800
 8003cd4:	40010400 	.word	0x40010400

08003cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	887b      	ldrh	r3, [r7, #2]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e001      	b.n	8003cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
 8003d14:	4613      	mov	r3, r2
 8003d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d24:	e002      	b.n	8003d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d42:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d006      	beq.n	8003d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d4e:	4a05      	ldr	r2, [pc, #20]	@ (8003d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd fbb6 	bl	80014c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40010400 	.word	0x40010400

08003d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e08d      	b.n	8003e96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f8b4 	bl	8003efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2224      	movs	r2, #36	@ 0x24
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003db8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	e006      	b.n	8003df0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003dee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d108      	bne.n	8003e0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	e007      	b.n	8003e1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69d9      	ldr	r1, [r3, #28]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e021      	b.n	8003ef4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	@ 0x24
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f821 	bl	8003f10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 80f9 	bne.w	800413e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x34>
 8003f52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0ed      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2C_Mem_Write+0x4e>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0e6      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f7a:	f7ff fb81 	bl	8003680 <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	2319      	movs	r3, #25
 8003f86:	2201      	movs	r2, #1
 8003f88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fac3 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0d1      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2221      	movs	r2, #33	@ 0x21
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2240      	movs	r2, #64	@ 0x40
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fc4:	88f8      	ldrh	r0, [r7, #6]
 8003fc6:	893a      	ldrh	r2, [r7, #8]
 8003fc8:	8979      	ldrh	r1, [r7, #10]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 f9d3 	bl	8004380 <I2C_RequestMemoryWrite>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0a9      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2bff      	cmp	r3, #255	@ 0xff
 8003ff4:	d90e      	bls.n	8004014 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	22ff      	movs	r2, #255	@ 0xff
 8003ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004000:	b2da      	uxtb	r2, r3
 8004002:	8979      	ldrh	r1, [r7, #10]
 8004004:	2300      	movs	r3, #0
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fc47 	bl	80048a0 <I2C_TransferConfig>
 8004012:	e00f      	b.n	8004034 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004022:	b2da      	uxtb	r2, r3
 8004024:	8979      	ldrh	r1, [r7, #10]
 8004026:	2300      	movs	r3, #0
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fc36 	bl	80048a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fac6 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e07b      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d034      	beq.n	80040ec <HAL_I2C_Mem_Write+0x1c8>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d130      	bne.n	80040ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004090:	2200      	movs	r2, #0
 8004092:	2180      	movs	r1, #128	@ 0x80
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fa3f 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e04d      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2bff      	cmp	r3, #255	@ 0xff
 80040ac:	d90e      	bls.n	80040cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	22ff      	movs	r2, #255	@ 0xff
 80040b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	8979      	ldrh	r1, [r7, #10]
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fbeb 	bl	80048a0 <I2C_TransferConfig>
 80040ca:	e00f      	b.n	80040ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	8979      	ldrh	r1, [r7, #10]
 80040de:	2300      	movs	r3, #0
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fbda 	bl	80048a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d19e      	bne.n	8004034 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 faac 	bl	8004658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e01a      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2220      	movs	r2, #32
 8004110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_I2C_Mem_Write+0x224>)
 800411e:	400b      	ands	r3, r1
 8004120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	fe00e800 	.word	0xfe00e800

0800414c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	4608      	mov	r0, r1
 8004156:	4611      	mov	r1, r2
 8004158:	461a      	mov	r2, r3
 800415a:	4603      	mov	r3, r0
 800415c:	817b      	strh	r3, [r7, #10]
 800415e:	460b      	mov	r3, r1
 8004160:	813b      	strh	r3, [r7, #8]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	f040 80fd 	bne.w	800436e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_I2C_Mem_Read+0x34>
 800417a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004186:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0f1      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_I2C_Mem_Read+0x4e>
 8004196:	2302      	movs	r3, #2
 8004198:	e0ea      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041a2:	f7ff fa6d 	bl	8003680 <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2319      	movs	r3, #25
 80041ae:	2201      	movs	r2, #1
 80041b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f9af 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0d5      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2222      	movs	r2, #34	@ 0x22
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2240      	movs	r2, #64	@ 0x40
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a3a      	ldr	r2, [r7, #32]
 80041de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ec:	88f8      	ldrh	r0, [r7, #6]
 80041ee:	893a      	ldrh	r2, [r7, #8]
 80041f0:	8979      	ldrh	r1, [r7, #10]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	4603      	mov	r3, r0
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f913 	bl	8004428 <I2C_RequestMemoryRead>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0ad      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2bff      	cmp	r3, #255	@ 0xff
 800421c:	d90e      	bls.n	800423c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	b2da      	uxtb	r2, r3
 800422a:	8979      	ldrh	r1, [r7, #10]
 800422c:	4b52      	ldr	r3, [pc, #328]	@ (8004378 <HAL_I2C_Mem_Read+0x22c>)
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fb33 	bl	80048a0 <I2C_TransferConfig>
 800423a:	e00f      	b.n	800425c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	b2da      	uxtb	r2, r3
 800424c:	8979      	ldrh	r1, [r7, #10]
 800424e:	4b4a      	ldr	r3, [pc, #296]	@ (8004378 <HAL_I2C_Mem_Read+0x22c>)
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fb22 	bl	80048a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	2200      	movs	r2, #0
 8004264:	2104      	movs	r1, #4
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f956 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e07c      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d034      	beq.n	800431c <HAL_I2C_Mem_Read+0x1d0>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d130      	bne.n	800431c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c0:	2200      	movs	r2, #0
 80042c2:	2180      	movs	r1, #128	@ 0x80
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f927 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e04d      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2bff      	cmp	r3, #255	@ 0xff
 80042dc:	d90e      	bls.n	80042fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	8979      	ldrh	r1, [r7, #10]
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fad3 	bl	80048a0 <I2C_TransferConfig>
 80042fa:	e00f      	b.n	800431c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430a:	b2da      	uxtb	r2, r3
 800430c:	8979      	ldrh	r1, [r7, #10]
 800430e:	2300      	movs	r3, #0
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fac2 	bl	80048a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d19a      	bne.n	800425c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f994 	bl	8004658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e01a      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2220      	movs	r2, #32
 8004340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_I2C_Mem_Read+0x230>)
 800434e:	400b      	ands	r3, r1
 8004350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	80002400 	.word	0x80002400
 800437c:	fe00e800 	.word	0xfe00e800

08004380 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	817b      	strh	r3, [r7, #10]
 8004392:	460b      	mov	r3, r1
 8004394:	813b      	strh	r3, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	8979      	ldrh	r1, [r7, #10]
 80043a0:	4b20      	ldr	r3, [pc, #128]	@ (8004424 <I2C_RequestMemoryWrite+0xa4>)
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fa79 	bl	80048a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	69b9      	ldr	r1, [r7, #24]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f909 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e02c      	b.n	800441c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043c8:	893b      	ldrh	r3, [r7, #8]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80043d2:	e015      	b.n	8004400 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043d4:	893b      	ldrh	r3, [r7, #8]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f8ef 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e012      	b.n	800441c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043f6:	893b      	ldrh	r3, [r7, #8]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2200      	movs	r2, #0
 8004408:	2180      	movs	r1, #128	@ 0x80
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f884 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	80002000 	.word	0x80002000

08004428 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	4608      	mov	r0, r1
 8004432:	4611      	mov	r1, r2
 8004434:	461a      	mov	r2, r3
 8004436:	4603      	mov	r3, r0
 8004438:	817b      	strh	r3, [r7, #10]
 800443a:	460b      	mov	r3, r1
 800443c:	813b      	strh	r3, [r7, #8]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	8979      	ldrh	r1, [r7, #10]
 8004448:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <I2C_RequestMemoryRead+0xa4>)
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fa26 	bl	80048a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f8b6 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e02c      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d105      	bne.n	800447a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800446e:	893b      	ldrh	r3, [r7, #8]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	629a      	str	r2, [r3, #40]	@ 0x28
 8004478:	e015      	b.n	80044a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800447a:	893b      	ldrh	r3, [r7, #8]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	b29b      	uxth	r3, r3
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	69b9      	ldr	r1, [r7, #24]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f89c 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e012      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800449c:	893b      	ldrh	r3, [r7, #8]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2140      	movs	r1, #64	@ 0x40
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f831 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	80002000 	.word	0x80002000

080044d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d103      	bne.n	80044ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d007      	beq.n	800450c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	619a      	str	r2, [r3, #24]
  }
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004528:	e03b      	b.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f8d6 	bl	80046e0 <I2C_IsErrorOccurred>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e041      	b.n	80045c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d02d      	beq.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7ff f89b 	bl	8003680 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d122      	bne.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	429a      	cmp	r2, r3
 8004578:	d113      	bne.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e00f      	b.n	80045c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d0b4      	beq.n	800452a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d6:	e033      	b.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f87f 	bl	80046e0 <I2C_IsErrorOccurred>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e031      	b.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d025      	beq.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7ff f844 	bl	8003680 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11a      	bne.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d013      	beq.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e007      	b.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d1c4      	bne.n	80045d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004664:	e02f      	b.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f838 	bl	80046e0 <I2C_IsErrorOccurred>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e02d      	b.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7ff f801 	bl	8003680 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d11a      	bne.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d013      	beq.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e007      	b.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d1c8      	bne.n	8004666 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d068      	beq.n	80047de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2210      	movs	r2, #16
 8004712:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004714:	e049      	b.n	80047aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d045      	beq.n	80047aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fe ffaf 	bl	8003680 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <I2C_IsErrorOccurred+0x54>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d13a      	bne.n	80047aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800473e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004746:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004756:	d121      	bne.n	800479c <I2C_IsErrorOccurred+0xbc>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800475e:	d01d      	beq.n	800479c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b20      	cmp	r3, #32
 8004764:	d01a      	beq.n	800479c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004774:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004776:	f7fe ff83 	bl	8003680 <HAL_GetTick>
 800477a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800477c:	e00e      	b.n	800479c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800477e:	f7fe ff7f 	bl	8003680 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b19      	cmp	r3, #25
 800478a:	d907      	bls.n	800479c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f043 0320 	orr.w	r3, r3, #32
 8004792:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800479a:	e006      	b.n	80047aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d1e9      	bne.n	800477e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d003      	beq.n	80047c0 <I2C_IsErrorOccurred+0xe0>
 80047b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0aa      	beq.n	8004716 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2220      	movs	r2, #32
 80047ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	f043 0302 	orr.w	r3, r3, #2
 800483a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800484c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01c      	beq.n	800488e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fe3b 	bl	80044d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <I2C_IsErrorOccurred+0x1bc>)
 8004866:	400b      	ands	r3, r1
 8004868:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800488e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004892:	4618      	mov	r0, r3
 8004894:	3728      	adds	r7, #40	@ 0x28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	fe00e800 	.word	0xfe00e800

080048a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	817b      	strh	r3, [r7, #10]
 80048ae:	4613      	mov	r3, r2
 80048b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b2:	897b      	ldrh	r3, [r7, #10]
 80048b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048b8:	7a7b      	ldrb	r3, [r7, #9]
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048c0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048ce:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	0d5b      	lsrs	r3, r3, #21
 80048da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80048de:	4b08      	ldr	r3, [pc, #32]	@ (8004900 <I2C_TransferConfig+0x60>)
 80048e0:	430b      	orrs	r3, r1
 80048e2:	43db      	mvns	r3, r3
 80048e4:	ea02 0103 	and.w	r1, r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	03ff63ff 	.word	0x03ff63ff

08004904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b20      	cmp	r3, #32
 8004918:	d138      	bne.n	800498c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004924:	2302      	movs	r3, #2
 8004926:	e032      	b.n	800498e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	@ 0x24
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049a0:	4b04      	ldr	r3, [pc, #16]	@ (80049b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40007000 	.word	0x40007000

080049b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e3ca      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ca:	4b97      	ldr	r3, [pc, #604]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d4:	4b94      	ldr	r3, [pc, #592]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80e4 	beq.w	8004bb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_RCC_OscConfig+0x4a>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	f040 808b 	bne.w	8004b10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	f040 8087 	bne.w	8004b10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a02:	4b89      	ldr	r3, [pc, #548]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_RCC_OscConfig+0x62>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e3a2      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1a      	ldr	r2, [r3, #32]
 8004a1e:	4b82      	ldr	r3, [pc, #520]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <HAL_RCC_OscConfig+0x7c>
 8004a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a32:	e005      	b.n	8004a40 <HAL_RCC_OscConfig+0x88>
 8004a34:	4b7c      	ldr	r3, [pc, #496]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d223      	bcs.n	8004a8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fd55 	bl	80054f8 <RCC_SetFlashLatencyFromMSIRange>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e383      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a58:	4b73      	ldr	r3, [pc, #460]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a72      	ldr	r2, [pc, #456]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a5e:	f043 0308 	orr.w	r3, r3, #8
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	4b70      	ldr	r3, [pc, #448]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	496d      	ldr	r1, [pc, #436]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a76:	4b6c      	ldr	r3, [pc, #432]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	4968      	ldr	r1, [pc, #416]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	604b      	str	r3, [r1, #4]
 8004a8a:	e025      	b.n	8004ad8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a8c:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a65      	ldr	r2, [pc, #404]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a92:	f043 0308 	orr.w	r3, r3, #8
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4b63      	ldr	r3, [pc, #396]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	4960      	ldr	r1, [pc, #384]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	495b      	ldr	r1, [pc, #364]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fd15 	bl	80054f8 <RCC_SetFlashLatencyFromMSIRange>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e343      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ad8:	f000 fc4a 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b52      	ldr	r3, [pc, #328]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	4950      	ldr	r1, [pc, #320]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
 8004af4:	4a4e      	ldr	r2, [pc, #312]	@ (8004c30 <HAL_RCC_OscConfig+0x278>)
 8004af6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004af8:	4b4e      	ldr	r3, [pc, #312]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fd6f 	bl	80035e0 <HAL_InitTick>
 8004b02:	4603      	mov	r3, r0
 8004b04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d052      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	e327      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d032      	beq.n	8004b7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b18:	4b43      	ldr	r3, [pc, #268]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a42      	ldr	r2, [pc, #264]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b24:	f7fe fdac 	bl	8003680 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b2c:	f7fe fda8 	bl	8003680 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e310      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b4a:	4b37      	ldr	r3, [pc, #220]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a36      	ldr	r2, [pc, #216]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b50:	f043 0308 	orr.w	r3, r3, #8
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b34      	ldr	r3, [pc, #208]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	4931      	ldr	r1, [pc, #196]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b68:	4b2f      	ldr	r3, [pc, #188]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	492c      	ldr	r1, [pc, #176]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]
 8004b7c:	e01a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a29      	ldr	r2, [pc, #164]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b8a:	f7fe fd79 	bl	8003680 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b92:	f7fe fd75 	bl	8003680 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e2dd      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ba4:	4b20      	ldr	r3, [pc, #128]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <HAL_RCC_OscConfig+0x1da>
 8004bb0:	e000      	b.n	8004bb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d074      	beq.n	8004caa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d005      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x21a>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d10e      	bne.n	8004bea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d10b      	bne.n	8004bea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd2:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d064      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x2f0>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d160      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e2ba      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x24a>
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	e026      	b.n	8004c50 <HAL_RCC_OscConfig+0x298>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c0a:	d115      	bne.n	8004c38 <HAL_RCC_OscConfig+0x280>
 8004c0c:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a05      	ldr	r2, [pc, #20]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	4b03      	ldr	r3, [pc, #12]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a02      	ldr	r2, [pc, #8]	@ (8004c28 <HAL_RCC_OscConfig+0x270>)
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	e014      	b.n	8004c50 <HAL_RCC_OscConfig+0x298>
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800d394 	.word	0x0800d394
 8004c30:	20000048 	.word	0x20000048
 8004c34:	2000004c 	.word	0x2000004c
 8004c38:	4ba0      	ldr	r3, [pc, #640]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a9f      	ldr	r2, [pc, #636]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b9d      	ldr	r3, [pc, #628]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a9c      	ldr	r2, [pc, #624]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fe fd12 	bl	8003680 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c60:	f7fe fd0e 	bl	8003680 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	@ 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e276      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c72:	4b92      	ldr	r3, [pc, #584]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x2a8>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fe fcfe 	bl	8003680 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fe fcfa 	bl	8003680 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e262      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c9a:	4b88      	ldr	r3, [pc, #544]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x2d0>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d060      	beq.n	8004d78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x310>
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b0c      	cmp	r3, #12
 8004cc0:	d119      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d116      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x328>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e23f      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce0:	4b76      	ldr	r3, [pc, #472]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	4973      	ldr	r1, [pc, #460]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cf4:	e040      	b.n	8004d78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d023      	beq.n	8004d46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cfe:	4b6f      	ldr	r3, [pc, #444]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6e      	ldr	r2, [pc, #440]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0a:	f7fe fcb9 	bl	8003680 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d12:	f7fe fcb5 	bl	8003680 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e21d      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d24:	4b65      	ldr	r3, [pc, #404]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d30:	4b62      	ldr	r3, [pc, #392]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	061b      	lsls	r3, r3, #24
 8004d3e:	495f      	ldr	r1, [pc, #380]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	604b      	str	r3, [r1, #4]
 8004d44:	e018      	b.n	8004d78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d46:	4b5d      	ldr	r3, [pc, #372]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fe fc95 	bl	8003680 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5a:	f7fe fc91 	bl	8003680 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e1f9      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d6c:	4b53      	ldr	r3, [pc, #332]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f0      	bne.n	8004d5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d03c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d92:	4a4a      	ldr	r2, [pc, #296]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fe fc70 	bl	8003680 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da4:	f7fe fc6c 	bl	8003680 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e1d4      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004db6:	4b41      	ldr	r3, [pc, #260]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ef      	beq.n	8004da4 <HAL_RCC_OscConfig+0x3ec>
 8004dc4:	e01b      	b.n	8004dfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fe fc53 	bl	8003680 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dde:	f7fe fc4f 	bl	8003680 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e1b7      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004df0:	4b32      	ldr	r3, [pc, #200]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1ef      	bne.n	8004dde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80a6 	beq.w	8004f58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e10:	4b2a      	ldr	r3, [pc, #168]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1c:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e20:	4a26      	ldr	r2, [pc, #152]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e28:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e34:	2301      	movs	r3, #1
 8004e36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e38:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d118      	bne.n	8004e76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e44:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e50:	f7fe fc16 	bl	8003680 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e58:	f7fe fc12 	bl	8003680 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e17a      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e6a:	4b15      	ldr	r3, [pc, #84]	@ (8004ec0 <HAL_RCC_OscConfig+0x508>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d108      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4d8>
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e84:	4a0d      	ldr	r2, [pc, #52]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e8e:	e029      	b.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b05      	cmp	r3, #5
 8004e96:	d115      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x50c>
 8004e98:	4b08      	ldr	r3, [pc, #32]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9e:	4a07      	ldr	r2, [pc, #28]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004ea0:	f043 0304 	orr.w	r3, r3, #4
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ea8:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	4a03      	ldr	r2, [pc, #12]	@ (8004ebc <HAL_RCC_OscConfig+0x504>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eb8:	e014      	b.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	4b9c      	ldr	r3, [pc, #624]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eca:	4a9b      	ldr	r2, [pc, #620]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ed4:	4b98      	ldr	r3, [pc, #608]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eda:	4a97      	ldr	r2, [pc, #604]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d016      	beq.n	8004f1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eec:	f7fe fbc8 	bl	8003680 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef4:	f7fe fbc4 	bl	8003680 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e12a      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0a:	4b8b      	ldr	r3, [pc, #556]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ed      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x53c>
 8004f18:	e015      	b.n	8004f46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1a:	f7fe fbb1 	bl	8003680 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f20:	e00a      	b.n	8004f38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f22:	f7fe fbad 	bl	8003680 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e113      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f38:	4b7f      	ldr	r3, [pc, #508]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ed      	bne.n	8004f22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f46:	7ffb      	ldrb	r3, [r7, #31]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4c:	4b7a      	ldr	r3, [pc, #488]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f50:	4a79      	ldr	r2, [pc, #484]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80fe 	beq.w	800515e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	f040 80d0 	bne.w	800510c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f6c:	4b72      	ldr	r3, [pc, #456]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f003 0203 	and.w	r2, r3, #3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d130      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d127      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d11f      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fac:	2a07      	cmp	r2, #7
 8004fae:	bf14      	ite	ne
 8004fb0:	2201      	movne	r2, #1
 8004fb2:	2200      	moveq	r2, #0
 8004fb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d113      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d109      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d06e      	beq.n	80050c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b0c      	cmp	r3, #12
 8004fe6:	d069      	beq.n	80050bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fe8:	4b53      	ldr	r3, [pc, #332]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ff4:	4b50      	ldr	r3, [pc, #320]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0ad      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005004:	4b4c      	ldr	r3, [pc, #304]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a4b      	ldr	r2, [pc, #300]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 800500a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800500e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005010:	f7fe fb36 	bl	8003680 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fe fb32 	bl	8003680 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e09a      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800502a:	4b43      	ldr	r3, [pc, #268]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005036:	4b40      	ldr	r3, [pc, #256]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	4b40      	ldr	r3, [pc, #256]	@ (800513c <HAL_RCC_OscConfig+0x784>)
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005046:	3a01      	subs	r2, #1
 8005048:	0112      	lsls	r2, r2, #4
 800504a:	4311      	orrs	r1, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005050:	0212      	lsls	r2, r2, #8
 8005052:	4311      	orrs	r1, r2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005058:	0852      	lsrs	r2, r2, #1
 800505a:	3a01      	subs	r2, #1
 800505c:	0552      	lsls	r2, r2, #21
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005064:	0852      	lsrs	r2, r2, #1
 8005066:	3a01      	subs	r2, #1
 8005068:	0652      	lsls	r2, r2, #25
 800506a:	4311      	orrs	r1, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005070:	0912      	lsrs	r2, r2, #4
 8005072:	0452      	lsls	r2, r2, #17
 8005074:	430a      	orrs	r2, r1
 8005076:	4930      	ldr	r1, [pc, #192]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8005078:	4313      	orrs	r3, r2
 800507a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800507c:	4b2e      	ldr	r3, [pc, #184]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a2d      	ldr	r2, [pc, #180]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8005082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005086:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005088:	4b2b      	ldr	r3, [pc, #172]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4a2a      	ldr	r2, [pc, #168]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 800508e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005092:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005094:	f7fe faf4 	bl	8003680 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509c:	f7fe faf0 	bl	8003680 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e058      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ae:	4b22      	ldr	r3, [pc, #136]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050ba:	e050      	b.n	800515e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e04f      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d148      	bne.n	800515e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a19      	ldr	r2, [pc, #100]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 80050d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050d8:	4b17      	ldr	r3, [pc, #92]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 80050de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050e4:	f7fe facc 	bl	8003680 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fe fac8 	bl	8003680 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e030      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x734>
 800510a:	e028      	b.n	800515e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b0c      	cmp	r3, #12
 8005110:	d023      	beq.n	800515a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005112:	4b09      	ldr	r3, [pc, #36]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a08      	ldr	r2, [pc, #32]	@ (8005138 <HAL_RCC_OscConfig+0x780>)
 8005118:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800511c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511e:	f7fe faaf 	bl	8003680 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005124:	e00c      	b.n	8005140 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005126:	f7fe faab 	bl	8003680 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d905      	bls.n	8005140 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e013      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
 8005138:	40021000 	.word	0x40021000
 800513c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005140:	4b09      	ldr	r3, [pc, #36]	@ (8005168 <HAL_RCC_OscConfig+0x7b0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1ec      	bne.n	8005126 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800514c:	4b06      	ldr	r3, [pc, #24]	@ (8005168 <HAL_RCC_OscConfig+0x7b0>)
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	4905      	ldr	r1, [pc, #20]	@ (8005168 <HAL_RCC_OscConfig+0x7b0>)
 8005152:	4b06      	ldr	r3, [pc, #24]	@ (800516c <HAL_RCC_OscConfig+0x7b4>)
 8005154:	4013      	ands	r3, r2
 8005156:	60cb      	str	r3, [r1, #12]
 8005158:	e001      	b.n	800515e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000
 800516c:	feeefffc 	.word	0xfeeefffc

08005170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0e7      	b.n	8005354 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b75      	ldr	r3, [pc, #468]	@ (800535c <HAL_RCC_ClockConfig+0x1ec>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d910      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b72      	ldr	r3, [pc, #456]	@ (800535c <HAL_RCC_ClockConfig+0x1ec>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 0207 	bic.w	r2, r3, #7
 800519a:	4970      	ldr	r1, [pc, #448]	@ (800535c <HAL_RCC_ClockConfig+0x1ec>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b6e      	ldr	r3, [pc, #440]	@ (800535c <HAL_RCC_ClockConfig+0x1ec>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0cf      	b.n	8005354 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d010      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	4b66      	ldr	r3, [pc, #408]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d908      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d0:	4b63      	ldr	r3, [pc, #396]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	4960      	ldr	r1, [pc, #384]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d04c      	beq.n	8005288 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d107      	bne.n	8005206 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f6:	4b5a      	ldr	r3, [pc, #360]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d121      	bne.n	8005246 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0a6      	b.n	8005354 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800520e:	4b54      	ldr	r3, [pc, #336]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d115      	bne.n	8005246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e09a      	b.n	8005354 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d107      	bne.n	8005236 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005226:	4b4e      	ldr	r3, [pc, #312]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e08e      	b.n	8005354 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005236:	4b4a      	ldr	r3, [pc, #296]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e086      	b.n	8005354 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005246:	4b46      	ldr	r3, [pc, #280]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f023 0203 	bic.w	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4943      	ldr	r1, [pc, #268]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 8005254:	4313      	orrs	r3, r2
 8005256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005258:	f7fe fa12 	bl	8003680 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	e00a      	b.n	8005276 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005260:	f7fe fa0e 	bl	8003680 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e06e      	b.n	8005354 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005276:	4b3a      	ldr	r3, [pc, #232]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 020c 	and.w	r2, r3, #12
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	429a      	cmp	r2, r3
 8005286:	d1eb      	bne.n	8005260 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d010      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	4b31      	ldr	r3, [pc, #196]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d208      	bcs.n	80052b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	492b      	ldr	r1, [pc, #172]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052b6:	4b29      	ldr	r3, [pc, #164]	@ (800535c <HAL_RCC_ClockConfig+0x1ec>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d210      	bcs.n	80052e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c4:	4b25      	ldr	r3, [pc, #148]	@ (800535c <HAL_RCC_ClockConfig+0x1ec>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f023 0207 	bic.w	r2, r3, #7
 80052cc:	4923      	ldr	r1, [pc, #140]	@ (800535c <HAL_RCC_ClockConfig+0x1ec>)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d4:	4b21      	ldr	r3, [pc, #132]	@ (800535c <HAL_RCC_ClockConfig+0x1ec>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d001      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e036      	b.n	8005354 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	4918      	ldr	r1, [pc, #96]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 8005300:	4313      	orrs	r3, r2
 8005302:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005310:	4b13      	ldr	r3, [pc, #76]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	4910      	ldr	r1, [pc, #64]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005324:	f000 f824 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 8005328:	4602      	mov	r2, r0
 800532a:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <HAL_RCC_ClockConfig+0x1f0>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	490b      	ldr	r1, [pc, #44]	@ (8005364 <HAL_RCC_ClockConfig+0x1f4>)
 8005336:	5ccb      	ldrb	r3, [r1, r3]
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	fa22 f303 	lsr.w	r3, r2, r3
 8005340:	4a09      	ldr	r2, [pc, #36]	@ (8005368 <HAL_RCC_ClockConfig+0x1f8>)
 8005342:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005344:	4b09      	ldr	r3, [pc, #36]	@ (800536c <HAL_RCC_ClockConfig+0x1fc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe f949 	bl	80035e0 <HAL_InitTick>
 800534e:	4603      	mov	r3, r0
 8005350:	72fb      	strb	r3, [r7, #11]

  return status;
 8005352:	7afb      	ldrb	r3, [r7, #11]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40022000 	.word	0x40022000
 8005360:	40021000 	.word	0x40021000
 8005364:	0800d394 	.word	0x0800d394
 8005368:	20000048 	.word	0x20000048
 800536c:	2000004c 	.word	0x2000004c

08005370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005370:	b480      	push	{r7}
 8005372:	b089      	sub	sp, #36	@ 0x24
 8005374:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537e:	4b3e      	ldr	r3, [pc, #248]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x108>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005388:	4b3b      	ldr	r3, [pc, #236]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x108>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b0c      	cmp	r3, #12
 800539c:	d121      	bne.n	80053e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d11e      	bne.n	80053e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053a4:	4b34      	ldr	r3, [pc, #208]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d107      	bne.n	80053c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053b0:	4b31      	ldr	r3, [pc, #196]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x108>)
 80053b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053b6:	0a1b      	lsrs	r3, r3, #8
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e005      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053cc:	4a2b      	ldr	r2, [pc, #172]	@ (800547c <HAL_RCC_GetSysClockFreq+0x10c>)
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10d      	bne.n	80053f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d102      	bne.n	80053ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053e8:	4b25      	ldr	r3, [pc, #148]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x110>)
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	e004      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053f4:	4b23      	ldr	r3, [pc, #140]	@ (8005484 <HAL_RCC_GetSysClockFreq+0x114>)
 80053f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d134      	bne.n	8005468 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x108>)
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d003      	beq.n	8005416 <HAL_RCC_GetSysClockFreq+0xa6>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d003      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0xac>
 8005414:	e005      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005416:	4b1a      	ldr	r3, [pc, #104]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x110>)
 8005418:	617b      	str	r3, [r7, #20]
      break;
 800541a:	e005      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800541c:	4b19      	ldr	r3, [pc, #100]	@ (8005484 <HAL_RCC_GetSysClockFreq+0x114>)
 800541e:	617b      	str	r3, [r7, #20]
      break;
 8005420:	e002      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	617b      	str	r3, [r7, #20]
      break;
 8005426:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005428:	4b13      	ldr	r3, [pc, #76]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x108>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	3301      	adds	r3, #1
 8005434:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005436:	4b10      	ldr	r3, [pc, #64]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x108>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	fb03 f202 	mul.w	r2, r3, r2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	fbb2 f3f3 	udiv	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800544e:	4b0a      	ldr	r3, [pc, #40]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x108>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	0e5b      	lsrs	r3, r3, #25
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	3301      	adds	r3, #1
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005468:	69bb      	ldr	r3, [r7, #24]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3724      	adds	r7, #36	@ 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40021000 	.word	0x40021000
 800547c:	0800d3ac 	.word	0x0800d3ac
 8005480:	00f42400 	.word	0x00f42400
 8005484:	007a1200 	.word	0x007a1200

08005488 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800548c:	4b03      	ldr	r3, [pc, #12]	@ (800549c <HAL_RCC_GetHCLKFreq+0x14>)
 800548e:	681b      	ldr	r3, [r3, #0]
}
 8005490:	4618      	mov	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000048 	.word	0x20000048

080054a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054a4:	f7ff fff0 	bl	8005488 <HAL_RCC_GetHCLKFreq>
 80054a8:	4602      	mov	r2, r0
 80054aa:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	4904      	ldr	r1, [pc, #16]	@ (80054c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054b6:	5ccb      	ldrb	r3, [r1, r3]
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40021000 	.word	0x40021000
 80054c8:	0800d3a4 	.word	0x0800d3a4

080054cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054d0:	f7ff ffda 	bl	8005488 <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	0adb      	lsrs	r3, r3, #11
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4904      	ldr	r1, [pc, #16]	@ (80054f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40021000 	.word	0x40021000
 80054f4:	0800d3a4 	.word	0x0800d3a4

080054f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005504:	4b2a      	ldr	r3, [pc, #168]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005510:	f7ff fa44 	bl	800499c <HAL_PWREx_GetVoltageRange>
 8005514:	6178      	str	r0, [r7, #20]
 8005516:	e014      	b.n	8005542 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005518:	4b25      	ldr	r3, [pc, #148]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551c:	4a24      	ldr	r2, [pc, #144]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005522:	6593      	str	r3, [r2, #88]	@ 0x58
 8005524:	4b22      	ldr	r3, [pc, #136]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005530:	f7ff fa34 	bl	800499c <HAL_PWREx_GetVoltageRange>
 8005534:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005536:	4b1e      	ldr	r3, [pc, #120]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553a:	4a1d      	ldr	r2, [pc, #116]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800553c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005540:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005548:	d10b      	bne.n	8005562 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b80      	cmp	r3, #128	@ 0x80
 800554e:	d919      	bls.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2ba0      	cmp	r3, #160	@ 0xa0
 8005554:	d902      	bls.n	800555c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005556:	2302      	movs	r3, #2
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	e013      	b.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800555c:	2301      	movs	r3, #1
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	e010      	b.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b80      	cmp	r3, #128	@ 0x80
 8005566:	d902      	bls.n	800556e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005568:	2303      	movs	r3, #3
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	e00a      	b.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b80      	cmp	r3, #128	@ 0x80
 8005572:	d102      	bne.n	800557a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005574:	2302      	movs	r3, #2
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	e004      	b.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b70      	cmp	r3, #112	@ 0x70
 800557e:	d101      	bne.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005580:	2301      	movs	r3, #1
 8005582:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005584:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f023 0207 	bic.w	r2, r3, #7
 800558c:	4909      	ldr	r1, [pc, #36]	@ (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005594:	4b07      	ldr	r3, [pc, #28]	@ (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d001      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40021000 	.word	0x40021000
 80055b4:	40022000 	.word	0x40022000

080055b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e0be      	b.n	8005748 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055da:	d009      	beq.n	80055f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	61da      	str	r2, [r3, #28]
 80055e2:	e005      	b.n	80055f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f8cb 	bl	80057a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005620:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800562a:	d902      	bls.n	8005632 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e002      	b.n	8005638 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005632:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005636:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005640:	d007      	beq.n	8005652 <HAL_SPI_Init+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800564a:	d002      	beq.n	8005652 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005694:	ea42 0103 	orr.w	r1, r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056b0:	d11b      	bne.n	80056ea <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056c2:	d903      	bls.n	80056cc <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80056ca:	e002      	b.n	80056d2 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d107      	bne.n	80056ea <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	f003 0204 	and.w	r2, r3, #4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005710:	ea42 0103 	orr.w	r1, r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800572a:	d105      	bne.n	8005738 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	b292      	uxth	r2, r2
 8005736:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e01a      	b.n	8005798 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005778:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f81a 	bl	80057b4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08a      	sub	sp, #40	@ 0x28
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4613      	mov	r3, r2
 80057d6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d001      	beq.n	80057f0 <HAL_SPI_Receive+0x28>
  {
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
 80057ee:	e1e0      	b.n	8005bb2 <HAL_SPI_Receive+0x3ea>
  }

  if ((pData == NULL) || (Size == 0U))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_SPI_Receive+0x34>
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_SPI_Receive+0x38>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e1d8      	b.n	8005bb2 <HAL_SPI_Receive+0x3ea>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005808:	d112      	bne.n	8005830 <HAL_SPI_Receive+0x68>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10e      	bne.n	8005830 <HAL_SPI_Receive+0x68>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2204      	movs	r2, #4
 8005816:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	4613      	mov	r3, r2
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f9c7 	bl	8005bba <HAL_SPI_TransmitReceive>
 800582c:	4603      	mov	r3, r0
 800582e:	e1c0      	b.n	8005bb2 <HAL_SPI_Receive+0x3ea>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005830:	f7fd ff26 	bl	8003680 <HAL_GetTick>
 8005834:	61f8      	str	r0, [r7, #28]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_SPI_Receive+0x7c>
 8005840:	2302      	movs	r3, #2
 8005842:	e1b6      	b.n	8005bb2 <HAL_SPI_Receive+0x3ea>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2204      	movs	r2, #4
 8005850:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	88fa      	ldrh	r2, [r7, #6]
 8005864:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	88fa      	ldrh	r2, [r7, #6]
 800586c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005896:	d118      	bne.n	80058ca <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058b6:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058d2:	d908      	bls.n	80058e6 <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058e2:	605a      	str	r2, [r3, #4]
 80058e4:	e007      	b.n	80058f6 <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058fe:	d10f      	bne.n	8005920 <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800590e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800591e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592a:	2b40      	cmp	r3, #64	@ 0x40
 800592c:	d007      	beq.n	800593e <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800593c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005946:	d875      	bhi.n	8005a34 <HAL_SPI_Receive+0x26c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005948:	e037      	b.n	80059ba <HAL_SPI_Receive+0x1f2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d117      	bne.n	8005988 <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f103 020c 	add.w	r2, r3, #12
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005986:	e018      	b.n	80059ba <HAL_SPI_Receive+0x1f2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005988:	f7fd fe7a 	bl	8003680 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d803      	bhi.n	80059a0 <HAL_SPI_Receive+0x1d8>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d102      	bne.n	80059a6 <HAL_SPI_Receive+0x1de>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <HAL_SPI_Receive+0x1f2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e0fb      	b.n	8005bb2 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1c1      	bne.n	800594a <HAL_SPI_Receive+0x182>
 80059c6:	e03b      	b.n	8005a40 <HAL_SPI_Receive+0x278>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d115      	bne.n	8005a02 <HAL_SPI_Receive+0x23a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	b292      	uxth	r2, r2
 80059e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e8:	1c9a      	adds	r2, r3, #2
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005a00:	e018      	b.n	8005a34 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a02:	f7fd fe3d 	bl	8003680 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d803      	bhi.n	8005a1a <HAL_SPI_Receive+0x252>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d102      	bne.n	8005a20 <HAL_SPI_Receive+0x258>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d109      	bne.n	8005a34 <HAL_SPI_Receive+0x26c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e0be      	b.n	8005bb2 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1c3      	bne.n	80059c8 <HAL_SPI_Receive+0x200>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a48:	f040 8087 	bne.w	8005b5a <HAL_SPI_Receive+0x392>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a5a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2201      	movs	r2, #1
 8005a64:	2101      	movs	r1, #1
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f001 fa18 	bl	8006e9c <SPI_WaitFlagStateUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      __HAL_UNLOCK(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e099      	b.n	8005bb2 <HAL_SPI_Receive+0x3ea>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a86:	d907      	bls.n	8005a98 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	b292      	uxth	r2, r2
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	e008      	b.n	8005aaa <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f103 020c 	add.w	r2, r3, #12
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa4:	7812      	ldrb	r2, [r2, #0]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f001 f9f1 	bl	8006e9c <SPI_WaitFlagStateUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00f      	beq.n	8005ae0 <HAL_SPI_Receive+0x318>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ac4:	f043 0202 	orr.w	r2, r3, #2
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e068      	b.n	8005bb2 <HAL_SPI_Receive+0x3ea>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005ae8:	d105      	bne.n	8005af6 <HAL_SPI_Receive+0x32e>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	e031      	b.n	8005b5a <HAL_SPI_Receive+0x392>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b06:	7cfb      	ldrb	r3, [r7, #19]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b10:	d123      	bne.n	8005b5a <HAL_SPI_Receive+0x392>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d11f      	bne.n	8005b5a <HAL_SPI_Receive+0x392>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2201      	movs	r2, #1
 8005b22:	2101      	movs	r1, #1
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f001 f9b9 	bl	8006e9c <SPI_WaitFlagStateUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00f      	beq.n	8005b50 <HAL_SPI_Receive+0x388>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b34:	f043 0202 	orr.w	r2, r3, #2
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e030      	b.n	8005bb2 <HAL_SPI_Receive+0x3ea>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005b58:	7cfb      	ldrb	r3, [r7, #19]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f001 faba 	bl	80070d8 <SPI_EndRxTransaction>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_SPI_Receive+0x3a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	d10a      	bne.n	8005b94 <HAL_SPI_Receive+0x3cc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b82:	f043 0202 	orr.w	r2, r3, #2
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005b92:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <HAL_SPI_Receive+0x3e8>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <HAL_SPI_Receive+0x3ea>
  }
  else
  {
    return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
  }
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b090      	sub	sp, #64	@ 0x40
 8005bbe:	af02      	add	r7, sp, #8
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bd4:	f7fd fd54 	bl	8003680 <HAL_GetTick>
 8005bd8:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005be0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tmp_mode            = hspi->Init.Mode;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  initial_TxXferCount = Size;
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 8005bee:	887b      	ldrh	r3, [r7, #2]
 8005bf0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	623b      	str	r3, [r7, #32]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	61fb      	str	r3, [r7, #28]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d00d      	beq.n	8005c26 <HAL_SPI_TransmitReceive+0x6c>
 8005c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c10:	d107      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x68>
 8005c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d001      	beq.n	8005c26 <HAL_SPI_TransmitReceive+0x6c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
 8005c24:	e30f      	b.n	8006246 <HAL_SPI_TransmitReceive+0x68c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0x7e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0x7e>
 8005c32:	887b      	ldrh	r3, [r7, #2]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e304      	b.n	8006246 <HAL_SPI_TransmitReceive+0x68c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_SPI_TransmitReceive+0x90>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e2fd      	b.n	8006246 <HAL_SPI_TransmitReceive+0x68c>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d003      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2205      	movs	r2, #5
 8005c62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	887a      	ldrh	r2, [r7, #2]
 8005c76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	887a      	ldrh	r2, [r7, #2]
 8005c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	887a      	ldrh	r2, [r7, #2]
 8005c8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	887a      	ldrh	r2, [r7, #2]
 8005c92:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca8:	d10f      	bne.n	8005cca <HAL_SPI_TransmitReceive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cc8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cd2:	d802      	bhi.n	8005cda <HAL_SPI_TransmitReceive+0x120>
 8005cd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d908      	bls.n	8005cec <HAL_SPI_TransmitReceive+0x132>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	e007      	b.n	8005cfc <HAL_SPI_TransmitReceive+0x142>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cfa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d06:	2b40      	cmp	r3, #64	@ 0x40
 8005d08:	d007      	beq.n	8005d1a <HAL_SPI_TransmitReceive+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d22:	f240 80d0 	bls.w	8005ec6 <HAL_SPI_TransmitReceive+0x30c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x17c>
 8005d2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	f040 80ba 	bne.w	8005eaa <HAL_SPI_TransmitReceive+0x2f0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3a:	881a      	ldrh	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d46:	1c9a      	adds	r2, r3, #2
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f040 80a2 	bne.w	8005eaa <HAL_SPI_TransmitReceive+0x2f0>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6e:	f040 809c 	bne.w	8005eaa <HAL_SPI_TransmitReceive+0x2f0>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10c      	bne.n	8005d96 <HAL_SPI_TransmitReceive+0x1dc>
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d94:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005da4:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da6:	e080      	b.n	8005eaa <HAL_SPI_TransmitReceive+0x2f0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d13f      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x27c>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d03a      	beq.n	8005e36 <HAL_SPI_TransmitReceive+0x27c>
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d137      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x27c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dca:	881a      	ldrh	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd6:	1c9a      	adds	r2, r3, #2
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d11e      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x27c>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e00:	d119      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x27c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10c      	bne.n	8005e26 <HAL_SPI_TransmitReceive+0x26c>
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_SPI_TransmitReceive+0x26c>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e24:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e34:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d11c      	bne.n	8005e7e <HAL_SPI_TransmitReceive+0x2c4>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <HAL_SPI_TransmitReceive+0x2c4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	b292      	uxth	r2, r2
 8005e5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	1c9a      	adds	r2, r3, #2
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e7e:	f7fd fbff 	bl	8003680 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d80d      	bhi.n	8005eaa <HAL_SPI_TransmitReceive+0x2f0>
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d009      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e1cd      	b.n	8006246 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f47f af79 	bne.w	8005da8 <HAL_SPI_TransmitReceive+0x1ee>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f47f af72 	bne.w	8005da8 <HAL_SPI_TransmitReceive+0x1ee>
 8005ec4:	e12f      	b.n	8006126 <HAL_SPI_TransmitReceive+0x56c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_SPI_TransmitReceive+0x31c>
 8005ece:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f040 811b 	bne.w	800610c <HAL_SPI_TransmitReceive+0x552>
    {
      if (hspi->TxXferCount > 1U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d912      	bls.n	8005f06 <HAL_SPI_TransmitReceive+0x34c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	1c9a      	adds	r2, r3, #2
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b02      	subs	r3, #2
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f04:	e102      	b.n	800610c <HAL_SPI_TransmitReceive+0x552>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	330c      	adds	r3, #12
 8005f10:	7812      	ldrb	r2, [r2, #0]
 8005f12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 80ea 	bne.w	800610c <HAL_SPI_TransmitReceive+0x552>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f40:	f040 80e4 	bne.w	800610c <HAL_SPI_TransmitReceive+0x552>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10c      	bne.n	8005f68 <HAL_SPI_TransmitReceive+0x3ae>
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_SPI_TransmitReceive+0x3ae>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f66:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f76:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f78:	e0c8      	b.n	800610c <HAL_SPI_TransmitReceive+0x552>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d158      	bne.n	800603a <HAL_SPI_TransmitReceive+0x480>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d053      	beq.n	800603a <HAL_SPI_TransmitReceive+0x480>
 8005f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d150      	bne.n	800603a <HAL_SPI_TransmitReceive+0x480>
      {
        if (hspi->TxXferCount > 1U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d912      	bls.n	8005fc8 <HAL_SPI_TransmitReceive+0x40e>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa6:	881a      	ldrh	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb2:	1c9a      	adds	r2, r3, #2
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b02      	subs	r3, #2
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fc6:	e012      	b.n	8005fee <HAL_SPI_TransmitReceive+0x434>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	7812      	ldrb	r2, [r2, #0]
 8005fd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d11e      	bne.n	800603a <HAL_SPI_TransmitReceive+0x480>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006004:	d119      	bne.n	800603a <HAL_SPI_TransmitReceive+0x480>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10c      	bne.n	800602a <HAL_SPI_TransmitReceive+0x470>
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <HAL_SPI_TransmitReceive+0x470>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006028:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006038:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b01      	cmp	r3, #1
 8006046:	d148      	bne.n	80060da <HAL_SPI_TransmitReceive+0x520>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d042      	beq.n	80060da <HAL_SPI_TransmitReceive+0x520>
      {
        if (hspi->RxXferCount > 1U)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b01      	cmp	r3, #1
 800605e:	d923      	bls.n	80060a8 <HAL_SPI_TransmitReceive+0x4ee>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606a:	b292      	uxth	r2, r2
 800606c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	1c9a      	adds	r2, r3, #2
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b02      	subs	r3, #2
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	d81f      	bhi.n	80060d6 <HAL_SPI_TransmitReceive+0x51c>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	e016      	b.n	80060d6 <HAL_SPI_TransmitReceive+0x51c>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f103 020c 	add.w	r2, r3, #12
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b4:	7812      	ldrb	r2, [r2, #0]
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060d6:	2301      	movs	r3, #1
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060da:	f7fd fad1 	bl	8003680 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d803      	bhi.n	80060f2 <HAL_SPI_TransmitReceive+0x538>
 80060ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d102      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x53e>
 80060f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d109      	bne.n	800610c <HAL_SPI_TransmitReceive+0x552>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e09c      	b.n	8006246 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	f47f af31 	bne.w	8005f7a <HAL_SPI_TransmitReceive+0x3c0>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	f47f af2a 	bne.w	8005f7a <HAL_SPI_TransmitReceive+0x3c0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800612e:	d152      	bne.n	80061d6 <HAL_SPI_TransmitReceive+0x61c>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006136:	2201      	movs	r2, #1
 8006138:	2101      	movs	r1, #1
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 feae 	bl	8006e9c <SPI_WaitFlagStateUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00f      	beq.n	8006166 <HAL_SPI_TransmitReceive+0x5ac>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614a:	f043 0202 	orr.w	r2, r3, #2
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e06f      	b.n	8006246 <HAL_SPI_TransmitReceive+0x68c>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800616e:	d105      	bne.n	800617c <HAL_SPI_TransmitReceive+0x5c2>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	e02c      	b.n	80061d6 <HAL_SPI_TransmitReceive+0x61c>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800618c:	7cfb      	ldrb	r3, [r7, #19]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006192:	2b02      	cmp	r3, #2
 8006194:	d11f      	bne.n	80061d6 <HAL_SPI_TransmitReceive+0x61c>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800619c:	2201      	movs	r2, #1
 800619e:	2101      	movs	r1, #1
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fe7b 	bl	8006e9c <SPI_WaitFlagStateUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00f      	beq.n	80061cc <HAL_SPI_TransmitReceive+0x612>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b0:	f043 0202 	orr.w	r2, r3, #2
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e03c      	b.n	8006246 <HAL_SPI_TransmitReceive+0x68c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80061d4:	7cfb      	ldrb	r3, [r7, #19]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d110      	bne.n	8006206 <HAL_SPI_TransmitReceive+0x64c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e8:	f043 0202 	orr.w	r2, r3, #2
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80061f8:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e01f      	b.n	8006246 <HAL_SPI_TransmitReceive+0x68c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006208:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 ffbc 	bl	8007188 <SPI_EndRxTxTransaction>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x66e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e00e      	b.n	8006246 <HAL_SPI_TransmitReceive+0x68c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x68a>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_SPI_TransmitReceive+0x68c>
  }
  else
  {
    return HAL_OK;
 8006244:	2300      	movs	r3, #0
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	3738      	adds	r7, #56	@ 0x38
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	4613      	mov	r3, r2
 800625c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <HAL_SPI_Transmit_IT+0x1a>
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e082      	b.n	8006374 <HAL_SPI_Transmit_IT+0x124>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b01      	cmp	r3, #1
 8006278:	d001      	beq.n	800627e <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
 800627c:	e07a      	b.n	8006374 <HAL_SPI_Transmit_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_SPI_Transmit_IT+0x3c>
 8006288:	2302      	movs	r3, #2
 800628a:	e073      	b.n	8006374 <HAL_SPI_Transmit_IT+0x124>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2203      	movs	r2, #3
 8006298:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	88fa      	ldrh	r2, [r7, #6]
 80062b2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062d8:	d903      	bls.n	80062e2 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4a28      	ldr	r2, [pc, #160]	@ (8006380 <HAL_SPI_Transmit_IT+0x130>)
 80062de:	651a      	str	r2, [r3, #80]	@ 0x50
 80062e0:	e002      	b.n	80062e8 <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a27      	ldr	r2, [pc, #156]	@ (8006384 <HAL_SPI_Transmit_IT+0x134>)
 80062e6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062f0:	d10f      	bne.n	8006312 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006300:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006310:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631a:	d10f      	bne.n	800633c <HAL_SPI_Transmit_IT+0xec>
  {
    SPI_RESET_CRC(hspi);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800633a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006346:	2b40      	cmp	r3, #64	@ 0x40
 8006348:	d007      	beq.n	800635a <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006358:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006370:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	08006e3d 	.word	0x08006e3d
 8006384:	08006ddd 	.word	0x08006ddd

08006388 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d001      	beq.n	80063a6 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
 80063a4:	e0ba      	b.n	800651c <HAL_SPI_Receive_IT+0x194>
  }

  if ((pData == NULL) || (Size == 0U))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_SPI_Receive_IT+0x2a>
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0b2      	b.n	800651c <HAL_SPI_Receive_IT+0x194>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d110      	bne.n	80063e0 <HAL_SPI_Receive_IT+0x58>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c6:	d10b      	bne.n	80063e0 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2204      	movs	r2, #4
 80063cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80063d0:	88fb      	ldrh	r3, [r7, #6]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 f8a8 	bl	800652c <HAL_SPI_TransmitReceive_IT>
 80063dc:	4603      	mov	r3, r0
 80063de:	e09d      	b.n	800651c <HAL_SPI_Receive_IT+0x194>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_SPI_Receive_IT+0x66>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e096      	b.n	800651c <HAL_SPI_Receive_IT+0x194>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2204      	movs	r2, #4
 80063fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	88fa      	ldrh	r2, [r7, #6]
 800640e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800643a:	d90b      	bls.n	8006454 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800644a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a35      	ldr	r2, [pc, #212]	@ (8006524 <HAL_SPI_Receive_IT+0x19c>)
 8006450:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006452:	e00a      	b.n	800646a <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006462:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4a30      	ldr	r2, [pc, #192]	@ (8006528 <HAL_SPI_Receive_IT+0x1a0>)
 8006468:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006472:	d10f      	bne.n	8006494 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006482:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006492:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800649c:	d11f      	bne.n	80064de <HAL_SPI_Receive_IT+0x156>
  {
    hspi->CRCSize = 1U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2201      	movs	r2, #1
 80064a2:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064ac:	d806      	bhi.n	80064bc <HAL_SPI_Receive_IT+0x134>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d102      	bne.n	80064bc <HAL_SPI_Receive_IT+0x134>
    {
      hspi->CRCSize = 2U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2202      	movs	r2, #2
 80064ba:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	e002      	b.n	80064e4 <HAL_SPI_Receive_IT+0x15c>
  }
  else
  {
    hspi->CRCSize = 0U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ee:	2b40      	cmp	r3, #64	@ 0x40
 80064f0:	d007      	beq.n	8006502 <HAL_SPI_Receive_IT+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006500:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006518:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	08006d55 	.word	0x08006d55
 8006528:	08006c95 	.word	0x08006c95

0800652c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006540:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d00c      	beq.n	8006568 <HAL_SPI_TransmitReceive_IT+0x3c>
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006554:	d106      	bne.n	8006564 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_SPI_TransmitReceive_IT+0x38>
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	2b04      	cmp	r3, #4
 8006562:	d001      	beq.n	8006568 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006564:	2302      	movs	r3, #2
 8006566:	e0a5      	b.n	80066b4 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <HAL_SPI_TransmitReceive_IT+0x4e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <HAL_SPI_TransmitReceive_IT+0x4e>
 8006574:	887b      	ldrh	r3, [r7, #2]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e09a      	b.n	80066b4 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_SPI_TransmitReceive_IT+0x60>
 8006588:	2302      	movs	r3, #2
 800658a:	e093      	b.n	80066b4 <HAL_SPI_TransmitReceive_IT+0x188>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b04      	cmp	r3, #4
 800659e:	d003      	beq.n	80065a8 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2205      	movs	r2, #5
 80065a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	887a      	ldrh	r2, [r7, #2]
 80065b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	887a      	ldrh	r2, [r7, #2]
 80065be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	887a      	ldrh	r2, [r7, #2]
 80065ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	887a      	ldrh	r2, [r7, #2]
 80065d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065de:	d906      	bls.n	80065ee <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4a37      	ldr	r2, [pc, #220]	@ (80066c0 <HAL_SPI_TransmitReceive_IT+0x194>)
 80065e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a36      	ldr	r2, [pc, #216]	@ (80066c4 <HAL_SPI_TransmitReceive_IT+0x198>)
 80065ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80065ec:	e005      	b.n	80065fa <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a35      	ldr	r2, [pc, #212]	@ (80066c8 <HAL_SPI_TransmitReceive_IT+0x19c>)
 80065f2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a35      	ldr	r2, [pc, #212]	@ (80066cc <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80065f8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006602:	d11f      	bne.n	8006644 <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006612:	d806      	bhi.n	8006622 <HAL_SPI_TransmitReceive_IT+0xf6>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006618:	2b02      	cmp	r3, #2
 800661a:	d102      	bne.n	8006622 <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2202      	movs	r2, #2
 8006620:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e002      	b.n	800664a <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006652:	d802      	bhi.n	800665a <HAL_SPI_TransmitReceive_IT+0x12e>
 8006654:	887b      	ldrh	r3, [r7, #2]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d908      	bls.n	800666c <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	e007      	b.n	800667c <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800667a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006686:	2b40      	cmp	r3, #64	@ 0x40
 8006688:	d007      	beq.n	800669a <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006698:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80066b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	08006b1d 	.word	0x08006b1d
 80066c4:	08006bcd 	.word	0x08006bcd
 80066c8:	08006925 	.word	0x08006925
 80066cc:	08006a61 	.word	0x08006a61

080066d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	099b      	lsrs	r3, r3, #6
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10f      	bne.n	8006714 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	099b      	lsrs	r3, r3, #6
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
    return;
 8006712:	e0d7      	b.n	80068c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	085b      	lsrs	r3, r3, #1
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <HAL_SPI_IRQHandler+0x66>
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	09db      	lsrs	r3, r3, #7
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d004      	beq.n	8006736 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	4798      	blx	r3
    return;
 8006734:	e0c6      	b.n	80068c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10c      	bne.n	800675c <HAL_SPI_IRQHandler+0x8c>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	099b      	lsrs	r3, r3, #6
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	0a1b      	lsrs	r3, r3, #8
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 80b4 	beq.w	80068c4 <HAL_SPI_IRQHandler+0x1f4>
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 80ad 	beq.w	80068c4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	099b      	lsrs	r3, r3, #6
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d023      	beq.n	80067be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b03      	cmp	r3, #3
 8006780:	d011      	beq.n	80067a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006786:	f043 0204 	orr.w	r2, r3, #4
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	e00b      	b.n	80067be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	693b      	ldr	r3, [r7, #16]
        return;
 80067bc:	e082      	b.n	80068c4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d014      	beq.n	80067f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ce:	f043 0201 	orr.w	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	0a1b      	lsrs	r3, r3, #8
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00c      	beq.n	800681a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006804:	f043 0208 	orr.w	r2, r3, #8
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800680c:	2300      	movs	r3, #0
 800680e:	60bb      	str	r3, [r7, #8]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	60bb      	str	r3, [r7, #8]
 8006818:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800681e:	2b00      	cmp	r3, #0
 8006820:	d04f      	beq.n	80068c2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006830:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <HAL_SPI_IRQHandler+0x17e>
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d034      	beq.n	80068b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0203 	bic.w	r2, r2, #3
 800685c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006862:	2b00      	cmp	r3, #0
 8006864:	d011      	beq.n	800688a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686a:	4a18      	ldr	r2, [pc, #96]	@ (80068cc <HAL_SPI_IRQHandler+0x1fc>)
 800686c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006872:	4618      	mov	r0, r3
 8006874:	f7fd f845 	bl	8003902 <HAL_DMA_Abort_IT>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006882:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688e:	2b00      	cmp	r3, #0
 8006890:	d016      	beq.n	80068c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006896:	4a0d      	ldr	r2, [pc, #52]	@ (80068cc <HAL_SPI_IRQHandler+0x1fc>)
 8006898:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd f82f 	bl	8003902 <HAL_DMA_Abort_IT>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80068b6:	e003      	b.n	80068c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f813 	bl	80068e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80068be:	e000      	b.n	80068c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80068c0:	bf00      	nop
    return;
 80068c2:	bf00      	nop
  }
}
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	080068f9 	.word	0x080068f9

080068d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006904:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7ff ffe5 	bl	80068e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	d923      	bls.n	8006980 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006942:	b292      	uxth	r2, r2
 8006944:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694a:	1c9a      	adds	r2, r3, #2
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b02      	subs	r3, #2
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b01      	cmp	r3, #1
 800696c:	d11f      	bne.n	80069ae <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800697c:	605a      	str	r2, [r3, #4]
 800697e:	e016      	b.n	80069ae <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f103 020c 	add.w	r2, r3, #12
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698c:	7812      	ldrb	r2, [r2, #0]
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d120      	bne.n	80069fc <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069c2:	d10b      	bne.n	80069dc <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069d2:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a0b      	ldr	r2, [pc, #44]	@ (8006a04 <SPI_2linesRxISR_8BIT+0xe0>)
 80069d8:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 80069da:	e00f      	b.n	80069fc <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80069ea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fc0c 	bl	8007214 <SPI_CloseRxTx_ISR>
    }
  }
}
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	08006a09 	.word	0x08006a09

08006a08 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006a24:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a2a:	1e5a      	subs	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10f      	bne.n	8006a58 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a46:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fbde 	bl	8007214 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006a58:	bf00      	nop
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d912      	bls.n	8006a98 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	881a      	ldrh	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a82:	1c9a      	adds	r2, r3, #2
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b02      	subs	r3, #2
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a96:	e012      	b.n	8006abe <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	7812      	ldrb	r2, [r2, #0]
 8006aa4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d126      	bne.n	8006b16 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad0:	d110      	bne.n	8006af4 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ae0:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006af0:	605a      	str	r2, [r3, #4]
      return;
 8006af2:	e010      	b.n	8006b16 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b02:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fb7f 	bl	8007214 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	b292      	uxth	r2, r2
 8006b30:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	1c9a      	adds	r2, r3, #2
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d118      	bne.n	8006b8c <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b62:	d103      	bne.n	8006b6c <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a0b      	ldr	r2, [pc, #44]	@ (8006b94 <SPI_2linesRxISR_16BIT+0x78>)
 8006b68:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006b6a:	e00f      	b.n	8006b8c <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b7a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fb44 	bl	8007214 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	08006b99 	.word	0x08006b99

08006b98 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006bac:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bbc:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fb28 	bl	8007214 <SPI_CloseRxTx_ISR>
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd8:	881a      	ldrh	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be4:	1c9a      	adds	r2, r3, #2
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d126      	bne.n	8006c50 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c0a:	d110      	bne.n	8006c2e <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c1a:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c2a:	605a      	str	r2, [r3, #4]
      return;
 8006c2c:	e010      	b.n	8006c50 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c3c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fae2 	bl	8007214 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	330c      	adds	r3, #12
 8006c68:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006c72:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c78:	1e5a      	subs	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d102      	bne.n	8006c8c <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fb20 	bl	80072cc <SPI_CloseRx_ISR>
  }
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f103 020c 	add.w	r2, r3, #12
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d10c      	bne.n	8006cf0 <SPI_RxISR_8BIT+0x5c>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cde:	d107      	bne.n	8006cf0 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006cee:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10b      	bne.n	8006d14 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d04:	d103      	bne.n	8006d0e <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a04      	ldr	r2, [pc, #16]	@ (8006d1c <SPI_RxISR_8BIT+0x88>)
 8006d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006d0c:	e002      	b.n	8006d14 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fadc 	bl	80072cc <SPI_CloseRx_ISR>
  }
}
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08006c57 	.word	0x08006c57

08006d20 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006d34:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d44:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fac0 	bl	80072cc <SPI_CloseRx_ISR>
}
 8006d4c:	bf00      	nop
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d66:	b292      	uxth	r2, r2
 8006d68:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	1c9a      	adds	r2, r3, #2
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d10c      	bne.n	8006dac <SPI_RxISR_16BIT+0x58>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d9a:	d107      	bne.n	8006dac <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006daa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10b      	bne.n	8006dd0 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dc0:	d103      	bne.n	8006dca <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a04      	ldr	r2, [pc, #16]	@ (8006dd8 <SPI_RxISR_16BIT+0x84>)
 8006dc6:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006dc8:	e002      	b.n	8006dd0 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa7e 	bl	80072cc <SPI_CloseRx_ISR>
  }
}
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	08006d21 	.word	0x08006d21

08006ddc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	330c      	adds	r3, #12
 8006dee:	7812      	ldrb	r2, [r2, #0]
 8006df0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10f      	bne.n	8006e34 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1c:	d107      	bne.n	8006e2e <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e2c:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa92 	bl	8007358 <SPI_CloseTx_ISR>
  }
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	881a      	ldrh	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e54:	1c9a      	adds	r2, r3, #2
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10f      	bne.n	8006e92 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e7a:	d107      	bne.n	8006e8c <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e8a:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fa63 	bl	8007358 <SPI_CloseTx_ISR>
  }
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006eac:	f7fc fbe8 	bl	8003680 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	4413      	add	r3, r2
 8006eba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ebc:	f7fc fbe0 	bl	8003680 <HAL_GetTick>
 8006ec0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ec2:	4b39      	ldr	r3, [pc, #228]	@ (8006fa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	015b      	lsls	r3, r3, #5
 8006ec8:	0d1b      	lsrs	r3, r3, #20
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
 8006ed0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ed2:	e054      	b.n	8006f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d050      	beq.n	8006f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006edc:	f7fc fbd0 	bl	8003680 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d902      	bls.n	8006ef2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d13d      	bne.n	8006f6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f0a:	d111      	bne.n	8006f30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f14:	d004      	beq.n	8006f20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1e:	d107      	bne.n	8006f30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f38:	d10f      	bne.n	8006f5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e017      	b.n	8006f9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4013      	ands	r3, r2
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	bf0c      	ite	eq
 8006f8e:	2301      	moveq	r3, #1
 8006f90:	2300      	movne	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d19b      	bne.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000048 	.word	0x20000048

08006fac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	@ 0x28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006fbe:	f7fc fb5f 	bl	8003680 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	4413      	add	r3, r2
 8006fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006fce:	f7fc fb57 	bl	8003680 <HAL_GetTick>
 8006fd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80070d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	00da      	lsls	r2, r3, #3
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	0d1b      	lsrs	r3, r3, #20
 8006fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
 8006ff2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ff4:	e060      	b.n	80070b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ffc:	d107      	bne.n	800700e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800700c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d050      	beq.n	80070b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007016:	f7fc fb33 	bl	8003680 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007022:	429a      	cmp	r2, r3
 8007024:	d902      	bls.n	800702c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	2b00      	cmp	r3, #0
 800702a:	d13d      	bne.n	80070a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800703a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007044:	d111      	bne.n	800706a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800704e:	d004      	beq.n	800705a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007058:	d107      	bne.n	800706a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007068:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007072:	d10f      	bne.n	8007094 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007092:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e010      	b.n	80070ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	4013      	ands	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d196      	bne.n	8006ff6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3728      	adds	r7, #40	@ 0x28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000048 	.word	0x20000048

080070d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070ec:	d111      	bne.n	8007112 <SPI_EndRxTransaction+0x3a>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f6:	d004      	beq.n	8007102 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007100:	d107      	bne.n	8007112 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007110:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2200      	movs	r2, #0
 800711a:	2180      	movs	r1, #128	@ 0x80
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7ff febd 	bl	8006e9c <SPI_WaitFlagStateUntilTimeout>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d007      	beq.n	8007138 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e023      	b.n	8007180 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007140:	d11d      	bne.n	800717e <SPI_EndRxTransaction+0xa6>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800714a:	d004      	beq.n	8007156 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007154:	d113      	bne.n	800717e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2200      	movs	r2, #0
 800715e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f7ff ff22 	bl	8006fac <SPI_WaitFifoStateUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007172:	f043 0220 	orr.w	r2, r3, #32
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e000      	b.n	8007180 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2200      	movs	r2, #0
 800719c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f7ff ff03 	bl	8006fac <SPI_WaitFifoStateUntilTimeout>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d007      	beq.n	80071bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071b0:	f043 0220 	orr.w	r2, r3, #32
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e027      	b.n	800720c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2200      	movs	r2, #0
 80071c4:	2180      	movs	r1, #128	@ 0x80
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f7ff fe68 	bl	8006e9c <SPI_WaitFlagStateUntilTimeout>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d007      	beq.n	80071e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d6:	f043 0220 	orr.w	r2, r3, #32
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e014      	b.n	800720c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7ff fedc 	bl	8006fac <SPI_WaitFifoStateUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d007      	beq.n	800720a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071fe:	f043 0220 	orr.w	r2, r3, #32
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e000      	b.n	800720c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800721c:	f7fc fa30 	bl	8003680 <HAL_GetTick>
 8007220:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0220 	bic.w	r2, r2, #32
 8007230:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	2164      	movs	r1, #100	@ 0x64
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff ffa6 	bl	8007188 <SPI_EndRxTxTransaction>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007246:	f043 0220 	orr.w	r2, r3, #32
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b10      	cmp	r3, #16
 800725a:	d112      	bne.n	8007282 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007268:	f043 0202 	orr.w	r2, r3, #2
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007278:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7ff fb32 	bl	80068e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007280:	e020      	b.n	80072c4 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007286:	2b00      	cmp	r3, #0
 8007288:	d115      	bne.n	80072b6 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b04      	cmp	r3, #4
 8007294:	d107      	bne.n	80072a6 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fb fc2c 	bl	8002afc <HAL_SPI_RxCpltCallback>
}
 80072a4:	e00e      	b.n	80072c4 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff fb0e 	bl	80068d0 <HAL_SPI_TxRxCpltCallback>
}
 80072b4:	e006      	b.n	80072c4 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff fb10 	bl	80068e4 <HAL_SPI_ErrorCallback>
}
 80072c4:	bf00      	nop
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80072e2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80072e4:	f7fc f9cc 	bl	8003680 <HAL_GetTick>
 80072e8:	4603      	mov	r3, r0
 80072ea:	461a      	mov	r2, r3
 80072ec:	2164      	movs	r1, #100	@ 0x64
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fef2 	bl	80070d8 <SPI_EndRxTransaction>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072fe:	f043 0220 	orr.w	r2, r3, #32
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b10      	cmp	r3, #16
 800731a:	d10e      	bne.n	800733a <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007320:	f043 0202 	orr.w	r2, r3, #2
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007330:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff fad6 	bl	80068e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007338:	e00a      	b.n	8007350 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fb fbda 	bl	8002afc <HAL_SPI_RxCpltCallback>
}
 8007348:	e002      	b.n	8007350 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff faca 	bl	80068e4 <HAL_SPI_ErrorCallback>
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007360:	f7fc f98e 	bl	8003680 <HAL_GetTick>
 8007364:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007374:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	2164      	movs	r1, #100	@ 0x64
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff ff04 	bl	8007188 <SPI_EndRxTxTransaction>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800738a:	f043 0220 	orr.w	r2, r3, #32
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10a      	bne.n	80073b0 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800739a:	2300      	movs	r3, #0
 800739c:	60bb      	str	r3, [r7, #8]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff fa8f 	bl	80068e4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80073c6:	e002      	b.n	80073ce <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7fb fbab 	bl	8002b24 <HAL_SPI_TxCpltCallback>
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e040      	b.n	800746a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d106      	bne.n	80073fe <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f83a 	bl	8007472 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2224      	movs	r2, #36	@ 0x24
 8007402:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0201 	bic.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fb73 	bl	8007b08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f8b8 	bl	8007598 <UART_SetConfig>
 8007428:	4603      	mov	r3, r0
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e01b      	b.n	800746a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007440:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007450:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 0201 	orr.w	r2, r2, #1
 8007460:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fbf2 	bl	8007c4c <UART_CheckIdleState>
 8007468:	4603      	mov	r3, r0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b08a      	sub	sp, #40	@ 0x28
 800748a:	af02      	add	r7, sp, #8
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	603b      	str	r3, [r7, #0]
 8007492:	4613      	mov	r3, r2
 8007494:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800749a:	2b20      	cmp	r3, #32
 800749c:	d177      	bne.n	800758e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <HAL_UART_Transmit+0x24>
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e070      	b.n	8007590 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2221      	movs	r2, #33	@ 0x21
 80074ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074bc:	f7fc f8e0 	bl	8003680 <HAL_GetTick>
 80074c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	88fa      	ldrh	r2, [r7, #6]
 80074c6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074da:	d108      	bne.n	80074ee <HAL_UART_Transmit+0x68>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	e003      	b.n	80074f6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074f6:	e02f      	b.n	8007558 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2200      	movs	r2, #0
 8007500:	2180      	movs	r1, #128	@ 0x80
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 fc4a 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2220      	movs	r2, #32
 8007512:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e03b      	b.n	8007590 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10b      	bne.n	8007536 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	881a      	ldrh	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800752a:	b292      	uxth	r2, r2
 800752c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	3302      	adds	r3, #2
 8007532:	61bb      	str	r3, [r7, #24]
 8007534:	e007      	b.n	8007546 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	3301      	adds	r3, #1
 8007544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1c9      	bne.n	80074f8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2200      	movs	r2, #0
 800756c:	2140      	movs	r1, #64	@ 0x40
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fc14 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d004      	beq.n	8007584 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e005      	b.n	8007590 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	e000      	b.n	8007590 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800758e:	2302      	movs	r3, #2
  }
}
 8007590:	4618      	mov	r0, r3
 8007592:	3720      	adds	r7, #32
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800759c:	b08a      	sub	sp, #40	@ 0x28
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	431a      	orrs	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	4313      	orrs	r3, r2
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4ba4      	ldr	r3, [pc, #656]	@ (8007858 <UART_SetConfig+0x2c0>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075d0:	430b      	orrs	r3, r1
 80075d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a99      	ldr	r2, [pc, #612]	@ (800785c <UART_SetConfig+0x2c4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d004      	beq.n	8007604 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007600:	4313      	orrs	r3, r2
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007614:	430a      	orrs	r2, r1
 8007616:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a90      	ldr	r2, [pc, #576]	@ (8007860 <UART_SetConfig+0x2c8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d126      	bne.n	8007670 <UART_SetConfig+0xd8>
 8007622:	4b90      	ldr	r3, [pc, #576]	@ (8007864 <UART_SetConfig+0x2cc>)
 8007624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007628:	f003 0303 	and.w	r3, r3, #3
 800762c:	2b03      	cmp	r3, #3
 800762e:	d81b      	bhi.n	8007668 <UART_SetConfig+0xd0>
 8007630:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <UART_SetConfig+0xa0>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	08007649 	.word	0x08007649
 800763c:	08007659 	.word	0x08007659
 8007640:	08007651 	.word	0x08007651
 8007644:	08007661 	.word	0x08007661
 8007648:	2301      	movs	r3, #1
 800764a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800764e:	e116      	b.n	800787e <UART_SetConfig+0x2e6>
 8007650:	2302      	movs	r3, #2
 8007652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007656:	e112      	b.n	800787e <UART_SetConfig+0x2e6>
 8007658:	2304      	movs	r3, #4
 800765a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800765e:	e10e      	b.n	800787e <UART_SetConfig+0x2e6>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007666:	e10a      	b.n	800787e <UART_SetConfig+0x2e6>
 8007668:	2310      	movs	r3, #16
 800766a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800766e:	e106      	b.n	800787e <UART_SetConfig+0x2e6>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a7c      	ldr	r2, [pc, #496]	@ (8007868 <UART_SetConfig+0x2d0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d138      	bne.n	80076ec <UART_SetConfig+0x154>
 800767a:	4b7a      	ldr	r3, [pc, #488]	@ (8007864 <UART_SetConfig+0x2cc>)
 800767c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007680:	f003 030c 	and.w	r3, r3, #12
 8007684:	2b0c      	cmp	r3, #12
 8007686:	d82d      	bhi.n	80076e4 <UART_SetConfig+0x14c>
 8007688:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <UART_SetConfig+0xf8>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076c5 	.word	0x080076c5
 8007694:	080076e5 	.word	0x080076e5
 8007698:	080076e5 	.word	0x080076e5
 800769c:	080076e5 	.word	0x080076e5
 80076a0:	080076d5 	.word	0x080076d5
 80076a4:	080076e5 	.word	0x080076e5
 80076a8:	080076e5 	.word	0x080076e5
 80076ac:	080076e5 	.word	0x080076e5
 80076b0:	080076cd 	.word	0x080076cd
 80076b4:	080076e5 	.word	0x080076e5
 80076b8:	080076e5 	.word	0x080076e5
 80076bc:	080076e5 	.word	0x080076e5
 80076c0:	080076dd 	.word	0x080076dd
 80076c4:	2300      	movs	r3, #0
 80076c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ca:	e0d8      	b.n	800787e <UART_SetConfig+0x2e6>
 80076cc:	2302      	movs	r3, #2
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076d2:	e0d4      	b.n	800787e <UART_SetConfig+0x2e6>
 80076d4:	2304      	movs	r3, #4
 80076d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076da:	e0d0      	b.n	800787e <UART_SetConfig+0x2e6>
 80076dc:	2308      	movs	r3, #8
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e2:	e0cc      	b.n	800787e <UART_SetConfig+0x2e6>
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ea:	e0c8      	b.n	800787e <UART_SetConfig+0x2e6>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a5e      	ldr	r2, [pc, #376]	@ (800786c <UART_SetConfig+0x2d4>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d125      	bne.n	8007742 <UART_SetConfig+0x1aa>
 80076f6:	4b5b      	ldr	r3, [pc, #364]	@ (8007864 <UART_SetConfig+0x2cc>)
 80076f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007700:	2b30      	cmp	r3, #48	@ 0x30
 8007702:	d016      	beq.n	8007732 <UART_SetConfig+0x19a>
 8007704:	2b30      	cmp	r3, #48	@ 0x30
 8007706:	d818      	bhi.n	800773a <UART_SetConfig+0x1a2>
 8007708:	2b20      	cmp	r3, #32
 800770a:	d00a      	beq.n	8007722 <UART_SetConfig+0x18a>
 800770c:	2b20      	cmp	r3, #32
 800770e:	d814      	bhi.n	800773a <UART_SetConfig+0x1a2>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <UART_SetConfig+0x182>
 8007714:	2b10      	cmp	r3, #16
 8007716:	d008      	beq.n	800772a <UART_SetConfig+0x192>
 8007718:	e00f      	b.n	800773a <UART_SetConfig+0x1a2>
 800771a:	2300      	movs	r3, #0
 800771c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007720:	e0ad      	b.n	800787e <UART_SetConfig+0x2e6>
 8007722:	2302      	movs	r3, #2
 8007724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007728:	e0a9      	b.n	800787e <UART_SetConfig+0x2e6>
 800772a:	2304      	movs	r3, #4
 800772c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007730:	e0a5      	b.n	800787e <UART_SetConfig+0x2e6>
 8007732:	2308      	movs	r3, #8
 8007734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007738:	e0a1      	b.n	800787e <UART_SetConfig+0x2e6>
 800773a:	2310      	movs	r3, #16
 800773c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007740:	e09d      	b.n	800787e <UART_SetConfig+0x2e6>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a4a      	ldr	r2, [pc, #296]	@ (8007870 <UART_SetConfig+0x2d8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d125      	bne.n	8007798 <UART_SetConfig+0x200>
 800774c:	4b45      	ldr	r3, [pc, #276]	@ (8007864 <UART_SetConfig+0x2cc>)
 800774e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007752:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007756:	2bc0      	cmp	r3, #192	@ 0xc0
 8007758:	d016      	beq.n	8007788 <UART_SetConfig+0x1f0>
 800775a:	2bc0      	cmp	r3, #192	@ 0xc0
 800775c:	d818      	bhi.n	8007790 <UART_SetConfig+0x1f8>
 800775e:	2b80      	cmp	r3, #128	@ 0x80
 8007760:	d00a      	beq.n	8007778 <UART_SetConfig+0x1e0>
 8007762:	2b80      	cmp	r3, #128	@ 0x80
 8007764:	d814      	bhi.n	8007790 <UART_SetConfig+0x1f8>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <UART_SetConfig+0x1d8>
 800776a:	2b40      	cmp	r3, #64	@ 0x40
 800776c:	d008      	beq.n	8007780 <UART_SetConfig+0x1e8>
 800776e:	e00f      	b.n	8007790 <UART_SetConfig+0x1f8>
 8007770:	2300      	movs	r3, #0
 8007772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007776:	e082      	b.n	800787e <UART_SetConfig+0x2e6>
 8007778:	2302      	movs	r3, #2
 800777a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800777e:	e07e      	b.n	800787e <UART_SetConfig+0x2e6>
 8007780:	2304      	movs	r3, #4
 8007782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007786:	e07a      	b.n	800787e <UART_SetConfig+0x2e6>
 8007788:	2308      	movs	r3, #8
 800778a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800778e:	e076      	b.n	800787e <UART_SetConfig+0x2e6>
 8007790:	2310      	movs	r3, #16
 8007792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007796:	e072      	b.n	800787e <UART_SetConfig+0x2e6>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a35      	ldr	r2, [pc, #212]	@ (8007874 <UART_SetConfig+0x2dc>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d12a      	bne.n	80077f8 <UART_SetConfig+0x260>
 80077a2:	4b30      	ldr	r3, [pc, #192]	@ (8007864 <UART_SetConfig+0x2cc>)
 80077a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b0:	d01a      	beq.n	80077e8 <UART_SetConfig+0x250>
 80077b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b6:	d81b      	bhi.n	80077f0 <UART_SetConfig+0x258>
 80077b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077bc:	d00c      	beq.n	80077d8 <UART_SetConfig+0x240>
 80077be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077c2:	d815      	bhi.n	80077f0 <UART_SetConfig+0x258>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <UART_SetConfig+0x238>
 80077c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077cc:	d008      	beq.n	80077e0 <UART_SetConfig+0x248>
 80077ce:	e00f      	b.n	80077f0 <UART_SetConfig+0x258>
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077d6:	e052      	b.n	800787e <UART_SetConfig+0x2e6>
 80077d8:	2302      	movs	r3, #2
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077de:	e04e      	b.n	800787e <UART_SetConfig+0x2e6>
 80077e0:	2304      	movs	r3, #4
 80077e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077e6:	e04a      	b.n	800787e <UART_SetConfig+0x2e6>
 80077e8:	2308      	movs	r3, #8
 80077ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ee:	e046      	b.n	800787e <UART_SetConfig+0x2e6>
 80077f0:	2310      	movs	r3, #16
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f6:	e042      	b.n	800787e <UART_SetConfig+0x2e6>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a17      	ldr	r2, [pc, #92]	@ (800785c <UART_SetConfig+0x2c4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d13a      	bne.n	8007878 <UART_SetConfig+0x2e0>
 8007802:	4b18      	ldr	r3, [pc, #96]	@ (8007864 <UART_SetConfig+0x2cc>)
 8007804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007808:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800780c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007810:	d01a      	beq.n	8007848 <UART_SetConfig+0x2b0>
 8007812:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007816:	d81b      	bhi.n	8007850 <UART_SetConfig+0x2b8>
 8007818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800781c:	d00c      	beq.n	8007838 <UART_SetConfig+0x2a0>
 800781e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007822:	d815      	bhi.n	8007850 <UART_SetConfig+0x2b8>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <UART_SetConfig+0x298>
 8007828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800782c:	d008      	beq.n	8007840 <UART_SetConfig+0x2a8>
 800782e:	e00f      	b.n	8007850 <UART_SetConfig+0x2b8>
 8007830:	2300      	movs	r3, #0
 8007832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007836:	e022      	b.n	800787e <UART_SetConfig+0x2e6>
 8007838:	2302      	movs	r3, #2
 800783a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800783e:	e01e      	b.n	800787e <UART_SetConfig+0x2e6>
 8007840:	2304      	movs	r3, #4
 8007842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007846:	e01a      	b.n	800787e <UART_SetConfig+0x2e6>
 8007848:	2308      	movs	r3, #8
 800784a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800784e:	e016      	b.n	800787e <UART_SetConfig+0x2e6>
 8007850:	2310      	movs	r3, #16
 8007852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007856:	e012      	b.n	800787e <UART_SetConfig+0x2e6>
 8007858:	efff69f3 	.word	0xefff69f3
 800785c:	40008000 	.word	0x40008000
 8007860:	40013800 	.word	0x40013800
 8007864:	40021000 	.word	0x40021000
 8007868:	40004400 	.word	0x40004400
 800786c:	40004800 	.word	0x40004800
 8007870:	40004c00 	.word	0x40004c00
 8007874:	40005000 	.word	0x40005000
 8007878:	2310      	movs	r3, #16
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a9f      	ldr	r2, [pc, #636]	@ (8007b00 <UART_SetConfig+0x568>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d17a      	bne.n	800797e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007888:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800788c:	2b08      	cmp	r3, #8
 800788e:	d824      	bhi.n	80078da <UART_SetConfig+0x342>
 8007890:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <UART_SetConfig+0x300>)
 8007892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007896:	bf00      	nop
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078db 	.word	0x080078db
 80078a0:	080078c5 	.word	0x080078c5
 80078a4:	080078db 	.word	0x080078db
 80078a8:	080078cb 	.word	0x080078cb
 80078ac:	080078db 	.word	0x080078db
 80078b0:	080078db 	.word	0x080078db
 80078b4:	080078db 	.word	0x080078db
 80078b8:	080078d3 	.word	0x080078d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078bc:	f7fd fdf0 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 80078c0:	61f8      	str	r0, [r7, #28]
        break;
 80078c2:	e010      	b.n	80078e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c4:	4b8f      	ldr	r3, [pc, #572]	@ (8007b04 <UART_SetConfig+0x56c>)
 80078c6:	61fb      	str	r3, [r7, #28]
        break;
 80078c8:	e00d      	b.n	80078e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ca:	f7fd fd51 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 80078ce:	61f8      	str	r0, [r7, #28]
        break;
 80078d0:	e009      	b.n	80078e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078d6:	61fb      	str	r3, [r7, #28]
        break;
 80078d8:	e005      	b.n	80078e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 80fb 	beq.w	8007ae4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	4413      	add	r3, r2
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d305      	bcc.n	800790a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	429a      	cmp	r2, r3
 8007908:	d903      	bls.n	8007912 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007910:	e0e8      	b.n	8007ae4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	2200      	movs	r2, #0
 8007916:	461c      	mov	r4, r3
 8007918:	4615      	mov	r5, r2
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	022b      	lsls	r3, r5, #8
 8007924:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007928:	0222      	lsls	r2, r4, #8
 800792a:	68f9      	ldr	r1, [r7, #12]
 800792c:	6849      	ldr	r1, [r1, #4]
 800792e:	0849      	lsrs	r1, r1, #1
 8007930:	2000      	movs	r0, #0
 8007932:	4688      	mov	r8, r1
 8007934:	4681      	mov	r9, r0
 8007936:	eb12 0a08 	adds.w	sl, r2, r8
 800793a:	eb43 0b09 	adc.w	fp, r3, r9
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	603b      	str	r3, [r7, #0]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794c:	4650      	mov	r0, sl
 800794e:	4659      	mov	r1, fp
 8007950:	f7f9 f99a 	bl	8000c88 <__aeabi_uldivmod>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4613      	mov	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007962:	d308      	bcc.n	8007976 <UART_SetConfig+0x3de>
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800796a:	d204      	bcs.n	8007976 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	60da      	str	r2, [r3, #12]
 8007974:	e0b6      	b.n	8007ae4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800797c:	e0b2      	b.n	8007ae4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007986:	d15e      	bne.n	8007a46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007988:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800798c:	2b08      	cmp	r3, #8
 800798e:	d828      	bhi.n	80079e2 <UART_SetConfig+0x44a>
 8007990:	a201      	add	r2, pc, #4	@ (adr r2, 8007998 <UART_SetConfig+0x400>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079bd 	.word	0x080079bd
 800799c:	080079c5 	.word	0x080079c5
 80079a0:	080079cd 	.word	0x080079cd
 80079a4:	080079e3 	.word	0x080079e3
 80079a8:	080079d3 	.word	0x080079d3
 80079ac:	080079e3 	.word	0x080079e3
 80079b0:	080079e3 	.word	0x080079e3
 80079b4:	080079e3 	.word	0x080079e3
 80079b8:	080079db 	.word	0x080079db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079bc:	f7fd fd70 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 80079c0:	61f8      	str	r0, [r7, #28]
        break;
 80079c2:	e014      	b.n	80079ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079c4:	f7fd fd82 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 80079c8:	61f8      	str	r0, [r7, #28]
        break;
 80079ca:	e010      	b.n	80079ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079cc:	4b4d      	ldr	r3, [pc, #308]	@ (8007b04 <UART_SetConfig+0x56c>)
 80079ce:	61fb      	str	r3, [r7, #28]
        break;
 80079d0:	e00d      	b.n	80079ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079d2:	f7fd fccd 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 80079d6:	61f8      	str	r0, [r7, #28]
        break;
 80079d8:	e009      	b.n	80079ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079de:	61fb      	str	r3, [r7, #28]
        break;
 80079e0:	e005      	b.n	80079ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80079ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d077      	beq.n	8007ae4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	005a      	lsls	r2, r3, #1
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	441a      	add	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b0f      	cmp	r3, #15
 8007a0e:	d916      	bls.n	8007a3e <UART_SetConfig+0x4a6>
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a16:	d212      	bcs.n	8007a3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f023 030f 	bic.w	r3, r3, #15
 8007a20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	8afb      	ldrh	r3, [r7, #22]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	8afa      	ldrh	r2, [r7, #22]
 8007a3a:	60da      	str	r2, [r3, #12]
 8007a3c:	e052      	b.n	8007ae4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a44:	e04e      	b.n	8007ae4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a4a:	2b08      	cmp	r3, #8
 8007a4c:	d827      	bhi.n	8007a9e <UART_SetConfig+0x506>
 8007a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a54 <UART_SetConfig+0x4bc>)
 8007a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a54:	08007a79 	.word	0x08007a79
 8007a58:	08007a81 	.word	0x08007a81
 8007a5c:	08007a89 	.word	0x08007a89
 8007a60:	08007a9f 	.word	0x08007a9f
 8007a64:	08007a8f 	.word	0x08007a8f
 8007a68:	08007a9f 	.word	0x08007a9f
 8007a6c:	08007a9f 	.word	0x08007a9f
 8007a70:	08007a9f 	.word	0x08007a9f
 8007a74:	08007a97 	.word	0x08007a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a78:	f7fd fd12 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 8007a7c:	61f8      	str	r0, [r7, #28]
        break;
 8007a7e:	e014      	b.n	8007aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a80:	f7fd fd24 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 8007a84:	61f8      	str	r0, [r7, #28]
        break;
 8007a86:	e010      	b.n	8007aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a88:	4b1e      	ldr	r3, [pc, #120]	@ (8007b04 <UART_SetConfig+0x56c>)
 8007a8a:	61fb      	str	r3, [r7, #28]
        break;
 8007a8c:	e00d      	b.n	8007aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a8e:	f7fd fc6f 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 8007a92:	61f8      	str	r0, [r7, #28]
        break;
 8007a94:	e009      	b.n	8007aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a9a:	61fb      	str	r3, [r7, #28]
        break;
 8007a9c:	e005      	b.n	8007aaa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d019      	beq.n	8007ae4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	085a      	lsrs	r2, r3, #1
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	441a      	add	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b0f      	cmp	r3, #15
 8007ac8:	d909      	bls.n	8007ade <UART_SetConfig+0x546>
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad0:	d205      	bcs.n	8007ade <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60da      	str	r2, [r3, #12]
 8007adc:	e002      	b.n	8007ae4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007af0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3728      	adds	r7, #40	@ 0x28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afe:	bf00      	nop
 8007b00:	40008000 	.word	0x40008000
 8007b04:	00f42400 	.word	0x00f42400

08007b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01a      	beq.n	8007c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c06:	d10a      	bne.n	8007c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	605a      	str	r2, [r3, #4]
  }
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b098      	sub	sp, #96	@ 0x60
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c5c:	f7fb fd10 	bl	8003680 <HAL_GetTick>
 8007c60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d12e      	bne.n	8007cce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f88c 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d021      	beq.n	8007cce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007caa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e6      	bne.n	8007c8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e062      	b.n	8007d94 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d149      	bne.n	8007d70 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f856 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d03c      	beq.n	8007d70 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	623b      	str	r3, [r7, #32]
   return(result);
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d48:	61fa      	str	r2, [r7, #28]
 8007d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	69b9      	ldr	r1, [r7, #24]
 8007d4e:	69fa      	ldr	r2, [r7, #28]
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	617b      	str	r3, [r7, #20]
   return(result);
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e5      	bne.n	8007d28 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e011      	b.n	8007d94 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3758      	adds	r7, #88	@ 0x58
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dac:	e04f      	b.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d04b      	beq.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db6:	f7fb fc63 	bl	8003680 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d302      	bcc.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e04e      	b.n	8007e6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d037      	beq.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b80      	cmp	r3, #128	@ 0x80
 8007de2:	d034      	beq.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d031      	beq.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d110      	bne.n	8007e1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f838 	bl	8007e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2208      	movs	r2, #8
 8007e0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e029      	b.n	8007e6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e28:	d111      	bne.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f81e 	bl	8007e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e00f      	b.n	8007e6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69da      	ldr	r2, [r3, #28]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4013      	ands	r3, r2
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	bf0c      	ite	eq
 8007e5e:	2301      	moveq	r3, #1
 8007e60:	2300      	movne	r3, #0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d0a0      	beq.n	8007dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b095      	sub	sp, #84	@ 0x54
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ea4:	e841 2300 	strex	r3, r2, [r1]
 8007ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e6      	bne.n	8007e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	e853 3f00 	ldrex	r3, [r3]
 8007ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f023 0301 	bic.w	r3, r3, #1
 8007ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e5      	bne.n	8007eb0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d118      	bne.n	8007f1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f023 0310 	bic.w	r3, r3, #16
 8007f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f0a:	61bb      	str	r3, [r7, #24]
 8007f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6979      	ldr	r1, [r7, #20]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	613b      	str	r3, [r7, #16]
   return(result);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e6      	bne.n	8007eec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f32:	bf00      	nop
 8007f34:	3754      	adds	r7, #84	@ 0x54
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <__cvt>:
 8007f3e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f42:	ec57 6b10 	vmov	r6, r7, d0
 8007f46:	2f00      	cmp	r7, #0
 8007f48:	460c      	mov	r4, r1
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	bfbb      	ittet	lt
 8007f50:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007f54:	461f      	movlt	r7, r3
 8007f56:	2300      	movge	r3, #0
 8007f58:	232d      	movlt	r3, #45	@ 0x2d
 8007f5a:	700b      	strb	r3, [r1, #0]
 8007f5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f5e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f62:	4691      	mov	r9, r2
 8007f64:	f023 0820 	bic.w	r8, r3, #32
 8007f68:	bfbc      	itt	lt
 8007f6a:	4632      	movlt	r2, r6
 8007f6c:	4616      	movlt	r6, r2
 8007f6e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f72:	d005      	beq.n	8007f80 <__cvt+0x42>
 8007f74:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007f78:	d100      	bne.n	8007f7c <__cvt+0x3e>
 8007f7a:	3401      	adds	r4, #1
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	e000      	b.n	8007f82 <__cvt+0x44>
 8007f80:	2103      	movs	r1, #3
 8007f82:	ab03      	add	r3, sp, #12
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	ab02      	add	r3, sp, #8
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	ec47 6b10 	vmov	d0, r6, r7
 8007f8e:	4653      	mov	r3, sl
 8007f90:	4622      	mov	r2, r4
 8007f92:	f001 fa6d 	bl	8009470 <_dtoa_r>
 8007f96:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	d119      	bne.n	8007fd2 <__cvt+0x94>
 8007f9e:	f019 0f01 	tst.w	r9, #1
 8007fa2:	d00e      	beq.n	8007fc2 <__cvt+0x84>
 8007fa4:	eb00 0904 	add.w	r9, r0, r4
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2300      	movs	r3, #0
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fb4:	b108      	cbz	r0, 8007fba <__cvt+0x7c>
 8007fb6:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fba:	2230      	movs	r2, #48	@ 0x30
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	454b      	cmp	r3, r9
 8007fc0:	d31e      	bcc.n	8008000 <__cvt+0xc2>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fc6:	1b5b      	subs	r3, r3, r5
 8007fc8:	4628      	mov	r0, r5
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	b004      	add	sp, #16
 8007fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007fd6:	eb00 0904 	add.w	r9, r0, r4
 8007fda:	d1e5      	bne.n	8007fa8 <__cvt+0x6a>
 8007fdc:	7803      	ldrb	r3, [r0, #0]
 8007fde:	2b30      	cmp	r3, #48	@ 0x30
 8007fe0:	d10a      	bne.n	8007ff8 <__cvt+0xba>
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4639      	mov	r1, r7
 8007fea:	f7f8 fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fee:	b918      	cbnz	r0, 8007ff8 <__cvt+0xba>
 8007ff0:	f1c4 0401 	rsb	r4, r4, #1
 8007ff4:	f8ca 4000 	str.w	r4, [sl]
 8007ff8:	f8da 3000 	ldr.w	r3, [sl]
 8007ffc:	4499      	add	r9, r3
 8007ffe:	e7d3      	b.n	8007fa8 <__cvt+0x6a>
 8008000:	1c59      	adds	r1, r3, #1
 8008002:	9103      	str	r1, [sp, #12]
 8008004:	701a      	strb	r2, [r3, #0]
 8008006:	e7d9      	b.n	8007fbc <__cvt+0x7e>

08008008 <__exponent>:
 8008008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800800a:	2900      	cmp	r1, #0
 800800c:	bfba      	itte	lt
 800800e:	4249      	neglt	r1, r1
 8008010:	232d      	movlt	r3, #45	@ 0x2d
 8008012:	232b      	movge	r3, #43	@ 0x2b
 8008014:	2909      	cmp	r1, #9
 8008016:	7002      	strb	r2, [r0, #0]
 8008018:	7043      	strb	r3, [r0, #1]
 800801a:	dd29      	ble.n	8008070 <__exponent+0x68>
 800801c:	f10d 0307 	add.w	r3, sp, #7
 8008020:	461d      	mov	r5, r3
 8008022:	270a      	movs	r7, #10
 8008024:	461a      	mov	r2, r3
 8008026:	fbb1 f6f7 	udiv	r6, r1, r7
 800802a:	fb07 1416 	mls	r4, r7, r6, r1
 800802e:	3430      	adds	r4, #48	@ 0x30
 8008030:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008034:	460c      	mov	r4, r1
 8008036:	2c63      	cmp	r4, #99	@ 0x63
 8008038:	f103 33ff 	add.w	r3, r3, #4294967295
 800803c:	4631      	mov	r1, r6
 800803e:	dcf1      	bgt.n	8008024 <__exponent+0x1c>
 8008040:	3130      	adds	r1, #48	@ 0x30
 8008042:	1e94      	subs	r4, r2, #2
 8008044:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008048:	1c41      	adds	r1, r0, #1
 800804a:	4623      	mov	r3, r4
 800804c:	42ab      	cmp	r3, r5
 800804e:	d30a      	bcc.n	8008066 <__exponent+0x5e>
 8008050:	f10d 0309 	add.w	r3, sp, #9
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	42ac      	cmp	r4, r5
 8008058:	bf88      	it	hi
 800805a:	2300      	movhi	r3, #0
 800805c:	3302      	adds	r3, #2
 800805e:	4403      	add	r3, r0
 8008060:	1a18      	subs	r0, r3, r0
 8008062:	b003      	add	sp, #12
 8008064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008066:	f813 6b01 	ldrb.w	r6, [r3], #1
 800806a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800806e:	e7ed      	b.n	800804c <__exponent+0x44>
 8008070:	2330      	movs	r3, #48	@ 0x30
 8008072:	3130      	adds	r1, #48	@ 0x30
 8008074:	7083      	strb	r3, [r0, #2]
 8008076:	70c1      	strb	r1, [r0, #3]
 8008078:	1d03      	adds	r3, r0, #4
 800807a:	e7f1      	b.n	8008060 <__exponent+0x58>

0800807c <_printf_float>:
 800807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008080:	b08d      	sub	sp, #52	@ 0x34
 8008082:	460c      	mov	r4, r1
 8008084:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008088:	4616      	mov	r6, r2
 800808a:	461f      	mov	r7, r3
 800808c:	4605      	mov	r5, r0
 800808e:	f001 f8bb 	bl	8009208 <_localeconv_r>
 8008092:	6803      	ldr	r3, [r0, #0]
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	4618      	mov	r0, r3
 8008098:	f7f8 f8ea 	bl	8000270 <strlen>
 800809c:	2300      	movs	r3, #0
 800809e:	930a      	str	r3, [sp, #40]	@ 0x28
 80080a0:	f8d8 3000 	ldr.w	r3, [r8]
 80080a4:	9005      	str	r0, [sp, #20]
 80080a6:	3307      	adds	r3, #7
 80080a8:	f023 0307 	bic.w	r3, r3, #7
 80080ac:	f103 0208 	add.w	r2, r3, #8
 80080b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080b4:	f8d4 b000 	ldr.w	fp, [r4]
 80080b8:	f8c8 2000 	str.w	r2, [r8]
 80080bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80080c4:	9307      	str	r3, [sp, #28]
 80080c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80080ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80080ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008344 <_printf_float+0x2c8>)
 80080d4:	f04f 32ff 	mov.w	r2, #4294967295
 80080d8:	f7f8 fd28 	bl	8000b2c <__aeabi_dcmpun>
 80080dc:	bb70      	cbnz	r0, 800813c <_printf_float+0xc0>
 80080de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080e2:	4b98      	ldr	r3, [pc, #608]	@ (8008344 <_printf_float+0x2c8>)
 80080e4:	f04f 32ff 	mov.w	r2, #4294967295
 80080e8:	f7f8 fd02 	bl	8000af0 <__aeabi_dcmple>
 80080ec:	bb30      	cbnz	r0, 800813c <_printf_float+0xc0>
 80080ee:	2200      	movs	r2, #0
 80080f0:	2300      	movs	r3, #0
 80080f2:	4640      	mov	r0, r8
 80080f4:	4649      	mov	r1, r9
 80080f6:	f7f8 fcf1 	bl	8000adc <__aeabi_dcmplt>
 80080fa:	b110      	cbz	r0, 8008102 <_printf_float+0x86>
 80080fc:	232d      	movs	r3, #45	@ 0x2d
 80080fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008102:	4a91      	ldr	r2, [pc, #580]	@ (8008348 <_printf_float+0x2cc>)
 8008104:	4b91      	ldr	r3, [pc, #580]	@ (800834c <_printf_float+0x2d0>)
 8008106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800810a:	bf8c      	ite	hi
 800810c:	4690      	movhi	r8, r2
 800810e:	4698      	movls	r8, r3
 8008110:	2303      	movs	r3, #3
 8008112:	6123      	str	r3, [r4, #16]
 8008114:	f02b 0304 	bic.w	r3, fp, #4
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	f04f 0900 	mov.w	r9, #0
 800811e:	9700      	str	r7, [sp, #0]
 8008120:	4633      	mov	r3, r6
 8008122:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f9d2 	bl	80084d0 <_printf_common>
 800812c:	3001      	adds	r0, #1
 800812e:	f040 808d 	bne.w	800824c <_printf_float+0x1d0>
 8008132:	f04f 30ff 	mov.w	r0, #4294967295
 8008136:	b00d      	add	sp, #52	@ 0x34
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	4642      	mov	r2, r8
 800813e:	464b      	mov	r3, r9
 8008140:	4640      	mov	r0, r8
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 fcf2 	bl	8000b2c <__aeabi_dcmpun>
 8008148:	b140      	cbz	r0, 800815c <_printf_float+0xe0>
 800814a:	464b      	mov	r3, r9
 800814c:	2b00      	cmp	r3, #0
 800814e:	bfbc      	itt	lt
 8008150:	232d      	movlt	r3, #45	@ 0x2d
 8008152:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008156:	4a7e      	ldr	r2, [pc, #504]	@ (8008350 <_printf_float+0x2d4>)
 8008158:	4b7e      	ldr	r3, [pc, #504]	@ (8008354 <_printf_float+0x2d8>)
 800815a:	e7d4      	b.n	8008106 <_printf_float+0x8a>
 800815c:	6863      	ldr	r3, [r4, #4]
 800815e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008162:	9206      	str	r2, [sp, #24]
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	d13b      	bne.n	80081e0 <_printf_float+0x164>
 8008168:	2306      	movs	r3, #6
 800816a:	6063      	str	r3, [r4, #4]
 800816c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008170:	2300      	movs	r3, #0
 8008172:	6022      	str	r2, [r4, #0]
 8008174:	9303      	str	r3, [sp, #12]
 8008176:	ab0a      	add	r3, sp, #40	@ 0x28
 8008178:	e9cd a301 	strd	sl, r3, [sp, #4]
 800817c:	ab09      	add	r3, sp, #36	@ 0x24
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	6861      	ldr	r1, [r4, #4]
 8008182:	ec49 8b10 	vmov	d0, r8, r9
 8008186:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800818a:	4628      	mov	r0, r5
 800818c:	f7ff fed7 	bl	8007f3e <__cvt>
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008194:	2b47      	cmp	r3, #71	@ 0x47
 8008196:	4680      	mov	r8, r0
 8008198:	d129      	bne.n	80081ee <_printf_float+0x172>
 800819a:	1cc8      	adds	r0, r1, #3
 800819c:	db02      	blt.n	80081a4 <_printf_float+0x128>
 800819e:	6863      	ldr	r3, [r4, #4]
 80081a0:	4299      	cmp	r1, r3
 80081a2:	dd41      	ble.n	8008228 <_printf_float+0x1ac>
 80081a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80081a8:	fa5f fa8a 	uxtb.w	sl, sl
 80081ac:	3901      	subs	r1, #1
 80081ae:	4652      	mov	r2, sl
 80081b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80081b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80081b6:	f7ff ff27 	bl	8008008 <__exponent>
 80081ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081bc:	1813      	adds	r3, r2, r0
 80081be:	2a01      	cmp	r2, #1
 80081c0:	4681      	mov	r9, r0
 80081c2:	6123      	str	r3, [r4, #16]
 80081c4:	dc02      	bgt.n	80081cc <_printf_float+0x150>
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	07d2      	lsls	r2, r2, #31
 80081ca:	d501      	bpl.n	80081d0 <_printf_float+0x154>
 80081cc:	3301      	adds	r3, #1
 80081ce:	6123      	str	r3, [r4, #16]
 80081d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0a2      	beq.n	800811e <_printf_float+0xa2>
 80081d8:	232d      	movs	r3, #45	@ 0x2d
 80081da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081de:	e79e      	b.n	800811e <_printf_float+0xa2>
 80081e0:	9a06      	ldr	r2, [sp, #24]
 80081e2:	2a47      	cmp	r2, #71	@ 0x47
 80081e4:	d1c2      	bne.n	800816c <_printf_float+0xf0>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1c0      	bne.n	800816c <_printf_float+0xf0>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e7bd      	b.n	800816a <_printf_float+0xee>
 80081ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081f2:	d9db      	bls.n	80081ac <_printf_float+0x130>
 80081f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80081f8:	d118      	bne.n	800822c <_printf_float+0x1b0>
 80081fa:	2900      	cmp	r1, #0
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	dd0b      	ble.n	8008218 <_printf_float+0x19c>
 8008200:	6121      	str	r1, [r4, #16]
 8008202:	b913      	cbnz	r3, 800820a <_printf_float+0x18e>
 8008204:	6822      	ldr	r2, [r4, #0]
 8008206:	07d0      	lsls	r0, r2, #31
 8008208:	d502      	bpl.n	8008210 <_printf_float+0x194>
 800820a:	3301      	adds	r3, #1
 800820c:	440b      	add	r3, r1
 800820e:	6123      	str	r3, [r4, #16]
 8008210:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008212:	f04f 0900 	mov.w	r9, #0
 8008216:	e7db      	b.n	80081d0 <_printf_float+0x154>
 8008218:	b913      	cbnz	r3, 8008220 <_printf_float+0x1a4>
 800821a:	6822      	ldr	r2, [r4, #0]
 800821c:	07d2      	lsls	r2, r2, #31
 800821e:	d501      	bpl.n	8008224 <_printf_float+0x1a8>
 8008220:	3302      	adds	r3, #2
 8008222:	e7f4      	b.n	800820e <_printf_float+0x192>
 8008224:	2301      	movs	r3, #1
 8008226:	e7f2      	b.n	800820e <_printf_float+0x192>
 8008228:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800822c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800822e:	4299      	cmp	r1, r3
 8008230:	db05      	blt.n	800823e <_printf_float+0x1c2>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	6121      	str	r1, [r4, #16]
 8008236:	07d8      	lsls	r0, r3, #31
 8008238:	d5ea      	bpl.n	8008210 <_printf_float+0x194>
 800823a:	1c4b      	adds	r3, r1, #1
 800823c:	e7e7      	b.n	800820e <_printf_float+0x192>
 800823e:	2900      	cmp	r1, #0
 8008240:	bfd4      	ite	le
 8008242:	f1c1 0202 	rsble	r2, r1, #2
 8008246:	2201      	movgt	r2, #1
 8008248:	4413      	add	r3, r2
 800824a:	e7e0      	b.n	800820e <_printf_float+0x192>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	055a      	lsls	r2, r3, #21
 8008250:	d407      	bmi.n	8008262 <_printf_float+0x1e6>
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	4642      	mov	r2, r8
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	47b8      	blx	r7
 800825c:	3001      	adds	r0, #1
 800825e:	d12b      	bne.n	80082b8 <_printf_float+0x23c>
 8008260:	e767      	b.n	8008132 <_printf_float+0xb6>
 8008262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008266:	f240 80dd 	bls.w	8008424 <_printf_float+0x3a8>
 800826a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800826e:	2200      	movs	r2, #0
 8008270:	2300      	movs	r3, #0
 8008272:	f7f8 fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 8008276:	2800      	cmp	r0, #0
 8008278:	d033      	beq.n	80082e2 <_printf_float+0x266>
 800827a:	4a37      	ldr	r2, [pc, #220]	@ (8008358 <_printf_float+0x2dc>)
 800827c:	2301      	movs	r3, #1
 800827e:	4631      	mov	r1, r6
 8008280:	4628      	mov	r0, r5
 8008282:	47b8      	blx	r7
 8008284:	3001      	adds	r0, #1
 8008286:	f43f af54 	beq.w	8008132 <_printf_float+0xb6>
 800828a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800828e:	4543      	cmp	r3, r8
 8008290:	db02      	blt.n	8008298 <_printf_float+0x21c>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	07d8      	lsls	r0, r3, #31
 8008296:	d50f      	bpl.n	80082b8 <_printf_float+0x23c>
 8008298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f af45 	beq.w	8008132 <_printf_float+0xb6>
 80082a8:	f04f 0900 	mov.w	r9, #0
 80082ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80082b0:	f104 0a1a 	add.w	sl, r4, #26
 80082b4:	45c8      	cmp	r8, r9
 80082b6:	dc09      	bgt.n	80082cc <_printf_float+0x250>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	079b      	lsls	r3, r3, #30
 80082bc:	f100 8103 	bmi.w	80084c6 <_printf_float+0x44a>
 80082c0:	68e0      	ldr	r0, [r4, #12]
 80082c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082c4:	4298      	cmp	r0, r3
 80082c6:	bfb8      	it	lt
 80082c8:	4618      	movlt	r0, r3
 80082ca:	e734      	b.n	8008136 <_printf_float+0xba>
 80082cc:	2301      	movs	r3, #1
 80082ce:	4652      	mov	r2, sl
 80082d0:	4631      	mov	r1, r6
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	f43f af2b 	beq.w	8008132 <_printf_float+0xb6>
 80082dc:	f109 0901 	add.w	r9, r9, #1
 80082e0:	e7e8      	b.n	80082b4 <_printf_float+0x238>
 80082e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dc39      	bgt.n	800835c <_printf_float+0x2e0>
 80082e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008358 <_printf_float+0x2dc>)
 80082ea:	2301      	movs	r3, #1
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b8      	blx	r7
 80082f2:	3001      	adds	r0, #1
 80082f4:	f43f af1d 	beq.w	8008132 <_printf_float+0xb6>
 80082f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80082fc:	ea59 0303 	orrs.w	r3, r9, r3
 8008300:	d102      	bne.n	8008308 <_printf_float+0x28c>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	07d9      	lsls	r1, r3, #31
 8008306:	d5d7      	bpl.n	80082b8 <_printf_float+0x23c>
 8008308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830c:	4631      	mov	r1, r6
 800830e:	4628      	mov	r0, r5
 8008310:	47b8      	blx	r7
 8008312:	3001      	adds	r0, #1
 8008314:	f43f af0d 	beq.w	8008132 <_printf_float+0xb6>
 8008318:	f04f 0a00 	mov.w	sl, #0
 800831c:	f104 0b1a 	add.w	fp, r4, #26
 8008320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008322:	425b      	negs	r3, r3
 8008324:	4553      	cmp	r3, sl
 8008326:	dc01      	bgt.n	800832c <_printf_float+0x2b0>
 8008328:	464b      	mov	r3, r9
 800832a:	e793      	b.n	8008254 <_printf_float+0x1d8>
 800832c:	2301      	movs	r3, #1
 800832e:	465a      	mov	r2, fp
 8008330:	4631      	mov	r1, r6
 8008332:	4628      	mov	r0, r5
 8008334:	47b8      	blx	r7
 8008336:	3001      	adds	r0, #1
 8008338:	f43f aefb 	beq.w	8008132 <_printf_float+0xb6>
 800833c:	f10a 0a01 	add.w	sl, sl, #1
 8008340:	e7ee      	b.n	8008320 <_printf_float+0x2a4>
 8008342:	bf00      	nop
 8008344:	7fefffff 	.word	0x7fefffff
 8008348:	0800d3e0 	.word	0x0800d3e0
 800834c:	0800d3dc 	.word	0x0800d3dc
 8008350:	0800d3e8 	.word	0x0800d3e8
 8008354:	0800d3e4 	.word	0x0800d3e4
 8008358:	0800d3ec 	.word	0x0800d3ec
 800835c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800835e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008362:	4553      	cmp	r3, sl
 8008364:	bfa8      	it	ge
 8008366:	4653      	movge	r3, sl
 8008368:	2b00      	cmp	r3, #0
 800836a:	4699      	mov	r9, r3
 800836c:	dc36      	bgt.n	80083dc <_printf_float+0x360>
 800836e:	f04f 0b00 	mov.w	fp, #0
 8008372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008376:	f104 021a 	add.w	r2, r4, #26
 800837a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800837c:	9306      	str	r3, [sp, #24]
 800837e:	eba3 0309 	sub.w	r3, r3, r9
 8008382:	455b      	cmp	r3, fp
 8008384:	dc31      	bgt.n	80083ea <_printf_float+0x36e>
 8008386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008388:	459a      	cmp	sl, r3
 800838a:	dc3a      	bgt.n	8008402 <_printf_float+0x386>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	07da      	lsls	r2, r3, #31
 8008390:	d437      	bmi.n	8008402 <_printf_float+0x386>
 8008392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008394:	ebaa 0903 	sub.w	r9, sl, r3
 8008398:	9b06      	ldr	r3, [sp, #24]
 800839a:	ebaa 0303 	sub.w	r3, sl, r3
 800839e:	4599      	cmp	r9, r3
 80083a0:	bfa8      	it	ge
 80083a2:	4699      	movge	r9, r3
 80083a4:	f1b9 0f00 	cmp.w	r9, #0
 80083a8:	dc33      	bgt.n	8008412 <_printf_float+0x396>
 80083aa:	f04f 0800 	mov.w	r8, #0
 80083ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083b2:	f104 0b1a 	add.w	fp, r4, #26
 80083b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b8:	ebaa 0303 	sub.w	r3, sl, r3
 80083bc:	eba3 0309 	sub.w	r3, r3, r9
 80083c0:	4543      	cmp	r3, r8
 80083c2:	f77f af79 	ble.w	80082b8 <_printf_float+0x23c>
 80083c6:	2301      	movs	r3, #1
 80083c8:	465a      	mov	r2, fp
 80083ca:	4631      	mov	r1, r6
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b8      	blx	r7
 80083d0:	3001      	adds	r0, #1
 80083d2:	f43f aeae 	beq.w	8008132 <_printf_float+0xb6>
 80083d6:	f108 0801 	add.w	r8, r8, #1
 80083da:	e7ec      	b.n	80083b6 <_printf_float+0x33a>
 80083dc:	4642      	mov	r2, r8
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b8      	blx	r7
 80083e4:	3001      	adds	r0, #1
 80083e6:	d1c2      	bne.n	800836e <_printf_float+0x2f2>
 80083e8:	e6a3      	b.n	8008132 <_printf_float+0xb6>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	9206      	str	r2, [sp, #24]
 80083f2:	47b8      	blx	r7
 80083f4:	3001      	adds	r0, #1
 80083f6:	f43f ae9c 	beq.w	8008132 <_printf_float+0xb6>
 80083fa:	9a06      	ldr	r2, [sp, #24]
 80083fc:	f10b 0b01 	add.w	fp, fp, #1
 8008400:	e7bb      	b.n	800837a <_printf_float+0x2fe>
 8008402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008406:	4631      	mov	r1, r6
 8008408:	4628      	mov	r0, r5
 800840a:	47b8      	blx	r7
 800840c:	3001      	adds	r0, #1
 800840e:	d1c0      	bne.n	8008392 <_printf_float+0x316>
 8008410:	e68f      	b.n	8008132 <_printf_float+0xb6>
 8008412:	9a06      	ldr	r2, [sp, #24]
 8008414:	464b      	mov	r3, r9
 8008416:	4442      	add	r2, r8
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	d1c3      	bne.n	80083aa <_printf_float+0x32e>
 8008422:	e686      	b.n	8008132 <_printf_float+0xb6>
 8008424:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008428:	f1ba 0f01 	cmp.w	sl, #1
 800842c:	dc01      	bgt.n	8008432 <_printf_float+0x3b6>
 800842e:	07db      	lsls	r3, r3, #31
 8008430:	d536      	bpl.n	80084a0 <_printf_float+0x424>
 8008432:	2301      	movs	r3, #1
 8008434:	4642      	mov	r2, r8
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	47b8      	blx	r7
 800843c:	3001      	adds	r0, #1
 800843e:	f43f ae78 	beq.w	8008132 <_printf_float+0xb6>
 8008442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008446:	4631      	mov	r1, r6
 8008448:	4628      	mov	r0, r5
 800844a:	47b8      	blx	r7
 800844c:	3001      	adds	r0, #1
 800844e:	f43f ae70 	beq.w	8008132 <_printf_float+0xb6>
 8008452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008456:	2200      	movs	r2, #0
 8008458:	2300      	movs	r3, #0
 800845a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800845e:	f7f8 fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 8008462:	b9c0      	cbnz	r0, 8008496 <_printf_float+0x41a>
 8008464:	4653      	mov	r3, sl
 8008466:	f108 0201 	add.w	r2, r8, #1
 800846a:	4631      	mov	r1, r6
 800846c:	4628      	mov	r0, r5
 800846e:	47b8      	blx	r7
 8008470:	3001      	adds	r0, #1
 8008472:	d10c      	bne.n	800848e <_printf_float+0x412>
 8008474:	e65d      	b.n	8008132 <_printf_float+0xb6>
 8008476:	2301      	movs	r3, #1
 8008478:	465a      	mov	r2, fp
 800847a:	4631      	mov	r1, r6
 800847c:	4628      	mov	r0, r5
 800847e:	47b8      	blx	r7
 8008480:	3001      	adds	r0, #1
 8008482:	f43f ae56 	beq.w	8008132 <_printf_float+0xb6>
 8008486:	f108 0801 	add.w	r8, r8, #1
 800848a:	45d0      	cmp	r8, sl
 800848c:	dbf3      	blt.n	8008476 <_printf_float+0x3fa>
 800848e:	464b      	mov	r3, r9
 8008490:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008494:	e6df      	b.n	8008256 <_printf_float+0x1da>
 8008496:	f04f 0800 	mov.w	r8, #0
 800849a:	f104 0b1a 	add.w	fp, r4, #26
 800849e:	e7f4      	b.n	800848a <_printf_float+0x40e>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4642      	mov	r2, r8
 80084a4:	e7e1      	b.n	800846a <_printf_float+0x3ee>
 80084a6:	2301      	movs	r3, #1
 80084a8:	464a      	mov	r2, r9
 80084aa:	4631      	mov	r1, r6
 80084ac:	4628      	mov	r0, r5
 80084ae:	47b8      	blx	r7
 80084b0:	3001      	adds	r0, #1
 80084b2:	f43f ae3e 	beq.w	8008132 <_printf_float+0xb6>
 80084b6:	f108 0801 	add.w	r8, r8, #1
 80084ba:	68e3      	ldr	r3, [r4, #12]
 80084bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084be:	1a5b      	subs	r3, r3, r1
 80084c0:	4543      	cmp	r3, r8
 80084c2:	dcf0      	bgt.n	80084a6 <_printf_float+0x42a>
 80084c4:	e6fc      	b.n	80082c0 <_printf_float+0x244>
 80084c6:	f04f 0800 	mov.w	r8, #0
 80084ca:	f104 0919 	add.w	r9, r4, #25
 80084ce:	e7f4      	b.n	80084ba <_printf_float+0x43e>

080084d0 <_printf_common>:
 80084d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d4:	4616      	mov	r6, r2
 80084d6:	4698      	mov	r8, r3
 80084d8:	688a      	ldr	r2, [r1, #8]
 80084da:	690b      	ldr	r3, [r1, #16]
 80084dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	bfb8      	it	lt
 80084e4:	4613      	movlt	r3, r2
 80084e6:	6033      	str	r3, [r6, #0]
 80084e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084ec:	4607      	mov	r7, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	b10a      	cbz	r2, 80084f6 <_printf_common+0x26>
 80084f2:	3301      	adds	r3, #1
 80084f4:	6033      	str	r3, [r6, #0]
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	0699      	lsls	r1, r3, #26
 80084fa:	bf42      	ittt	mi
 80084fc:	6833      	ldrmi	r3, [r6, #0]
 80084fe:	3302      	addmi	r3, #2
 8008500:	6033      	strmi	r3, [r6, #0]
 8008502:	6825      	ldr	r5, [r4, #0]
 8008504:	f015 0506 	ands.w	r5, r5, #6
 8008508:	d106      	bne.n	8008518 <_printf_common+0x48>
 800850a:	f104 0a19 	add.w	sl, r4, #25
 800850e:	68e3      	ldr	r3, [r4, #12]
 8008510:	6832      	ldr	r2, [r6, #0]
 8008512:	1a9b      	subs	r3, r3, r2
 8008514:	42ab      	cmp	r3, r5
 8008516:	dc26      	bgt.n	8008566 <_printf_common+0x96>
 8008518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	3b00      	subs	r3, #0
 8008520:	bf18      	it	ne
 8008522:	2301      	movne	r3, #1
 8008524:	0692      	lsls	r2, r2, #26
 8008526:	d42b      	bmi.n	8008580 <_printf_common+0xb0>
 8008528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800852c:	4641      	mov	r1, r8
 800852e:	4638      	mov	r0, r7
 8008530:	47c8      	blx	r9
 8008532:	3001      	adds	r0, #1
 8008534:	d01e      	beq.n	8008574 <_printf_common+0xa4>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	6922      	ldr	r2, [r4, #16]
 800853a:	f003 0306 	and.w	r3, r3, #6
 800853e:	2b04      	cmp	r3, #4
 8008540:	bf02      	ittt	eq
 8008542:	68e5      	ldreq	r5, [r4, #12]
 8008544:	6833      	ldreq	r3, [r6, #0]
 8008546:	1aed      	subeq	r5, r5, r3
 8008548:	68a3      	ldr	r3, [r4, #8]
 800854a:	bf0c      	ite	eq
 800854c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008550:	2500      	movne	r5, #0
 8008552:	4293      	cmp	r3, r2
 8008554:	bfc4      	itt	gt
 8008556:	1a9b      	subgt	r3, r3, r2
 8008558:	18ed      	addgt	r5, r5, r3
 800855a:	2600      	movs	r6, #0
 800855c:	341a      	adds	r4, #26
 800855e:	42b5      	cmp	r5, r6
 8008560:	d11a      	bne.n	8008598 <_printf_common+0xc8>
 8008562:	2000      	movs	r0, #0
 8008564:	e008      	b.n	8008578 <_printf_common+0xa8>
 8008566:	2301      	movs	r3, #1
 8008568:	4652      	mov	r2, sl
 800856a:	4641      	mov	r1, r8
 800856c:	4638      	mov	r0, r7
 800856e:	47c8      	blx	r9
 8008570:	3001      	adds	r0, #1
 8008572:	d103      	bne.n	800857c <_printf_common+0xac>
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857c:	3501      	adds	r5, #1
 800857e:	e7c6      	b.n	800850e <_printf_common+0x3e>
 8008580:	18e1      	adds	r1, r4, r3
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	2030      	movs	r0, #48	@ 0x30
 8008586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800858a:	4422      	add	r2, r4
 800858c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008594:	3302      	adds	r3, #2
 8008596:	e7c7      	b.n	8008528 <_printf_common+0x58>
 8008598:	2301      	movs	r3, #1
 800859a:	4622      	mov	r2, r4
 800859c:	4641      	mov	r1, r8
 800859e:	4638      	mov	r0, r7
 80085a0:	47c8      	blx	r9
 80085a2:	3001      	adds	r0, #1
 80085a4:	d0e6      	beq.n	8008574 <_printf_common+0xa4>
 80085a6:	3601      	adds	r6, #1
 80085a8:	e7d9      	b.n	800855e <_printf_common+0x8e>
	...

080085ac <_printf_i>:
 80085ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	7e0f      	ldrb	r7, [r1, #24]
 80085b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085b4:	2f78      	cmp	r7, #120	@ 0x78
 80085b6:	4691      	mov	r9, r2
 80085b8:	4680      	mov	r8, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	469a      	mov	sl, r3
 80085be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085c2:	d807      	bhi.n	80085d4 <_printf_i+0x28>
 80085c4:	2f62      	cmp	r7, #98	@ 0x62
 80085c6:	d80a      	bhi.n	80085de <_printf_i+0x32>
 80085c8:	2f00      	cmp	r7, #0
 80085ca:	f000 80d1 	beq.w	8008770 <_printf_i+0x1c4>
 80085ce:	2f58      	cmp	r7, #88	@ 0x58
 80085d0:	f000 80b8 	beq.w	8008744 <_printf_i+0x198>
 80085d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085dc:	e03a      	b.n	8008654 <_printf_i+0xa8>
 80085de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085e2:	2b15      	cmp	r3, #21
 80085e4:	d8f6      	bhi.n	80085d4 <_printf_i+0x28>
 80085e6:	a101      	add	r1, pc, #4	@ (adr r1, 80085ec <_printf_i+0x40>)
 80085e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085ec:	08008645 	.word	0x08008645
 80085f0:	08008659 	.word	0x08008659
 80085f4:	080085d5 	.word	0x080085d5
 80085f8:	080085d5 	.word	0x080085d5
 80085fc:	080085d5 	.word	0x080085d5
 8008600:	080085d5 	.word	0x080085d5
 8008604:	08008659 	.word	0x08008659
 8008608:	080085d5 	.word	0x080085d5
 800860c:	080085d5 	.word	0x080085d5
 8008610:	080085d5 	.word	0x080085d5
 8008614:	080085d5 	.word	0x080085d5
 8008618:	08008757 	.word	0x08008757
 800861c:	08008683 	.word	0x08008683
 8008620:	08008711 	.word	0x08008711
 8008624:	080085d5 	.word	0x080085d5
 8008628:	080085d5 	.word	0x080085d5
 800862c:	08008779 	.word	0x08008779
 8008630:	080085d5 	.word	0x080085d5
 8008634:	08008683 	.word	0x08008683
 8008638:	080085d5 	.word	0x080085d5
 800863c:	080085d5 	.word	0x080085d5
 8008640:	08008719 	.word	0x08008719
 8008644:	6833      	ldr	r3, [r6, #0]
 8008646:	1d1a      	adds	r2, r3, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6032      	str	r2, [r6, #0]
 800864c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008654:	2301      	movs	r3, #1
 8008656:	e09c      	b.n	8008792 <_printf_i+0x1e6>
 8008658:	6833      	ldr	r3, [r6, #0]
 800865a:	6820      	ldr	r0, [r4, #0]
 800865c:	1d19      	adds	r1, r3, #4
 800865e:	6031      	str	r1, [r6, #0]
 8008660:	0606      	lsls	r6, r0, #24
 8008662:	d501      	bpl.n	8008668 <_printf_i+0xbc>
 8008664:	681d      	ldr	r5, [r3, #0]
 8008666:	e003      	b.n	8008670 <_printf_i+0xc4>
 8008668:	0645      	lsls	r5, r0, #25
 800866a:	d5fb      	bpl.n	8008664 <_printf_i+0xb8>
 800866c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008670:	2d00      	cmp	r5, #0
 8008672:	da03      	bge.n	800867c <_printf_i+0xd0>
 8008674:	232d      	movs	r3, #45	@ 0x2d
 8008676:	426d      	negs	r5, r5
 8008678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800867c:	4858      	ldr	r0, [pc, #352]	@ (80087e0 <_printf_i+0x234>)
 800867e:	230a      	movs	r3, #10
 8008680:	e011      	b.n	80086a6 <_printf_i+0xfa>
 8008682:	6821      	ldr	r1, [r4, #0]
 8008684:	6833      	ldr	r3, [r6, #0]
 8008686:	0608      	lsls	r0, r1, #24
 8008688:	f853 5b04 	ldr.w	r5, [r3], #4
 800868c:	d402      	bmi.n	8008694 <_printf_i+0xe8>
 800868e:	0649      	lsls	r1, r1, #25
 8008690:	bf48      	it	mi
 8008692:	b2ad      	uxthmi	r5, r5
 8008694:	2f6f      	cmp	r7, #111	@ 0x6f
 8008696:	4852      	ldr	r0, [pc, #328]	@ (80087e0 <_printf_i+0x234>)
 8008698:	6033      	str	r3, [r6, #0]
 800869a:	bf14      	ite	ne
 800869c:	230a      	movne	r3, #10
 800869e:	2308      	moveq	r3, #8
 80086a0:	2100      	movs	r1, #0
 80086a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086a6:	6866      	ldr	r6, [r4, #4]
 80086a8:	60a6      	str	r6, [r4, #8]
 80086aa:	2e00      	cmp	r6, #0
 80086ac:	db05      	blt.n	80086ba <_printf_i+0x10e>
 80086ae:	6821      	ldr	r1, [r4, #0]
 80086b0:	432e      	orrs	r6, r5
 80086b2:	f021 0104 	bic.w	r1, r1, #4
 80086b6:	6021      	str	r1, [r4, #0]
 80086b8:	d04b      	beq.n	8008752 <_printf_i+0x1a6>
 80086ba:	4616      	mov	r6, r2
 80086bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80086c0:	fb03 5711 	mls	r7, r3, r1, r5
 80086c4:	5dc7      	ldrb	r7, [r0, r7]
 80086c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086ca:	462f      	mov	r7, r5
 80086cc:	42bb      	cmp	r3, r7
 80086ce:	460d      	mov	r5, r1
 80086d0:	d9f4      	bls.n	80086bc <_printf_i+0x110>
 80086d2:	2b08      	cmp	r3, #8
 80086d4:	d10b      	bne.n	80086ee <_printf_i+0x142>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	07df      	lsls	r7, r3, #31
 80086da:	d508      	bpl.n	80086ee <_printf_i+0x142>
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	6861      	ldr	r1, [r4, #4]
 80086e0:	4299      	cmp	r1, r3
 80086e2:	bfde      	ittt	le
 80086e4:	2330      	movle	r3, #48	@ 0x30
 80086e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086ee:	1b92      	subs	r2, r2, r6
 80086f0:	6122      	str	r2, [r4, #16]
 80086f2:	f8cd a000 	str.w	sl, [sp]
 80086f6:	464b      	mov	r3, r9
 80086f8:	aa03      	add	r2, sp, #12
 80086fa:	4621      	mov	r1, r4
 80086fc:	4640      	mov	r0, r8
 80086fe:	f7ff fee7 	bl	80084d0 <_printf_common>
 8008702:	3001      	adds	r0, #1
 8008704:	d14a      	bne.n	800879c <_printf_i+0x1f0>
 8008706:	f04f 30ff 	mov.w	r0, #4294967295
 800870a:	b004      	add	sp, #16
 800870c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	f043 0320 	orr.w	r3, r3, #32
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	4832      	ldr	r0, [pc, #200]	@ (80087e4 <_printf_i+0x238>)
 800871a:	2778      	movs	r7, #120	@ 0x78
 800871c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	6831      	ldr	r1, [r6, #0]
 8008724:	061f      	lsls	r7, r3, #24
 8008726:	f851 5b04 	ldr.w	r5, [r1], #4
 800872a:	d402      	bmi.n	8008732 <_printf_i+0x186>
 800872c:	065f      	lsls	r7, r3, #25
 800872e:	bf48      	it	mi
 8008730:	b2ad      	uxthmi	r5, r5
 8008732:	6031      	str	r1, [r6, #0]
 8008734:	07d9      	lsls	r1, r3, #31
 8008736:	bf44      	itt	mi
 8008738:	f043 0320 	orrmi.w	r3, r3, #32
 800873c:	6023      	strmi	r3, [r4, #0]
 800873e:	b11d      	cbz	r5, 8008748 <_printf_i+0x19c>
 8008740:	2310      	movs	r3, #16
 8008742:	e7ad      	b.n	80086a0 <_printf_i+0xf4>
 8008744:	4826      	ldr	r0, [pc, #152]	@ (80087e0 <_printf_i+0x234>)
 8008746:	e7e9      	b.n	800871c <_printf_i+0x170>
 8008748:	6823      	ldr	r3, [r4, #0]
 800874a:	f023 0320 	bic.w	r3, r3, #32
 800874e:	6023      	str	r3, [r4, #0]
 8008750:	e7f6      	b.n	8008740 <_printf_i+0x194>
 8008752:	4616      	mov	r6, r2
 8008754:	e7bd      	b.n	80086d2 <_printf_i+0x126>
 8008756:	6833      	ldr	r3, [r6, #0]
 8008758:	6825      	ldr	r5, [r4, #0]
 800875a:	6961      	ldr	r1, [r4, #20]
 800875c:	1d18      	adds	r0, r3, #4
 800875e:	6030      	str	r0, [r6, #0]
 8008760:	062e      	lsls	r6, r5, #24
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	d501      	bpl.n	800876a <_printf_i+0x1be>
 8008766:	6019      	str	r1, [r3, #0]
 8008768:	e002      	b.n	8008770 <_printf_i+0x1c4>
 800876a:	0668      	lsls	r0, r5, #25
 800876c:	d5fb      	bpl.n	8008766 <_printf_i+0x1ba>
 800876e:	8019      	strh	r1, [r3, #0]
 8008770:	2300      	movs	r3, #0
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	4616      	mov	r6, r2
 8008776:	e7bc      	b.n	80086f2 <_printf_i+0x146>
 8008778:	6833      	ldr	r3, [r6, #0]
 800877a:	1d1a      	adds	r2, r3, #4
 800877c:	6032      	str	r2, [r6, #0]
 800877e:	681e      	ldr	r6, [r3, #0]
 8008780:	6862      	ldr	r2, [r4, #4]
 8008782:	2100      	movs	r1, #0
 8008784:	4630      	mov	r0, r6
 8008786:	f7f7 fd23 	bl	80001d0 <memchr>
 800878a:	b108      	cbz	r0, 8008790 <_printf_i+0x1e4>
 800878c:	1b80      	subs	r0, r0, r6
 800878e:	6060      	str	r0, [r4, #4]
 8008790:	6863      	ldr	r3, [r4, #4]
 8008792:	6123      	str	r3, [r4, #16]
 8008794:	2300      	movs	r3, #0
 8008796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800879a:	e7aa      	b.n	80086f2 <_printf_i+0x146>
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	4632      	mov	r2, r6
 80087a0:	4649      	mov	r1, r9
 80087a2:	4640      	mov	r0, r8
 80087a4:	47d0      	blx	sl
 80087a6:	3001      	adds	r0, #1
 80087a8:	d0ad      	beq.n	8008706 <_printf_i+0x15a>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	079b      	lsls	r3, r3, #30
 80087ae:	d413      	bmi.n	80087d8 <_printf_i+0x22c>
 80087b0:	68e0      	ldr	r0, [r4, #12]
 80087b2:	9b03      	ldr	r3, [sp, #12]
 80087b4:	4298      	cmp	r0, r3
 80087b6:	bfb8      	it	lt
 80087b8:	4618      	movlt	r0, r3
 80087ba:	e7a6      	b.n	800870a <_printf_i+0x15e>
 80087bc:	2301      	movs	r3, #1
 80087be:	4632      	mov	r2, r6
 80087c0:	4649      	mov	r1, r9
 80087c2:	4640      	mov	r0, r8
 80087c4:	47d0      	blx	sl
 80087c6:	3001      	adds	r0, #1
 80087c8:	d09d      	beq.n	8008706 <_printf_i+0x15a>
 80087ca:	3501      	adds	r5, #1
 80087cc:	68e3      	ldr	r3, [r4, #12]
 80087ce:	9903      	ldr	r1, [sp, #12]
 80087d0:	1a5b      	subs	r3, r3, r1
 80087d2:	42ab      	cmp	r3, r5
 80087d4:	dcf2      	bgt.n	80087bc <_printf_i+0x210>
 80087d6:	e7eb      	b.n	80087b0 <_printf_i+0x204>
 80087d8:	2500      	movs	r5, #0
 80087da:	f104 0619 	add.w	r6, r4, #25
 80087de:	e7f5      	b.n	80087cc <_printf_i+0x220>
 80087e0:	0800d3ee 	.word	0x0800d3ee
 80087e4:	0800d3ff 	.word	0x0800d3ff

080087e8 <_scanf_float>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	b087      	sub	sp, #28
 80087ee:	4691      	mov	r9, r2
 80087f0:	9303      	str	r3, [sp, #12]
 80087f2:	688b      	ldr	r3, [r1, #8]
 80087f4:	1e5a      	subs	r2, r3, #1
 80087f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80087fa:	bf81      	itttt	hi
 80087fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008800:	eb03 0b05 	addhi.w	fp, r3, r5
 8008804:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008808:	608b      	strhi	r3, [r1, #8]
 800880a:	680b      	ldr	r3, [r1, #0]
 800880c:	460a      	mov	r2, r1
 800880e:	f04f 0500 	mov.w	r5, #0
 8008812:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008816:	f842 3b1c 	str.w	r3, [r2], #28
 800881a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800881e:	4680      	mov	r8, r0
 8008820:	460c      	mov	r4, r1
 8008822:	bf98      	it	ls
 8008824:	f04f 0b00 	movls.w	fp, #0
 8008828:	9201      	str	r2, [sp, #4]
 800882a:	4616      	mov	r6, r2
 800882c:	46aa      	mov	sl, r5
 800882e:	462f      	mov	r7, r5
 8008830:	9502      	str	r5, [sp, #8]
 8008832:	68a2      	ldr	r2, [r4, #8]
 8008834:	b15a      	cbz	r2, 800884e <_scanf_float+0x66>
 8008836:	f8d9 3000 	ldr.w	r3, [r9]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b4e      	cmp	r3, #78	@ 0x4e
 800883e:	d863      	bhi.n	8008908 <_scanf_float+0x120>
 8008840:	2b40      	cmp	r3, #64	@ 0x40
 8008842:	d83b      	bhi.n	80088bc <_scanf_float+0xd4>
 8008844:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008848:	b2c8      	uxtb	r0, r1
 800884a:	280e      	cmp	r0, #14
 800884c:	d939      	bls.n	80088c2 <_scanf_float+0xda>
 800884e:	b11f      	cbz	r7, 8008858 <_scanf_float+0x70>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008856:	6023      	str	r3, [r4, #0]
 8008858:	f10a 3aff 	add.w	sl, sl, #4294967295
 800885c:	f1ba 0f01 	cmp.w	sl, #1
 8008860:	f200 8114 	bhi.w	8008a8c <_scanf_float+0x2a4>
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	429e      	cmp	r6, r3
 8008868:	f200 8105 	bhi.w	8008a76 <_scanf_float+0x28e>
 800886c:	2001      	movs	r0, #1
 800886e:	b007      	add	sp, #28
 8008870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008874:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008878:	2a0d      	cmp	r2, #13
 800887a:	d8e8      	bhi.n	800884e <_scanf_float+0x66>
 800887c:	a101      	add	r1, pc, #4	@ (adr r1, 8008884 <_scanf_float+0x9c>)
 800887e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008882:	bf00      	nop
 8008884:	080089cd 	.word	0x080089cd
 8008888:	0800884f 	.word	0x0800884f
 800888c:	0800884f 	.word	0x0800884f
 8008890:	0800884f 	.word	0x0800884f
 8008894:	08008a29 	.word	0x08008a29
 8008898:	08008a03 	.word	0x08008a03
 800889c:	0800884f 	.word	0x0800884f
 80088a0:	0800884f 	.word	0x0800884f
 80088a4:	080089db 	.word	0x080089db
 80088a8:	0800884f 	.word	0x0800884f
 80088ac:	0800884f 	.word	0x0800884f
 80088b0:	0800884f 	.word	0x0800884f
 80088b4:	0800884f 	.word	0x0800884f
 80088b8:	08008997 	.word	0x08008997
 80088bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80088c0:	e7da      	b.n	8008878 <_scanf_float+0x90>
 80088c2:	290e      	cmp	r1, #14
 80088c4:	d8c3      	bhi.n	800884e <_scanf_float+0x66>
 80088c6:	a001      	add	r0, pc, #4	@ (adr r0, 80088cc <_scanf_float+0xe4>)
 80088c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088cc:	08008987 	.word	0x08008987
 80088d0:	0800884f 	.word	0x0800884f
 80088d4:	08008987 	.word	0x08008987
 80088d8:	08008a17 	.word	0x08008a17
 80088dc:	0800884f 	.word	0x0800884f
 80088e0:	08008929 	.word	0x08008929
 80088e4:	0800896d 	.word	0x0800896d
 80088e8:	0800896d 	.word	0x0800896d
 80088ec:	0800896d 	.word	0x0800896d
 80088f0:	0800896d 	.word	0x0800896d
 80088f4:	0800896d 	.word	0x0800896d
 80088f8:	0800896d 	.word	0x0800896d
 80088fc:	0800896d 	.word	0x0800896d
 8008900:	0800896d 	.word	0x0800896d
 8008904:	0800896d 	.word	0x0800896d
 8008908:	2b6e      	cmp	r3, #110	@ 0x6e
 800890a:	d809      	bhi.n	8008920 <_scanf_float+0x138>
 800890c:	2b60      	cmp	r3, #96	@ 0x60
 800890e:	d8b1      	bhi.n	8008874 <_scanf_float+0x8c>
 8008910:	2b54      	cmp	r3, #84	@ 0x54
 8008912:	d07b      	beq.n	8008a0c <_scanf_float+0x224>
 8008914:	2b59      	cmp	r3, #89	@ 0x59
 8008916:	d19a      	bne.n	800884e <_scanf_float+0x66>
 8008918:	2d07      	cmp	r5, #7
 800891a:	d198      	bne.n	800884e <_scanf_float+0x66>
 800891c:	2508      	movs	r5, #8
 800891e:	e02f      	b.n	8008980 <_scanf_float+0x198>
 8008920:	2b74      	cmp	r3, #116	@ 0x74
 8008922:	d073      	beq.n	8008a0c <_scanf_float+0x224>
 8008924:	2b79      	cmp	r3, #121	@ 0x79
 8008926:	e7f6      	b.n	8008916 <_scanf_float+0x12e>
 8008928:	6821      	ldr	r1, [r4, #0]
 800892a:	05c8      	lsls	r0, r1, #23
 800892c:	d51e      	bpl.n	800896c <_scanf_float+0x184>
 800892e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008932:	6021      	str	r1, [r4, #0]
 8008934:	3701      	adds	r7, #1
 8008936:	f1bb 0f00 	cmp.w	fp, #0
 800893a:	d003      	beq.n	8008944 <_scanf_float+0x15c>
 800893c:	3201      	adds	r2, #1
 800893e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008942:	60a2      	str	r2, [r4, #8]
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	3b01      	subs	r3, #1
 8008948:	60a3      	str	r3, [r4, #8]
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	3301      	adds	r3, #1
 800894e:	6123      	str	r3, [r4, #16]
 8008950:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008954:	3b01      	subs	r3, #1
 8008956:	2b00      	cmp	r3, #0
 8008958:	f8c9 3004 	str.w	r3, [r9, #4]
 800895c:	f340 8082 	ble.w	8008a64 <_scanf_float+0x27c>
 8008960:	f8d9 3000 	ldr.w	r3, [r9]
 8008964:	3301      	adds	r3, #1
 8008966:	f8c9 3000 	str.w	r3, [r9]
 800896a:	e762      	b.n	8008832 <_scanf_float+0x4a>
 800896c:	eb1a 0105 	adds.w	r1, sl, r5
 8008970:	f47f af6d 	bne.w	800884e <_scanf_float+0x66>
 8008974:	6822      	ldr	r2, [r4, #0]
 8008976:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800897a:	6022      	str	r2, [r4, #0]
 800897c:	460d      	mov	r5, r1
 800897e:	468a      	mov	sl, r1
 8008980:	f806 3b01 	strb.w	r3, [r6], #1
 8008984:	e7de      	b.n	8008944 <_scanf_float+0x15c>
 8008986:	6822      	ldr	r2, [r4, #0]
 8008988:	0610      	lsls	r0, r2, #24
 800898a:	f57f af60 	bpl.w	800884e <_scanf_float+0x66>
 800898e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008992:	6022      	str	r2, [r4, #0]
 8008994:	e7f4      	b.n	8008980 <_scanf_float+0x198>
 8008996:	f1ba 0f00 	cmp.w	sl, #0
 800899a:	d10c      	bne.n	80089b6 <_scanf_float+0x1ce>
 800899c:	b977      	cbnz	r7, 80089bc <_scanf_float+0x1d4>
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80089a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80089a8:	d108      	bne.n	80089bc <_scanf_float+0x1d4>
 80089aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80089ae:	6022      	str	r2, [r4, #0]
 80089b0:	f04f 0a01 	mov.w	sl, #1
 80089b4:	e7e4      	b.n	8008980 <_scanf_float+0x198>
 80089b6:	f1ba 0f02 	cmp.w	sl, #2
 80089ba:	d050      	beq.n	8008a5e <_scanf_float+0x276>
 80089bc:	2d01      	cmp	r5, #1
 80089be:	d002      	beq.n	80089c6 <_scanf_float+0x1de>
 80089c0:	2d04      	cmp	r5, #4
 80089c2:	f47f af44 	bne.w	800884e <_scanf_float+0x66>
 80089c6:	3501      	adds	r5, #1
 80089c8:	b2ed      	uxtb	r5, r5
 80089ca:	e7d9      	b.n	8008980 <_scanf_float+0x198>
 80089cc:	f1ba 0f01 	cmp.w	sl, #1
 80089d0:	f47f af3d 	bne.w	800884e <_scanf_float+0x66>
 80089d4:	f04f 0a02 	mov.w	sl, #2
 80089d8:	e7d2      	b.n	8008980 <_scanf_float+0x198>
 80089da:	b975      	cbnz	r5, 80089fa <_scanf_float+0x212>
 80089dc:	2f00      	cmp	r7, #0
 80089de:	f47f af37 	bne.w	8008850 <_scanf_float+0x68>
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80089e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80089ec:	f040 8103 	bne.w	8008bf6 <_scanf_float+0x40e>
 80089f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80089f4:	6022      	str	r2, [r4, #0]
 80089f6:	2501      	movs	r5, #1
 80089f8:	e7c2      	b.n	8008980 <_scanf_float+0x198>
 80089fa:	2d03      	cmp	r5, #3
 80089fc:	d0e3      	beq.n	80089c6 <_scanf_float+0x1de>
 80089fe:	2d05      	cmp	r5, #5
 8008a00:	e7df      	b.n	80089c2 <_scanf_float+0x1da>
 8008a02:	2d02      	cmp	r5, #2
 8008a04:	f47f af23 	bne.w	800884e <_scanf_float+0x66>
 8008a08:	2503      	movs	r5, #3
 8008a0a:	e7b9      	b.n	8008980 <_scanf_float+0x198>
 8008a0c:	2d06      	cmp	r5, #6
 8008a0e:	f47f af1e 	bne.w	800884e <_scanf_float+0x66>
 8008a12:	2507      	movs	r5, #7
 8008a14:	e7b4      	b.n	8008980 <_scanf_float+0x198>
 8008a16:	6822      	ldr	r2, [r4, #0]
 8008a18:	0591      	lsls	r1, r2, #22
 8008a1a:	f57f af18 	bpl.w	800884e <_scanf_float+0x66>
 8008a1e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008a22:	6022      	str	r2, [r4, #0]
 8008a24:	9702      	str	r7, [sp, #8]
 8008a26:	e7ab      	b.n	8008980 <_scanf_float+0x198>
 8008a28:	6822      	ldr	r2, [r4, #0]
 8008a2a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008a2e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008a32:	d005      	beq.n	8008a40 <_scanf_float+0x258>
 8008a34:	0550      	lsls	r0, r2, #21
 8008a36:	f57f af0a 	bpl.w	800884e <_scanf_float+0x66>
 8008a3a:	2f00      	cmp	r7, #0
 8008a3c:	f000 80db 	beq.w	8008bf6 <_scanf_float+0x40e>
 8008a40:	0591      	lsls	r1, r2, #22
 8008a42:	bf58      	it	pl
 8008a44:	9902      	ldrpl	r1, [sp, #8]
 8008a46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008a4a:	bf58      	it	pl
 8008a4c:	1a79      	subpl	r1, r7, r1
 8008a4e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008a52:	bf58      	it	pl
 8008a54:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a58:	6022      	str	r2, [r4, #0]
 8008a5a:	2700      	movs	r7, #0
 8008a5c:	e790      	b.n	8008980 <_scanf_float+0x198>
 8008a5e:	f04f 0a03 	mov.w	sl, #3
 8008a62:	e78d      	b.n	8008980 <_scanf_float+0x198>
 8008a64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008a68:	4649      	mov	r1, r9
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	4798      	blx	r3
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	f43f aedf 	beq.w	8008832 <_scanf_float+0x4a>
 8008a74:	e6eb      	b.n	800884e <_scanf_float+0x66>
 8008a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a7e:	464a      	mov	r2, r9
 8008a80:	4640      	mov	r0, r8
 8008a82:	4798      	blx	r3
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	6123      	str	r3, [r4, #16]
 8008a8a:	e6eb      	b.n	8008864 <_scanf_float+0x7c>
 8008a8c:	1e6b      	subs	r3, r5, #1
 8008a8e:	2b06      	cmp	r3, #6
 8008a90:	d824      	bhi.n	8008adc <_scanf_float+0x2f4>
 8008a92:	2d02      	cmp	r5, #2
 8008a94:	d836      	bhi.n	8008b04 <_scanf_float+0x31c>
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	429e      	cmp	r6, r3
 8008a9a:	f67f aee7 	bls.w	800886c <_scanf_float+0x84>
 8008a9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008aa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008aa6:	464a      	mov	r2, r9
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	4798      	blx	r3
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	6123      	str	r3, [r4, #16]
 8008ab2:	e7f0      	b.n	8008a96 <_scanf_float+0x2ae>
 8008ab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ab8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008abc:	464a      	mov	r2, r9
 8008abe:	4640      	mov	r0, r8
 8008ac0:	4798      	blx	r3
 8008ac2:	6923      	ldr	r3, [r4, #16]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	6123      	str	r3, [r4, #16]
 8008ac8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008acc:	fa5f fa8a 	uxtb.w	sl, sl
 8008ad0:	f1ba 0f02 	cmp.w	sl, #2
 8008ad4:	d1ee      	bne.n	8008ab4 <_scanf_float+0x2cc>
 8008ad6:	3d03      	subs	r5, #3
 8008ad8:	b2ed      	uxtb	r5, r5
 8008ada:	1b76      	subs	r6, r6, r5
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	05da      	lsls	r2, r3, #23
 8008ae0:	d530      	bpl.n	8008b44 <_scanf_float+0x35c>
 8008ae2:	055b      	lsls	r3, r3, #21
 8008ae4:	d511      	bpl.n	8008b0a <_scanf_float+0x322>
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	429e      	cmp	r6, r3
 8008aea:	f67f aebf 	bls.w	800886c <_scanf_float+0x84>
 8008aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008af2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008af6:	464a      	mov	r2, r9
 8008af8:	4640      	mov	r0, r8
 8008afa:	4798      	blx	r3
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	6123      	str	r3, [r4, #16]
 8008b02:	e7f0      	b.n	8008ae6 <_scanf_float+0x2fe>
 8008b04:	46aa      	mov	sl, r5
 8008b06:	46b3      	mov	fp, r6
 8008b08:	e7de      	b.n	8008ac8 <_scanf_float+0x2e0>
 8008b0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b0e:	6923      	ldr	r3, [r4, #16]
 8008b10:	2965      	cmp	r1, #101	@ 0x65
 8008b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b16:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b1a:	6123      	str	r3, [r4, #16]
 8008b1c:	d00c      	beq.n	8008b38 <_scanf_float+0x350>
 8008b1e:	2945      	cmp	r1, #69	@ 0x45
 8008b20:	d00a      	beq.n	8008b38 <_scanf_float+0x350>
 8008b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b26:	464a      	mov	r2, r9
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4798      	blx	r3
 8008b2c:	6923      	ldr	r3, [r4, #16]
 8008b2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	1eb5      	subs	r5, r6, #2
 8008b36:	6123      	str	r3, [r4, #16]
 8008b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b3c:	464a      	mov	r2, r9
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4798      	blx	r3
 8008b42:	462e      	mov	r6, r5
 8008b44:	6822      	ldr	r2, [r4, #0]
 8008b46:	f012 0210 	ands.w	r2, r2, #16
 8008b4a:	d001      	beq.n	8008b50 <_scanf_float+0x368>
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	e68e      	b.n	800886e <_scanf_float+0x86>
 8008b50:	7032      	strb	r2, [r6, #0]
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b5c:	d125      	bne.n	8008baa <_scanf_float+0x3c2>
 8008b5e:	9b02      	ldr	r3, [sp, #8]
 8008b60:	429f      	cmp	r7, r3
 8008b62:	d00a      	beq.n	8008b7a <_scanf_float+0x392>
 8008b64:	1bda      	subs	r2, r3, r7
 8008b66:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008b6a:	429e      	cmp	r6, r3
 8008b6c:	bf28      	it	cs
 8008b6e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008b72:	4922      	ldr	r1, [pc, #136]	@ (8008bfc <_scanf_float+0x414>)
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 f9ad 	bl	8008ed4 <siprintf>
 8008b7a:	9901      	ldr	r1, [sp, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4640      	mov	r0, r8
 8008b80:	f002 fdf2 	bl	800b768 <_strtod_r>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	6821      	ldr	r1, [r4, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f011 0f02 	tst.w	r1, #2
 8008b8e:	ec57 6b10 	vmov	r6, r7, d0
 8008b92:	f103 0204 	add.w	r2, r3, #4
 8008b96:	d015      	beq.n	8008bc4 <_scanf_float+0x3dc>
 8008b98:	9903      	ldr	r1, [sp, #12]
 8008b9a:	600a      	str	r2, [r1, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	e9c3 6700 	strd	r6, r7, [r3]
 8008ba2:	68e3      	ldr	r3, [r4, #12]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	60e3      	str	r3, [r4, #12]
 8008ba8:	e7d0      	b.n	8008b4c <_scanf_float+0x364>
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0e4      	beq.n	8008b7a <_scanf_float+0x392>
 8008bb0:	9905      	ldr	r1, [sp, #20]
 8008bb2:	230a      	movs	r3, #10
 8008bb4:	3101      	adds	r1, #1
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	f002 fe56 	bl	800b868 <_strtol_r>
 8008bbc:	9b04      	ldr	r3, [sp, #16]
 8008bbe:	9e05      	ldr	r6, [sp, #20]
 8008bc0:	1ac2      	subs	r2, r0, r3
 8008bc2:	e7d0      	b.n	8008b66 <_scanf_float+0x37e>
 8008bc4:	f011 0f04 	tst.w	r1, #4
 8008bc8:	9903      	ldr	r1, [sp, #12]
 8008bca:	600a      	str	r2, [r1, #0]
 8008bcc:	d1e6      	bne.n	8008b9c <_scanf_float+0x3b4>
 8008bce:	681d      	ldr	r5, [r3, #0]
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f7f7 ffa8 	bl	8000b2c <__aeabi_dcmpun>
 8008bdc:	b128      	cbz	r0, 8008bea <_scanf_float+0x402>
 8008bde:	4808      	ldr	r0, [pc, #32]	@ (8008c00 <_scanf_float+0x418>)
 8008be0:	f000 fb98 	bl	8009314 <nanf>
 8008be4:	ed85 0a00 	vstr	s0, [r5]
 8008be8:	e7db      	b.n	8008ba2 <_scanf_float+0x3ba>
 8008bea:	4630      	mov	r0, r6
 8008bec:	4639      	mov	r1, r7
 8008bee:	f7f7 fffb 	bl	8000be8 <__aeabi_d2f>
 8008bf2:	6028      	str	r0, [r5, #0]
 8008bf4:	e7d5      	b.n	8008ba2 <_scanf_float+0x3ba>
 8008bf6:	2700      	movs	r7, #0
 8008bf8:	e62e      	b.n	8008858 <_scanf_float+0x70>
 8008bfa:	bf00      	nop
 8008bfc:	0800d410 	.word	0x0800d410
 8008c00:	0800d4c1 	.word	0x0800d4c1

08008c04 <std>:
 8008c04:	2300      	movs	r3, #0
 8008c06:	b510      	push	{r4, lr}
 8008c08:	4604      	mov	r4, r0
 8008c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8008c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c12:	6083      	str	r3, [r0, #8]
 8008c14:	8181      	strh	r1, [r0, #12]
 8008c16:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c18:	81c2      	strh	r2, [r0, #14]
 8008c1a:	6183      	str	r3, [r0, #24]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	2208      	movs	r2, #8
 8008c20:	305c      	adds	r0, #92	@ 0x5c
 8008c22:	f000 fa51 	bl	80090c8 <memset>
 8008c26:	4b0d      	ldr	r3, [pc, #52]	@ (8008c5c <std+0x58>)
 8008c28:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c60 <std+0x5c>)
 8008c2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c64 <std+0x60>)
 8008c30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c32:	4b0d      	ldr	r3, [pc, #52]	@ (8008c68 <std+0x64>)
 8008c34:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c36:	4b0d      	ldr	r3, [pc, #52]	@ (8008c6c <std+0x68>)
 8008c38:	6224      	str	r4, [r4, #32]
 8008c3a:	429c      	cmp	r4, r3
 8008c3c:	d006      	beq.n	8008c4c <std+0x48>
 8008c3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c42:	4294      	cmp	r4, r2
 8008c44:	d002      	beq.n	8008c4c <std+0x48>
 8008c46:	33d0      	adds	r3, #208	@ 0xd0
 8008c48:	429c      	cmp	r4, r3
 8008c4a:	d105      	bne.n	8008c58 <std+0x54>
 8008c4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c54:	f000 bb4c 	b.w	80092f0 <__retarget_lock_init_recursive>
 8008c58:	bd10      	pop	{r4, pc}
 8008c5a:	bf00      	nop
 8008c5c:	08008f19 	.word	0x08008f19
 8008c60:	08008f3b 	.word	0x08008f3b
 8008c64:	08008f73 	.word	0x08008f73
 8008c68:	08008f97 	.word	0x08008f97
 8008c6c:	20000d64 	.word	0x20000d64

08008c70 <stdio_exit_handler>:
 8008c70:	4a02      	ldr	r2, [pc, #8]	@ (8008c7c <stdio_exit_handler+0xc>)
 8008c72:	4903      	ldr	r1, [pc, #12]	@ (8008c80 <stdio_exit_handler+0x10>)
 8008c74:	4803      	ldr	r0, [pc, #12]	@ (8008c84 <stdio_exit_handler+0x14>)
 8008c76:	f000 b869 	b.w	8008d4c <_fwalk_sglue>
 8008c7a:	bf00      	nop
 8008c7c:	20000054 	.word	0x20000054
 8008c80:	0800bea9 	.word	0x0800bea9
 8008c84:	20000064 	.word	0x20000064

08008c88 <cleanup_stdio>:
 8008c88:	6841      	ldr	r1, [r0, #4]
 8008c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008cbc <cleanup_stdio+0x34>)
 8008c8c:	4299      	cmp	r1, r3
 8008c8e:	b510      	push	{r4, lr}
 8008c90:	4604      	mov	r4, r0
 8008c92:	d001      	beq.n	8008c98 <cleanup_stdio+0x10>
 8008c94:	f003 f908 	bl	800bea8 <_fflush_r>
 8008c98:	68a1      	ldr	r1, [r4, #8]
 8008c9a:	4b09      	ldr	r3, [pc, #36]	@ (8008cc0 <cleanup_stdio+0x38>)
 8008c9c:	4299      	cmp	r1, r3
 8008c9e:	d002      	beq.n	8008ca6 <cleanup_stdio+0x1e>
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f003 f901 	bl	800bea8 <_fflush_r>
 8008ca6:	68e1      	ldr	r1, [r4, #12]
 8008ca8:	4b06      	ldr	r3, [pc, #24]	@ (8008cc4 <cleanup_stdio+0x3c>)
 8008caa:	4299      	cmp	r1, r3
 8008cac:	d004      	beq.n	8008cb8 <cleanup_stdio+0x30>
 8008cae:	4620      	mov	r0, r4
 8008cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cb4:	f003 b8f8 	b.w	800bea8 <_fflush_r>
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000d64 	.word	0x20000d64
 8008cc0:	20000dcc 	.word	0x20000dcc
 8008cc4:	20000e34 	.word	0x20000e34

08008cc8 <global_stdio_init.part.0>:
 8008cc8:	b510      	push	{r4, lr}
 8008cca:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf8 <global_stdio_init.part.0+0x30>)
 8008ccc:	4c0b      	ldr	r4, [pc, #44]	@ (8008cfc <global_stdio_init.part.0+0x34>)
 8008cce:	4a0c      	ldr	r2, [pc, #48]	@ (8008d00 <global_stdio_init.part.0+0x38>)
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2104      	movs	r1, #4
 8008cd8:	f7ff ff94 	bl	8008c04 <std>
 8008cdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	2109      	movs	r1, #9
 8008ce4:	f7ff ff8e 	bl	8008c04 <std>
 8008ce8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008cec:	2202      	movs	r2, #2
 8008cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf2:	2112      	movs	r1, #18
 8008cf4:	f7ff bf86 	b.w	8008c04 <std>
 8008cf8:	20000e9c 	.word	0x20000e9c
 8008cfc:	20000d64 	.word	0x20000d64
 8008d00:	08008c71 	.word	0x08008c71

08008d04 <__sfp_lock_acquire>:
 8008d04:	4801      	ldr	r0, [pc, #4]	@ (8008d0c <__sfp_lock_acquire+0x8>)
 8008d06:	f000 baf4 	b.w	80092f2 <__retarget_lock_acquire_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	20000ea5 	.word	0x20000ea5

08008d10 <__sfp_lock_release>:
 8008d10:	4801      	ldr	r0, [pc, #4]	@ (8008d18 <__sfp_lock_release+0x8>)
 8008d12:	f000 baef 	b.w	80092f4 <__retarget_lock_release_recursive>
 8008d16:	bf00      	nop
 8008d18:	20000ea5 	.word	0x20000ea5

08008d1c <__sinit>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	4604      	mov	r4, r0
 8008d20:	f7ff fff0 	bl	8008d04 <__sfp_lock_acquire>
 8008d24:	6a23      	ldr	r3, [r4, #32]
 8008d26:	b11b      	cbz	r3, 8008d30 <__sinit+0x14>
 8008d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d2c:	f7ff bff0 	b.w	8008d10 <__sfp_lock_release>
 8008d30:	4b04      	ldr	r3, [pc, #16]	@ (8008d44 <__sinit+0x28>)
 8008d32:	6223      	str	r3, [r4, #32]
 8008d34:	4b04      	ldr	r3, [pc, #16]	@ (8008d48 <__sinit+0x2c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1f5      	bne.n	8008d28 <__sinit+0xc>
 8008d3c:	f7ff ffc4 	bl	8008cc8 <global_stdio_init.part.0>
 8008d40:	e7f2      	b.n	8008d28 <__sinit+0xc>
 8008d42:	bf00      	nop
 8008d44:	08008c89 	.word	0x08008c89
 8008d48:	20000e9c 	.word	0x20000e9c

08008d4c <_fwalk_sglue>:
 8008d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d50:	4607      	mov	r7, r0
 8008d52:	4688      	mov	r8, r1
 8008d54:	4614      	mov	r4, r2
 8008d56:	2600      	movs	r6, #0
 8008d58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d5c:	f1b9 0901 	subs.w	r9, r9, #1
 8008d60:	d505      	bpl.n	8008d6e <_fwalk_sglue+0x22>
 8008d62:	6824      	ldr	r4, [r4, #0]
 8008d64:	2c00      	cmp	r4, #0
 8008d66:	d1f7      	bne.n	8008d58 <_fwalk_sglue+0xc>
 8008d68:	4630      	mov	r0, r6
 8008d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d6e:	89ab      	ldrh	r3, [r5, #12]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d907      	bls.n	8008d84 <_fwalk_sglue+0x38>
 8008d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	d003      	beq.n	8008d84 <_fwalk_sglue+0x38>
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4638      	mov	r0, r7
 8008d80:	47c0      	blx	r8
 8008d82:	4306      	orrs	r6, r0
 8008d84:	3568      	adds	r5, #104	@ 0x68
 8008d86:	e7e9      	b.n	8008d5c <_fwalk_sglue+0x10>

08008d88 <iprintf>:
 8008d88:	b40f      	push	{r0, r1, r2, r3}
 8008d8a:	b507      	push	{r0, r1, r2, lr}
 8008d8c:	4906      	ldr	r1, [pc, #24]	@ (8008da8 <iprintf+0x20>)
 8008d8e:	ab04      	add	r3, sp, #16
 8008d90:	6808      	ldr	r0, [r1, #0]
 8008d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d96:	6881      	ldr	r1, [r0, #8]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	f002 fee9 	bl	800bb70 <_vfiprintf_r>
 8008d9e:	b003      	add	sp, #12
 8008da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008da4:	b004      	add	sp, #16
 8008da6:	4770      	bx	lr
 8008da8:	20000060 	.word	0x20000060

08008dac <_puts_r>:
 8008dac:	6a03      	ldr	r3, [r0, #32]
 8008dae:	b570      	push	{r4, r5, r6, lr}
 8008db0:	6884      	ldr	r4, [r0, #8]
 8008db2:	4605      	mov	r5, r0
 8008db4:	460e      	mov	r6, r1
 8008db6:	b90b      	cbnz	r3, 8008dbc <_puts_r+0x10>
 8008db8:	f7ff ffb0 	bl	8008d1c <__sinit>
 8008dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dbe:	07db      	lsls	r3, r3, #31
 8008dc0:	d405      	bmi.n	8008dce <_puts_r+0x22>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	0598      	lsls	r0, r3, #22
 8008dc6:	d402      	bmi.n	8008dce <_puts_r+0x22>
 8008dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dca:	f000 fa92 	bl	80092f2 <__retarget_lock_acquire_recursive>
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	0719      	lsls	r1, r3, #28
 8008dd2:	d502      	bpl.n	8008dda <_puts_r+0x2e>
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d135      	bne.n	8008e46 <_puts_r+0x9a>
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f000 f91d 	bl	800901c <__swsetup_r>
 8008de2:	b380      	cbz	r0, 8008e46 <_puts_r+0x9a>
 8008de4:	f04f 35ff 	mov.w	r5, #4294967295
 8008de8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dea:	07da      	lsls	r2, r3, #31
 8008dec:	d405      	bmi.n	8008dfa <_puts_r+0x4e>
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	059b      	lsls	r3, r3, #22
 8008df2:	d402      	bmi.n	8008dfa <_puts_r+0x4e>
 8008df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008df6:	f000 fa7d 	bl	80092f4 <__retarget_lock_release_recursive>
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	bd70      	pop	{r4, r5, r6, pc}
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	da04      	bge.n	8008e0c <_puts_r+0x60>
 8008e02:	69a2      	ldr	r2, [r4, #24]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	dc17      	bgt.n	8008e38 <_puts_r+0x8c>
 8008e08:	290a      	cmp	r1, #10
 8008e0a:	d015      	beq.n	8008e38 <_puts_r+0x8c>
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	6022      	str	r2, [r4, #0]
 8008e12:	7019      	strb	r1, [r3, #0]
 8008e14:	68a3      	ldr	r3, [r4, #8]
 8008e16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	60a3      	str	r3, [r4, #8]
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	d1ed      	bne.n	8008dfe <_puts_r+0x52>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	da11      	bge.n	8008e4a <_puts_r+0x9e>
 8008e26:	4622      	mov	r2, r4
 8008e28:	210a      	movs	r1, #10
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 f8b7 	bl	8008f9e <__swbuf_r>
 8008e30:	3001      	adds	r0, #1
 8008e32:	d0d7      	beq.n	8008de4 <_puts_r+0x38>
 8008e34:	250a      	movs	r5, #10
 8008e36:	e7d7      	b.n	8008de8 <_puts_r+0x3c>
 8008e38:	4622      	mov	r2, r4
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f000 f8af 	bl	8008f9e <__swbuf_r>
 8008e40:	3001      	adds	r0, #1
 8008e42:	d1e7      	bne.n	8008e14 <_puts_r+0x68>
 8008e44:	e7ce      	b.n	8008de4 <_puts_r+0x38>
 8008e46:	3e01      	subs	r6, #1
 8008e48:	e7e4      	b.n	8008e14 <_puts_r+0x68>
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	6022      	str	r2, [r4, #0]
 8008e50:	220a      	movs	r2, #10
 8008e52:	701a      	strb	r2, [r3, #0]
 8008e54:	e7ee      	b.n	8008e34 <_puts_r+0x88>
	...

08008e58 <puts>:
 8008e58:	4b02      	ldr	r3, [pc, #8]	@ (8008e64 <puts+0xc>)
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	f7ff bfa5 	b.w	8008dac <_puts_r>
 8008e62:	bf00      	nop
 8008e64:	20000060 	.word	0x20000060

08008e68 <sniprintf>:
 8008e68:	b40c      	push	{r2, r3}
 8008e6a:	b530      	push	{r4, r5, lr}
 8008e6c:	4b18      	ldr	r3, [pc, #96]	@ (8008ed0 <sniprintf+0x68>)
 8008e6e:	1e0c      	subs	r4, r1, #0
 8008e70:	681d      	ldr	r5, [r3, #0]
 8008e72:	b09d      	sub	sp, #116	@ 0x74
 8008e74:	da08      	bge.n	8008e88 <sniprintf+0x20>
 8008e76:	238b      	movs	r3, #139	@ 0x8b
 8008e78:	602b      	str	r3, [r5, #0]
 8008e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7e:	b01d      	add	sp, #116	@ 0x74
 8008e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e84:	b002      	add	sp, #8
 8008e86:	4770      	bx	lr
 8008e88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008e8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008e96:	bf14      	ite	ne
 8008e98:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e9c:	4623      	moveq	r3, r4
 8008e9e:	9304      	str	r3, [sp, #16]
 8008ea0:	9307      	str	r3, [sp, #28]
 8008ea2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ea6:	9002      	str	r0, [sp, #8]
 8008ea8:	9006      	str	r0, [sp, #24]
 8008eaa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008eae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008eb0:	ab21      	add	r3, sp, #132	@ 0x84
 8008eb2:	a902      	add	r1, sp, #8
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	f002 fd34 	bl	800b924 <_svfiprintf_r>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	bfbc      	itt	lt
 8008ec0:	238b      	movlt	r3, #139	@ 0x8b
 8008ec2:	602b      	strlt	r3, [r5, #0]
 8008ec4:	2c00      	cmp	r4, #0
 8008ec6:	d0da      	beq.n	8008e7e <sniprintf+0x16>
 8008ec8:	9b02      	ldr	r3, [sp, #8]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	701a      	strb	r2, [r3, #0]
 8008ece:	e7d6      	b.n	8008e7e <sniprintf+0x16>
 8008ed0:	20000060 	.word	0x20000060

08008ed4 <siprintf>:
 8008ed4:	b40e      	push	{r1, r2, r3}
 8008ed6:	b510      	push	{r4, lr}
 8008ed8:	b09d      	sub	sp, #116	@ 0x74
 8008eda:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008edc:	9002      	str	r0, [sp, #8]
 8008ede:	9006      	str	r0, [sp, #24]
 8008ee0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ee4:	480a      	ldr	r0, [pc, #40]	@ (8008f10 <siprintf+0x3c>)
 8008ee6:	9107      	str	r1, [sp, #28]
 8008ee8:	9104      	str	r1, [sp, #16]
 8008eea:	490a      	ldr	r1, [pc, #40]	@ (8008f14 <siprintf+0x40>)
 8008eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef0:	9105      	str	r1, [sp, #20]
 8008ef2:	2400      	movs	r4, #0
 8008ef4:	a902      	add	r1, sp, #8
 8008ef6:	6800      	ldr	r0, [r0, #0]
 8008ef8:	9301      	str	r3, [sp, #4]
 8008efa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008efc:	f002 fd12 	bl	800b924 <_svfiprintf_r>
 8008f00:	9b02      	ldr	r3, [sp, #8]
 8008f02:	701c      	strb	r4, [r3, #0]
 8008f04:	b01d      	add	sp, #116	@ 0x74
 8008f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f0a:	b003      	add	sp, #12
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	20000060 	.word	0x20000060
 8008f14:	ffff0208 	.word	0xffff0208

08008f18 <__sread>:
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f20:	f000 f998 	bl	8009254 <_read_r>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	bfab      	itete	ge
 8008f28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f2c:	181b      	addge	r3, r3, r0
 8008f2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f32:	bfac      	ite	ge
 8008f34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f36:	81a3      	strhlt	r3, [r4, #12]
 8008f38:	bd10      	pop	{r4, pc}

08008f3a <__swrite>:
 8008f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3e:	461f      	mov	r7, r3
 8008f40:	898b      	ldrh	r3, [r1, #12]
 8008f42:	05db      	lsls	r3, r3, #23
 8008f44:	4605      	mov	r5, r0
 8008f46:	460c      	mov	r4, r1
 8008f48:	4616      	mov	r6, r2
 8008f4a:	d505      	bpl.n	8008f58 <__swrite+0x1e>
 8008f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f50:	2302      	movs	r3, #2
 8008f52:	2200      	movs	r2, #0
 8008f54:	f000 f96c 	bl	8009230 <_lseek_r>
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f62:	81a3      	strh	r3, [r4, #12]
 8008f64:	4632      	mov	r2, r6
 8008f66:	463b      	mov	r3, r7
 8008f68:	4628      	mov	r0, r5
 8008f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6e:	f000 b983 	b.w	8009278 <_write_r>

08008f72 <__sseek>:
 8008f72:	b510      	push	{r4, lr}
 8008f74:	460c      	mov	r4, r1
 8008f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f7a:	f000 f959 	bl	8009230 <_lseek_r>
 8008f7e:	1c43      	adds	r3, r0, #1
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	bf15      	itete	ne
 8008f84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f8e:	81a3      	strheq	r3, [r4, #12]
 8008f90:	bf18      	it	ne
 8008f92:	81a3      	strhne	r3, [r4, #12]
 8008f94:	bd10      	pop	{r4, pc}

08008f96 <__sclose>:
 8008f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9a:	f000 b939 	b.w	8009210 <_close_r>

08008f9e <__swbuf_r>:
 8008f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa0:	460e      	mov	r6, r1
 8008fa2:	4614      	mov	r4, r2
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	b118      	cbz	r0, 8008fb0 <__swbuf_r+0x12>
 8008fa8:	6a03      	ldr	r3, [r0, #32]
 8008faa:	b90b      	cbnz	r3, 8008fb0 <__swbuf_r+0x12>
 8008fac:	f7ff feb6 	bl	8008d1c <__sinit>
 8008fb0:	69a3      	ldr	r3, [r4, #24]
 8008fb2:	60a3      	str	r3, [r4, #8]
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	071a      	lsls	r2, r3, #28
 8008fb8:	d501      	bpl.n	8008fbe <__swbuf_r+0x20>
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	b943      	cbnz	r3, 8008fd0 <__swbuf_r+0x32>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f000 f82b 	bl	800901c <__swsetup_r>
 8008fc6:	b118      	cbz	r0, 8008fd0 <__swbuf_r+0x32>
 8008fc8:	f04f 37ff 	mov.w	r7, #4294967295
 8008fcc:	4638      	mov	r0, r7
 8008fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	6922      	ldr	r2, [r4, #16]
 8008fd4:	1a98      	subs	r0, r3, r2
 8008fd6:	6963      	ldr	r3, [r4, #20]
 8008fd8:	b2f6      	uxtb	r6, r6
 8008fda:	4283      	cmp	r3, r0
 8008fdc:	4637      	mov	r7, r6
 8008fde:	dc05      	bgt.n	8008fec <__swbuf_r+0x4e>
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f002 ff60 	bl	800bea8 <_fflush_r>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d1ed      	bne.n	8008fc8 <__swbuf_r+0x2a>
 8008fec:	68a3      	ldr	r3, [r4, #8]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	60a3      	str	r3, [r4, #8]
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	6022      	str	r2, [r4, #0]
 8008ff8:	701e      	strb	r6, [r3, #0]
 8008ffa:	6962      	ldr	r2, [r4, #20]
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d004      	beq.n	800900c <__swbuf_r+0x6e>
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	07db      	lsls	r3, r3, #31
 8009006:	d5e1      	bpl.n	8008fcc <__swbuf_r+0x2e>
 8009008:	2e0a      	cmp	r6, #10
 800900a:	d1df      	bne.n	8008fcc <__swbuf_r+0x2e>
 800900c:	4621      	mov	r1, r4
 800900e:	4628      	mov	r0, r5
 8009010:	f002 ff4a 	bl	800bea8 <_fflush_r>
 8009014:	2800      	cmp	r0, #0
 8009016:	d0d9      	beq.n	8008fcc <__swbuf_r+0x2e>
 8009018:	e7d6      	b.n	8008fc8 <__swbuf_r+0x2a>
	...

0800901c <__swsetup_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4b29      	ldr	r3, [pc, #164]	@ (80090c4 <__swsetup_r+0xa8>)
 8009020:	4605      	mov	r5, r0
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	460c      	mov	r4, r1
 8009026:	b118      	cbz	r0, 8009030 <__swsetup_r+0x14>
 8009028:	6a03      	ldr	r3, [r0, #32]
 800902a:	b90b      	cbnz	r3, 8009030 <__swsetup_r+0x14>
 800902c:	f7ff fe76 	bl	8008d1c <__sinit>
 8009030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009034:	0719      	lsls	r1, r3, #28
 8009036:	d422      	bmi.n	800907e <__swsetup_r+0x62>
 8009038:	06da      	lsls	r2, r3, #27
 800903a:	d407      	bmi.n	800904c <__swsetup_r+0x30>
 800903c:	2209      	movs	r2, #9
 800903e:	602a      	str	r2, [r5, #0]
 8009040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009044:	81a3      	strh	r3, [r4, #12]
 8009046:	f04f 30ff 	mov.w	r0, #4294967295
 800904a:	e033      	b.n	80090b4 <__swsetup_r+0x98>
 800904c:	0758      	lsls	r0, r3, #29
 800904e:	d512      	bpl.n	8009076 <__swsetup_r+0x5a>
 8009050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009052:	b141      	cbz	r1, 8009066 <__swsetup_r+0x4a>
 8009054:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009058:	4299      	cmp	r1, r3
 800905a:	d002      	beq.n	8009062 <__swsetup_r+0x46>
 800905c:	4628      	mov	r0, r5
 800905e:	f000 ffd7 	bl	800a010 <_free_r>
 8009062:	2300      	movs	r3, #0
 8009064:	6363      	str	r3, [r4, #52]	@ 0x34
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800906c:	81a3      	strh	r3, [r4, #12]
 800906e:	2300      	movs	r3, #0
 8009070:	6063      	str	r3, [r4, #4]
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f043 0308 	orr.w	r3, r3, #8
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	6923      	ldr	r3, [r4, #16]
 8009080:	b94b      	cbnz	r3, 8009096 <__swsetup_r+0x7a>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800908c:	d003      	beq.n	8009096 <__swsetup_r+0x7a>
 800908e:	4621      	mov	r1, r4
 8009090:	4628      	mov	r0, r5
 8009092:	f002 ff69 	bl	800bf68 <__smakebuf_r>
 8009096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800909a:	f013 0201 	ands.w	r2, r3, #1
 800909e:	d00a      	beq.n	80090b6 <__swsetup_r+0x9a>
 80090a0:	2200      	movs	r2, #0
 80090a2:	60a2      	str	r2, [r4, #8]
 80090a4:	6962      	ldr	r2, [r4, #20]
 80090a6:	4252      	negs	r2, r2
 80090a8:	61a2      	str	r2, [r4, #24]
 80090aa:	6922      	ldr	r2, [r4, #16]
 80090ac:	b942      	cbnz	r2, 80090c0 <__swsetup_r+0xa4>
 80090ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090b2:	d1c5      	bne.n	8009040 <__swsetup_r+0x24>
 80090b4:	bd38      	pop	{r3, r4, r5, pc}
 80090b6:	0799      	lsls	r1, r3, #30
 80090b8:	bf58      	it	pl
 80090ba:	6962      	ldrpl	r2, [r4, #20]
 80090bc:	60a2      	str	r2, [r4, #8]
 80090be:	e7f4      	b.n	80090aa <__swsetup_r+0x8e>
 80090c0:	2000      	movs	r0, #0
 80090c2:	e7f7      	b.n	80090b4 <__swsetup_r+0x98>
 80090c4:	20000060 	.word	0x20000060

080090c8 <memset>:
 80090c8:	4402      	add	r2, r0
 80090ca:	4603      	mov	r3, r0
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d100      	bne.n	80090d2 <memset+0xa>
 80090d0:	4770      	bx	lr
 80090d2:	f803 1b01 	strb.w	r1, [r3], #1
 80090d6:	e7f9      	b.n	80090cc <memset+0x4>

080090d8 <strncmp>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	b16a      	cbz	r2, 80090f8 <strncmp+0x20>
 80090dc:	3901      	subs	r1, #1
 80090de:	1884      	adds	r4, r0, r2
 80090e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d103      	bne.n	80090f4 <strncmp+0x1c>
 80090ec:	42a0      	cmp	r0, r4
 80090ee:	d001      	beq.n	80090f4 <strncmp+0x1c>
 80090f0:	2a00      	cmp	r2, #0
 80090f2:	d1f5      	bne.n	80090e0 <strncmp+0x8>
 80090f4:	1ad0      	subs	r0, r2, r3
 80090f6:	bd10      	pop	{r4, pc}
 80090f8:	4610      	mov	r0, r2
 80090fa:	e7fc      	b.n	80090f6 <strncmp+0x1e>

080090fc <strncpy>:
 80090fc:	b510      	push	{r4, lr}
 80090fe:	3901      	subs	r1, #1
 8009100:	4603      	mov	r3, r0
 8009102:	b132      	cbz	r2, 8009112 <strncpy+0x16>
 8009104:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009108:	f803 4b01 	strb.w	r4, [r3], #1
 800910c:	3a01      	subs	r2, #1
 800910e:	2c00      	cmp	r4, #0
 8009110:	d1f7      	bne.n	8009102 <strncpy+0x6>
 8009112:	441a      	add	r2, r3
 8009114:	2100      	movs	r1, #0
 8009116:	4293      	cmp	r3, r2
 8009118:	d100      	bne.n	800911c <strncpy+0x20>
 800911a:	bd10      	pop	{r4, pc}
 800911c:	f803 1b01 	strb.w	r1, [r3], #1
 8009120:	e7f9      	b.n	8009116 <strncpy+0x1a>
	...

08009124 <strtok>:
 8009124:	4b16      	ldr	r3, [pc, #88]	@ (8009180 <strtok+0x5c>)
 8009126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912a:	681f      	ldr	r7, [r3, #0]
 800912c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800912e:	4605      	mov	r5, r0
 8009130:	460e      	mov	r6, r1
 8009132:	b9ec      	cbnz	r4, 8009170 <strtok+0x4c>
 8009134:	2050      	movs	r0, #80	@ 0x50
 8009136:	f000 ffb5 	bl	800a0a4 <malloc>
 800913a:	4602      	mov	r2, r0
 800913c:	6478      	str	r0, [r7, #68]	@ 0x44
 800913e:	b920      	cbnz	r0, 800914a <strtok+0x26>
 8009140:	4b10      	ldr	r3, [pc, #64]	@ (8009184 <strtok+0x60>)
 8009142:	4811      	ldr	r0, [pc, #68]	@ (8009188 <strtok+0x64>)
 8009144:	215b      	movs	r1, #91	@ 0x5b
 8009146:	f000 f8eb 	bl	8009320 <__assert_func>
 800914a:	e9c0 4400 	strd	r4, r4, [r0]
 800914e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009152:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009156:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800915a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800915e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009162:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009166:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800916a:	6184      	str	r4, [r0, #24]
 800916c:	7704      	strb	r4, [r0, #28]
 800916e:	6244      	str	r4, [r0, #36]	@ 0x24
 8009170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009172:	4631      	mov	r1, r6
 8009174:	4628      	mov	r0, r5
 8009176:	2301      	movs	r3, #1
 8009178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800917c:	f000 b806 	b.w	800918c <__strtok_r>
 8009180:	20000060 	.word	0x20000060
 8009184:	0800d415 	.word	0x0800d415
 8009188:	0800d42c 	.word	0x0800d42c

0800918c <__strtok_r>:
 800918c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800918e:	4604      	mov	r4, r0
 8009190:	b908      	cbnz	r0, 8009196 <__strtok_r+0xa>
 8009192:	6814      	ldr	r4, [r2, #0]
 8009194:	b144      	cbz	r4, 80091a8 <__strtok_r+0x1c>
 8009196:	4620      	mov	r0, r4
 8009198:	f814 5b01 	ldrb.w	r5, [r4], #1
 800919c:	460f      	mov	r7, r1
 800919e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80091a2:	b91e      	cbnz	r6, 80091ac <__strtok_r+0x20>
 80091a4:	b965      	cbnz	r5, 80091c0 <__strtok_r+0x34>
 80091a6:	6015      	str	r5, [r2, #0]
 80091a8:	2000      	movs	r0, #0
 80091aa:	e005      	b.n	80091b8 <__strtok_r+0x2c>
 80091ac:	42b5      	cmp	r5, r6
 80091ae:	d1f6      	bne.n	800919e <__strtok_r+0x12>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1f0      	bne.n	8009196 <__strtok_r+0xa>
 80091b4:	6014      	str	r4, [r2, #0]
 80091b6:	7003      	strb	r3, [r0, #0]
 80091b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ba:	461c      	mov	r4, r3
 80091bc:	e00c      	b.n	80091d8 <__strtok_r+0x4c>
 80091be:	b91d      	cbnz	r5, 80091c8 <__strtok_r+0x3c>
 80091c0:	4627      	mov	r7, r4
 80091c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091c6:	460e      	mov	r6, r1
 80091c8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80091cc:	42ab      	cmp	r3, r5
 80091ce:	d1f6      	bne.n	80091be <__strtok_r+0x32>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d0f2      	beq.n	80091ba <__strtok_r+0x2e>
 80091d4:	2300      	movs	r3, #0
 80091d6:	703b      	strb	r3, [r7, #0]
 80091d8:	6014      	str	r4, [r2, #0]
 80091da:	e7ed      	b.n	80091b8 <__strtok_r+0x2c>

080091dc <strstr>:
 80091dc:	780a      	ldrb	r2, [r1, #0]
 80091de:	b570      	push	{r4, r5, r6, lr}
 80091e0:	b96a      	cbnz	r2, 80091fe <strstr+0x22>
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d109      	bne.n	80091fc <strstr+0x20>
 80091e8:	460c      	mov	r4, r1
 80091ea:	4605      	mov	r5, r0
 80091ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d0f6      	beq.n	80091e2 <strstr+0x6>
 80091f4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80091f8:	429e      	cmp	r6, r3
 80091fa:	d0f7      	beq.n	80091ec <strstr+0x10>
 80091fc:	3001      	adds	r0, #1
 80091fe:	7803      	ldrb	r3, [r0, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1ef      	bne.n	80091e4 <strstr+0x8>
 8009204:	4618      	mov	r0, r3
 8009206:	e7ec      	b.n	80091e2 <strstr+0x6>

08009208 <_localeconv_r>:
 8009208:	4800      	ldr	r0, [pc, #0]	@ (800920c <_localeconv_r+0x4>)
 800920a:	4770      	bx	lr
 800920c:	200001a0 	.word	0x200001a0

08009210 <_close_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d06      	ldr	r5, [pc, #24]	@ (800922c <_close_r+0x1c>)
 8009214:	2300      	movs	r3, #0
 8009216:	4604      	mov	r4, r0
 8009218:	4608      	mov	r0, r1
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	f7f8 fa3b 	bl	8001696 <_close>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d102      	bne.n	800922a <_close_r+0x1a>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	b103      	cbz	r3, 800922a <_close_r+0x1a>
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	20000ea0 	.word	0x20000ea0

08009230 <_lseek_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4d07      	ldr	r5, [pc, #28]	@ (8009250 <_lseek_r+0x20>)
 8009234:	4604      	mov	r4, r0
 8009236:	4608      	mov	r0, r1
 8009238:	4611      	mov	r1, r2
 800923a:	2200      	movs	r2, #0
 800923c:	602a      	str	r2, [r5, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	f7f8 fa50 	bl	80016e4 <_lseek>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_lseek_r+0x1e>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_lseek_r+0x1e>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20000ea0 	.word	0x20000ea0

08009254 <_read_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d07      	ldr	r5, [pc, #28]	@ (8009274 <_read_r+0x20>)
 8009258:	4604      	mov	r4, r0
 800925a:	4608      	mov	r0, r1
 800925c:	4611      	mov	r1, r2
 800925e:	2200      	movs	r2, #0
 8009260:	602a      	str	r2, [r5, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f7f8 f9de 	bl	8001624 <_read>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_read_r+0x1e>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_read_r+0x1e>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	20000ea0 	.word	0x20000ea0

08009278 <_write_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d07      	ldr	r5, [pc, #28]	@ (8009298 <_write_r+0x20>)
 800927c:	4604      	mov	r4, r0
 800927e:	4608      	mov	r0, r1
 8009280:	4611      	mov	r1, r2
 8009282:	2200      	movs	r2, #0
 8009284:	602a      	str	r2, [r5, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	f7f8 f9e9 	bl	800165e <_write>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_write_r+0x1e>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_write_r+0x1e>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	20000ea0 	.word	0x20000ea0

0800929c <__errno>:
 800929c:	4b01      	ldr	r3, [pc, #4]	@ (80092a4 <__errno+0x8>)
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	20000060 	.word	0x20000060

080092a8 <__libc_init_array>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	4d0d      	ldr	r5, [pc, #52]	@ (80092e0 <__libc_init_array+0x38>)
 80092ac:	4c0d      	ldr	r4, [pc, #52]	@ (80092e4 <__libc_init_array+0x3c>)
 80092ae:	1b64      	subs	r4, r4, r5
 80092b0:	10a4      	asrs	r4, r4, #2
 80092b2:	2600      	movs	r6, #0
 80092b4:	42a6      	cmp	r6, r4
 80092b6:	d109      	bne.n	80092cc <__libc_init_array+0x24>
 80092b8:	4d0b      	ldr	r5, [pc, #44]	@ (80092e8 <__libc_init_array+0x40>)
 80092ba:	4c0c      	ldr	r4, [pc, #48]	@ (80092ec <__libc_init_array+0x44>)
 80092bc:	f003 fad0 	bl	800c860 <_init>
 80092c0:	1b64      	subs	r4, r4, r5
 80092c2:	10a4      	asrs	r4, r4, #2
 80092c4:	2600      	movs	r6, #0
 80092c6:	42a6      	cmp	r6, r4
 80092c8:	d105      	bne.n	80092d6 <__libc_init_array+0x2e>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d0:	4798      	blx	r3
 80092d2:	3601      	adds	r6, #1
 80092d4:	e7ee      	b.n	80092b4 <__libc_init_array+0xc>
 80092d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092da:	4798      	blx	r3
 80092dc:	3601      	adds	r6, #1
 80092de:	e7f2      	b.n	80092c6 <__libc_init_array+0x1e>
 80092e0:	0800d864 	.word	0x0800d864
 80092e4:	0800d864 	.word	0x0800d864
 80092e8:	0800d864 	.word	0x0800d864
 80092ec:	0800d868 	.word	0x0800d868

080092f0 <__retarget_lock_init_recursive>:
 80092f0:	4770      	bx	lr

080092f2 <__retarget_lock_acquire_recursive>:
 80092f2:	4770      	bx	lr

080092f4 <__retarget_lock_release_recursive>:
 80092f4:	4770      	bx	lr

080092f6 <memcpy>:
 80092f6:	440a      	add	r2, r1
 80092f8:	4291      	cmp	r1, r2
 80092fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80092fe:	d100      	bne.n	8009302 <memcpy+0xc>
 8009300:	4770      	bx	lr
 8009302:	b510      	push	{r4, lr}
 8009304:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009308:	f803 4f01 	strb.w	r4, [r3, #1]!
 800930c:	4291      	cmp	r1, r2
 800930e:	d1f9      	bne.n	8009304 <memcpy+0xe>
 8009310:	bd10      	pop	{r4, pc}
	...

08009314 <nanf>:
 8009314:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800931c <nanf+0x8>
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	7fc00000 	.word	0x7fc00000

08009320 <__assert_func>:
 8009320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009322:	4614      	mov	r4, r2
 8009324:	461a      	mov	r2, r3
 8009326:	4b09      	ldr	r3, [pc, #36]	@ (800934c <__assert_func+0x2c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4605      	mov	r5, r0
 800932c:	68d8      	ldr	r0, [r3, #12]
 800932e:	b14c      	cbz	r4, 8009344 <__assert_func+0x24>
 8009330:	4b07      	ldr	r3, [pc, #28]	@ (8009350 <__assert_func+0x30>)
 8009332:	9100      	str	r1, [sp, #0]
 8009334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009338:	4906      	ldr	r1, [pc, #24]	@ (8009354 <__assert_func+0x34>)
 800933a:	462b      	mov	r3, r5
 800933c:	f002 fddc 	bl	800bef8 <fiprintf>
 8009340:	f002 fea2 	bl	800c088 <abort>
 8009344:	4b04      	ldr	r3, [pc, #16]	@ (8009358 <__assert_func+0x38>)
 8009346:	461c      	mov	r4, r3
 8009348:	e7f3      	b.n	8009332 <__assert_func+0x12>
 800934a:	bf00      	nop
 800934c:	20000060 	.word	0x20000060
 8009350:	0800d486 	.word	0x0800d486
 8009354:	0800d493 	.word	0x0800d493
 8009358:	0800d4c1 	.word	0x0800d4c1

0800935c <quorem>:
 800935c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	6903      	ldr	r3, [r0, #16]
 8009362:	690c      	ldr	r4, [r1, #16]
 8009364:	42a3      	cmp	r3, r4
 8009366:	4607      	mov	r7, r0
 8009368:	db7e      	blt.n	8009468 <quorem+0x10c>
 800936a:	3c01      	subs	r4, #1
 800936c:	f101 0814 	add.w	r8, r1, #20
 8009370:	00a3      	lsls	r3, r4, #2
 8009372:	f100 0514 	add.w	r5, r0, #20
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009386:	3301      	adds	r3, #1
 8009388:	429a      	cmp	r2, r3
 800938a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800938e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009392:	d32e      	bcc.n	80093f2 <quorem+0x96>
 8009394:	f04f 0a00 	mov.w	sl, #0
 8009398:	46c4      	mov	ip, r8
 800939a:	46ae      	mov	lr, r5
 800939c:	46d3      	mov	fp, sl
 800939e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093a2:	b298      	uxth	r0, r3
 80093a4:	fb06 a000 	mla	r0, r6, r0, sl
 80093a8:	0c02      	lsrs	r2, r0, #16
 80093aa:	0c1b      	lsrs	r3, r3, #16
 80093ac:	fb06 2303 	mla	r3, r6, r3, r2
 80093b0:	f8de 2000 	ldr.w	r2, [lr]
 80093b4:	b280      	uxth	r0, r0
 80093b6:	b292      	uxth	r2, r2
 80093b8:	1a12      	subs	r2, r2, r0
 80093ba:	445a      	add	r2, fp
 80093bc:	f8de 0000 	ldr.w	r0, [lr]
 80093c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093ce:	b292      	uxth	r2, r2
 80093d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093d4:	45e1      	cmp	r9, ip
 80093d6:	f84e 2b04 	str.w	r2, [lr], #4
 80093da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093de:	d2de      	bcs.n	800939e <quorem+0x42>
 80093e0:	9b00      	ldr	r3, [sp, #0]
 80093e2:	58eb      	ldr	r3, [r5, r3]
 80093e4:	b92b      	cbnz	r3, 80093f2 <quorem+0x96>
 80093e6:	9b01      	ldr	r3, [sp, #4]
 80093e8:	3b04      	subs	r3, #4
 80093ea:	429d      	cmp	r5, r3
 80093ec:	461a      	mov	r2, r3
 80093ee:	d32f      	bcc.n	8009450 <quorem+0xf4>
 80093f0:	613c      	str	r4, [r7, #16]
 80093f2:	4638      	mov	r0, r7
 80093f4:	f001 f9c8 	bl	800a788 <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	db25      	blt.n	8009448 <quorem+0xec>
 80093fc:	4629      	mov	r1, r5
 80093fe:	2000      	movs	r0, #0
 8009400:	f858 2b04 	ldr.w	r2, [r8], #4
 8009404:	f8d1 c000 	ldr.w	ip, [r1]
 8009408:	fa1f fe82 	uxth.w	lr, r2
 800940c:	fa1f f38c 	uxth.w	r3, ip
 8009410:	eba3 030e 	sub.w	r3, r3, lr
 8009414:	4403      	add	r3, r0
 8009416:	0c12      	lsrs	r2, r2, #16
 8009418:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800941c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009420:	b29b      	uxth	r3, r3
 8009422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009426:	45c1      	cmp	r9, r8
 8009428:	f841 3b04 	str.w	r3, [r1], #4
 800942c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009430:	d2e6      	bcs.n	8009400 <quorem+0xa4>
 8009432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800943a:	b922      	cbnz	r2, 8009446 <quorem+0xea>
 800943c:	3b04      	subs	r3, #4
 800943e:	429d      	cmp	r5, r3
 8009440:	461a      	mov	r2, r3
 8009442:	d30b      	bcc.n	800945c <quorem+0x100>
 8009444:	613c      	str	r4, [r7, #16]
 8009446:	3601      	adds	r6, #1
 8009448:	4630      	mov	r0, r6
 800944a:	b003      	add	sp, #12
 800944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	3b04      	subs	r3, #4
 8009454:	2a00      	cmp	r2, #0
 8009456:	d1cb      	bne.n	80093f0 <quorem+0x94>
 8009458:	3c01      	subs	r4, #1
 800945a:	e7c6      	b.n	80093ea <quorem+0x8e>
 800945c:	6812      	ldr	r2, [r2, #0]
 800945e:	3b04      	subs	r3, #4
 8009460:	2a00      	cmp	r2, #0
 8009462:	d1ef      	bne.n	8009444 <quorem+0xe8>
 8009464:	3c01      	subs	r4, #1
 8009466:	e7ea      	b.n	800943e <quorem+0xe2>
 8009468:	2000      	movs	r0, #0
 800946a:	e7ee      	b.n	800944a <quorem+0xee>
 800946c:	0000      	movs	r0, r0
	...

08009470 <_dtoa_r>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	69c7      	ldr	r7, [r0, #28]
 8009476:	b097      	sub	sp, #92	@ 0x5c
 8009478:	ed8d 0b04 	vstr	d0, [sp, #16]
 800947c:	ec55 4b10 	vmov	r4, r5, d0
 8009480:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009482:	9107      	str	r1, [sp, #28]
 8009484:	4681      	mov	r9, r0
 8009486:	920c      	str	r2, [sp, #48]	@ 0x30
 8009488:	9311      	str	r3, [sp, #68]	@ 0x44
 800948a:	b97f      	cbnz	r7, 80094ac <_dtoa_r+0x3c>
 800948c:	2010      	movs	r0, #16
 800948e:	f000 fe09 	bl	800a0a4 <malloc>
 8009492:	4602      	mov	r2, r0
 8009494:	f8c9 001c 	str.w	r0, [r9, #28]
 8009498:	b920      	cbnz	r0, 80094a4 <_dtoa_r+0x34>
 800949a:	4ba9      	ldr	r3, [pc, #676]	@ (8009740 <_dtoa_r+0x2d0>)
 800949c:	21ef      	movs	r1, #239	@ 0xef
 800949e:	48a9      	ldr	r0, [pc, #676]	@ (8009744 <_dtoa_r+0x2d4>)
 80094a0:	f7ff ff3e 	bl	8009320 <__assert_func>
 80094a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80094a8:	6007      	str	r7, [r0, #0]
 80094aa:	60c7      	str	r7, [r0, #12]
 80094ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094b0:	6819      	ldr	r1, [r3, #0]
 80094b2:	b159      	cbz	r1, 80094cc <_dtoa_r+0x5c>
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	604a      	str	r2, [r1, #4]
 80094b8:	2301      	movs	r3, #1
 80094ba:	4093      	lsls	r3, r2
 80094bc:	608b      	str	r3, [r1, #8]
 80094be:	4648      	mov	r0, r9
 80094c0:	f000 fee6 	bl	800a290 <_Bfree>
 80094c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	1e2b      	subs	r3, r5, #0
 80094ce:	bfb9      	ittee	lt
 80094d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094d4:	9305      	strlt	r3, [sp, #20]
 80094d6:	2300      	movge	r3, #0
 80094d8:	6033      	strge	r3, [r6, #0]
 80094da:	9f05      	ldr	r7, [sp, #20]
 80094dc:	4b9a      	ldr	r3, [pc, #616]	@ (8009748 <_dtoa_r+0x2d8>)
 80094de:	bfbc      	itt	lt
 80094e0:	2201      	movlt	r2, #1
 80094e2:	6032      	strlt	r2, [r6, #0]
 80094e4:	43bb      	bics	r3, r7
 80094e6:	d112      	bne.n	800950e <_dtoa_r+0x9e>
 80094e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094f4:	4323      	orrs	r3, r4
 80094f6:	f000 855a 	beq.w	8009fae <_dtoa_r+0xb3e>
 80094fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800975c <_dtoa_r+0x2ec>
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 855c 	beq.w	8009fbe <_dtoa_r+0xb4e>
 8009506:	f10a 0303 	add.w	r3, sl, #3
 800950a:	f000 bd56 	b.w	8009fba <_dtoa_r+0xb4a>
 800950e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009512:	2200      	movs	r2, #0
 8009514:	ec51 0b17 	vmov	r0, r1, d7
 8009518:	2300      	movs	r3, #0
 800951a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800951e:	f7f7 fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009522:	4680      	mov	r8, r0
 8009524:	b158      	cbz	r0, 800953e <_dtoa_r+0xce>
 8009526:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009528:	2301      	movs	r3, #1
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800952e:	b113      	cbz	r3, 8009536 <_dtoa_r+0xc6>
 8009530:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009532:	4b86      	ldr	r3, [pc, #536]	@ (800974c <_dtoa_r+0x2dc>)
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009760 <_dtoa_r+0x2f0>
 800953a:	f000 bd40 	b.w	8009fbe <_dtoa_r+0xb4e>
 800953e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009542:	aa14      	add	r2, sp, #80	@ 0x50
 8009544:	a915      	add	r1, sp, #84	@ 0x54
 8009546:	4648      	mov	r0, r9
 8009548:	f001 fa3e 	bl	800a9c8 <__d2b>
 800954c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009550:	9002      	str	r0, [sp, #8]
 8009552:	2e00      	cmp	r6, #0
 8009554:	d078      	beq.n	8009648 <_dtoa_r+0x1d8>
 8009556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009558:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800955c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009560:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009564:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009568:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800956c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009570:	4619      	mov	r1, r3
 8009572:	2200      	movs	r2, #0
 8009574:	4b76      	ldr	r3, [pc, #472]	@ (8009750 <_dtoa_r+0x2e0>)
 8009576:	f7f6 fe87 	bl	8000288 <__aeabi_dsub>
 800957a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009728 <_dtoa_r+0x2b8>)
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	f7f7 f83a 	bl	80005f8 <__aeabi_dmul>
 8009584:	a36a      	add	r3, pc, #424	@ (adr r3, 8009730 <_dtoa_r+0x2c0>)
 8009586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958a:	f7f6 fe7f 	bl	800028c <__adddf3>
 800958e:	4604      	mov	r4, r0
 8009590:	4630      	mov	r0, r6
 8009592:	460d      	mov	r5, r1
 8009594:	f7f6 ffc6 	bl	8000524 <__aeabi_i2d>
 8009598:	a367      	add	r3, pc, #412	@ (adr r3, 8009738 <_dtoa_r+0x2c8>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	f7f7 f82b 	bl	80005f8 <__aeabi_dmul>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	4620      	mov	r0, r4
 80095a8:	4629      	mov	r1, r5
 80095aa:	f7f6 fe6f 	bl	800028c <__adddf3>
 80095ae:	4604      	mov	r4, r0
 80095b0:	460d      	mov	r5, r1
 80095b2:	f7f7 fad1 	bl	8000b58 <__aeabi_d2iz>
 80095b6:	2200      	movs	r2, #0
 80095b8:	4607      	mov	r7, r0
 80095ba:	2300      	movs	r3, #0
 80095bc:	4620      	mov	r0, r4
 80095be:	4629      	mov	r1, r5
 80095c0:	f7f7 fa8c 	bl	8000adc <__aeabi_dcmplt>
 80095c4:	b140      	cbz	r0, 80095d8 <_dtoa_r+0x168>
 80095c6:	4638      	mov	r0, r7
 80095c8:	f7f6 ffac 	bl	8000524 <__aeabi_i2d>
 80095cc:	4622      	mov	r2, r4
 80095ce:	462b      	mov	r3, r5
 80095d0:	f7f7 fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80095d4:	b900      	cbnz	r0, 80095d8 <_dtoa_r+0x168>
 80095d6:	3f01      	subs	r7, #1
 80095d8:	2f16      	cmp	r7, #22
 80095da:	d852      	bhi.n	8009682 <_dtoa_r+0x212>
 80095dc:	4b5d      	ldr	r3, [pc, #372]	@ (8009754 <_dtoa_r+0x2e4>)
 80095de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095ea:	f7f7 fa77 	bl	8000adc <__aeabi_dcmplt>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d049      	beq.n	8009686 <_dtoa_r+0x216>
 80095f2:	3f01      	subs	r7, #1
 80095f4:	2300      	movs	r3, #0
 80095f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095fa:	1b9b      	subs	r3, r3, r6
 80095fc:	1e5a      	subs	r2, r3, #1
 80095fe:	bf45      	ittet	mi
 8009600:	f1c3 0301 	rsbmi	r3, r3, #1
 8009604:	9300      	strmi	r3, [sp, #0]
 8009606:	2300      	movpl	r3, #0
 8009608:	2300      	movmi	r3, #0
 800960a:	9206      	str	r2, [sp, #24]
 800960c:	bf54      	ite	pl
 800960e:	9300      	strpl	r3, [sp, #0]
 8009610:	9306      	strmi	r3, [sp, #24]
 8009612:	2f00      	cmp	r7, #0
 8009614:	db39      	blt.n	800968a <_dtoa_r+0x21a>
 8009616:	9b06      	ldr	r3, [sp, #24]
 8009618:	970d      	str	r7, [sp, #52]	@ 0x34
 800961a:	443b      	add	r3, r7
 800961c:	9306      	str	r3, [sp, #24]
 800961e:	2300      	movs	r3, #0
 8009620:	9308      	str	r3, [sp, #32]
 8009622:	9b07      	ldr	r3, [sp, #28]
 8009624:	2b09      	cmp	r3, #9
 8009626:	d863      	bhi.n	80096f0 <_dtoa_r+0x280>
 8009628:	2b05      	cmp	r3, #5
 800962a:	bfc4      	itt	gt
 800962c:	3b04      	subgt	r3, #4
 800962e:	9307      	strgt	r3, [sp, #28]
 8009630:	9b07      	ldr	r3, [sp, #28]
 8009632:	f1a3 0302 	sub.w	r3, r3, #2
 8009636:	bfcc      	ite	gt
 8009638:	2400      	movgt	r4, #0
 800963a:	2401      	movle	r4, #1
 800963c:	2b03      	cmp	r3, #3
 800963e:	d863      	bhi.n	8009708 <_dtoa_r+0x298>
 8009640:	e8df f003 	tbb	[pc, r3]
 8009644:	2b375452 	.word	0x2b375452
 8009648:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800964c:	441e      	add	r6, r3
 800964e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009652:	2b20      	cmp	r3, #32
 8009654:	bfc1      	itttt	gt
 8009656:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800965a:	409f      	lslgt	r7, r3
 800965c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009660:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009664:	bfd6      	itet	le
 8009666:	f1c3 0320 	rsble	r3, r3, #32
 800966a:	ea47 0003 	orrgt.w	r0, r7, r3
 800966e:	fa04 f003 	lslle.w	r0, r4, r3
 8009672:	f7f6 ff47 	bl	8000504 <__aeabi_ui2d>
 8009676:	2201      	movs	r2, #1
 8009678:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800967c:	3e01      	subs	r6, #1
 800967e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009680:	e776      	b.n	8009570 <_dtoa_r+0x100>
 8009682:	2301      	movs	r3, #1
 8009684:	e7b7      	b.n	80095f6 <_dtoa_r+0x186>
 8009686:	9010      	str	r0, [sp, #64]	@ 0x40
 8009688:	e7b6      	b.n	80095f8 <_dtoa_r+0x188>
 800968a:	9b00      	ldr	r3, [sp, #0]
 800968c:	1bdb      	subs	r3, r3, r7
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	427b      	negs	r3, r7
 8009692:	9308      	str	r3, [sp, #32]
 8009694:	2300      	movs	r3, #0
 8009696:	930d      	str	r3, [sp, #52]	@ 0x34
 8009698:	e7c3      	b.n	8009622 <_dtoa_r+0x1b2>
 800969a:	2301      	movs	r3, #1
 800969c:	9309      	str	r3, [sp, #36]	@ 0x24
 800969e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096a0:	eb07 0b03 	add.w	fp, r7, r3
 80096a4:	f10b 0301 	add.w	r3, fp, #1
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	9303      	str	r3, [sp, #12]
 80096ac:	bfb8      	it	lt
 80096ae:	2301      	movlt	r3, #1
 80096b0:	e006      	b.n	80096c0 <_dtoa_r+0x250>
 80096b2:	2301      	movs	r3, #1
 80096b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	dd28      	ble.n	800970e <_dtoa_r+0x29e>
 80096bc:	469b      	mov	fp, r3
 80096be:	9303      	str	r3, [sp, #12]
 80096c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80096c4:	2100      	movs	r1, #0
 80096c6:	2204      	movs	r2, #4
 80096c8:	f102 0514 	add.w	r5, r2, #20
 80096cc:	429d      	cmp	r5, r3
 80096ce:	d926      	bls.n	800971e <_dtoa_r+0x2ae>
 80096d0:	6041      	str	r1, [r0, #4]
 80096d2:	4648      	mov	r0, r9
 80096d4:	f000 fd9c 	bl	800a210 <_Balloc>
 80096d8:	4682      	mov	sl, r0
 80096da:	2800      	cmp	r0, #0
 80096dc:	d142      	bne.n	8009764 <_dtoa_r+0x2f4>
 80096de:	4b1e      	ldr	r3, [pc, #120]	@ (8009758 <_dtoa_r+0x2e8>)
 80096e0:	4602      	mov	r2, r0
 80096e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80096e6:	e6da      	b.n	800949e <_dtoa_r+0x2e>
 80096e8:	2300      	movs	r3, #0
 80096ea:	e7e3      	b.n	80096b4 <_dtoa_r+0x244>
 80096ec:	2300      	movs	r3, #0
 80096ee:	e7d5      	b.n	800969c <_dtoa_r+0x22c>
 80096f0:	2401      	movs	r4, #1
 80096f2:	2300      	movs	r3, #0
 80096f4:	9307      	str	r3, [sp, #28]
 80096f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80096f8:	f04f 3bff 	mov.w	fp, #4294967295
 80096fc:	2200      	movs	r2, #0
 80096fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8009702:	2312      	movs	r3, #18
 8009704:	920c      	str	r2, [sp, #48]	@ 0x30
 8009706:	e7db      	b.n	80096c0 <_dtoa_r+0x250>
 8009708:	2301      	movs	r3, #1
 800970a:	9309      	str	r3, [sp, #36]	@ 0x24
 800970c:	e7f4      	b.n	80096f8 <_dtoa_r+0x288>
 800970e:	f04f 0b01 	mov.w	fp, #1
 8009712:	f8cd b00c 	str.w	fp, [sp, #12]
 8009716:	465b      	mov	r3, fp
 8009718:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800971c:	e7d0      	b.n	80096c0 <_dtoa_r+0x250>
 800971e:	3101      	adds	r1, #1
 8009720:	0052      	lsls	r2, r2, #1
 8009722:	e7d1      	b.n	80096c8 <_dtoa_r+0x258>
 8009724:	f3af 8000 	nop.w
 8009728:	636f4361 	.word	0x636f4361
 800972c:	3fd287a7 	.word	0x3fd287a7
 8009730:	8b60c8b3 	.word	0x8b60c8b3
 8009734:	3fc68a28 	.word	0x3fc68a28
 8009738:	509f79fb 	.word	0x509f79fb
 800973c:	3fd34413 	.word	0x3fd34413
 8009740:	0800d415 	.word	0x0800d415
 8009744:	0800d4cf 	.word	0x0800d4cf
 8009748:	7ff00000 	.word	0x7ff00000
 800974c:	0800d3ed 	.word	0x0800d3ed
 8009750:	3ff80000 	.word	0x3ff80000
 8009754:	0800d640 	.word	0x0800d640
 8009758:	0800d527 	.word	0x0800d527
 800975c:	0800d4cb 	.word	0x0800d4cb
 8009760:	0800d3ec 	.word	0x0800d3ec
 8009764:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009768:	6018      	str	r0, [r3, #0]
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	2b0e      	cmp	r3, #14
 800976e:	f200 80a1 	bhi.w	80098b4 <_dtoa_r+0x444>
 8009772:	2c00      	cmp	r4, #0
 8009774:	f000 809e 	beq.w	80098b4 <_dtoa_r+0x444>
 8009778:	2f00      	cmp	r7, #0
 800977a:	dd33      	ble.n	80097e4 <_dtoa_r+0x374>
 800977c:	4b9c      	ldr	r3, [pc, #624]	@ (80099f0 <_dtoa_r+0x580>)
 800977e:	f007 020f 	and.w	r2, r7, #15
 8009782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009786:	ed93 7b00 	vldr	d7, [r3]
 800978a:	05f8      	lsls	r0, r7, #23
 800978c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009790:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009794:	d516      	bpl.n	80097c4 <_dtoa_r+0x354>
 8009796:	4b97      	ldr	r3, [pc, #604]	@ (80099f4 <_dtoa_r+0x584>)
 8009798:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800979c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097a0:	f7f7 f854 	bl	800084c <__aeabi_ddiv>
 80097a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097a8:	f004 040f 	and.w	r4, r4, #15
 80097ac:	2603      	movs	r6, #3
 80097ae:	4d91      	ldr	r5, [pc, #580]	@ (80099f4 <_dtoa_r+0x584>)
 80097b0:	b954      	cbnz	r4, 80097c8 <_dtoa_r+0x358>
 80097b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097ba:	f7f7 f847 	bl	800084c <__aeabi_ddiv>
 80097be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097c2:	e028      	b.n	8009816 <_dtoa_r+0x3a6>
 80097c4:	2602      	movs	r6, #2
 80097c6:	e7f2      	b.n	80097ae <_dtoa_r+0x33e>
 80097c8:	07e1      	lsls	r1, r4, #31
 80097ca:	d508      	bpl.n	80097de <_dtoa_r+0x36e>
 80097cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80097d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097d4:	f7f6 ff10 	bl	80005f8 <__aeabi_dmul>
 80097d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097dc:	3601      	adds	r6, #1
 80097de:	1064      	asrs	r4, r4, #1
 80097e0:	3508      	adds	r5, #8
 80097e2:	e7e5      	b.n	80097b0 <_dtoa_r+0x340>
 80097e4:	f000 80af 	beq.w	8009946 <_dtoa_r+0x4d6>
 80097e8:	427c      	negs	r4, r7
 80097ea:	4b81      	ldr	r3, [pc, #516]	@ (80099f0 <_dtoa_r+0x580>)
 80097ec:	4d81      	ldr	r5, [pc, #516]	@ (80099f4 <_dtoa_r+0x584>)
 80097ee:	f004 020f 	and.w	r2, r4, #15
 80097f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097fe:	f7f6 fefb 	bl	80005f8 <__aeabi_dmul>
 8009802:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009806:	1124      	asrs	r4, r4, #4
 8009808:	2300      	movs	r3, #0
 800980a:	2602      	movs	r6, #2
 800980c:	2c00      	cmp	r4, #0
 800980e:	f040 808f 	bne.w	8009930 <_dtoa_r+0x4c0>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1d3      	bne.n	80097be <_dtoa_r+0x34e>
 8009816:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009818:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8094 	beq.w	800994a <_dtoa_r+0x4da>
 8009822:	4b75      	ldr	r3, [pc, #468]	@ (80099f8 <_dtoa_r+0x588>)
 8009824:	2200      	movs	r2, #0
 8009826:	4620      	mov	r0, r4
 8009828:	4629      	mov	r1, r5
 800982a:	f7f7 f957 	bl	8000adc <__aeabi_dcmplt>
 800982e:	2800      	cmp	r0, #0
 8009830:	f000 808b 	beq.w	800994a <_dtoa_r+0x4da>
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 8087 	beq.w	800994a <_dtoa_r+0x4da>
 800983c:	f1bb 0f00 	cmp.w	fp, #0
 8009840:	dd34      	ble.n	80098ac <_dtoa_r+0x43c>
 8009842:	4620      	mov	r0, r4
 8009844:	4b6d      	ldr	r3, [pc, #436]	@ (80099fc <_dtoa_r+0x58c>)
 8009846:	2200      	movs	r2, #0
 8009848:	4629      	mov	r1, r5
 800984a:	f7f6 fed5 	bl	80005f8 <__aeabi_dmul>
 800984e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009852:	f107 38ff 	add.w	r8, r7, #4294967295
 8009856:	3601      	adds	r6, #1
 8009858:	465c      	mov	r4, fp
 800985a:	4630      	mov	r0, r6
 800985c:	f7f6 fe62 	bl	8000524 <__aeabi_i2d>
 8009860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009864:	f7f6 fec8 	bl	80005f8 <__aeabi_dmul>
 8009868:	4b65      	ldr	r3, [pc, #404]	@ (8009a00 <_dtoa_r+0x590>)
 800986a:	2200      	movs	r2, #0
 800986c:	f7f6 fd0e 	bl	800028c <__adddf3>
 8009870:	4605      	mov	r5, r0
 8009872:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009876:	2c00      	cmp	r4, #0
 8009878:	d16a      	bne.n	8009950 <_dtoa_r+0x4e0>
 800987a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800987e:	4b61      	ldr	r3, [pc, #388]	@ (8009a04 <_dtoa_r+0x594>)
 8009880:	2200      	movs	r2, #0
 8009882:	f7f6 fd01 	bl	8000288 <__aeabi_dsub>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800988e:	462a      	mov	r2, r5
 8009890:	4633      	mov	r3, r6
 8009892:	f7f7 f941 	bl	8000b18 <__aeabi_dcmpgt>
 8009896:	2800      	cmp	r0, #0
 8009898:	f040 8298 	bne.w	8009dcc <_dtoa_r+0x95c>
 800989c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098a0:	462a      	mov	r2, r5
 80098a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098a6:	f7f7 f919 	bl	8000adc <__aeabi_dcmplt>
 80098aa:	bb38      	cbnz	r0, 80098fc <_dtoa_r+0x48c>
 80098ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80098b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80098b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f2c0 8157 	blt.w	8009b6a <_dtoa_r+0x6fa>
 80098bc:	2f0e      	cmp	r7, #14
 80098be:	f300 8154 	bgt.w	8009b6a <_dtoa_r+0x6fa>
 80098c2:	4b4b      	ldr	r3, [pc, #300]	@ (80099f0 <_dtoa_r+0x580>)
 80098c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098c8:	ed93 7b00 	vldr	d7, [r3]
 80098cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	ed8d 7b00 	vstr	d7, [sp]
 80098d4:	f280 80e5 	bge.w	8009aa2 <_dtoa_r+0x632>
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f300 80e1 	bgt.w	8009aa2 <_dtoa_r+0x632>
 80098e0:	d10c      	bne.n	80098fc <_dtoa_r+0x48c>
 80098e2:	4b48      	ldr	r3, [pc, #288]	@ (8009a04 <_dtoa_r+0x594>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	ec51 0b17 	vmov	r0, r1, d7
 80098ea:	f7f6 fe85 	bl	80005f8 <__aeabi_dmul>
 80098ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098f2:	f7f7 f907 	bl	8000b04 <__aeabi_dcmpge>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f000 8266 	beq.w	8009dc8 <_dtoa_r+0x958>
 80098fc:	2400      	movs	r4, #0
 80098fe:	4625      	mov	r5, r4
 8009900:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009902:	4656      	mov	r6, sl
 8009904:	ea6f 0803 	mvn.w	r8, r3
 8009908:	2700      	movs	r7, #0
 800990a:	4621      	mov	r1, r4
 800990c:	4648      	mov	r0, r9
 800990e:	f000 fcbf 	bl	800a290 <_Bfree>
 8009912:	2d00      	cmp	r5, #0
 8009914:	f000 80bd 	beq.w	8009a92 <_dtoa_r+0x622>
 8009918:	b12f      	cbz	r7, 8009926 <_dtoa_r+0x4b6>
 800991a:	42af      	cmp	r7, r5
 800991c:	d003      	beq.n	8009926 <_dtoa_r+0x4b6>
 800991e:	4639      	mov	r1, r7
 8009920:	4648      	mov	r0, r9
 8009922:	f000 fcb5 	bl	800a290 <_Bfree>
 8009926:	4629      	mov	r1, r5
 8009928:	4648      	mov	r0, r9
 800992a:	f000 fcb1 	bl	800a290 <_Bfree>
 800992e:	e0b0      	b.n	8009a92 <_dtoa_r+0x622>
 8009930:	07e2      	lsls	r2, r4, #31
 8009932:	d505      	bpl.n	8009940 <_dtoa_r+0x4d0>
 8009934:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009938:	f7f6 fe5e 	bl	80005f8 <__aeabi_dmul>
 800993c:	3601      	adds	r6, #1
 800993e:	2301      	movs	r3, #1
 8009940:	1064      	asrs	r4, r4, #1
 8009942:	3508      	adds	r5, #8
 8009944:	e762      	b.n	800980c <_dtoa_r+0x39c>
 8009946:	2602      	movs	r6, #2
 8009948:	e765      	b.n	8009816 <_dtoa_r+0x3a6>
 800994a:	9c03      	ldr	r4, [sp, #12]
 800994c:	46b8      	mov	r8, r7
 800994e:	e784      	b.n	800985a <_dtoa_r+0x3ea>
 8009950:	4b27      	ldr	r3, [pc, #156]	@ (80099f0 <_dtoa_r+0x580>)
 8009952:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009954:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009958:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800995c:	4454      	add	r4, sl
 800995e:	2900      	cmp	r1, #0
 8009960:	d054      	beq.n	8009a0c <_dtoa_r+0x59c>
 8009962:	4929      	ldr	r1, [pc, #164]	@ (8009a08 <_dtoa_r+0x598>)
 8009964:	2000      	movs	r0, #0
 8009966:	f7f6 ff71 	bl	800084c <__aeabi_ddiv>
 800996a:	4633      	mov	r3, r6
 800996c:	462a      	mov	r2, r5
 800996e:	f7f6 fc8b 	bl	8000288 <__aeabi_dsub>
 8009972:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009976:	4656      	mov	r6, sl
 8009978:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800997c:	f7f7 f8ec 	bl	8000b58 <__aeabi_d2iz>
 8009980:	4605      	mov	r5, r0
 8009982:	f7f6 fdcf 	bl	8000524 <__aeabi_i2d>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800998e:	f7f6 fc7b 	bl	8000288 <__aeabi_dsub>
 8009992:	3530      	adds	r5, #48	@ 0x30
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800999c:	f806 5b01 	strb.w	r5, [r6], #1
 80099a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099a4:	f7f7 f89a 	bl	8000adc <__aeabi_dcmplt>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d172      	bne.n	8009a92 <_dtoa_r+0x622>
 80099ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099b0:	4911      	ldr	r1, [pc, #68]	@ (80099f8 <_dtoa_r+0x588>)
 80099b2:	2000      	movs	r0, #0
 80099b4:	f7f6 fc68 	bl	8000288 <__aeabi_dsub>
 80099b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099bc:	f7f7 f88e 	bl	8000adc <__aeabi_dcmplt>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	f040 80b4 	bne.w	8009b2e <_dtoa_r+0x6be>
 80099c6:	42a6      	cmp	r6, r4
 80099c8:	f43f af70 	beq.w	80098ac <_dtoa_r+0x43c>
 80099cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80099d0:	4b0a      	ldr	r3, [pc, #40]	@ (80099fc <_dtoa_r+0x58c>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	f7f6 fe10 	bl	80005f8 <__aeabi_dmul>
 80099d8:	4b08      	ldr	r3, [pc, #32]	@ (80099fc <_dtoa_r+0x58c>)
 80099da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099de:	2200      	movs	r2, #0
 80099e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099e4:	f7f6 fe08 	bl	80005f8 <__aeabi_dmul>
 80099e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099ec:	e7c4      	b.n	8009978 <_dtoa_r+0x508>
 80099ee:	bf00      	nop
 80099f0:	0800d640 	.word	0x0800d640
 80099f4:	0800d618 	.word	0x0800d618
 80099f8:	3ff00000 	.word	0x3ff00000
 80099fc:	40240000 	.word	0x40240000
 8009a00:	401c0000 	.word	0x401c0000
 8009a04:	40140000 	.word	0x40140000
 8009a08:	3fe00000 	.word	0x3fe00000
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f7f6 fdf2 	bl	80005f8 <__aeabi_dmul>
 8009a14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a18:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a1a:	4656      	mov	r6, sl
 8009a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a20:	f7f7 f89a 	bl	8000b58 <__aeabi_d2iz>
 8009a24:	4605      	mov	r5, r0
 8009a26:	f7f6 fd7d 	bl	8000524 <__aeabi_i2d>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a32:	f7f6 fc29 	bl	8000288 <__aeabi_dsub>
 8009a36:	3530      	adds	r5, #48	@ 0x30
 8009a38:	f806 5b01 	strb.w	r5, [r6], #1
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	460b      	mov	r3, r1
 8009a40:	42a6      	cmp	r6, r4
 8009a42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	d124      	bne.n	8009a96 <_dtoa_r+0x626>
 8009a4c:	4baf      	ldr	r3, [pc, #700]	@ (8009d0c <_dtoa_r+0x89c>)
 8009a4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a52:	f7f6 fc1b 	bl	800028c <__adddf3>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a5e:	f7f7 f85b 	bl	8000b18 <__aeabi_dcmpgt>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d163      	bne.n	8009b2e <_dtoa_r+0x6be>
 8009a66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a6a:	49a8      	ldr	r1, [pc, #672]	@ (8009d0c <_dtoa_r+0x89c>)
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f7f6 fc0b 	bl	8000288 <__aeabi_dsub>
 8009a72:	4602      	mov	r2, r0
 8009a74:	460b      	mov	r3, r1
 8009a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a7a:	f7f7 f82f 	bl	8000adc <__aeabi_dcmplt>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f43f af14 	beq.w	80098ac <_dtoa_r+0x43c>
 8009a84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a86:	1e73      	subs	r3, r6, #1
 8009a88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a8e:	2b30      	cmp	r3, #48	@ 0x30
 8009a90:	d0f8      	beq.n	8009a84 <_dtoa_r+0x614>
 8009a92:	4647      	mov	r7, r8
 8009a94:	e03b      	b.n	8009b0e <_dtoa_r+0x69e>
 8009a96:	4b9e      	ldr	r3, [pc, #632]	@ (8009d10 <_dtoa_r+0x8a0>)
 8009a98:	f7f6 fdae 	bl	80005f8 <__aeabi_dmul>
 8009a9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009aa0:	e7bc      	b.n	8009a1c <_dtoa_r+0x5ac>
 8009aa2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009aa6:	4656      	mov	r6, sl
 8009aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aac:	4620      	mov	r0, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	f7f6 fecc 	bl	800084c <__aeabi_ddiv>
 8009ab4:	f7f7 f850 	bl	8000b58 <__aeabi_d2iz>
 8009ab8:	4680      	mov	r8, r0
 8009aba:	f7f6 fd33 	bl	8000524 <__aeabi_i2d>
 8009abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ac2:	f7f6 fd99 	bl	80005f8 <__aeabi_dmul>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4620      	mov	r0, r4
 8009acc:	4629      	mov	r1, r5
 8009ace:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ad2:	f7f6 fbd9 	bl	8000288 <__aeabi_dsub>
 8009ad6:	f806 4b01 	strb.w	r4, [r6], #1
 8009ada:	9d03      	ldr	r5, [sp, #12]
 8009adc:	eba6 040a 	sub.w	r4, r6, sl
 8009ae0:	42a5      	cmp	r5, r4
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	d133      	bne.n	8009b50 <_dtoa_r+0x6e0>
 8009ae8:	f7f6 fbd0 	bl	800028c <__adddf3>
 8009aec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009af0:	4604      	mov	r4, r0
 8009af2:	460d      	mov	r5, r1
 8009af4:	f7f7 f810 	bl	8000b18 <__aeabi_dcmpgt>
 8009af8:	b9c0      	cbnz	r0, 8009b2c <_dtoa_r+0x6bc>
 8009afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b06:	b110      	cbz	r0, 8009b0e <_dtoa_r+0x69e>
 8009b08:	f018 0f01 	tst.w	r8, #1
 8009b0c:	d10e      	bne.n	8009b2c <_dtoa_r+0x6bc>
 8009b0e:	9902      	ldr	r1, [sp, #8]
 8009b10:	4648      	mov	r0, r9
 8009b12:	f000 fbbd 	bl	800a290 <_Bfree>
 8009b16:	2300      	movs	r3, #0
 8009b18:	7033      	strb	r3, [r6, #0]
 8009b1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b1c:	3701      	adds	r7, #1
 8009b1e:	601f      	str	r7, [r3, #0]
 8009b20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 824b 	beq.w	8009fbe <_dtoa_r+0xb4e>
 8009b28:	601e      	str	r6, [r3, #0]
 8009b2a:	e248      	b.n	8009fbe <_dtoa_r+0xb4e>
 8009b2c:	46b8      	mov	r8, r7
 8009b2e:	4633      	mov	r3, r6
 8009b30:	461e      	mov	r6, r3
 8009b32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b36:	2a39      	cmp	r2, #57	@ 0x39
 8009b38:	d106      	bne.n	8009b48 <_dtoa_r+0x6d8>
 8009b3a:	459a      	cmp	sl, r3
 8009b3c:	d1f8      	bne.n	8009b30 <_dtoa_r+0x6c0>
 8009b3e:	2230      	movs	r2, #48	@ 0x30
 8009b40:	f108 0801 	add.w	r8, r8, #1
 8009b44:	f88a 2000 	strb.w	r2, [sl]
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	3201      	adds	r2, #1
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	e7a0      	b.n	8009a92 <_dtoa_r+0x622>
 8009b50:	4b6f      	ldr	r3, [pc, #444]	@ (8009d10 <_dtoa_r+0x8a0>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	f7f6 fd50 	bl	80005f8 <__aeabi_dmul>
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	460d      	mov	r5, r1
 8009b60:	f7f6 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d09f      	beq.n	8009aa8 <_dtoa_r+0x638>
 8009b68:	e7d1      	b.n	8009b0e <_dtoa_r+0x69e>
 8009b6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b6c:	2a00      	cmp	r2, #0
 8009b6e:	f000 80ea 	beq.w	8009d46 <_dtoa_r+0x8d6>
 8009b72:	9a07      	ldr	r2, [sp, #28]
 8009b74:	2a01      	cmp	r2, #1
 8009b76:	f300 80cd 	bgt.w	8009d14 <_dtoa_r+0x8a4>
 8009b7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	f000 80c1 	beq.w	8009d04 <_dtoa_r+0x894>
 8009b82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b86:	9c08      	ldr	r4, [sp, #32]
 8009b88:	9e00      	ldr	r6, [sp, #0]
 8009b8a:	9a00      	ldr	r2, [sp, #0]
 8009b8c:	441a      	add	r2, r3
 8009b8e:	9200      	str	r2, [sp, #0]
 8009b90:	9a06      	ldr	r2, [sp, #24]
 8009b92:	2101      	movs	r1, #1
 8009b94:	441a      	add	r2, r3
 8009b96:	4648      	mov	r0, r9
 8009b98:	9206      	str	r2, [sp, #24]
 8009b9a:	f000 fc77 	bl	800a48c <__i2b>
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	b166      	cbz	r6, 8009bbc <_dtoa_r+0x74c>
 8009ba2:	9b06      	ldr	r3, [sp, #24]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	dd09      	ble.n	8009bbc <_dtoa_r+0x74c>
 8009ba8:	42b3      	cmp	r3, r6
 8009baa:	9a00      	ldr	r2, [sp, #0]
 8009bac:	bfa8      	it	ge
 8009bae:	4633      	movge	r3, r6
 8009bb0:	1ad2      	subs	r2, r2, r3
 8009bb2:	9200      	str	r2, [sp, #0]
 8009bb4:	9a06      	ldr	r2, [sp, #24]
 8009bb6:	1af6      	subs	r6, r6, r3
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	9306      	str	r3, [sp, #24]
 8009bbc:	9b08      	ldr	r3, [sp, #32]
 8009bbe:	b30b      	cbz	r3, 8009c04 <_dtoa_r+0x794>
 8009bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 80c6 	beq.w	8009d54 <_dtoa_r+0x8e4>
 8009bc8:	2c00      	cmp	r4, #0
 8009bca:	f000 80c0 	beq.w	8009d4e <_dtoa_r+0x8de>
 8009bce:	4629      	mov	r1, r5
 8009bd0:	4622      	mov	r2, r4
 8009bd2:	4648      	mov	r0, r9
 8009bd4:	f000 fd12 	bl	800a5fc <__pow5mult>
 8009bd8:	9a02      	ldr	r2, [sp, #8]
 8009bda:	4601      	mov	r1, r0
 8009bdc:	4605      	mov	r5, r0
 8009bde:	4648      	mov	r0, r9
 8009be0:	f000 fc6a 	bl	800a4b8 <__multiply>
 8009be4:	9902      	ldr	r1, [sp, #8]
 8009be6:	4680      	mov	r8, r0
 8009be8:	4648      	mov	r0, r9
 8009bea:	f000 fb51 	bl	800a290 <_Bfree>
 8009bee:	9b08      	ldr	r3, [sp, #32]
 8009bf0:	1b1b      	subs	r3, r3, r4
 8009bf2:	9308      	str	r3, [sp, #32]
 8009bf4:	f000 80b1 	beq.w	8009d5a <_dtoa_r+0x8ea>
 8009bf8:	9a08      	ldr	r2, [sp, #32]
 8009bfa:	4641      	mov	r1, r8
 8009bfc:	4648      	mov	r0, r9
 8009bfe:	f000 fcfd 	bl	800a5fc <__pow5mult>
 8009c02:	9002      	str	r0, [sp, #8]
 8009c04:	2101      	movs	r1, #1
 8009c06:	4648      	mov	r0, r9
 8009c08:	f000 fc40 	bl	800a48c <__i2b>
 8009c0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c0e:	4604      	mov	r4, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 81d8 	beq.w	8009fc6 <_dtoa_r+0xb56>
 8009c16:	461a      	mov	r2, r3
 8009c18:	4601      	mov	r1, r0
 8009c1a:	4648      	mov	r0, r9
 8009c1c:	f000 fcee 	bl	800a5fc <__pow5mult>
 8009c20:	9b07      	ldr	r3, [sp, #28]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	4604      	mov	r4, r0
 8009c26:	f300 809f 	bgt.w	8009d68 <_dtoa_r+0x8f8>
 8009c2a:	9b04      	ldr	r3, [sp, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f040 8097 	bne.w	8009d60 <_dtoa_r+0x8f0>
 8009c32:	9b05      	ldr	r3, [sp, #20]
 8009c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f040 8093 	bne.w	8009d64 <_dtoa_r+0x8f4>
 8009c3e:	9b05      	ldr	r3, [sp, #20]
 8009c40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c44:	0d1b      	lsrs	r3, r3, #20
 8009c46:	051b      	lsls	r3, r3, #20
 8009c48:	b133      	cbz	r3, 8009c58 <_dtoa_r+0x7e8>
 8009c4a:	9b00      	ldr	r3, [sp, #0]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	9b06      	ldr	r3, [sp, #24]
 8009c52:	3301      	adds	r3, #1
 8009c54:	9306      	str	r3, [sp, #24]
 8009c56:	2301      	movs	r3, #1
 8009c58:	9308      	str	r3, [sp, #32]
 8009c5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 81b8 	beq.w	8009fd2 <_dtoa_r+0xb62>
 8009c62:	6923      	ldr	r3, [r4, #16]
 8009c64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c68:	6918      	ldr	r0, [r3, #16]
 8009c6a:	f000 fbc3 	bl	800a3f4 <__hi0bits>
 8009c6e:	f1c0 0020 	rsb	r0, r0, #32
 8009c72:	9b06      	ldr	r3, [sp, #24]
 8009c74:	4418      	add	r0, r3
 8009c76:	f010 001f 	ands.w	r0, r0, #31
 8009c7a:	f000 8082 	beq.w	8009d82 <_dtoa_r+0x912>
 8009c7e:	f1c0 0320 	rsb	r3, r0, #32
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	dd73      	ble.n	8009d6e <_dtoa_r+0x8fe>
 8009c86:	9b00      	ldr	r3, [sp, #0]
 8009c88:	f1c0 001c 	rsb	r0, r0, #28
 8009c8c:	4403      	add	r3, r0
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	9b06      	ldr	r3, [sp, #24]
 8009c92:	4403      	add	r3, r0
 8009c94:	4406      	add	r6, r0
 8009c96:	9306      	str	r3, [sp, #24]
 8009c98:	9b00      	ldr	r3, [sp, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	dd05      	ble.n	8009caa <_dtoa_r+0x83a>
 8009c9e:	9902      	ldr	r1, [sp, #8]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4648      	mov	r0, r9
 8009ca4:	f000 fd04 	bl	800a6b0 <__lshift>
 8009ca8:	9002      	str	r0, [sp, #8]
 8009caa:	9b06      	ldr	r3, [sp, #24]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	dd05      	ble.n	8009cbc <_dtoa_r+0x84c>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	4648      	mov	r0, r9
 8009cb6:	f000 fcfb 	bl	800a6b0 <__lshift>
 8009cba:	4604      	mov	r4, r0
 8009cbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d061      	beq.n	8009d86 <_dtoa_r+0x916>
 8009cc2:	9802      	ldr	r0, [sp, #8]
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	f000 fd5f 	bl	800a788 <__mcmp>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	da5b      	bge.n	8009d86 <_dtoa_r+0x916>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9902      	ldr	r1, [sp, #8]
 8009cd2:	220a      	movs	r2, #10
 8009cd4:	4648      	mov	r0, r9
 8009cd6:	f000 fafd 	bl	800a2d4 <__multadd>
 8009cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cdc:	9002      	str	r0, [sp, #8]
 8009cde:	f107 38ff 	add.w	r8, r7, #4294967295
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 8177 	beq.w	8009fd6 <_dtoa_r+0xb66>
 8009ce8:	4629      	mov	r1, r5
 8009cea:	2300      	movs	r3, #0
 8009cec:	220a      	movs	r2, #10
 8009cee:	4648      	mov	r0, r9
 8009cf0:	f000 faf0 	bl	800a2d4 <__multadd>
 8009cf4:	f1bb 0f00 	cmp.w	fp, #0
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	dc6f      	bgt.n	8009ddc <_dtoa_r+0x96c>
 8009cfc:	9b07      	ldr	r3, [sp, #28]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	dc49      	bgt.n	8009d96 <_dtoa_r+0x926>
 8009d02:	e06b      	b.n	8009ddc <_dtoa_r+0x96c>
 8009d04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d0a:	e73c      	b.n	8009b86 <_dtoa_r+0x716>
 8009d0c:	3fe00000 	.word	0x3fe00000
 8009d10:	40240000 	.word	0x40240000
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	1e5c      	subs	r4, r3, #1
 8009d18:	9b08      	ldr	r3, [sp, #32]
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	db09      	blt.n	8009d32 <_dtoa_r+0x8c2>
 8009d1e:	1b1c      	subs	r4, r3, r4
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f6bf af30 	bge.w	8009b88 <_dtoa_r+0x718>
 8009d28:	9b00      	ldr	r3, [sp, #0]
 8009d2a:	9a03      	ldr	r2, [sp, #12]
 8009d2c:	1a9e      	subs	r6, r3, r2
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e72b      	b.n	8009b8a <_dtoa_r+0x71a>
 8009d32:	9b08      	ldr	r3, [sp, #32]
 8009d34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d36:	9408      	str	r4, [sp, #32]
 8009d38:	1ae3      	subs	r3, r4, r3
 8009d3a:	441a      	add	r2, r3
 8009d3c:	9e00      	ldr	r6, [sp, #0]
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	920d      	str	r2, [sp, #52]	@ 0x34
 8009d42:	2400      	movs	r4, #0
 8009d44:	e721      	b.n	8009b8a <_dtoa_r+0x71a>
 8009d46:	9c08      	ldr	r4, [sp, #32]
 8009d48:	9e00      	ldr	r6, [sp, #0]
 8009d4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009d4c:	e728      	b.n	8009ba0 <_dtoa_r+0x730>
 8009d4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d52:	e751      	b.n	8009bf8 <_dtoa_r+0x788>
 8009d54:	9a08      	ldr	r2, [sp, #32]
 8009d56:	9902      	ldr	r1, [sp, #8]
 8009d58:	e750      	b.n	8009bfc <_dtoa_r+0x78c>
 8009d5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d5e:	e751      	b.n	8009c04 <_dtoa_r+0x794>
 8009d60:	2300      	movs	r3, #0
 8009d62:	e779      	b.n	8009c58 <_dtoa_r+0x7e8>
 8009d64:	9b04      	ldr	r3, [sp, #16]
 8009d66:	e777      	b.n	8009c58 <_dtoa_r+0x7e8>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	9308      	str	r3, [sp, #32]
 8009d6c:	e779      	b.n	8009c62 <_dtoa_r+0x7f2>
 8009d6e:	d093      	beq.n	8009c98 <_dtoa_r+0x828>
 8009d70:	9a00      	ldr	r2, [sp, #0]
 8009d72:	331c      	adds	r3, #28
 8009d74:	441a      	add	r2, r3
 8009d76:	9200      	str	r2, [sp, #0]
 8009d78:	9a06      	ldr	r2, [sp, #24]
 8009d7a:	441a      	add	r2, r3
 8009d7c:	441e      	add	r6, r3
 8009d7e:	9206      	str	r2, [sp, #24]
 8009d80:	e78a      	b.n	8009c98 <_dtoa_r+0x828>
 8009d82:	4603      	mov	r3, r0
 8009d84:	e7f4      	b.n	8009d70 <_dtoa_r+0x900>
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	46b8      	mov	r8, r7
 8009d8c:	dc20      	bgt.n	8009dd0 <_dtoa_r+0x960>
 8009d8e:	469b      	mov	fp, r3
 8009d90:	9b07      	ldr	r3, [sp, #28]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	dd1e      	ble.n	8009dd4 <_dtoa_r+0x964>
 8009d96:	f1bb 0f00 	cmp.w	fp, #0
 8009d9a:	f47f adb1 	bne.w	8009900 <_dtoa_r+0x490>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	465b      	mov	r3, fp
 8009da2:	2205      	movs	r2, #5
 8009da4:	4648      	mov	r0, r9
 8009da6:	f000 fa95 	bl	800a2d4 <__multadd>
 8009daa:	4601      	mov	r1, r0
 8009dac:	4604      	mov	r4, r0
 8009dae:	9802      	ldr	r0, [sp, #8]
 8009db0:	f000 fcea 	bl	800a788 <__mcmp>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f77f ada3 	ble.w	8009900 <_dtoa_r+0x490>
 8009dba:	4656      	mov	r6, sl
 8009dbc:	2331      	movs	r3, #49	@ 0x31
 8009dbe:	f806 3b01 	strb.w	r3, [r6], #1
 8009dc2:	f108 0801 	add.w	r8, r8, #1
 8009dc6:	e59f      	b.n	8009908 <_dtoa_r+0x498>
 8009dc8:	9c03      	ldr	r4, [sp, #12]
 8009dca:	46b8      	mov	r8, r7
 8009dcc:	4625      	mov	r5, r4
 8009dce:	e7f4      	b.n	8009dba <_dtoa_r+0x94a>
 8009dd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 8101 	beq.w	8009fde <_dtoa_r+0xb6e>
 8009ddc:	2e00      	cmp	r6, #0
 8009dde:	dd05      	ble.n	8009dec <_dtoa_r+0x97c>
 8009de0:	4629      	mov	r1, r5
 8009de2:	4632      	mov	r2, r6
 8009de4:	4648      	mov	r0, r9
 8009de6:	f000 fc63 	bl	800a6b0 <__lshift>
 8009dea:	4605      	mov	r5, r0
 8009dec:	9b08      	ldr	r3, [sp, #32]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d05c      	beq.n	8009eac <_dtoa_r+0xa3c>
 8009df2:	6869      	ldr	r1, [r5, #4]
 8009df4:	4648      	mov	r0, r9
 8009df6:	f000 fa0b 	bl	800a210 <_Balloc>
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	b928      	cbnz	r0, 8009e0a <_dtoa_r+0x99a>
 8009dfe:	4b82      	ldr	r3, [pc, #520]	@ (800a008 <_dtoa_r+0xb98>)
 8009e00:	4602      	mov	r2, r0
 8009e02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e06:	f7ff bb4a 	b.w	800949e <_dtoa_r+0x2e>
 8009e0a:	692a      	ldr	r2, [r5, #16]
 8009e0c:	3202      	adds	r2, #2
 8009e0e:	0092      	lsls	r2, r2, #2
 8009e10:	f105 010c 	add.w	r1, r5, #12
 8009e14:	300c      	adds	r0, #12
 8009e16:	f7ff fa6e 	bl	80092f6 <memcpy>
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	4631      	mov	r1, r6
 8009e1e:	4648      	mov	r0, r9
 8009e20:	f000 fc46 	bl	800a6b0 <__lshift>
 8009e24:	f10a 0301 	add.w	r3, sl, #1
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	eb0a 030b 	add.w	r3, sl, fp
 8009e2e:	9308      	str	r3, [sp, #32]
 8009e30:	9b04      	ldr	r3, [sp, #16]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	462f      	mov	r7, r5
 8009e38:	9306      	str	r3, [sp, #24]
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	9b00      	ldr	r3, [sp, #0]
 8009e3e:	9802      	ldr	r0, [sp, #8]
 8009e40:	4621      	mov	r1, r4
 8009e42:	f103 3bff 	add.w	fp, r3, #4294967295
 8009e46:	f7ff fa89 	bl	800935c <quorem>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	3330      	adds	r3, #48	@ 0x30
 8009e4e:	9003      	str	r0, [sp, #12]
 8009e50:	4639      	mov	r1, r7
 8009e52:	9802      	ldr	r0, [sp, #8]
 8009e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e56:	f000 fc97 	bl	800a788 <__mcmp>
 8009e5a:	462a      	mov	r2, r5
 8009e5c:	9004      	str	r0, [sp, #16]
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4648      	mov	r0, r9
 8009e62:	f000 fcad 	bl	800a7c0 <__mdiff>
 8009e66:	68c2      	ldr	r2, [r0, #12]
 8009e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	bb02      	cbnz	r2, 8009eb0 <_dtoa_r+0xa40>
 8009e6e:	4601      	mov	r1, r0
 8009e70:	9802      	ldr	r0, [sp, #8]
 8009e72:	f000 fc89 	bl	800a788 <__mcmp>
 8009e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e78:	4602      	mov	r2, r0
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4648      	mov	r0, r9
 8009e7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e82:	f000 fa05 	bl	800a290 <_Bfree>
 8009e86:	9b07      	ldr	r3, [sp, #28]
 8009e88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e8a:	9e00      	ldr	r6, [sp, #0]
 8009e8c:	ea42 0103 	orr.w	r1, r2, r3
 8009e90:	9b06      	ldr	r3, [sp, #24]
 8009e92:	4319      	orrs	r1, r3
 8009e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e96:	d10d      	bne.n	8009eb4 <_dtoa_r+0xa44>
 8009e98:	2b39      	cmp	r3, #57	@ 0x39
 8009e9a:	d027      	beq.n	8009eec <_dtoa_r+0xa7c>
 8009e9c:	9a04      	ldr	r2, [sp, #16]
 8009e9e:	2a00      	cmp	r2, #0
 8009ea0:	dd01      	ble.n	8009ea6 <_dtoa_r+0xa36>
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	3331      	adds	r3, #49	@ 0x31
 8009ea6:	f88b 3000 	strb.w	r3, [fp]
 8009eaa:	e52e      	b.n	800990a <_dtoa_r+0x49a>
 8009eac:	4628      	mov	r0, r5
 8009eae:	e7b9      	b.n	8009e24 <_dtoa_r+0x9b4>
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	e7e2      	b.n	8009e7a <_dtoa_r+0xa0a>
 8009eb4:	9904      	ldr	r1, [sp, #16]
 8009eb6:	2900      	cmp	r1, #0
 8009eb8:	db04      	blt.n	8009ec4 <_dtoa_r+0xa54>
 8009eba:	9807      	ldr	r0, [sp, #28]
 8009ebc:	4301      	orrs	r1, r0
 8009ebe:	9806      	ldr	r0, [sp, #24]
 8009ec0:	4301      	orrs	r1, r0
 8009ec2:	d120      	bne.n	8009f06 <_dtoa_r+0xa96>
 8009ec4:	2a00      	cmp	r2, #0
 8009ec6:	ddee      	ble.n	8009ea6 <_dtoa_r+0xa36>
 8009ec8:	9902      	ldr	r1, [sp, #8]
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	4648      	mov	r0, r9
 8009ed0:	f000 fbee 	bl	800a6b0 <__lshift>
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	9002      	str	r0, [sp, #8]
 8009ed8:	f000 fc56 	bl	800a788 <__mcmp>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	9b00      	ldr	r3, [sp, #0]
 8009ee0:	dc02      	bgt.n	8009ee8 <_dtoa_r+0xa78>
 8009ee2:	d1e0      	bne.n	8009ea6 <_dtoa_r+0xa36>
 8009ee4:	07da      	lsls	r2, r3, #31
 8009ee6:	d5de      	bpl.n	8009ea6 <_dtoa_r+0xa36>
 8009ee8:	2b39      	cmp	r3, #57	@ 0x39
 8009eea:	d1da      	bne.n	8009ea2 <_dtoa_r+0xa32>
 8009eec:	2339      	movs	r3, #57	@ 0x39
 8009eee:	f88b 3000 	strb.w	r3, [fp]
 8009ef2:	4633      	mov	r3, r6
 8009ef4:	461e      	mov	r6, r3
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009efc:	2a39      	cmp	r2, #57	@ 0x39
 8009efe:	d04e      	beq.n	8009f9e <_dtoa_r+0xb2e>
 8009f00:	3201      	adds	r2, #1
 8009f02:	701a      	strb	r2, [r3, #0]
 8009f04:	e501      	b.n	800990a <_dtoa_r+0x49a>
 8009f06:	2a00      	cmp	r2, #0
 8009f08:	dd03      	ble.n	8009f12 <_dtoa_r+0xaa2>
 8009f0a:	2b39      	cmp	r3, #57	@ 0x39
 8009f0c:	d0ee      	beq.n	8009eec <_dtoa_r+0xa7c>
 8009f0e:	3301      	adds	r3, #1
 8009f10:	e7c9      	b.n	8009ea6 <_dtoa_r+0xa36>
 8009f12:	9a00      	ldr	r2, [sp, #0]
 8009f14:	9908      	ldr	r1, [sp, #32]
 8009f16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009f1a:	428a      	cmp	r2, r1
 8009f1c:	d028      	beq.n	8009f70 <_dtoa_r+0xb00>
 8009f1e:	9902      	ldr	r1, [sp, #8]
 8009f20:	2300      	movs	r3, #0
 8009f22:	220a      	movs	r2, #10
 8009f24:	4648      	mov	r0, r9
 8009f26:	f000 f9d5 	bl	800a2d4 <__multadd>
 8009f2a:	42af      	cmp	r7, r5
 8009f2c:	9002      	str	r0, [sp, #8]
 8009f2e:	f04f 0300 	mov.w	r3, #0
 8009f32:	f04f 020a 	mov.w	r2, #10
 8009f36:	4639      	mov	r1, r7
 8009f38:	4648      	mov	r0, r9
 8009f3a:	d107      	bne.n	8009f4c <_dtoa_r+0xadc>
 8009f3c:	f000 f9ca 	bl	800a2d4 <__multadd>
 8009f40:	4607      	mov	r7, r0
 8009f42:	4605      	mov	r5, r0
 8009f44:	9b00      	ldr	r3, [sp, #0]
 8009f46:	3301      	adds	r3, #1
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	e777      	b.n	8009e3c <_dtoa_r+0x9cc>
 8009f4c:	f000 f9c2 	bl	800a2d4 <__multadd>
 8009f50:	4629      	mov	r1, r5
 8009f52:	4607      	mov	r7, r0
 8009f54:	2300      	movs	r3, #0
 8009f56:	220a      	movs	r2, #10
 8009f58:	4648      	mov	r0, r9
 8009f5a:	f000 f9bb 	bl	800a2d4 <__multadd>
 8009f5e:	4605      	mov	r5, r0
 8009f60:	e7f0      	b.n	8009f44 <_dtoa_r+0xad4>
 8009f62:	f1bb 0f00 	cmp.w	fp, #0
 8009f66:	bfcc      	ite	gt
 8009f68:	465e      	movgt	r6, fp
 8009f6a:	2601      	movle	r6, #1
 8009f6c:	4456      	add	r6, sl
 8009f6e:	2700      	movs	r7, #0
 8009f70:	9902      	ldr	r1, [sp, #8]
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	2201      	movs	r2, #1
 8009f76:	4648      	mov	r0, r9
 8009f78:	f000 fb9a 	bl	800a6b0 <__lshift>
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	9002      	str	r0, [sp, #8]
 8009f80:	f000 fc02 	bl	800a788 <__mcmp>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	dcb4      	bgt.n	8009ef2 <_dtoa_r+0xa82>
 8009f88:	d102      	bne.n	8009f90 <_dtoa_r+0xb20>
 8009f8a:	9b00      	ldr	r3, [sp, #0]
 8009f8c:	07db      	lsls	r3, r3, #31
 8009f8e:	d4b0      	bmi.n	8009ef2 <_dtoa_r+0xa82>
 8009f90:	4633      	mov	r3, r6
 8009f92:	461e      	mov	r6, r3
 8009f94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f98:	2a30      	cmp	r2, #48	@ 0x30
 8009f9a:	d0fa      	beq.n	8009f92 <_dtoa_r+0xb22>
 8009f9c:	e4b5      	b.n	800990a <_dtoa_r+0x49a>
 8009f9e:	459a      	cmp	sl, r3
 8009fa0:	d1a8      	bne.n	8009ef4 <_dtoa_r+0xa84>
 8009fa2:	2331      	movs	r3, #49	@ 0x31
 8009fa4:	f108 0801 	add.w	r8, r8, #1
 8009fa8:	f88a 3000 	strb.w	r3, [sl]
 8009fac:	e4ad      	b.n	800990a <_dtoa_r+0x49a>
 8009fae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a00c <_dtoa_r+0xb9c>
 8009fb4:	b11b      	cbz	r3, 8009fbe <_dtoa_r+0xb4e>
 8009fb6:	f10a 0308 	add.w	r3, sl, #8
 8009fba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009fbc:	6013      	str	r3, [r2, #0]
 8009fbe:	4650      	mov	r0, sl
 8009fc0:	b017      	add	sp, #92	@ 0x5c
 8009fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc6:	9b07      	ldr	r3, [sp, #28]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	f77f ae2e 	ble.w	8009c2a <_dtoa_r+0x7ba>
 8009fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fd0:	9308      	str	r3, [sp, #32]
 8009fd2:	2001      	movs	r0, #1
 8009fd4:	e64d      	b.n	8009c72 <_dtoa_r+0x802>
 8009fd6:	f1bb 0f00 	cmp.w	fp, #0
 8009fda:	f77f aed9 	ble.w	8009d90 <_dtoa_r+0x920>
 8009fde:	4656      	mov	r6, sl
 8009fe0:	9802      	ldr	r0, [sp, #8]
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	f7ff f9ba 	bl	800935c <quorem>
 8009fe8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009fec:	f806 3b01 	strb.w	r3, [r6], #1
 8009ff0:	eba6 020a 	sub.w	r2, r6, sl
 8009ff4:	4593      	cmp	fp, r2
 8009ff6:	ddb4      	ble.n	8009f62 <_dtoa_r+0xaf2>
 8009ff8:	9902      	ldr	r1, [sp, #8]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	220a      	movs	r2, #10
 8009ffe:	4648      	mov	r0, r9
 800a000:	f000 f968 	bl	800a2d4 <__multadd>
 800a004:	9002      	str	r0, [sp, #8]
 800a006:	e7eb      	b.n	8009fe0 <_dtoa_r+0xb70>
 800a008:	0800d527 	.word	0x0800d527
 800a00c:	0800d4c2 	.word	0x0800d4c2

0800a010 <_free_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4605      	mov	r5, r0
 800a014:	2900      	cmp	r1, #0
 800a016:	d041      	beq.n	800a09c <_free_r+0x8c>
 800a018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a01c:	1f0c      	subs	r4, r1, #4
 800a01e:	2b00      	cmp	r3, #0
 800a020:	bfb8      	it	lt
 800a022:	18e4      	addlt	r4, r4, r3
 800a024:	f000 f8e8 	bl	800a1f8 <__malloc_lock>
 800a028:	4a1d      	ldr	r2, [pc, #116]	@ (800a0a0 <_free_r+0x90>)
 800a02a:	6813      	ldr	r3, [r2, #0]
 800a02c:	b933      	cbnz	r3, 800a03c <_free_r+0x2c>
 800a02e:	6063      	str	r3, [r4, #4]
 800a030:	6014      	str	r4, [r2, #0]
 800a032:	4628      	mov	r0, r5
 800a034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a038:	f000 b8e4 	b.w	800a204 <__malloc_unlock>
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	d908      	bls.n	800a052 <_free_r+0x42>
 800a040:	6820      	ldr	r0, [r4, #0]
 800a042:	1821      	adds	r1, r4, r0
 800a044:	428b      	cmp	r3, r1
 800a046:	bf01      	itttt	eq
 800a048:	6819      	ldreq	r1, [r3, #0]
 800a04a:	685b      	ldreq	r3, [r3, #4]
 800a04c:	1809      	addeq	r1, r1, r0
 800a04e:	6021      	streq	r1, [r4, #0]
 800a050:	e7ed      	b.n	800a02e <_free_r+0x1e>
 800a052:	461a      	mov	r2, r3
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	b10b      	cbz	r3, 800a05c <_free_r+0x4c>
 800a058:	42a3      	cmp	r3, r4
 800a05a:	d9fa      	bls.n	800a052 <_free_r+0x42>
 800a05c:	6811      	ldr	r1, [r2, #0]
 800a05e:	1850      	adds	r0, r2, r1
 800a060:	42a0      	cmp	r0, r4
 800a062:	d10b      	bne.n	800a07c <_free_r+0x6c>
 800a064:	6820      	ldr	r0, [r4, #0]
 800a066:	4401      	add	r1, r0
 800a068:	1850      	adds	r0, r2, r1
 800a06a:	4283      	cmp	r3, r0
 800a06c:	6011      	str	r1, [r2, #0]
 800a06e:	d1e0      	bne.n	800a032 <_free_r+0x22>
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	6053      	str	r3, [r2, #4]
 800a076:	4408      	add	r0, r1
 800a078:	6010      	str	r0, [r2, #0]
 800a07a:	e7da      	b.n	800a032 <_free_r+0x22>
 800a07c:	d902      	bls.n	800a084 <_free_r+0x74>
 800a07e:	230c      	movs	r3, #12
 800a080:	602b      	str	r3, [r5, #0]
 800a082:	e7d6      	b.n	800a032 <_free_r+0x22>
 800a084:	6820      	ldr	r0, [r4, #0]
 800a086:	1821      	adds	r1, r4, r0
 800a088:	428b      	cmp	r3, r1
 800a08a:	bf04      	itt	eq
 800a08c:	6819      	ldreq	r1, [r3, #0]
 800a08e:	685b      	ldreq	r3, [r3, #4]
 800a090:	6063      	str	r3, [r4, #4]
 800a092:	bf04      	itt	eq
 800a094:	1809      	addeq	r1, r1, r0
 800a096:	6021      	streq	r1, [r4, #0]
 800a098:	6054      	str	r4, [r2, #4]
 800a09a:	e7ca      	b.n	800a032 <_free_r+0x22>
 800a09c:	bd38      	pop	{r3, r4, r5, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000eac 	.word	0x20000eac

0800a0a4 <malloc>:
 800a0a4:	4b02      	ldr	r3, [pc, #8]	@ (800a0b0 <malloc+0xc>)
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	f000 b825 	b.w	800a0f8 <_malloc_r>
 800a0ae:	bf00      	nop
 800a0b0:	20000060 	.word	0x20000060

0800a0b4 <sbrk_aligned>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	4e0f      	ldr	r6, [pc, #60]	@ (800a0f4 <sbrk_aligned+0x40>)
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	6831      	ldr	r1, [r6, #0]
 800a0bc:	4605      	mov	r5, r0
 800a0be:	b911      	cbnz	r1, 800a0c6 <sbrk_aligned+0x12>
 800a0c0:	f001 ffca 	bl	800c058 <_sbrk_r>
 800a0c4:	6030      	str	r0, [r6, #0]
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	f001 ffc5 	bl	800c058 <_sbrk_r>
 800a0ce:	1c43      	adds	r3, r0, #1
 800a0d0:	d103      	bne.n	800a0da <sbrk_aligned+0x26>
 800a0d2:	f04f 34ff 	mov.w	r4, #4294967295
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	bd70      	pop	{r4, r5, r6, pc}
 800a0da:	1cc4      	adds	r4, r0, #3
 800a0dc:	f024 0403 	bic.w	r4, r4, #3
 800a0e0:	42a0      	cmp	r0, r4
 800a0e2:	d0f8      	beq.n	800a0d6 <sbrk_aligned+0x22>
 800a0e4:	1a21      	subs	r1, r4, r0
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f001 ffb6 	bl	800c058 <_sbrk_r>
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d1f2      	bne.n	800a0d6 <sbrk_aligned+0x22>
 800a0f0:	e7ef      	b.n	800a0d2 <sbrk_aligned+0x1e>
 800a0f2:	bf00      	nop
 800a0f4:	20000ea8 	.word	0x20000ea8

0800a0f8 <_malloc_r>:
 800a0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0fc:	1ccd      	adds	r5, r1, #3
 800a0fe:	f025 0503 	bic.w	r5, r5, #3
 800a102:	3508      	adds	r5, #8
 800a104:	2d0c      	cmp	r5, #12
 800a106:	bf38      	it	cc
 800a108:	250c      	movcc	r5, #12
 800a10a:	2d00      	cmp	r5, #0
 800a10c:	4606      	mov	r6, r0
 800a10e:	db01      	blt.n	800a114 <_malloc_r+0x1c>
 800a110:	42a9      	cmp	r1, r5
 800a112:	d904      	bls.n	800a11e <_malloc_r+0x26>
 800a114:	230c      	movs	r3, #12
 800a116:	6033      	str	r3, [r6, #0]
 800a118:	2000      	movs	r0, #0
 800a11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a11e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1f4 <_malloc_r+0xfc>
 800a122:	f000 f869 	bl	800a1f8 <__malloc_lock>
 800a126:	f8d8 3000 	ldr.w	r3, [r8]
 800a12a:	461c      	mov	r4, r3
 800a12c:	bb44      	cbnz	r4, 800a180 <_malloc_r+0x88>
 800a12e:	4629      	mov	r1, r5
 800a130:	4630      	mov	r0, r6
 800a132:	f7ff ffbf 	bl	800a0b4 <sbrk_aligned>
 800a136:	1c43      	adds	r3, r0, #1
 800a138:	4604      	mov	r4, r0
 800a13a:	d158      	bne.n	800a1ee <_malloc_r+0xf6>
 800a13c:	f8d8 4000 	ldr.w	r4, [r8]
 800a140:	4627      	mov	r7, r4
 800a142:	2f00      	cmp	r7, #0
 800a144:	d143      	bne.n	800a1ce <_malloc_r+0xd6>
 800a146:	2c00      	cmp	r4, #0
 800a148:	d04b      	beq.n	800a1e2 <_malloc_r+0xea>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	4639      	mov	r1, r7
 800a14e:	4630      	mov	r0, r6
 800a150:	eb04 0903 	add.w	r9, r4, r3
 800a154:	f001 ff80 	bl	800c058 <_sbrk_r>
 800a158:	4581      	cmp	r9, r0
 800a15a:	d142      	bne.n	800a1e2 <_malloc_r+0xea>
 800a15c:	6821      	ldr	r1, [r4, #0]
 800a15e:	1a6d      	subs	r5, r5, r1
 800a160:	4629      	mov	r1, r5
 800a162:	4630      	mov	r0, r6
 800a164:	f7ff ffa6 	bl	800a0b4 <sbrk_aligned>
 800a168:	3001      	adds	r0, #1
 800a16a:	d03a      	beq.n	800a1e2 <_malloc_r+0xea>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	442b      	add	r3, r5
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	f8d8 3000 	ldr.w	r3, [r8]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	bb62      	cbnz	r2, 800a1d4 <_malloc_r+0xdc>
 800a17a:	f8c8 7000 	str.w	r7, [r8]
 800a17e:	e00f      	b.n	800a1a0 <_malloc_r+0xa8>
 800a180:	6822      	ldr	r2, [r4, #0]
 800a182:	1b52      	subs	r2, r2, r5
 800a184:	d420      	bmi.n	800a1c8 <_malloc_r+0xd0>
 800a186:	2a0b      	cmp	r2, #11
 800a188:	d917      	bls.n	800a1ba <_malloc_r+0xc2>
 800a18a:	1961      	adds	r1, r4, r5
 800a18c:	42a3      	cmp	r3, r4
 800a18e:	6025      	str	r5, [r4, #0]
 800a190:	bf18      	it	ne
 800a192:	6059      	strne	r1, [r3, #4]
 800a194:	6863      	ldr	r3, [r4, #4]
 800a196:	bf08      	it	eq
 800a198:	f8c8 1000 	streq.w	r1, [r8]
 800a19c:	5162      	str	r2, [r4, r5]
 800a19e:	604b      	str	r3, [r1, #4]
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f000 f82f 	bl	800a204 <__malloc_unlock>
 800a1a6:	f104 000b 	add.w	r0, r4, #11
 800a1aa:	1d23      	adds	r3, r4, #4
 800a1ac:	f020 0007 	bic.w	r0, r0, #7
 800a1b0:	1ac2      	subs	r2, r0, r3
 800a1b2:	bf1c      	itt	ne
 800a1b4:	1a1b      	subne	r3, r3, r0
 800a1b6:	50a3      	strne	r3, [r4, r2]
 800a1b8:	e7af      	b.n	800a11a <_malloc_r+0x22>
 800a1ba:	6862      	ldr	r2, [r4, #4]
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	bf0c      	ite	eq
 800a1c0:	f8c8 2000 	streq.w	r2, [r8]
 800a1c4:	605a      	strne	r2, [r3, #4]
 800a1c6:	e7eb      	b.n	800a1a0 <_malloc_r+0xa8>
 800a1c8:	4623      	mov	r3, r4
 800a1ca:	6864      	ldr	r4, [r4, #4]
 800a1cc:	e7ae      	b.n	800a12c <_malloc_r+0x34>
 800a1ce:	463c      	mov	r4, r7
 800a1d0:	687f      	ldr	r7, [r7, #4]
 800a1d2:	e7b6      	b.n	800a142 <_malloc_r+0x4a>
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	42a3      	cmp	r3, r4
 800a1da:	d1fb      	bne.n	800a1d4 <_malloc_r+0xdc>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	6053      	str	r3, [r2, #4]
 800a1e0:	e7de      	b.n	800a1a0 <_malloc_r+0xa8>
 800a1e2:	230c      	movs	r3, #12
 800a1e4:	6033      	str	r3, [r6, #0]
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f000 f80c 	bl	800a204 <__malloc_unlock>
 800a1ec:	e794      	b.n	800a118 <_malloc_r+0x20>
 800a1ee:	6005      	str	r5, [r0, #0]
 800a1f0:	e7d6      	b.n	800a1a0 <_malloc_r+0xa8>
 800a1f2:	bf00      	nop
 800a1f4:	20000eac 	.word	0x20000eac

0800a1f8 <__malloc_lock>:
 800a1f8:	4801      	ldr	r0, [pc, #4]	@ (800a200 <__malloc_lock+0x8>)
 800a1fa:	f7ff b87a 	b.w	80092f2 <__retarget_lock_acquire_recursive>
 800a1fe:	bf00      	nop
 800a200:	20000ea4 	.word	0x20000ea4

0800a204 <__malloc_unlock>:
 800a204:	4801      	ldr	r0, [pc, #4]	@ (800a20c <__malloc_unlock+0x8>)
 800a206:	f7ff b875 	b.w	80092f4 <__retarget_lock_release_recursive>
 800a20a:	bf00      	nop
 800a20c:	20000ea4 	.word	0x20000ea4

0800a210 <_Balloc>:
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	69c6      	ldr	r6, [r0, #28]
 800a214:	4604      	mov	r4, r0
 800a216:	460d      	mov	r5, r1
 800a218:	b976      	cbnz	r6, 800a238 <_Balloc+0x28>
 800a21a:	2010      	movs	r0, #16
 800a21c:	f7ff ff42 	bl	800a0a4 <malloc>
 800a220:	4602      	mov	r2, r0
 800a222:	61e0      	str	r0, [r4, #28]
 800a224:	b920      	cbnz	r0, 800a230 <_Balloc+0x20>
 800a226:	4b18      	ldr	r3, [pc, #96]	@ (800a288 <_Balloc+0x78>)
 800a228:	4818      	ldr	r0, [pc, #96]	@ (800a28c <_Balloc+0x7c>)
 800a22a:	216b      	movs	r1, #107	@ 0x6b
 800a22c:	f7ff f878 	bl	8009320 <__assert_func>
 800a230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a234:	6006      	str	r6, [r0, #0]
 800a236:	60c6      	str	r6, [r0, #12]
 800a238:	69e6      	ldr	r6, [r4, #28]
 800a23a:	68f3      	ldr	r3, [r6, #12]
 800a23c:	b183      	cbz	r3, 800a260 <_Balloc+0x50>
 800a23e:	69e3      	ldr	r3, [r4, #28]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a246:	b9b8      	cbnz	r0, 800a278 <_Balloc+0x68>
 800a248:	2101      	movs	r1, #1
 800a24a:	fa01 f605 	lsl.w	r6, r1, r5
 800a24e:	1d72      	adds	r2, r6, #5
 800a250:	0092      	lsls	r2, r2, #2
 800a252:	4620      	mov	r0, r4
 800a254:	f001 ff1f 	bl	800c096 <_calloc_r>
 800a258:	b160      	cbz	r0, 800a274 <_Balloc+0x64>
 800a25a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a25e:	e00e      	b.n	800a27e <_Balloc+0x6e>
 800a260:	2221      	movs	r2, #33	@ 0x21
 800a262:	2104      	movs	r1, #4
 800a264:	4620      	mov	r0, r4
 800a266:	f001 ff16 	bl	800c096 <_calloc_r>
 800a26a:	69e3      	ldr	r3, [r4, #28]
 800a26c:	60f0      	str	r0, [r6, #12]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1e4      	bne.n	800a23e <_Balloc+0x2e>
 800a274:	2000      	movs	r0, #0
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	6802      	ldr	r2, [r0, #0]
 800a27a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a27e:	2300      	movs	r3, #0
 800a280:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a284:	e7f7      	b.n	800a276 <_Balloc+0x66>
 800a286:	bf00      	nop
 800a288:	0800d415 	.word	0x0800d415
 800a28c:	0800d538 	.word	0x0800d538

0800a290 <_Bfree>:
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	69c6      	ldr	r6, [r0, #28]
 800a294:	4605      	mov	r5, r0
 800a296:	460c      	mov	r4, r1
 800a298:	b976      	cbnz	r6, 800a2b8 <_Bfree+0x28>
 800a29a:	2010      	movs	r0, #16
 800a29c:	f7ff ff02 	bl	800a0a4 <malloc>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	61e8      	str	r0, [r5, #28]
 800a2a4:	b920      	cbnz	r0, 800a2b0 <_Bfree+0x20>
 800a2a6:	4b09      	ldr	r3, [pc, #36]	@ (800a2cc <_Bfree+0x3c>)
 800a2a8:	4809      	ldr	r0, [pc, #36]	@ (800a2d0 <_Bfree+0x40>)
 800a2aa:	218f      	movs	r1, #143	@ 0x8f
 800a2ac:	f7ff f838 	bl	8009320 <__assert_func>
 800a2b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2b4:	6006      	str	r6, [r0, #0]
 800a2b6:	60c6      	str	r6, [r0, #12]
 800a2b8:	b13c      	cbz	r4, 800a2ca <_Bfree+0x3a>
 800a2ba:	69eb      	ldr	r3, [r5, #28]
 800a2bc:	6862      	ldr	r2, [r4, #4]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2c4:	6021      	str	r1, [r4, #0]
 800a2c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
 800a2cc:	0800d415 	.word	0x0800d415
 800a2d0:	0800d538 	.word	0x0800d538

0800a2d4 <__multadd>:
 800a2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d8:	690d      	ldr	r5, [r1, #16]
 800a2da:	4607      	mov	r7, r0
 800a2dc:	460c      	mov	r4, r1
 800a2de:	461e      	mov	r6, r3
 800a2e0:	f101 0c14 	add.w	ip, r1, #20
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2ea:	b299      	uxth	r1, r3
 800a2ec:	fb02 6101 	mla	r1, r2, r1, r6
 800a2f0:	0c1e      	lsrs	r6, r3, #16
 800a2f2:	0c0b      	lsrs	r3, r1, #16
 800a2f4:	fb02 3306 	mla	r3, r2, r6, r3
 800a2f8:	b289      	uxth	r1, r1
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a300:	4285      	cmp	r5, r0
 800a302:	f84c 1b04 	str.w	r1, [ip], #4
 800a306:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a30a:	dcec      	bgt.n	800a2e6 <__multadd+0x12>
 800a30c:	b30e      	cbz	r6, 800a352 <__multadd+0x7e>
 800a30e:	68a3      	ldr	r3, [r4, #8]
 800a310:	42ab      	cmp	r3, r5
 800a312:	dc19      	bgt.n	800a348 <__multadd+0x74>
 800a314:	6861      	ldr	r1, [r4, #4]
 800a316:	4638      	mov	r0, r7
 800a318:	3101      	adds	r1, #1
 800a31a:	f7ff ff79 	bl	800a210 <_Balloc>
 800a31e:	4680      	mov	r8, r0
 800a320:	b928      	cbnz	r0, 800a32e <__multadd+0x5a>
 800a322:	4602      	mov	r2, r0
 800a324:	4b0c      	ldr	r3, [pc, #48]	@ (800a358 <__multadd+0x84>)
 800a326:	480d      	ldr	r0, [pc, #52]	@ (800a35c <__multadd+0x88>)
 800a328:	21ba      	movs	r1, #186	@ 0xba
 800a32a:	f7fe fff9 	bl	8009320 <__assert_func>
 800a32e:	6922      	ldr	r2, [r4, #16]
 800a330:	3202      	adds	r2, #2
 800a332:	f104 010c 	add.w	r1, r4, #12
 800a336:	0092      	lsls	r2, r2, #2
 800a338:	300c      	adds	r0, #12
 800a33a:	f7fe ffdc 	bl	80092f6 <memcpy>
 800a33e:	4621      	mov	r1, r4
 800a340:	4638      	mov	r0, r7
 800a342:	f7ff ffa5 	bl	800a290 <_Bfree>
 800a346:	4644      	mov	r4, r8
 800a348:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a34c:	3501      	adds	r5, #1
 800a34e:	615e      	str	r6, [r3, #20]
 800a350:	6125      	str	r5, [r4, #16]
 800a352:	4620      	mov	r0, r4
 800a354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a358:	0800d527 	.word	0x0800d527
 800a35c:	0800d538 	.word	0x0800d538

0800a360 <__s2b>:
 800a360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a364:	460c      	mov	r4, r1
 800a366:	4615      	mov	r5, r2
 800a368:	461f      	mov	r7, r3
 800a36a:	2209      	movs	r2, #9
 800a36c:	3308      	adds	r3, #8
 800a36e:	4606      	mov	r6, r0
 800a370:	fb93 f3f2 	sdiv	r3, r3, r2
 800a374:	2100      	movs	r1, #0
 800a376:	2201      	movs	r2, #1
 800a378:	429a      	cmp	r2, r3
 800a37a:	db09      	blt.n	800a390 <__s2b+0x30>
 800a37c:	4630      	mov	r0, r6
 800a37e:	f7ff ff47 	bl	800a210 <_Balloc>
 800a382:	b940      	cbnz	r0, 800a396 <__s2b+0x36>
 800a384:	4602      	mov	r2, r0
 800a386:	4b19      	ldr	r3, [pc, #100]	@ (800a3ec <__s2b+0x8c>)
 800a388:	4819      	ldr	r0, [pc, #100]	@ (800a3f0 <__s2b+0x90>)
 800a38a:	21d3      	movs	r1, #211	@ 0xd3
 800a38c:	f7fe ffc8 	bl	8009320 <__assert_func>
 800a390:	0052      	lsls	r2, r2, #1
 800a392:	3101      	adds	r1, #1
 800a394:	e7f0      	b.n	800a378 <__s2b+0x18>
 800a396:	9b08      	ldr	r3, [sp, #32]
 800a398:	6143      	str	r3, [r0, #20]
 800a39a:	2d09      	cmp	r5, #9
 800a39c:	f04f 0301 	mov.w	r3, #1
 800a3a0:	6103      	str	r3, [r0, #16]
 800a3a2:	dd16      	ble.n	800a3d2 <__s2b+0x72>
 800a3a4:	f104 0909 	add.w	r9, r4, #9
 800a3a8:	46c8      	mov	r8, r9
 800a3aa:	442c      	add	r4, r5
 800a3ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3b0:	4601      	mov	r1, r0
 800a3b2:	3b30      	subs	r3, #48	@ 0x30
 800a3b4:	220a      	movs	r2, #10
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f7ff ff8c 	bl	800a2d4 <__multadd>
 800a3bc:	45a0      	cmp	r8, r4
 800a3be:	d1f5      	bne.n	800a3ac <__s2b+0x4c>
 800a3c0:	f1a5 0408 	sub.w	r4, r5, #8
 800a3c4:	444c      	add	r4, r9
 800a3c6:	1b2d      	subs	r5, r5, r4
 800a3c8:	1963      	adds	r3, r4, r5
 800a3ca:	42bb      	cmp	r3, r7
 800a3cc:	db04      	blt.n	800a3d8 <__s2b+0x78>
 800a3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d2:	340a      	adds	r4, #10
 800a3d4:	2509      	movs	r5, #9
 800a3d6:	e7f6      	b.n	800a3c6 <__s2b+0x66>
 800a3d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3dc:	4601      	mov	r1, r0
 800a3de:	3b30      	subs	r3, #48	@ 0x30
 800a3e0:	220a      	movs	r2, #10
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f7ff ff76 	bl	800a2d4 <__multadd>
 800a3e8:	e7ee      	b.n	800a3c8 <__s2b+0x68>
 800a3ea:	bf00      	nop
 800a3ec:	0800d527 	.word	0x0800d527
 800a3f0:	0800d538 	.word	0x0800d538

0800a3f4 <__hi0bits>:
 800a3f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	bf36      	itet	cc
 800a3fc:	0403      	lslcc	r3, r0, #16
 800a3fe:	2000      	movcs	r0, #0
 800a400:	2010      	movcc	r0, #16
 800a402:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a406:	bf3c      	itt	cc
 800a408:	021b      	lslcc	r3, r3, #8
 800a40a:	3008      	addcc	r0, #8
 800a40c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a410:	bf3c      	itt	cc
 800a412:	011b      	lslcc	r3, r3, #4
 800a414:	3004      	addcc	r0, #4
 800a416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a41a:	bf3c      	itt	cc
 800a41c:	009b      	lslcc	r3, r3, #2
 800a41e:	3002      	addcc	r0, #2
 800a420:	2b00      	cmp	r3, #0
 800a422:	db05      	blt.n	800a430 <__hi0bits+0x3c>
 800a424:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a428:	f100 0001 	add.w	r0, r0, #1
 800a42c:	bf08      	it	eq
 800a42e:	2020      	moveq	r0, #32
 800a430:	4770      	bx	lr

0800a432 <__lo0bits>:
 800a432:	6803      	ldr	r3, [r0, #0]
 800a434:	4602      	mov	r2, r0
 800a436:	f013 0007 	ands.w	r0, r3, #7
 800a43a:	d00b      	beq.n	800a454 <__lo0bits+0x22>
 800a43c:	07d9      	lsls	r1, r3, #31
 800a43e:	d421      	bmi.n	800a484 <__lo0bits+0x52>
 800a440:	0798      	lsls	r0, r3, #30
 800a442:	bf49      	itett	mi
 800a444:	085b      	lsrmi	r3, r3, #1
 800a446:	089b      	lsrpl	r3, r3, #2
 800a448:	2001      	movmi	r0, #1
 800a44a:	6013      	strmi	r3, [r2, #0]
 800a44c:	bf5c      	itt	pl
 800a44e:	6013      	strpl	r3, [r2, #0]
 800a450:	2002      	movpl	r0, #2
 800a452:	4770      	bx	lr
 800a454:	b299      	uxth	r1, r3
 800a456:	b909      	cbnz	r1, 800a45c <__lo0bits+0x2a>
 800a458:	0c1b      	lsrs	r3, r3, #16
 800a45a:	2010      	movs	r0, #16
 800a45c:	b2d9      	uxtb	r1, r3
 800a45e:	b909      	cbnz	r1, 800a464 <__lo0bits+0x32>
 800a460:	3008      	adds	r0, #8
 800a462:	0a1b      	lsrs	r3, r3, #8
 800a464:	0719      	lsls	r1, r3, #28
 800a466:	bf04      	itt	eq
 800a468:	091b      	lsreq	r3, r3, #4
 800a46a:	3004      	addeq	r0, #4
 800a46c:	0799      	lsls	r1, r3, #30
 800a46e:	bf04      	itt	eq
 800a470:	089b      	lsreq	r3, r3, #2
 800a472:	3002      	addeq	r0, #2
 800a474:	07d9      	lsls	r1, r3, #31
 800a476:	d403      	bmi.n	800a480 <__lo0bits+0x4e>
 800a478:	085b      	lsrs	r3, r3, #1
 800a47a:	f100 0001 	add.w	r0, r0, #1
 800a47e:	d003      	beq.n	800a488 <__lo0bits+0x56>
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	4770      	bx	lr
 800a484:	2000      	movs	r0, #0
 800a486:	4770      	bx	lr
 800a488:	2020      	movs	r0, #32
 800a48a:	4770      	bx	lr

0800a48c <__i2b>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	460c      	mov	r4, r1
 800a490:	2101      	movs	r1, #1
 800a492:	f7ff febd 	bl	800a210 <_Balloc>
 800a496:	4602      	mov	r2, r0
 800a498:	b928      	cbnz	r0, 800a4a6 <__i2b+0x1a>
 800a49a:	4b05      	ldr	r3, [pc, #20]	@ (800a4b0 <__i2b+0x24>)
 800a49c:	4805      	ldr	r0, [pc, #20]	@ (800a4b4 <__i2b+0x28>)
 800a49e:	f240 1145 	movw	r1, #325	@ 0x145
 800a4a2:	f7fe ff3d 	bl	8009320 <__assert_func>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	6144      	str	r4, [r0, #20]
 800a4aa:	6103      	str	r3, [r0, #16]
 800a4ac:	bd10      	pop	{r4, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0800d527 	.word	0x0800d527
 800a4b4:	0800d538 	.word	0x0800d538

0800a4b8 <__multiply>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	4617      	mov	r7, r2
 800a4be:	690a      	ldr	r2, [r1, #16]
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	bfa8      	it	ge
 800a4c6:	463b      	movge	r3, r7
 800a4c8:	4689      	mov	r9, r1
 800a4ca:	bfa4      	itt	ge
 800a4cc:	460f      	movge	r7, r1
 800a4ce:	4699      	movge	r9, r3
 800a4d0:	693d      	ldr	r5, [r7, #16]
 800a4d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	6879      	ldr	r1, [r7, #4]
 800a4da:	eb05 060a 	add.w	r6, r5, sl
 800a4de:	42b3      	cmp	r3, r6
 800a4e0:	b085      	sub	sp, #20
 800a4e2:	bfb8      	it	lt
 800a4e4:	3101      	addlt	r1, #1
 800a4e6:	f7ff fe93 	bl	800a210 <_Balloc>
 800a4ea:	b930      	cbnz	r0, 800a4fa <__multiply+0x42>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	4b41      	ldr	r3, [pc, #260]	@ (800a5f4 <__multiply+0x13c>)
 800a4f0:	4841      	ldr	r0, [pc, #260]	@ (800a5f8 <__multiply+0x140>)
 800a4f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4f6:	f7fe ff13 	bl	8009320 <__assert_func>
 800a4fa:	f100 0414 	add.w	r4, r0, #20
 800a4fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a502:	4623      	mov	r3, r4
 800a504:	2200      	movs	r2, #0
 800a506:	4573      	cmp	r3, lr
 800a508:	d320      	bcc.n	800a54c <__multiply+0x94>
 800a50a:	f107 0814 	add.w	r8, r7, #20
 800a50e:	f109 0114 	add.w	r1, r9, #20
 800a512:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a516:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a51a:	9302      	str	r3, [sp, #8]
 800a51c:	1beb      	subs	r3, r5, r7
 800a51e:	3b15      	subs	r3, #21
 800a520:	f023 0303 	bic.w	r3, r3, #3
 800a524:	3304      	adds	r3, #4
 800a526:	3715      	adds	r7, #21
 800a528:	42bd      	cmp	r5, r7
 800a52a:	bf38      	it	cc
 800a52c:	2304      	movcc	r3, #4
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	9103      	str	r1, [sp, #12]
 800a534:	428b      	cmp	r3, r1
 800a536:	d80c      	bhi.n	800a552 <__multiply+0x9a>
 800a538:	2e00      	cmp	r6, #0
 800a53a:	dd03      	ble.n	800a544 <__multiply+0x8c>
 800a53c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a540:	2b00      	cmp	r3, #0
 800a542:	d055      	beq.n	800a5f0 <__multiply+0x138>
 800a544:	6106      	str	r6, [r0, #16]
 800a546:	b005      	add	sp, #20
 800a548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54c:	f843 2b04 	str.w	r2, [r3], #4
 800a550:	e7d9      	b.n	800a506 <__multiply+0x4e>
 800a552:	f8b1 a000 	ldrh.w	sl, [r1]
 800a556:	f1ba 0f00 	cmp.w	sl, #0
 800a55a:	d01f      	beq.n	800a59c <__multiply+0xe4>
 800a55c:	46c4      	mov	ip, r8
 800a55e:	46a1      	mov	r9, r4
 800a560:	2700      	movs	r7, #0
 800a562:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a566:	f8d9 3000 	ldr.w	r3, [r9]
 800a56a:	fa1f fb82 	uxth.w	fp, r2
 800a56e:	b29b      	uxth	r3, r3
 800a570:	fb0a 330b 	mla	r3, sl, fp, r3
 800a574:	443b      	add	r3, r7
 800a576:	f8d9 7000 	ldr.w	r7, [r9]
 800a57a:	0c12      	lsrs	r2, r2, #16
 800a57c:	0c3f      	lsrs	r7, r7, #16
 800a57e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a582:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a586:	b29b      	uxth	r3, r3
 800a588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a58c:	4565      	cmp	r5, ip
 800a58e:	f849 3b04 	str.w	r3, [r9], #4
 800a592:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a596:	d8e4      	bhi.n	800a562 <__multiply+0xaa>
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	50e7      	str	r7, [r4, r3]
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a5a2:	3104      	adds	r1, #4
 800a5a4:	f1b9 0f00 	cmp.w	r9, #0
 800a5a8:	d020      	beq.n	800a5ec <__multiply+0x134>
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	4647      	mov	r7, r8
 800a5ae:	46a4      	mov	ip, r4
 800a5b0:	f04f 0a00 	mov.w	sl, #0
 800a5b4:	f8b7 b000 	ldrh.w	fp, [r7]
 800a5b8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a5bc:	fb09 220b 	mla	r2, r9, fp, r2
 800a5c0:	4452      	add	r2, sl
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5c8:	f84c 3b04 	str.w	r3, [ip], #4
 800a5cc:	f857 3b04 	ldr.w	r3, [r7], #4
 800a5d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5d4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a5d8:	fb09 330a 	mla	r3, r9, sl, r3
 800a5dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a5e0:	42bd      	cmp	r5, r7
 800a5e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5e6:	d8e5      	bhi.n	800a5b4 <__multiply+0xfc>
 800a5e8:	9a01      	ldr	r2, [sp, #4]
 800a5ea:	50a3      	str	r3, [r4, r2]
 800a5ec:	3404      	adds	r4, #4
 800a5ee:	e79f      	b.n	800a530 <__multiply+0x78>
 800a5f0:	3e01      	subs	r6, #1
 800a5f2:	e7a1      	b.n	800a538 <__multiply+0x80>
 800a5f4:	0800d527 	.word	0x0800d527
 800a5f8:	0800d538 	.word	0x0800d538

0800a5fc <__pow5mult>:
 800a5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a600:	4615      	mov	r5, r2
 800a602:	f012 0203 	ands.w	r2, r2, #3
 800a606:	4607      	mov	r7, r0
 800a608:	460e      	mov	r6, r1
 800a60a:	d007      	beq.n	800a61c <__pow5mult+0x20>
 800a60c:	4c25      	ldr	r4, [pc, #148]	@ (800a6a4 <__pow5mult+0xa8>)
 800a60e:	3a01      	subs	r2, #1
 800a610:	2300      	movs	r3, #0
 800a612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a616:	f7ff fe5d 	bl	800a2d4 <__multadd>
 800a61a:	4606      	mov	r6, r0
 800a61c:	10ad      	asrs	r5, r5, #2
 800a61e:	d03d      	beq.n	800a69c <__pow5mult+0xa0>
 800a620:	69fc      	ldr	r4, [r7, #28]
 800a622:	b97c      	cbnz	r4, 800a644 <__pow5mult+0x48>
 800a624:	2010      	movs	r0, #16
 800a626:	f7ff fd3d 	bl	800a0a4 <malloc>
 800a62a:	4602      	mov	r2, r0
 800a62c:	61f8      	str	r0, [r7, #28]
 800a62e:	b928      	cbnz	r0, 800a63c <__pow5mult+0x40>
 800a630:	4b1d      	ldr	r3, [pc, #116]	@ (800a6a8 <__pow5mult+0xac>)
 800a632:	481e      	ldr	r0, [pc, #120]	@ (800a6ac <__pow5mult+0xb0>)
 800a634:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a638:	f7fe fe72 	bl	8009320 <__assert_func>
 800a63c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a640:	6004      	str	r4, [r0, #0]
 800a642:	60c4      	str	r4, [r0, #12]
 800a644:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a64c:	b94c      	cbnz	r4, 800a662 <__pow5mult+0x66>
 800a64e:	f240 2171 	movw	r1, #625	@ 0x271
 800a652:	4638      	mov	r0, r7
 800a654:	f7ff ff1a 	bl	800a48c <__i2b>
 800a658:	2300      	movs	r3, #0
 800a65a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a65e:	4604      	mov	r4, r0
 800a660:	6003      	str	r3, [r0, #0]
 800a662:	f04f 0900 	mov.w	r9, #0
 800a666:	07eb      	lsls	r3, r5, #31
 800a668:	d50a      	bpl.n	800a680 <__pow5mult+0x84>
 800a66a:	4631      	mov	r1, r6
 800a66c:	4622      	mov	r2, r4
 800a66e:	4638      	mov	r0, r7
 800a670:	f7ff ff22 	bl	800a4b8 <__multiply>
 800a674:	4631      	mov	r1, r6
 800a676:	4680      	mov	r8, r0
 800a678:	4638      	mov	r0, r7
 800a67a:	f7ff fe09 	bl	800a290 <_Bfree>
 800a67e:	4646      	mov	r6, r8
 800a680:	106d      	asrs	r5, r5, #1
 800a682:	d00b      	beq.n	800a69c <__pow5mult+0xa0>
 800a684:	6820      	ldr	r0, [r4, #0]
 800a686:	b938      	cbnz	r0, 800a698 <__pow5mult+0x9c>
 800a688:	4622      	mov	r2, r4
 800a68a:	4621      	mov	r1, r4
 800a68c:	4638      	mov	r0, r7
 800a68e:	f7ff ff13 	bl	800a4b8 <__multiply>
 800a692:	6020      	str	r0, [r4, #0]
 800a694:	f8c0 9000 	str.w	r9, [r0]
 800a698:	4604      	mov	r4, r0
 800a69a:	e7e4      	b.n	800a666 <__pow5mult+0x6a>
 800a69c:	4630      	mov	r0, r6
 800a69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6a2:	bf00      	nop
 800a6a4:	0800d60c 	.word	0x0800d60c
 800a6a8:	0800d415 	.word	0x0800d415
 800a6ac:	0800d538 	.word	0x0800d538

0800a6b0 <__lshift>:
 800a6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	6849      	ldr	r1, [r1, #4]
 800a6b8:	6923      	ldr	r3, [r4, #16]
 800a6ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6be:	68a3      	ldr	r3, [r4, #8]
 800a6c0:	4607      	mov	r7, r0
 800a6c2:	4691      	mov	r9, r2
 800a6c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6c8:	f108 0601 	add.w	r6, r8, #1
 800a6cc:	42b3      	cmp	r3, r6
 800a6ce:	db0b      	blt.n	800a6e8 <__lshift+0x38>
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	f7ff fd9d 	bl	800a210 <_Balloc>
 800a6d6:	4605      	mov	r5, r0
 800a6d8:	b948      	cbnz	r0, 800a6ee <__lshift+0x3e>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	4b28      	ldr	r3, [pc, #160]	@ (800a780 <__lshift+0xd0>)
 800a6de:	4829      	ldr	r0, [pc, #164]	@ (800a784 <__lshift+0xd4>)
 800a6e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6e4:	f7fe fe1c 	bl	8009320 <__assert_func>
 800a6e8:	3101      	adds	r1, #1
 800a6ea:	005b      	lsls	r3, r3, #1
 800a6ec:	e7ee      	b.n	800a6cc <__lshift+0x1c>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f100 0114 	add.w	r1, r0, #20
 800a6f4:	f100 0210 	add.w	r2, r0, #16
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	4553      	cmp	r3, sl
 800a6fc:	db33      	blt.n	800a766 <__lshift+0xb6>
 800a6fe:	6920      	ldr	r0, [r4, #16]
 800a700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a704:	f104 0314 	add.w	r3, r4, #20
 800a708:	f019 091f 	ands.w	r9, r9, #31
 800a70c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a714:	d02b      	beq.n	800a76e <__lshift+0xbe>
 800a716:	f1c9 0e20 	rsb	lr, r9, #32
 800a71a:	468a      	mov	sl, r1
 800a71c:	2200      	movs	r2, #0
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	fa00 f009 	lsl.w	r0, r0, r9
 800a724:	4310      	orrs	r0, r2
 800a726:	f84a 0b04 	str.w	r0, [sl], #4
 800a72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a72e:	459c      	cmp	ip, r3
 800a730:	fa22 f20e 	lsr.w	r2, r2, lr
 800a734:	d8f3      	bhi.n	800a71e <__lshift+0x6e>
 800a736:	ebac 0304 	sub.w	r3, ip, r4
 800a73a:	3b15      	subs	r3, #21
 800a73c:	f023 0303 	bic.w	r3, r3, #3
 800a740:	3304      	adds	r3, #4
 800a742:	f104 0015 	add.w	r0, r4, #21
 800a746:	4560      	cmp	r0, ip
 800a748:	bf88      	it	hi
 800a74a:	2304      	movhi	r3, #4
 800a74c:	50ca      	str	r2, [r1, r3]
 800a74e:	b10a      	cbz	r2, 800a754 <__lshift+0xa4>
 800a750:	f108 0602 	add.w	r6, r8, #2
 800a754:	3e01      	subs	r6, #1
 800a756:	4638      	mov	r0, r7
 800a758:	612e      	str	r6, [r5, #16]
 800a75a:	4621      	mov	r1, r4
 800a75c:	f7ff fd98 	bl	800a290 <_Bfree>
 800a760:	4628      	mov	r0, r5
 800a762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a766:	f842 0f04 	str.w	r0, [r2, #4]!
 800a76a:	3301      	adds	r3, #1
 800a76c:	e7c5      	b.n	800a6fa <__lshift+0x4a>
 800a76e:	3904      	subs	r1, #4
 800a770:	f853 2b04 	ldr.w	r2, [r3], #4
 800a774:	f841 2f04 	str.w	r2, [r1, #4]!
 800a778:	459c      	cmp	ip, r3
 800a77a:	d8f9      	bhi.n	800a770 <__lshift+0xc0>
 800a77c:	e7ea      	b.n	800a754 <__lshift+0xa4>
 800a77e:	bf00      	nop
 800a780:	0800d527 	.word	0x0800d527
 800a784:	0800d538 	.word	0x0800d538

0800a788 <__mcmp>:
 800a788:	690a      	ldr	r2, [r1, #16]
 800a78a:	4603      	mov	r3, r0
 800a78c:	6900      	ldr	r0, [r0, #16]
 800a78e:	1a80      	subs	r0, r0, r2
 800a790:	b530      	push	{r4, r5, lr}
 800a792:	d10e      	bne.n	800a7b2 <__mcmp+0x2a>
 800a794:	3314      	adds	r3, #20
 800a796:	3114      	adds	r1, #20
 800a798:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a79c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a7a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7a8:	4295      	cmp	r5, r2
 800a7aa:	d003      	beq.n	800a7b4 <__mcmp+0x2c>
 800a7ac:	d205      	bcs.n	800a7ba <__mcmp+0x32>
 800a7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b2:	bd30      	pop	{r4, r5, pc}
 800a7b4:	42a3      	cmp	r3, r4
 800a7b6:	d3f3      	bcc.n	800a7a0 <__mcmp+0x18>
 800a7b8:	e7fb      	b.n	800a7b2 <__mcmp+0x2a>
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	e7f9      	b.n	800a7b2 <__mcmp+0x2a>
	...

0800a7c0 <__mdiff>:
 800a7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	4689      	mov	r9, r1
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4648      	mov	r0, r9
 800a7cc:	4614      	mov	r4, r2
 800a7ce:	f7ff ffdb 	bl	800a788 <__mcmp>
 800a7d2:	1e05      	subs	r5, r0, #0
 800a7d4:	d112      	bne.n	800a7fc <__mdiff+0x3c>
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7ff fd19 	bl	800a210 <_Balloc>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	b928      	cbnz	r0, 800a7ee <__mdiff+0x2e>
 800a7e2:	4b3f      	ldr	r3, [pc, #252]	@ (800a8e0 <__mdiff+0x120>)
 800a7e4:	f240 2137 	movw	r1, #567	@ 0x237
 800a7e8:	483e      	ldr	r0, [pc, #248]	@ (800a8e4 <__mdiff+0x124>)
 800a7ea:	f7fe fd99 	bl	8009320 <__assert_func>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	b003      	add	sp, #12
 800a7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7fc:	bfbc      	itt	lt
 800a7fe:	464b      	movlt	r3, r9
 800a800:	46a1      	movlt	r9, r4
 800a802:	4630      	mov	r0, r6
 800a804:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a808:	bfba      	itte	lt
 800a80a:	461c      	movlt	r4, r3
 800a80c:	2501      	movlt	r5, #1
 800a80e:	2500      	movge	r5, #0
 800a810:	f7ff fcfe 	bl	800a210 <_Balloc>
 800a814:	4602      	mov	r2, r0
 800a816:	b918      	cbnz	r0, 800a820 <__mdiff+0x60>
 800a818:	4b31      	ldr	r3, [pc, #196]	@ (800a8e0 <__mdiff+0x120>)
 800a81a:	f240 2145 	movw	r1, #581	@ 0x245
 800a81e:	e7e3      	b.n	800a7e8 <__mdiff+0x28>
 800a820:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a824:	6926      	ldr	r6, [r4, #16]
 800a826:	60c5      	str	r5, [r0, #12]
 800a828:	f109 0310 	add.w	r3, r9, #16
 800a82c:	f109 0514 	add.w	r5, r9, #20
 800a830:	f104 0e14 	add.w	lr, r4, #20
 800a834:	f100 0b14 	add.w	fp, r0, #20
 800a838:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a83c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	46d9      	mov	r9, fp
 800a844:	f04f 0c00 	mov.w	ip, #0
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a84e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	fa1f f38a 	uxth.w	r3, sl
 800a858:	4619      	mov	r1, r3
 800a85a:	b283      	uxth	r3, r0
 800a85c:	1acb      	subs	r3, r1, r3
 800a85e:	0c00      	lsrs	r0, r0, #16
 800a860:	4463      	add	r3, ip
 800a862:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a866:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a870:	4576      	cmp	r6, lr
 800a872:	f849 3b04 	str.w	r3, [r9], #4
 800a876:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a87a:	d8e5      	bhi.n	800a848 <__mdiff+0x88>
 800a87c:	1b33      	subs	r3, r6, r4
 800a87e:	3b15      	subs	r3, #21
 800a880:	f023 0303 	bic.w	r3, r3, #3
 800a884:	3415      	adds	r4, #21
 800a886:	3304      	adds	r3, #4
 800a888:	42a6      	cmp	r6, r4
 800a88a:	bf38      	it	cc
 800a88c:	2304      	movcc	r3, #4
 800a88e:	441d      	add	r5, r3
 800a890:	445b      	add	r3, fp
 800a892:	461e      	mov	r6, r3
 800a894:	462c      	mov	r4, r5
 800a896:	4544      	cmp	r4, r8
 800a898:	d30e      	bcc.n	800a8b8 <__mdiff+0xf8>
 800a89a:	f108 0103 	add.w	r1, r8, #3
 800a89e:	1b49      	subs	r1, r1, r5
 800a8a0:	f021 0103 	bic.w	r1, r1, #3
 800a8a4:	3d03      	subs	r5, #3
 800a8a6:	45a8      	cmp	r8, r5
 800a8a8:	bf38      	it	cc
 800a8aa:	2100      	movcc	r1, #0
 800a8ac:	440b      	add	r3, r1
 800a8ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8b2:	b191      	cbz	r1, 800a8da <__mdiff+0x11a>
 800a8b4:	6117      	str	r7, [r2, #16]
 800a8b6:	e79d      	b.n	800a7f4 <__mdiff+0x34>
 800a8b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a8bc:	46e6      	mov	lr, ip
 800a8be:	0c08      	lsrs	r0, r1, #16
 800a8c0:	fa1c fc81 	uxtah	ip, ip, r1
 800a8c4:	4471      	add	r1, lr
 800a8c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a8ca:	b289      	uxth	r1, r1
 800a8cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8d0:	f846 1b04 	str.w	r1, [r6], #4
 800a8d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8d8:	e7dd      	b.n	800a896 <__mdiff+0xd6>
 800a8da:	3f01      	subs	r7, #1
 800a8dc:	e7e7      	b.n	800a8ae <__mdiff+0xee>
 800a8de:	bf00      	nop
 800a8e0:	0800d527 	.word	0x0800d527
 800a8e4:	0800d538 	.word	0x0800d538

0800a8e8 <__ulp>:
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	ed8d 0b00 	vstr	d0, [sp]
 800a8ee:	9a01      	ldr	r2, [sp, #4]
 800a8f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a930 <__ulp+0x48>)
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	dc08      	bgt.n	800a90e <__ulp+0x26>
 800a8fc:	425b      	negs	r3, r3
 800a8fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a902:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a906:	da04      	bge.n	800a912 <__ulp+0x2a>
 800a908:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a90c:	4113      	asrs	r3, r2
 800a90e:	2200      	movs	r2, #0
 800a910:	e008      	b.n	800a924 <__ulp+0x3c>
 800a912:	f1a2 0314 	sub.w	r3, r2, #20
 800a916:	2b1e      	cmp	r3, #30
 800a918:	bfda      	itte	le
 800a91a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a91e:	40da      	lsrle	r2, r3
 800a920:	2201      	movgt	r2, #1
 800a922:	2300      	movs	r3, #0
 800a924:	4619      	mov	r1, r3
 800a926:	4610      	mov	r0, r2
 800a928:	ec41 0b10 	vmov	d0, r0, r1
 800a92c:	b002      	add	sp, #8
 800a92e:	4770      	bx	lr
 800a930:	7ff00000 	.word	0x7ff00000

0800a934 <__b2d>:
 800a934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a938:	6906      	ldr	r6, [r0, #16]
 800a93a:	f100 0814 	add.w	r8, r0, #20
 800a93e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a942:	1f37      	subs	r7, r6, #4
 800a944:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a948:	4610      	mov	r0, r2
 800a94a:	f7ff fd53 	bl	800a3f4 <__hi0bits>
 800a94e:	f1c0 0320 	rsb	r3, r0, #32
 800a952:	280a      	cmp	r0, #10
 800a954:	600b      	str	r3, [r1, #0]
 800a956:	491b      	ldr	r1, [pc, #108]	@ (800a9c4 <__b2d+0x90>)
 800a958:	dc15      	bgt.n	800a986 <__b2d+0x52>
 800a95a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a95e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a962:	45b8      	cmp	r8, r7
 800a964:	ea43 0501 	orr.w	r5, r3, r1
 800a968:	bf34      	ite	cc
 800a96a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a96e:	2300      	movcs	r3, #0
 800a970:	3015      	adds	r0, #21
 800a972:	fa02 f000 	lsl.w	r0, r2, r0
 800a976:	fa23 f30c 	lsr.w	r3, r3, ip
 800a97a:	4303      	orrs	r3, r0
 800a97c:	461c      	mov	r4, r3
 800a97e:	ec45 4b10 	vmov	d0, r4, r5
 800a982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a986:	45b8      	cmp	r8, r7
 800a988:	bf3a      	itte	cc
 800a98a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a98e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a992:	2300      	movcs	r3, #0
 800a994:	380b      	subs	r0, #11
 800a996:	d012      	beq.n	800a9be <__b2d+0x8a>
 800a998:	f1c0 0120 	rsb	r1, r0, #32
 800a99c:	fa23 f401 	lsr.w	r4, r3, r1
 800a9a0:	4082      	lsls	r2, r0
 800a9a2:	4322      	orrs	r2, r4
 800a9a4:	4547      	cmp	r7, r8
 800a9a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a9aa:	bf8c      	ite	hi
 800a9ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a9b0:	2200      	movls	r2, #0
 800a9b2:	4083      	lsls	r3, r0
 800a9b4:	40ca      	lsrs	r2, r1
 800a9b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	e7de      	b.n	800a97c <__b2d+0x48>
 800a9be:	ea42 0501 	orr.w	r5, r2, r1
 800a9c2:	e7db      	b.n	800a97c <__b2d+0x48>
 800a9c4:	3ff00000 	.word	0x3ff00000

0800a9c8 <__d2b>:
 800a9c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9cc:	460f      	mov	r7, r1
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	ec59 8b10 	vmov	r8, r9, d0
 800a9d4:	4616      	mov	r6, r2
 800a9d6:	f7ff fc1b 	bl	800a210 <_Balloc>
 800a9da:	4604      	mov	r4, r0
 800a9dc:	b930      	cbnz	r0, 800a9ec <__d2b+0x24>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	4b23      	ldr	r3, [pc, #140]	@ (800aa70 <__d2b+0xa8>)
 800a9e2:	4824      	ldr	r0, [pc, #144]	@ (800aa74 <__d2b+0xac>)
 800a9e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a9e8:	f7fe fc9a 	bl	8009320 <__assert_func>
 800a9ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9f4:	b10d      	cbz	r5, 800a9fa <__d2b+0x32>
 800a9f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9fa:	9301      	str	r3, [sp, #4]
 800a9fc:	f1b8 0300 	subs.w	r3, r8, #0
 800aa00:	d023      	beq.n	800aa4a <__d2b+0x82>
 800aa02:	4668      	mov	r0, sp
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	f7ff fd14 	bl	800a432 <__lo0bits>
 800aa0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa0e:	b1d0      	cbz	r0, 800aa46 <__d2b+0x7e>
 800aa10:	f1c0 0320 	rsb	r3, r0, #32
 800aa14:	fa02 f303 	lsl.w	r3, r2, r3
 800aa18:	430b      	orrs	r3, r1
 800aa1a:	40c2      	lsrs	r2, r0
 800aa1c:	6163      	str	r3, [r4, #20]
 800aa1e:	9201      	str	r2, [sp, #4]
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	61a3      	str	r3, [r4, #24]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	bf0c      	ite	eq
 800aa28:	2201      	moveq	r2, #1
 800aa2a:	2202      	movne	r2, #2
 800aa2c:	6122      	str	r2, [r4, #16]
 800aa2e:	b1a5      	cbz	r5, 800aa5a <__d2b+0x92>
 800aa30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa34:	4405      	add	r5, r0
 800aa36:	603d      	str	r5, [r7, #0]
 800aa38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa3c:	6030      	str	r0, [r6, #0]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	b003      	add	sp, #12
 800aa42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa46:	6161      	str	r1, [r4, #20]
 800aa48:	e7ea      	b.n	800aa20 <__d2b+0x58>
 800aa4a:	a801      	add	r0, sp, #4
 800aa4c:	f7ff fcf1 	bl	800a432 <__lo0bits>
 800aa50:	9b01      	ldr	r3, [sp, #4]
 800aa52:	6163      	str	r3, [r4, #20]
 800aa54:	3020      	adds	r0, #32
 800aa56:	2201      	movs	r2, #1
 800aa58:	e7e8      	b.n	800aa2c <__d2b+0x64>
 800aa5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa62:	6038      	str	r0, [r7, #0]
 800aa64:	6918      	ldr	r0, [r3, #16]
 800aa66:	f7ff fcc5 	bl	800a3f4 <__hi0bits>
 800aa6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa6e:	e7e5      	b.n	800aa3c <__d2b+0x74>
 800aa70:	0800d527 	.word	0x0800d527
 800aa74:	0800d538 	.word	0x0800d538

0800aa78 <__ratio>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	b085      	sub	sp, #20
 800aa7e:	e9cd 1000 	strd	r1, r0, [sp]
 800aa82:	a902      	add	r1, sp, #8
 800aa84:	f7ff ff56 	bl	800a934 <__b2d>
 800aa88:	9800      	ldr	r0, [sp, #0]
 800aa8a:	a903      	add	r1, sp, #12
 800aa8c:	ec55 4b10 	vmov	r4, r5, d0
 800aa90:	f7ff ff50 	bl	800a934 <__b2d>
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	6919      	ldr	r1, [r3, #16]
 800aa98:	9b00      	ldr	r3, [sp, #0]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	1ac9      	subs	r1, r1, r3
 800aa9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	ec5b ab10 	vmov	sl, fp, d0
 800aaa8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bfce      	itee	gt
 800aab0:	462a      	movgt	r2, r5
 800aab2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aab6:	465a      	movle	r2, fp
 800aab8:	462f      	mov	r7, r5
 800aaba:	46d9      	mov	r9, fp
 800aabc:	bfcc      	ite	gt
 800aabe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aac2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aac6:	464b      	mov	r3, r9
 800aac8:	4652      	mov	r2, sl
 800aaca:	4620      	mov	r0, r4
 800aacc:	4639      	mov	r1, r7
 800aace:	f7f5 febd 	bl	800084c <__aeabi_ddiv>
 800aad2:	ec41 0b10 	vmov	d0, r0, r1
 800aad6:	b005      	add	sp, #20
 800aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aadc <__copybits>:
 800aadc:	3901      	subs	r1, #1
 800aade:	b570      	push	{r4, r5, r6, lr}
 800aae0:	1149      	asrs	r1, r1, #5
 800aae2:	6914      	ldr	r4, [r2, #16]
 800aae4:	3101      	adds	r1, #1
 800aae6:	f102 0314 	add.w	r3, r2, #20
 800aaea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aaee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aaf2:	1f05      	subs	r5, r0, #4
 800aaf4:	42a3      	cmp	r3, r4
 800aaf6:	d30c      	bcc.n	800ab12 <__copybits+0x36>
 800aaf8:	1aa3      	subs	r3, r4, r2
 800aafa:	3b11      	subs	r3, #17
 800aafc:	f023 0303 	bic.w	r3, r3, #3
 800ab00:	3211      	adds	r2, #17
 800ab02:	42a2      	cmp	r2, r4
 800ab04:	bf88      	it	hi
 800ab06:	2300      	movhi	r3, #0
 800ab08:	4418      	add	r0, r3
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4288      	cmp	r0, r1
 800ab0e:	d305      	bcc.n	800ab1c <__copybits+0x40>
 800ab10:	bd70      	pop	{r4, r5, r6, pc}
 800ab12:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab16:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab1a:	e7eb      	b.n	800aaf4 <__copybits+0x18>
 800ab1c:	f840 3b04 	str.w	r3, [r0], #4
 800ab20:	e7f4      	b.n	800ab0c <__copybits+0x30>

0800ab22 <__any_on>:
 800ab22:	f100 0214 	add.w	r2, r0, #20
 800ab26:	6900      	ldr	r0, [r0, #16]
 800ab28:	114b      	asrs	r3, r1, #5
 800ab2a:	4298      	cmp	r0, r3
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	db11      	blt.n	800ab54 <__any_on+0x32>
 800ab30:	dd0a      	ble.n	800ab48 <__any_on+0x26>
 800ab32:	f011 011f 	ands.w	r1, r1, #31
 800ab36:	d007      	beq.n	800ab48 <__any_on+0x26>
 800ab38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab3c:	fa24 f001 	lsr.w	r0, r4, r1
 800ab40:	fa00 f101 	lsl.w	r1, r0, r1
 800ab44:	428c      	cmp	r4, r1
 800ab46:	d10b      	bne.n	800ab60 <__any_on+0x3e>
 800ab48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d803      	bhi.n	800ab58 <__any_on+0x36>
 800ab50:	2000      	movs	r0, #0
 800ab52:	bd10      	pop	{r4, pc}
 800ab54:	4603      	mov	r3, r0
 800ab56:	e7f7      	b.n	800ab48 <__any_on+0x26>
 800ab58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	d0f5      	beq.n	800ab4c <__any_on+0x2a>
 800ab60:	2001      	movs	r0, #1
 800ab62:	e7f6      	b.n	800ab52 <__any_on+0x30>

0800ab64 <sulp>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	4604      	mov	r4, r0
 800ab68:	460d      	mov	r5, r1
 800ab6a:	ec45 4b10 	vmov	d0, r4, r5
 800ab6e:	4616      	mov	r6, r2
 800ab70:	f7ff feba 	bl	800a8e8 <__ulp>
 800ab74:	ec51 0b10 	vmov	r0, r1, d0
 800ab78:	b17e      	cbz	r6, 800ab9a <sulp+0x36>
 800ab7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ab7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	dd09      	ble.n	800ab9a <sulp+0x36>
 800ab86:	051b      	lsls	r3, r3, #20
 800ab88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab8c:	2400      	movs	r4, #0
 800ab8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab92:	4622      	mov	r2, r4
 800ab94:	462b      	mov	r3, r5
 800ab96:	f7f5 fd2f 	bl	80005f8 <__aeabi_dmul>
 800ab9a:	ec41 0b10 	vmov	d0, r0, r1
 800ab9e:	bd70      	pop	{r4, r5, r6, pc}

0800aba0 <_strtod_l>:
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	b09f      	sub	sp, #124	@ 0x7c
 800aba6:	460c      	mov	r4, r1
 800aba8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800abaa:	2200      	movs	r2, #0
 800abac:	921a      	str	r2, [sp, #104]	@ 0x68
 800abae:	9005      	str	r0, [sp, #20]
 800abb0:	f04f 0a00 	mov.w	sl, #0
 800abb4:	f04f 0b00 	mov.w	fp, #0
 800abb8:	460a      	mov	r2, r1
 800abba:	9219      	str	r2, [sp, #100]	@ 0x64
 800abbc:	7811      	ldrb	r1, [r2, #0]
 800abbe:	292b      	cmp	r1, #43	@ 0x2b
 800abc0:	d04a      	beq.n	800ac58 <_strtod_l+0xb8>
 800abc2:	d838      	bhi.n	800ac36 <_strtod_l+0x96>
 800abc4:	290d      	cmp	r1, #13
 800abc6:	d832      	bhi.n	800ac2e <_strtod_l+0x8e>
 800abc8:	2908      	cmp	r1, #8
 800abca:	d832      	bhi.n	800ac32 <_strtod_l+0x92>
 800abcc:	2900      	cmp	r1, #0
 800abce:	d03b      	beq.n	800ac48 <_strtod_l+0xa8>
 800abd0:	2200      	movs	r2, #0
 800abd2:	920e      	str	r2, [sp, #56]	@ 0x38
 800abd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800abd6:	782a      	ldrb	r2, [r5, #0]
 800abd8:	2a30      	cmp	r2, #48	@ 0x30
 800abda:	f040 80b2 	bne.w	800ad42 <_strtod_l+0x1a2>
 800abde:	786a      	ldrb	r2, [r5, #1]
 800abe0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abe4:	2a58      	cmp	r2, #88	@ 0x58
 800abe6:	d16e      	bne.n	800acc6 <_strtod_l+0x126>
 800abe8:	9302      	str	r3, [sp, #8]
 800abea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	ab1a      	add	r3, sp, #104	@ 0x68
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	4a8f      	ldr	r2, [pc, #572]	@ (800ae30 <_strtod_l+0x290>)
 800abf4:	9805      	ldr	r0, [sp, #20]
 800abf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800abf8:	a919      	add	r1, sp, #100	@ 0x64
 800abfa:	f001 fac7 	bl	800c18c <__gethex>
 800abfe:	f010 060f 	ands.w	r6, r0, #15
 800ac02:	4604      	mov	r4, r0
 800ac04:	d005      	beq.n	800ac12 <_strtod_l+0x72>
 800ac06:	2e06      	cmp	r6, #6
 800ac08:	d128      	bne.n	800ac5c <_strtod_l+0xbc>
 800ac0a:	3501      	adds	r5, #1
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ac10:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f040 858e 	bne.w	800b736 <_strtod_l+0xb96>
 800ac1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac1c:	b1cb      	cbz	r3, 800ac52 <_strtod_l+0xb2>
 800ac1e:	4652      	mov	r2, sl
 800ac20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ac24:	ec43 2b10 	vmov	d0, r2, r3
 800ac28:	b01f      	add	sp, #124	@ 0x7c
 800ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2e:	2920      	cmp	r1, #32
 800ac30:	d1ce      	bne.n	800abd0 <_strtod_l+0x30>
 800ac32:	3201      	adds	r2, #1
 800ac34:	e7c1      	b.n	800abba <_strtod_l+0x1a>
 800ac36:	292d      	cmp	r1, #45	@ 0x2d
 800ac38:	d1ca      	bne.n	800abd0 <_strtod_l+0x30>
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	910e      	str	r1, [sp, #56]	@ 0x38
 800ac3e:	1c51      	adds	r1, r2, #1
 800ac40:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac42:	7852      	ldrb	r2, [r2, #1]
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	d1c5      	bne.n	800abd4 <_strtod_l+0x34>
 800ac48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac4a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f040 8570 	bne.w	800b732 <_strtod_l+0xb92>
 800ac52:	4652      	mov	r2, sl
 800ac54:	465b      	mov	r3, fp
 800ac56:	e7e5      	b.n	800ac24 <_strtod_l+0x84>
 800ac58:	2100      	movs	r1, #0
 800ac5a:	e7ef      	b.n	800ac3c <_strtod_l+0x9c>
 800ac5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac5e:	b13a      	cbz	r2, 800ac70 <_strtod_l+0xd0>
 800ac60:	2135      	movs	r1, #53	@ 0x35
 800ac62:	a81c      	add	r0, sp, #112	@ 0x70
 800ac64:	f7ff ff3a 	bl	800aadc <__copybits>
 800ac68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac6a:	9805      	ldr	r0, [sp, #20]
 800ac6c:	f7ff fb10 	bl	800a290 <_Bfree>
 800ac70:	3e01      	subs	r6, #1
 800ac72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac74:	2e04      	cmp	r6, #4
 800ac76:	d806      	bhi.n	800ac86 <_strtod_l+0xe6>
 800ac78:	e8df f006 	tbb	[pc, r6]
 800ac7c:	201d0314 	.word	0x201d0314
 800ac80:	14          	.byte	0x14
 800ac81:	00          	.byte	0x00
 800ac82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac86:	05e1      	lsls	r1, r4, #23
 800ac88:	bf48      	it	mi
 800ac8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac92:	0d1b      	lsrs	r3, r3, #20
 800ac94:	051b      	lsls	r3, r3, #20
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1bb      	bne.n	800ac12 <_strtod_l+0x72>
 800ac9a:	f7fe faff 	bl	800929c <__errno>
 800ac9e:	2322      	movs	r3, #34	@ 0x22
 800aca0:	6003      	str	r3, [r0, #0]
 800aca2:	e7b6      	b.n	800ac12 <_strtod_l+0x72>
 800aca4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aca8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800acac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800acb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800acb4:	e7e7      	b.n	800ac86 <_strtod_l+0xe6>
 800acb6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ae38 <_strtod_l+0x298>
 800acba:	e7e4      	b.n	800ac86 <_strtod_l+0xe6>
 800acbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800acc0:	f04f 3aff 	mov.w	sl, #4294967295
 800acc4:	e7df      	b.n	800ac86 <_strtod_l+0xe6>
 800acc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	9219      	str	r2, [sp, #100]	@ 0x64
 800accc:	785b      	ldrb	r3, [r3, #1]
 800acce:	2b30      	cmp	r3, #48	@ 0x30
 800acd0:	d0f9      	beq.n	800acc6 <_strtod_l+0x126>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d09d      	beq.n	800ac12 <_strtod_l+0x72>
 800acd6:	2301      	movs	r3, #1
 800acd8:	2700      	movs	r7, #0
 800acda:	9308      	str	r3, [sp, #32]
 800acdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acde:	930c      	str	r3, [sp, #48]	@ 0x30
 800ace0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ace2:	46b9      	mov	r9, r7
 800ace4:	220a      	movs	r2, #10
 800ace6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ace8:	7805      	ldrb	r5, [r0, #0]
 800acea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800acee:	b2d9      	uxtb	r1, r3
 800acf0:	2909      	cmp	r1, #9
 800acf2:	d928      	bls.n	800ad46 <_strtod_l+0x1a6>
 800acf4:	494f      	ldr	r1, [pc, #316]	@ (800ae34 <_strtod_l+0x294>)
 800acf6:	2201      	movs	r2, #1
 800acf8:	f7fe f9ee 	bl	80090d8 <strncmp>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d032      	beq.n	800ad66 <_strtod_l+0x1c6>
 800ad00:	2000      	movs	r0, #0
 800ad02:	462a      	mov	r2, r5
 800ad04:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad06:	464d      	mov	r5, r9
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2a65      	cmp	r2, #101	@ 0x65
 800ad0c:	d001      	beq.n	800ad12 <_strtod_l+0x172>
 800ad0e:	2a45      	cmp	r2, #69	@ 0x45
 800ad10:	d114      	bne.n	800ad3c <_strtod_l+0x19c>
 800ad12:	b91d      	cbnz	r5, 800ad1c <_strtod_l+0x17c>
 800ad14:	9a08      	ldr	r2, [sp, #32]
 800ad16:	4302      	orrs	r2, r0
 800ad18:	d096      	beq.n	800ac48 <_strtod_l+0xa8>
 800ad1a:	2500      	movs	r5, #0
 800ad1c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ad1e:	1c62      	adds	r2, r4, #1
 800ad20:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad22:	7862      	ldrb	r2, [r4, #1]
 800ad24:	2a2b      	cmp	r2, #43	@ 0x2b
 800ad26:	d07a      	beq.n	800ae1e <_strtod_l+0x27e>
 800ad28:	2a2d      	cmp	r2, #45	@ 0x2d
 800ad2a:	d07e      	beq.n	800ae2a <_strtod_l+0x28a>
 800ad2c:	f04f 0c00 	mov.w	ip, #0
 800ad30:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad34:	2909      	cmp	r1, #9
 800ad36:	f240 8085 	bls.w	800ae44 <_strtod_l+0x2a4>
 800ad3a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad3c:	f04f 0800 	mov.w	r8, #0
 800ad40:	e0a5      	b.n	800ae8e <_strtod_l+0x2ee>
 800ad42:	2300      	movs	r3, #0
 800ad44:	e7c8      	b.n	800acd8 <_strtod_l+0x138>
 800ad46:	f1b9 0f08 	cmp.w	r9, #8
 800ad4a:	bfd8      	it	le
 800ad4c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ad4e:	f100 0001 	add.w	r0, r0, #1
 800ad52:	bfda      	itte	le
 800ad54:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad58:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ad5a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ad5e:	f109 0901 	add.w	r9, r9, #1
 800ad62:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad64:	e7bf      	b.n	800ace6 <_strtod_l+0x146>
 800ad66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad6c:	785a      	ldrb	r2, [r3, #1]
 800ad6e:	f1b9 0f00 	cmp.w	r9, #0
 800ad72:	d03b      	beq.n	800adec <_strtod_l+0x24c>
 800ad74:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad76:	464d      	mov	r5, r9
 800ad78:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad7c:	2b09      	cmp	r3, #9
 800ad7e:	d912      	bls.n	800ada6 <_strtod_l+0x206>
 800ad80:	2301      	movs	r3, #1
 800ad82:	e7c2      	b.n	800ad0a <_strtod_l+0x16a>
 800ad84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad8a:	785a      	ldrb	r2, [r3, #1]
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	2a30      	cmp	r2, #48	@ 0x30
 800ad90:	d0f8      	beq.n	800ad84 <_strtod_l+0x1e4>
 800ad92:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad96:	2b08      	cmp	r3, #8
 800ad98:	f200 84d2 	bhi.w	800b740 <_strtod_l+0xba0>
 800ad9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad9e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ada0:	2000      	movs	r0, #0
 800ada2:	930c      	str	r3, [sp, #48]	@ 0x30
 800ada4:	4605      	mov	r5, r0
 800ada6:	3a30      	subs	r2, #48	@ 0x30
 800ada8:	f100 0301 	add.w	r3, r0, #1
 800adac:	d018      	beq.n	800ade0 <_strtod_l+0x240>
 800adae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800adb0:	4419      	add	r1, r3
 800adb2:	910a      	str	r1, [sp, #40]	@ 0x28
 800adb4:	462e      	mov	r6, r5
 800adb6:	f04f 0e0a 	mov.w	lr, #10
 800adba:	1c71      	adds	r1, r6, #1
 800adbc:	eba1 0c05 	sub.w	ip, r1, r5
 800adc0:	4563      	cmp	r3, ip
 800adc2:	dc15      	bgt.n	800adf0 <_strtod_l+0x250>
 800adc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800adc8:	182b      	adds	r3, r5, r0
 800adca:	2b08      	cmp	r3, #8
 800adcc:	f105 0501 	add.w	r5, r5, #1
 800add0:	4405      	add	r5, r0
 800add2:	dc1a      	bgt.n	800ae0a <_strtod_l+0x26a>
 800add4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800add6:	230a      	movs	r3, #10
 800add8:	fb03 2301 	mla	r3, r3, r1, r2
 800addc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adde:	2300      	movs	r3, #0
 800ade0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ade2:	1c51      	adds	r1, r2, #1
 800ade4:	9119      	str	r1, [sp, #100]	@ 0x64
 800ade6:	7852      	ldrb	r2, [r2, #1]
 800ade8:	4618      	mov	r0, r3
 800adea:	e7c5      	b.n	800ad78 <_strtod_l+0x1d8>
 800adec:	4648      	mov	r0, r9
 800adee:	e7ce      	b.n	800ad8e <_strtod_l+0x1ee>
 800adf0:	2e08      	cmp	r6, #8
 800adf2:	dc05      	bgt.n	800ae00 <_strtod_l+0x260>
 800adf4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800adf6:	fb0e f606 	mul.w	r6, lr, r6
 800adfa:	960b      	str	r6, [sp, #44]	@ 0x2c
 800adfc:	460e      	mov	r6, r1
 800adfe:	e7dc      	b.n	800adba <_strtod_l+0x21a>
 800ae00:	2910      	cmp	r1, #16
 800ae02:	bfd8      	it	le
 800ae04:	fb0e f707 	mulle.w	r7, lr, r7
 800ae08:	e7f8      	b.n	800adfc <_strtod_l+0x25c>
 800ae0a:	2b0f      	cmp	r3, #15
 800ae0c:	bfdc      	itt	le
 800ae0e:	230a      	movle	r3, #10
 800ae10:	fb03 2707 	mlale	r7, r3, r7, r2
 800ae14:	e7e3      	b.n	800adde <_strtod_l+0x23e>
 800ae16:	2300      	movs	r3, #0
 800ae18:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e77a      	b.n	800ad14 <_strtod_l+0x174>
 800ae1e:	f04f 0c00 	mov.w	ip, #0
 800ae22:	1ca2      	adds	r2, r4, #2
 800ae24:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae26:	78a2      	ldrb	r2, [r4, #2]
 800ae28:	e782      	b.n	800ad30 <_strtod_l+0x190>
 800ae2a:	f04f 0c01 	mov.w	ip, #1
 800ae2e:	e7f8      	b.n	800ae22 <_strtod_l+0x282>
 800ae30:	0800d71c 	.word	0x0800d71c
 800ae34:	0800d591 	.word	0x0800d591
 800ae38:	7ff00000 	.word	0x7ff00000
 800ae3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae3e:	1c51      	adds	r1, r2, #1
 800ae40:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae42:	7852      	ldrb	r2, [r2, #1]
 800ae44:	2a30      	cmp	r2, #48	@ 0x30
 800ae46:	d0f9      	beq.n	800ae3c <_strtod_l+0x29c>
 800ae48:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae4c:	2908      	cmp	r1, #8
 800ae4e:	f63f af75 	bhi.w	800ad3c <_strtod_l+0x19c>
 800ae52:	3a30      	subs	r2, #48	@ 0x30
 800ae54:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae58:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae5a:	f04f 080a 	mov.w	r8, #10
 800ae5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae60:	1c56      	adds	r6, r2, #1
 800ae62:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae64:	7852      	ldrb	r2, [r2, #1]
 800ae66:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae6a:	f1be 0f09 	cmp.w	lr, #9
 800ae6e:	d939      	bls.n	800aee4 <_strtod_l+0x344>
 800ae70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae72:	1a76      	subs	r6, r6, r1
 800ae74:	2e08      	cmp	r6, #8
 800ae76:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae7a:	dc03      	bgt.n	800ae84 <_strtod_l+0x2e4>
 800ae7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae7e:	4588      	cmp	r8, r1
 800ae80:	bfa8      	it	ge
 800ae82:	4688      	movge	r8, r1
 800ae84:	f1bc 0f00 	cmp.w	ip, #0
 800ae88:	d001      	beq.n	800ae8e <_strtod_l+0x2ee>
 800ae8a:	f1c8 0800 	rsb	r8, r8, #0
 800ae8e:	2d00      	cmp	r5, #0
 800ae90:	d14e      	bne.n	800af30 <_strtod_l+0x390>
 800ae92:	9908      	ldr	r1, [sp, #32]
 800ae94:	4308      	orrs	r0, r1
 800ae96:	f47f aebc 	bne.w	800ac12 <_strtod_l+0x72>
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f47f aed4 	bne.w	800ac48 <_strtod_l+0xa8>
 800aea0:	2a69      	cmp	r2, #105	@ 0x69
 800aea2:	d028      	beq.n	800aef6 <_strtod_l+0x356>
 800aea4:	dc25      	bgt.n	800aef2 <_strtod_l+0x352>
 800aea6:	2a49      	cmp	r2, #73	@ 0x49
 800aea8:	d025      	beq.n	800aef6 <_strtod_l+0x356>
 800aeaa:	2a4e      	cmp	r2, #78	@ 0x4e
 800aeac:	f47f aecc 	bne.w	800ac48 <_strtod_l+0xa8>
 800aeb0:	499a      	ldr	r1, [pc, #616]	@ (800b11c <_strtod_l+0x57c>)
 800aeb2:	a819      	add	r0, sp, #100	@ 0x64
 800aeb4:	f001 fb8c 	bl	800c5d0 <__match>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	f43f aec5 	beq.w	800ac48 <_strtod_l+0xa8>
 800aebe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2b28      	cmp	r3, #40	@ 0x28
 800aec4:	d12e      	bne.n	800af24 <_strtod_l+0x384>
 800aec6:	4996      	ldr	r1, [pc, #600]	@ (800b120 <_strtod_l+0x580>)
 800aec8:	aa1c      	add	r2, sp, #112	@ 0x70
 800aeca:	a819      	add	r0, sp, #100	@ 0x64
 800aecc:	f001 fb94 	bl	800c5f8 <__hexnan>
 800aed0:	2805      	cmp	r0, #5
 800aed2:	d127      	bne.n	800af24 <_strtod_l+0x384>
 800aed4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aed6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aeda:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aede:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aee2:	e696      	b.n	800ac12 <_strtod_l+0x72>
 800aee4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aee6:	fb08 2101 	mla	r1, r8, r1, r2
 800aeea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aeee:	9209      	str	r2, [sp, #36]	@ 0x24
 800aef0:	e7b5      	b.n	800ae5e <_strtod_l+0x2be>
 800aef2:	2a6e      	cmp	r2, #110	@ 0x6e
 800aef4:	e7da      	b.n	800aeac <_strtod_l+0x30c>
 800aef6:	498b      	ldr	r1, [pc, #556]	@ (800b124 <_strtod_l+0x584>)
 800aef8:	a819      	add	r0, sp, #100	@ 0x64
 800aefa:	f001 fb69 	bl	800c5d0 <__match>
 800aefe:	2800      	cmp	r0, #0
 800af00:	f43f aea2 	beq.w	800ac48 <_strtod_l+0xa8>
 800af04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af06:	4988      	ldr	r1, [pc, #544]	@ (800b128 <_strtod_l+0x588>)
 800af08:	3b01      	subs	r3, #1
 800af0a:	a819      	add	r0, sp, #100	@ 0x64
 800af0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800af0e:	f001 fb5f 	bl	800c5d0 <__match>
 800af12:	b910      	cbnz	r0, 800af1a <_strtod_l+0x37a>
 800af14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af16:	3301      	adds	r3, #1
 800af18:	9319      	str	r3, [sp, #100]	@ 0x64
 800af1a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b138 <_strtod_l+0x598>
 800af1e:	f04f 0a00 	mov.w	sl, #0
 800af22:	e676      	b.n	800ac12 <_strtod_l+0x72>
 800af24:	4881      	ldr	r0, [pc, #516]	@ (800b12c <_strtod_l+0x58c>)
 800af26:	f001 f8a7 	bl	800c078 <nan>
 800af2a:	ec5b ab10 	vmov	sl, fp, d0
 800af2e:	e670      	b.n	800ac12 <_strtod_l+0x72>
 800af30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af32:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800af34:	eba8 0303 	sub.w	r3, r8, r3
 800af38:	f1b9 0f00 	cmp.w	r9, #0
 800af3c:	bf08      	it	eq
 800af3e:	46a9      	moveq	r9, r5
 800af40:	2d10      	cmp	r5, #16
 800af42:	9309      	str	r3, [sp, #36]	@ 0x24
 800af44:	462c      	mov	r4, r5
 800af46:	bfa8      	it	ge
 800af48:	2410      	movge	r4, #16
 800af4a:	f7f5 fadb 	bl	8000504 <__aeabi_ui2d>
 800af4e:	2d09      	cmp	r5, #9
 800af50:	4682      	mov	sl, r0
 800af52:	468b      	mov	fp, r1
 800af54:	dc13      	bgt.n	800af7e <_strtod_l+0x3de>
 800af56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f43f ae5a 	beq.w	800ac12 <_strtod_l+0x72>
 800af5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af60:	dd78      	ble.n	800b054 <_strtod_l+0x4b4>
 800af62:	2b16      	cmp	r3, #22
 800af64:	dc5f      	bgt.n	800b026 <_strtod_l+0x486>
 800af66:	4972      	ldr	r1, [pc, #456]	@ (800b130 <_strtod_l+0x590>)
 800af68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af70:	4652      	mov	r2, sl
 800af72:	465b      	mov	r3, fp
 800af74:	f7f5 fb40 	bl	80005f8 <__aeabi_dmul>
 800af78:	4682      	mov	sl, r0
 800af7a:	468b      	mov	fp, r1
 800af7c:	e649      	b.n	800ac12 <_strtod_l+0x72>
 800af7e:	4b6c      	ldr	r3, [pc, #432]	@ (800b130 <_strtod_l+0x590>)
 800af80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af88:	f7f5 fb36 	bl	80005f8 <__aeabi_dmul>
 800af8c:	4682      	mov	sl, r0
 800af8e:	4638      	mov	r0, r7
 800af90:	468b      	mov	fp, r1
 800af92:	f7f5 fab7 	bl	8000504 <__aeabi_ui2d>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	4650      	mov	r0, sl
 800af9c:	4659      	mov	r1, fp
 800af9e:	f7f5 f975 	bl	800028c <__adddf3>
 800afa2:	2d0f      	cmp	r5, #15
 800afa4:	4682      	mov	sl, r0
 800afa6:	468b      	mov	fp, r1
 800afa8:	ddd5      	ble.n	800af56 <_strtod_l+0x3b6>
 800afaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afac:	1b2c      	subs	r4, r5, r4
 800afae:	441c      	add	r4, r3
 800afb0:	2c00      	cmp	r4, #0
 800afb2:	f340 8093 	ble.w	800b0dc <_strtod_l+0x53c>
 800afb6:	f014 030f 	ands.w	r3, r4, #15
 800afba:	d00a      	beq.n	800afd2 <_strtod_l+0x432>
 800afbc:	495c      	ldr	r1, [pc, #368]	@ (800b130 <_strtod_l+0x590>)
 800afbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afc2:	4652      	mov	r2, sl
 800afc4:	465b      	mov	r3, fp
 800afc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afca:	f7f5 fb15 	bl	80005f8 <__aeabi_dmul>
 800afce:	4682      	mov	sl, r0
 800afd0:	468b      	mov	fp, r1
 800afd2:	f034 040f 	bics.w	r4, r4, #15
 800afd6:	d073      	beq.n	800b0c0 <_strtod_l+0x520>
 800afd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800afdc:	dd49      	ble.n	800b072 <_strtod_l+0x4d2>
 800afde:	2400      	movs	r4, #0
 800afe0:	46a0      	mov	r8, r4
 800afe2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800afe4:	46a1      	mov	r9, r4
 800afe6:	9a05      	ldr	r2, [sp, #20]
 800afe8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b138 <_strtod_l+0x598>
 800afec:	2322      	movs	r3, #34	@ 0x22
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	f04f 0a00 	mov.w	sl, #0
 800aff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f43f ae0b 	beq.w	800ac12 <_strtod_l+0x72>
 800affc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800affe:	9805      	ldr	r0, [sp, #20]
 800b000:	f7ff f946 	bl	800a290 <_Bfree>
 800b004:	9805      	ldr	r0, [sp, #20]
 800b006:	4649      	mov	r1, r9
 800b008:	f7ff f942 	bl	800a290 <_Bfree>
 800b00c:	9805      	ldr	r0, [sp, #20]
 800b00e:	4641      	mov	r1, r8
 800b010:	f7ff f93e 	bl	800a290 <_Bfree>
 800b014:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b016:	9805      	ldr	r0, [sp, #20]
 800b018:	f7ff f93a 	bl	800a290 <_Bfree>
 800b01c:	9805      	ldr	r0, [sp, #20]
 800b01e:	4621      	mov	r1, r4
 800b020:	f7ff f936 	bl	800a290 <_Bfree>
 800b024:	e5f5      	b.n	800ac12 <_strtod_l+0x72>
 800b026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b028:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b02c:	4293      	cmp	r3, r2
 800b02e:	dbbc      	blt.n	800afaa <_strtod_l+0x40a>
 800b030:	4c3f      	ldr	r4, [pc, #252]	@ (800b130 <_strtod_l+0x590>)
 800b032:	f1c5 050f 	rsb	r5, r5, #15
 800b036:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b03a:	4652      	mov	r2, sl
 800b03c:	465b      	mov	r3, fp
 800b03e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b042:	f7f5 fad9 	bl	80005f8 <__aeabi_dmul>
 800b046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b048:	1b5d      	subs	r5, r3, r5
 800b04a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b04e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b052:	e78f      	b.n	800af74 <_strtod_l+0x3d4>
 800b054:	3316      	adds	r3, #22
 800b056:	dba8      	blt.n	800afaa <_strtod_l+0x40a>
 800b058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b05a:	eba3 0808 	sub.w	r8, r3, r8
 800b05e:	4b34      	ldr	r3, [pc, #208]	@ (800b130 <_strtod_l+0x590>)
 800b060:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b064:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b068:	4650      	mov	r0, sl
 800b06a:	4659      	mov	r1, fp
 800b06c:	f7f5 fbee 	bl	800084c <__aeabi_ddiv>
 800b070:	e782      	b.n	800af78 <_strtod_l+0x3d8>
 800b072:	2300      	movs	r3, #0
 800b074:	4f2f      	ldr	r7, [pc, #188]	@ (800b134 <_strtod_l+0x594>)
 800b076:	1124      	asrs	r4, r4, #4
 800b078:	4650      	mov	r0, sl
 800b07a:	4659      	mov	r1, fp
 800b07c:	461e      	mov	r6, r3
 800b07e:	2c01      	cmp	r4, #1
 800b080:	dc21      	bgt.n	800b0c6 <_strtod_l+0x526>
 800b082:	b10b      	cbz	r3, 800b088 <_strtod_l+0x4e8>
 800b084:	4682      	mov	sl, r0
 800b086:	468b      	mov	fp, r1
 800b088:	492a      	ldr	r1, [pc, #168]	@ (800b134 <_strtod_l+0x594>)
 800b08a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b08e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b092:	4652      	mov	r2, sl
 800b094:	465b      	mov	r3, fp
 800b096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b09a:	f7f5 faad 	bl	80005f8 <__aeabi_dmul>
 800b09e:	4b26      	ldr	r3, [pc, #152]	@ (800b138 <_strtod_l+0x598>)
 800b0a0:	460a      	mov	r2, r1
 800b0a2:	400b      	ands	r3, r1
 800b0a4:	4925      	ldr	r1, [pc, #148]	@ (800b13c <_strtod_l+0x59c>)
 800b0a6:	428b      	cmp	r3, r1
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	d898      	bhi.n	800afde <_strtod_l+0x43e>
 800b0ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b0b0:	428b      	cmp	r3, r1
 800b0b2:	bf86      	itte	hi
 800b0b4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b140 <_strtod_l+0x5a0>
 800b0b8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b0bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9308      	str	r3, [sp, #32]
 800b0c4:	e076      	b.n	800b1b4 <_strtod_l+0x614>
 800b0c6:	07e2      	lsls	r2, r4, #31
 800b0c8:	d504      	bpl.n	800b0d4 <_strtod_l+0x534>
 800b0ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ce:	f7f5 fa93 	bl	80005f8 <__aeabi_dmul>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	3601      	adds	r6, #1
 800b0d6:	1064      	asrs	r4, r4, #1
 800b0d8:	3708      	adds	r7, #8
 800b0da:	e7d0      	b.n	800b07e <_strtod_l+0x4de>
 800b0dc:	d0f0      	beq.n	800b0c0 <_strtod_l+0x520>
 800b0de:	4264      	negs	r4, r4
 800b0e0:	f014 020f 	ands.w	r2, r4, #15
 800b0e4:	d00a      	beq.n	800b0fc <_strtod_l+0x55c>
 800b0e6:	4b12      	ldr	r3, [pc, #72]	@ (800b130 <_strtod_l+0x590>)
 800b0e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0ec:	4650      	mov	r0, sl
 800b0ee:	4659      	mov	r1, fp
 800b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f4:	f7f5 fbaa 	bl	800084c <__aeabi_ddiv>
 800b0f8:	4682      	mov	sl, r0
 800b0fa:	468b      	mov	fp, r1
 800b0fc:	1124      	asrs	r4, r4, #4
 800b0fe:	d0df      	beq.n	800b0c0 <_strtod_l+0x520>
 800b100:	2c1f      	cmp	r4, #31
 800b102:	dd1f      	ble.n	800b144 <_strtod_l+0x5a4>
 800b104:	2400      	movs	r4, #0
 800b106:	46a0      	mov	r8, r4
 800b108:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b10a:	46a1      	mov	r9, r4
 800b10c:	9a05      	ldr	r2, [sp, #20]
 800b10e:	2322      	movs	r3, #34	@ 0x22
 800b110:	f04f 0a00 	mov.w	sl, #0
 800b114:	f04f 0b00 	mov.w	fp, #0
 800b118:	6013      	str	r3, [r2, #0]
 800b11a:	e76b      	b.n	800aff4 <_strtod_l+0x454>
 800b11c:	0800d3e9 	.word	0x0800d3e9
 800b120:	0800d708 	.word	0x0800d708
 800b124:	0800d3e1 	.word	0x0800d3e1
 800b128:	0800d4c5 	.word	0x0800d4c5
 800b12c:	0800d4c1 	.word	0x0800d4c1
 800b130:	0800d640 	.word	0x0800d640
 800b134:	0800d618 	.word	0x0800d618
 800b138:	7ff00000 	.word	0x7ff00000
 800b13c:	7ca00000 	.word	0x7ca00000
 800b140:	7fefffff 	.word	0x7fefffff
 800b144:	f014 0310 	ands.w	r3, r4, #16
 800b148:	bf18      	it	ne
 800b14a:	236a      	movne	r3, #106	@ 0x6a
 800b14c:	4ea9      	ldr	r6, [pc, #676]	@ (800b3f4 <_strtod_l+0x854>)
 800b14e:	9308      	str	r3, [sp, #32]
 800b150:	4650      	mov	r0, sl
 800b152:	4659      	mov	r1, fp
 800b154:	2300      	movs	r3, #0
 800b156:	07e7      	lsls	r7, r4, #31
 800b158:	d504      	bpl.n	800b164 <_strtod_l+0x5c4>
 800b15a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b15e:	f7f5 fa4b 	bl	80005f8 <__aeabi_dmul>
 800b162:	2301      	movs	r3, #1
 800b164:	1064      	asrs	r4, r4, #1
 800b166:	f106 0608 	add.w	r6, r6, #8
 800b16a:	d1f4      	bne.n	800b156 <_strtod_l+0x5b6>
 800b16c:	b10b      	cbz	r3, 800b172 <_strtod_l+0x5d2>
 800b16e:	4682      	mov	sl, r0
 800b170:	468b      	mov	fp, r1
 800b172:	9b08      	ldr	r3, [sp, #32]
 800b174:	b1b3      	cbz	r3, 800b1a4 <_strtod_l+0x604>
 800b176:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b17a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b17e:	2b00      	cmp	r3, #0
 800b180:	4659      	mov	r1, fp
 800b182:	dd0f      	ble.n	800b1a4 <_strtod_l+0x604>
 800b184:	2b1f      	cmp	r3, #31
 800b186:	dd56      	ble.n	800b236 <_strtod_l+0x696>
 800b188:	2b34      	cmp	r3, #52	@ 0x34
 800b18a:	bfde      	ittt	le
 800b18c:	f04f 33ff 	movle.w	r3, #4294967295
 800b190:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b194:	4093      	lslle	r3, r2
 800b196:	f04f 0a00 	mov.w	sl, #0
 800b19a:	bfcc      	ite	gt
 800b19c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b1a0:	ea03 0b01 	andle.w	fp, r3, r1
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	4659      	mov	r1, fp
 800b1ac:	f7f5 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d1a7      	bne.n	800b104 <_strtod_l+0x564>
 800b1b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b1ba:	9805      	ldr	r0, [sp, #20]
 800b1bc:	462b      	mov	r3, r5
 800b1be:	464a      	mov	r2, r9
 800b1c0:	f7ff f8ce 	bl	800a360 <__s2b>
 800b1c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	f43f af09 	beq.w	800afde <_strtod_l+0x43e>
 800b1cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1d0:	2a00      	cmp	r2, #0
 800b1d2:	eba3 0308 	sub.w	r3, r3, r8
 800b1d6:	bfa8      	it	ge
 800b1d8:	2300      	movge	r3, #0
 800b1da:	9312      	str	r3, [sp, #72]	@ 0x48
 800b1dc:	2400      	movs	r4, #0
 800b1de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b1e2:	9316      	str	r3, [sp, #88]	@ 0x58
 800b1e4:	46a0      	mov	r8, r4
 800b1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1e8:	9805      	ldr	r0, [sp, #20]
 800b1ea:	6859      	ldr	r1, [r3, #4]
 800b1ec:	f7ff f810 	bl	800a210 <_Balloc>
 800b1f0:	4681      	mov	r9, r0
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	f43f aef7 	beq.w	800afe6 <_strtod_l+0x446>
 800b1f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	3202      	adds	r2, #2
 800b1fe:	f103 010c 	add.w	r1, r3, #12
 800b202:	0092      	lsls	r2, r2, #2
 800b204:	300c      	adds	r0, #12
 800b206:	f7fe f876 	bl	80092f6 <memcpy>
 800b20a:	ec4b ab10 	vmov	d0, sl, fp
 800b20e:	9805      	ldr	r0, [sp, #20]
 800b210:	aa1c      	add	r2, sp, #112	@ 0x70
 800b212:	a91b      	add	r1, sp, #108	@ 0x6c
 800b214:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b218:	f7ff fbd6 	bl	800a9c8 <__d2b>
 800b21c:	901a      	str	r0, [sp, #104]	@ 0x68
 800b21e:	2800      	cmp	r0, #0
 800b220:	f43f aee1 	beq.w	800afe6 <_strtod_l+0x446>
 800b224:	9805      	ldr	r0, [sp, #20]
 800b226:	2101      	movs	r1, #1
 800b228:	f7ff f930 	bl	800a48c <__i2b>
 800b22c:	4680      	mov	r8, r0
 800b22e:	b948      	cbnz	r0, 800b244 <_strtod_l+0x6a4>
 800b230:	f04f 0800 	mov.w	r8, #0
 800b234:	e6d7      	b.n	800afe6 <_strtod_l+0x446>
 800b236:	f04f 32ff 	mov.w	r2, #4294967295
 800b23a:	fa02 f303 	lsl.w	r3, r2, r3
 800b23e:	ea03 0a0a 	and.w	sl, r3, sl
 800b242:	e7af      	b.n	800b1a4 <_strtod_l+0x604>
 800b244:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b246:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b248:	2d00      	cmp	r5, #0
 800b24a:	bfab      	itete	ge
 800b24c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b24e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b250:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b252:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b254:	bfac      	ite	ge
 800b256:	18ef      	addge	r7, r5, r3
 800b258:	1b5e      	sublt	r6, r3, r5
 800b25a:	9b08      	ldr	r3, [sp, #32]
 800b25c:	1aed      	subs	r5, r5, r3
 800b25e:	4415      	add	r5, r2
 800b260:	4b65      	ldr	r3, [pc, #404]	@ (800b3f8 <_strtod_l+0x858>)
 800b262:	3d01      	subs	r5, #1
 800b264:	429d      	cmp	r5, r3
 800b266:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b26a:	da50      	bge.n	800b30e <_strtod_l+0x76e>
 800b26c:	1b5b      	subs	r3, r3, r5
 800b26e:	2b1f      	cmp	r3, #31
 800b270:	eba2 0203 	sub.w	r2, r2, r3
 800b274:	f04f 0101 	mov.w	r1, #1
 800b278:	dc3d      	bgt.n	800b2f6 <_strtod_l+0x756>
 800b27a:	fa01 f303 	lsl.w	r3, r1, r3
 800b27e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b280:	2300      	movs	r3, #0
 800b282:	9310      	str	r3, [sp, #64]	@ 0x40
 800b284:	18bd      	adds	r5, r7, r2
 800b286:	9b08      	ldr	r3, [sp, #32]
 800b288:	42af      	cmp	r7, r5
 800b28a:	4416      	add	r6, r2
 800b28c:	441e      	add	r6, r3
 800b28e:	463b      	mov	r3, r7
 800b290:	bfa8      	it	ge
 800b292:	462b      	movge	r3, r5
 800b294:	42b3      	cmp	r3, r6
 800b296:	bfa8      	it	ge
 800b298:	4633      	movge	r3, r6
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	bfc2      	ittt	gt
 800b29e:	1aed      	subgt	r5, r5, r3
 800b2a0:	1af6      	subgt	r6, r6, r3
 800b2a2:	1aff      	subgt	r7, r7, r3
 800b2a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	dd16      	ble.n	800b2d8 <_strtod_l+0x738>
 800b2aa:	4641      	mov	r1, r8
 800b2ac:	9805      	ldr	r0, [sp, #20]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f7ff f9a4 	bl	800a5fc <__pow5mult>
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d0ba      	beq.n	800b230 <_strtod_l+0x690>
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b2be:	9805      	ldr	r0, [sp, #20]
 800b2c0:	f7ff f8fa 	bl	800a4b8 <__multiply>
 800b2c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	f43f ae8d 	beq.w	800afe6 <_strtod_l+0x446>
 800b2cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2ce:	9805      	ldr	r0, [sp, #20]
 800b2d0:	f7fe ffde 	bl	800a290 <_Bfree>
 800b2d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2d8:	2d00      	cmp	r5, #0
 800b2da:	dc1d      	bgt.n	800b318 <_strtod_l+0x778>
 800b2dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	dd23      	ble.n	800b32a <_strtod_l+0x78a>
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b2e6:	9805      	ldr	r0, [sp, #20]
 800b2e8:	f7ff f988 	bl	800a5fc <__pow5mult>
 800b2ec:	4681      	mov	r9, r0
 800b2ee:	b9e0      	cbnz	r0, 800b32a <_strtod_l+0x78a>
 800b2f0:	f04f 0900 	mov.w	r9, #0
 800b2f4:	e677      	b.n	800afe6 <_strtod_l+0x446>
 800b2f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b2fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b2fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b302:	35e2      	adds	r5, #226	@ 0xe2
 800b304:	fa01 f305 	lsl.w	r3, r1, r5
 800b308:	9310      	str	r3, [sp, #64]	@ 0x40
 800b30a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b30c:	e7ba      	b.n	800b284 <_strtod_l+0x6e4>
 800b30e:	2300      	movs	r3, #0
 800b310:	9310      	str	r3, [sp, #64]	@ 0x40
 800b312:	2301      	movs	r3, #1
 800b314:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b316:	e7b5      	b.n	800b284 <_strtod_l+0x6e4>
 800b318:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b31a:	9805      	ldr	r0, [sp, #20]
 800b31c:	462a      	mov	r2, r5
 800b31e:	f7ff f9c7 	bl	800a6b0 <__lshift>
 800b322:	901a      	str	r0, [sp, #104]	@ 0x68
 800b324:	2800      	cmp	r0, #0
 800b326:	d1d9      	bne.n	800b2dc <_strtod_l+0x73c>
 800b328:	e65d      	b.n	800afe6 <_strtod_l+0x446>
 800b32a:	2e00      	cmp	r6, #0
 800b32c:	dd07      	ble.n	800b33e <_strtod_l+0x79e>
 800b32e:	4649      	mov	r1, r9
 800b330:	9805      	ldr	r0, [sp, #20]
 800b332:	4632      	mov	r2, r6
 800b334:	f7ff f9bc 	bl	800a6b0 <__lshift>
 800b338:	4681      	mov	r9, r0
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d0d8      	beq.n	800b2f0 <_strtod_l+0x750>
 800b33e:	2f00      	cmp	r7, #0
 800b340:	dd08      	ble.n	800b354 <_strtod_l+0x7b4>
 800b342:	4641      	mov	r1, r8
 800b344:	9805      	ldr	r0, [sp, #20]
 800b346:	463a      	mov	r2, r7
 800b348:	f7ff f9b2 	bl	800a6b0 <__lshift>
 800b34c:	4680      	mov	r8, r0
 800b34e:	2800      	cmp	r0, #0
 800b350:	f43f ae49 	beq.w	800afe6 <_strtod_l+0x446>
 800b354:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b356:	9805      	ldr	r0, [sp, #20]
 800b358:	464a      	mov	r2, r9
 800b35a:	f7ff fa31 	bl	800a7c0 <__mdiff>
 800b35e:	4604      	mov	r4, r0
 800b360:	2800      	cmp	r0, #0
 800b362:	f43f ae40 	beq.w	800afe6 <_strtod_l+0x446>
 800b366:	68c3      	ldr	r3, [r0, #12]
 800b368:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b36a:	2300      	movs	r3, #0
 800b36c:	60c3      	str	r3, [r0, #12]
 800b36e:	4641      	mov	r1, r8
 800b370:	f7ff fa0a 	bl	800a788 <__mcmp>
 800b374:	2800      	cmp	r0, #0
 800b376:	da45      	bge.n	800b404 <_strtod_l+0x864>
 800b378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b37a:	ea53 030a 	orrs.w	r3, r3, sl
 800b37e:	d16b      	bne.n	800b458 <_strtod_l+0x8b8>
 800b380:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b384:	2b00      	cmp	r3, #0
 800b386:	d167      	bne.n	800b458 <_strtod_l+0x8b8>
 800b388:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b38c:	0d1b      	lsrs	r3, r3, #20
 800b38e:	051b      	lsls	r3, r3, #20
 800b390:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b394:	d960      	bls.n	800b458 <_strtod_l+0x8b8>
 800b396:	6963      	ldr	r3, [r4, #20]
 800b398:	b913      	cbnz	r3, 800b3a0 <_strtod_l+0x800>
 800b39a:	6923      	ldr	r3, [r4, #16]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	dd5b      	ble.n	800b458 <_strtod_l+0x8b8>
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	9805      	ldr	r0, [sp, #20]
 800b3a6:	f7ff f983 	bl	800a6b0 <__lshift>
 800b3aa:	4641      	mov	r1, r8
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	f7ff f9eb 	bl	800a788 <__mcmp>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	dd50      	ble.n	800b458 <_strtod_l+0x8b8>
 800b3b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3ba:	9a08      	ldr	r2, [sp, #32]
 800b3bc:	0d1b      	lsrs	r3, r3, #20
 800b3be:	051b      	lsls	r3, r3, #20
 800b3c0:	2a00      	cmp	r2, #0
 800b3c2:	d06a      	beq.n	800b49a <_strtod_l+0x8fa>
 800b3c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3c8:	d867      	bhi.n	800b49a <_strtod_l+0x8fa>
 800b3ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b3ce:	f67f ae9d 	bls.w	800b10c <_strtod_l+0x56c>
 800b3d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b3fc <_strtod_l+0x85c>)
 800b3d4:	4650      	mov	r0, sl
 800b3d6:	4659      	mov	r1, fp
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f7f5 f90d 	bl	80005f8 <__aeabi_dmul>
 800b3de:	4b08      	ldr	r3, [pc, #32]	@ (800b400 <_strtod_l+0x860>)
 800b3e0:	400b      	ands	r3, r1
 800b3e2:	4682      	mov	sl, r0
 800b3e4:	468b      	mov	fp, r1
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f47f ae08 	bne.w	800affc <_strtod_l+0x45c>
 800b3ec:	9a05      	ldr	r2, [sp, #20]
 800b3ee:	2322      	movs	r3, #34	@ 0x22
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	e603      	b.n	800affc <_strtod_l+0x45c>
 800b3f4:	0800d730 	.word	0x0800d730
 800b3f8:	fffffc02 	.word	0xfffffc02
 800b3fc:	39500000 	.word	0x39500000
 800b400:	7ff00000 	.word	0x7ff00000
 800b404:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b408:	d165      	bne.n	800b4d6 <_strtod_l+0x936>
 800b40a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b40c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b410:	b35a      	cbz	r2, 800b46a <_strtod_l+0x8ca>
 800b412:	4a9f      	ldr	r2, [pc, #636]	@ (800b690 <_strtod_l+0xaf0>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d12b      	bne.n	800b470 <_strtod_l+0x8d0>
 800b418:	9b08      	ldr	r3, [sp, #32]
 800b41a:	4651      	mov	r1, sl
 800b41c:	b303      	cbz	r3, 800b460 <_strtod_l+0x8c0>
 800b41e:	4b9d      	ldr	r3, [pc, #628]	@ (800b694 <_strtod_l+0xaf4>)
 800b420:	465a      	mov	r2, fp
 800b422:	4013      	ands	r3, r2
 800b424:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b428:	f04f 32ff 	mov.w	r2, #4294967295
 800b42c:	d81b      	bhi.n	800b466 <_strtod_l+0x8c6>
 800b42e:	0d1b      	lsrs	r3, r3, #20
 800b430:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b434:	fa02 f303 	lsl.w	r3, r2, r3
 800b438:	4299      	cmp	r1, r3
 800b43a:	d119      	bne.n	800b470 <_strtod_l+0x8d0>
 800b43c:	4b96      	ldr	r3, [pc, #600]	@ (800b698 <_strtod_l+0xaf8>)
 800b43e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b440:	429a      	cmp	r2, r3
 800b442:	d102      	bne.n	800b44a <_strtod_l+0x8aa>
 800b444:	3101      	adds	r1, #1
 800b446:	f43f adce 	beq.w	800afe6 <_strtod_l+0x446>
 800b44a:	4b92      	ldr	r3, [pc, #584]	@ (800b694 <_strtod_l+0xaf4>)
 800b44c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b44e:	401a      	ands	r2, r3
 800b450:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b454:	f04f 0a00 	mov.w	sl, #0
 800b458:	9b08      	ldr	r3, [sp, #32]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1b9      	bne.n	800b3d2 <_strtod_l+0x832>
 800b45e:	e5cd      	b.n	800affc <_strtod_l+0x45c>
 800b460:	f04f 33ff 	mov.w	r3, #4294967295
 800b464:	e7e8      	b.n	800b438 <_strtod_l+0x898>
 800b466:	4613      	mov	r3, r2
 800b468:	e7e6      	b.n	800b438 <_strtod_l+0x898>
 800b46a:	ea53 030a 	orrs.w	r3, r3, sl
 800b46e:	d0a2      	beq.n	800b3b6 <_strtod_l+0x816>
 800b470:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b472:	b1db      	cbz	r3, 800b4ac <_strtod_l+0x90c>
 800b474:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b476:	4213      	tst	r3, r2
 800b478:	d0ee      	beq.n	800b458 <_strtod_l+0x8b8>
 800b47a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b47c:	9a08      	ldr	r2, [sp, #32]
 800b47e:	4650      	mov	r0, sl
 800b480:	4659      	mov	r1, fp
 800b482:	b1bb      	cbz	r3, 800b4b4 <_strtod_l+0x914>
 800b484:	f7ff fb6e 	bl	800ab64 <sulp>
 800b488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b48c:	ec53 2b10 	vmov	r2, r3, d0
 800b490:	f7f4 fefc 	bl	800028c <__adddf3>
 800b494:	4682      	mov	sl, r0
 800b496:	468b      	mov	fp, r1
 800b498:	e7de      	b.n	800b458 <_strtod_l+0x8b8>
 800b49a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b49e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b4a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b4a6:	f04f 3aff 	mov.w	sl, #4294967295
 800b4aa:	e7d5      	b.n	800b458 <_strtod_l+0x8b8>
 800b4ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4ae:	ea13 0f0a 	tst.w	r3, sl
 800b4b2:	e7e1      	b.n	800b478 <_strtod_l+0x8d8>
 800b4b4:	f7ff fb56 	bl	800ab64 <sulp>
 800b4b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4bc:	ec53 2b10 	vmov	r2, r3, d0
 800b4c0:	f7f4 fee2 	bl	8000288 <__aeabi_dsub>
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	4682      	mov	sl, r0
 800b4ca:	468b      	mov	fp, r1
 800b4cc:	f7f5 fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d0c1      	beq.n	800b458 <_strtod_l+0x8b8>
 800b4d4:	e61a      	b.n	800b10c <_strtod_l+0x56c>
 800b4d6:	4641      	mov	r1, r8
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f7ff facd 	bl	800aa78 <__ratio>
 800b4de:	ec57 6b10 	vmov	r6, r7, d0
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	4639      	mov	r1, r7
 800b4ec:	f7f5 fb00 	bl	8000af0 <__aeabi_dcmple>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d06f      	beq.n	800b5d4 <_strtod_l+0xa34>
 800b4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d17a      	bne.n	800b5f0 <_strtod_l+0xa50>
 800b4fa:	f1ba 0f00 	cmp.w	sl, #0
 800b4fe:	d158      	bne.n	800b5b2 <_strtod_l+0xa12>
 800b500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b506:	2b00      	cmp	r3, #0
 800b508:	d15a      	bne.n	800b5c0 <_strtod_l+0xa20>
 800b50a:	4b64      	ldr	r3, [pc, #400]	@ (800b69c <_strtod_l+0xafc>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	4630      	mov	r0, r6
 800b510:	4639      	mov	r1, r7
 800b512:	f7f5 fae3 	bl	8000adc <__aeabi_dcmplt>
 800b516:	2800      	cmp	r0, #0
 800b518:	d159      	bne.n	800b5ce <_strtod_l+0xa2e>
 800b51a:	4630      	mov	r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	4b60      	ldr	r3, [pc, #384]	@ (800b6a0 <_strtod_l+0xb00>)
 800b520:	2200      	movs	r2, #0
 800b522:	f7f5 f869 	bl	80005f8 <__aeabi_dmul>
 800b526:	4606      	mov	r6, r0
 800b528:	460f      	mov	r7, r1
 800b52a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b52e:	9606      	str	r6, [sp, #24]
 800b530:	9307      	str	r3, [sp, #28]
 800b532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b536:	4d57      	ldr	r5, [pc, #348]	@ (800b694 <_strtod_l+0xaf4>)
 800b538:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b53e:	401d      	ands	r5, r3
 800b540:	4b58      	ldr	r3, [pc, #352]	@ (800b6a4 <_strtod_l+0xb04>)
 800b542:	429d      	cmp	r5, r3
 800b544:	f040 80b2 	bne.w	800b6ac <_strtod_l+0xb0c>
 800b548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b54a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b54e:	ec4b ab10 	vmov	d0, sl, fp
 800b552:	f7ff f9c9 	bl	800a8e8 <__ulp>
 800b556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b55a:	ec51 0b10 	vmov	r0, r1, d0
 800b55e:	f7f5 f84b 	bl	80005f8 <__aeabi_dmul>
 800b562:	4652      	mov	r2, sl
 800b564:	465b      	mov	r3, fp
 800b566:	f7f4 fe91 	bl	800028c <__adddf3>
 800b56a:	460b      	mov	r3, r1
 800b56c:	4949      	ldr	r1, [pc, #292]	@ (800b694 <_strtod_l+0xaf4>)
 800b56e:	4a4e      	ldr	r2, [pc, #312]	@ (800b6a8 <_strtod_l+0xb08>)
 800b570:	4019      	ands	r1, r3
 800b572:	4291      	cmp	r1, r2
 800b574:	4682      	mov	sl, r0
 800b576:	d942      	bls.n	800b5fe <_strtod_l+0xa5e>
 800b578:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b57a:	4b47      	ldr	r3, [pc, #284]	@ (800b698 <_strtod_l+0xaf8>)
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d103      	bne.n	800b588 <_strtod_l+0x9e8>
 800b580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b582:	3301      	adds	r3, #1
 800b584:	f43f ad2f 	beq.w	800afe6 <_strtod_l+0x446>
 800b588:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b698 <_strtod_l+0xaf8>
 800b58c:	f04f 3aff 	mov.w	sl, #4294967295
 800b590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b592:	9805      	ldr	r0, [sp, #20]
 800b594:	f7fe fe7c 	bl	800a290 <_Bfree>
 800b598:	9805      	ldr	r0, [sp, #20]
 800b59a:	4649      	mov	r1, r9
 800b59c:	f7fe fe78 	bl	800a290 <_Bfree>
 800b5a0:	9805      	ldr	r0, [sp, #20]
 800b5a2:	4641      	mov	r1, r8
 800b5a4:	f7fe fe74 	bl	800a290 <_Bfree>
 800b5a8:	9805      	ldr	r0, [sp, #20]
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	f7fe fe70 	bl	800a290 <_Bfree>
 800b5b0:	e619      	b.n	800b1e6 <_strtod_l+0x646>
 800b5b2:	f1ba 0f01 	cmp.w	sl, #1
 800b5b6:	d103      	bne.n	800b5c0 <_strtod_l+0xa20>
 800b5b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f43f ada6 	beq.w	800b10c <_strtod_l+0x56c>
 800b5c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b670 <_strtod_l+0xad0>
 800b5c4:	4f35      	ldr	r7, [pc, #212]	@ (800b69c <_strtod_l+0xafc>)
 800b5c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5ca:	2600      	movs	r6, #0
 800b5cc:	e7b1      	b.n	800b532 <_strtod_l+0x992>
 800b5ce:	4f34      	ldr	r7, [pc, #208]	@ (800b6a0 <_strtod_l+0xb00>)
 800b5d0:	2600      	movs	r6, #0
 800b5d2:	e7aa      	b.n	800b52a <_strtod_l+0x98a>
 800b5d4:	4b32      	ldr	r3, [pc, #200]	@ (800b6a0 <_strtod_l+0xb00>)
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	4639      	mov	r1, r7
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f7f5 f80c 	bl	80005f8 <__aeabi_dmul>
 800b5e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460f      	mov	r7, r1
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d09f      	beq.n	800b52a <_strtod_l+0x98a>
 800b5ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b5ee:	e7a0      	b.n	800b532 <_strtod_l+0x992>
 800b5f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b678 <_strtod_l+0xad8>
 800b5f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5f8:	ec57 6b17 	vmov	r6, r7, d7
 800b5fc:	e799      	b.n	800b532 <_strtod_l+0x992>
 800b5fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b602:	9b08      	ldr	r3, [sp, #32]
 800b604:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1c1      	bne.n	800b590 <_strtod_l+0x9f0>
 800b60c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b610:	0d1b      	lsrs	r3, r3, #20
 800b612:	051b      	lsls	r3, r3, #20
 800b614:	429d      	cmp	r5, r3
 800b616:	d1bb      	bne.n	800b590 <_strtod_l+0x9f0>
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f5 fb4c 	bl	8000cb8 <__aeabi_d2lz>
 800b620:	f7f4 ffbc 	bl	800059c <__aeabi_l2d>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4630      	mov	r0, r6
 800b62a:	4639      	mov	r1, r7
 800b62c:	f7f4 fe2c 	bl	8000288 <__aeabi_dsub>
 800b630:	460b      	mov	r3, r1
 800b632:	4602      	mov	r2, r0
 800b634:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b638:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b63e:	ea46 060a 	orr.w	r6, r6, sl
 800b642:	431e      	orrs	r6, r3
 800b644:	d06f      	beq.n	800b726 <_strtod_l+0xb86>
 800b646:	a30e      	add	r3, pc, #56	@ (adr r3, 800b680 <_strtod_l+0xae0>)
 800b648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64c:	f7f5 fa46 	bl	8000adc <__aeabi_dcmplt>
 800b650:	2800      	cmp	r0, #0
 800b652:	f47f acd3 	bne.w	800affc <_strtod_l+0x45c>
 800b656:	a30c      	add	r3, pc, #48	@ (adr r3, 800b688 <_strtod_l+0xae8>)
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b660:	f7f5 fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 800b664:	2800      	cmp	r0, #0
 800b666:	d093      	beq.n	800b590 <_strtod_l+0x9f0>
 800b668:	e4c8      	b.n	800affc <_strtod_l+0x45c>
 800b66a:	bf00      	nop
 800b66c:	f3af 8000 	nop.w
 800b670:	00000000 	.word	0x00000000
 800b674:	bff00000 	.word	0xbff00000
 800b678:	00000000 	.word	0x00000000
 800b67c:	3ff00000 	.word	0x3ff00000
 800b680:	94a03595 	.word	0x94a03595
 800b684:	3fdfffff 	.word	0x3fdfffff
 800b688:	35afe535 	.word	0x35afe535
 800b68c:	3fe00000 	.word	0x3fe00000
 800b690:	000fffff 	.word	0x000fffff
 800b694:	7ff00000 	.word	0x7ff00000
 800b698:	7fefffff 	.word	0x7fefffff
 800b69c:	3ff00000 	.word	0x3ff00000
 800b6a0:	3fe00000 	.word	0x3fe00000
 800b6a4:	7fe00000 	.word	0x7fe00000
 800b6a8:	7c9fffff 	.word	0x7c9fffff
 800b6ac:	9b08      	ldr	r3, [sp, #32]
 800b6ae:	b323      	cbz	r3, 800b6fa <_strtod_l+0xb5a>
 800b6b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b6b4:	d821      	bhi.n	800b6fa <_strtod_l+0xb5a>
 800b6b6:	a328      	add	r3, pc, #160	@ (adr r3, 800b758 <_strtod_l+0xbb8>)
 800b6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6bc:	4630      	mov	r0, r6
 800b6be:	4639      	mov	r1, r7
 800b6c0:	f7f5 fa16 	bl	8000af0 <__aeabi_dcmple>
 800b6c4:	b1a0      	cbz	r0, 800b6f0 <_strtod_l+0xb50>
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7f5 fa6d 	bl	8000ba8 <__aeabi_d2uiz>
 800b6ce:	2801      	cmp	r0, #1
 800b6d0:	bf38      	it	cc
 800b6d2:	2001      	movcc	r0, #1
 800b6d4:	f7f4 ff16 	bl	8000504 <__aeabi_ui2d>
 800b6d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460f      	mov	r7, r1
 800b6de:	b9fb      	cbnz	r3, 800b720 <_strtod_l+0xb80>
 800b6e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6e4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b6e6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b6ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b6f6:	1b5b      	subs	r3, r3, r5
 800b6f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b6fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b6fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b702:	f7ff f8f1 	bl	800a8e8 <__ulp>
 800b706:	4650      	mov	r0, sl
 800b708:	ec53 2b10 	vmov	r2, r3, d0
 800b70c:	4659      	mov	r1, fp
 800b70e:	f7f4 ff73 	bl	80005f8 <__aeabi_dmul>
 800b712:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b716:	f7f4 fdb9 	bl	800028c <__adddf3>
 800b71a:	4682      	mov	sl, r0
 800b71c:	468b      	mov	fp, r1
 800b71e:	e770      	b.n	800b602 <_strtod_l+0xa62>
 800b720:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b724:	e7e0      	b.n	800b6e8 <_strtod_l+0xb48>
 800b726:	a30e      	add	r3, pc, #56	@ (adr r3, 800b760 <_strtod_l+0xbc0>)
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	f7f5 f9d6 	bl	8000adc <__aeabi_dcmplt>
 800b730:	e798      	b.n	800b664 <_strtod_l+0xac4>
 800b732:	2300      	movs	r3, #0
 800b734:	930e      	str	r3, [sp, #56]	@ 0x38
 800b736:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b73a:	6013      	str	r3, [r2, #0]
 800b73c:	f7ff ba6d 	b.w	800ac1a <_strtod_l+0x7a>
 800b740:	2a65      	cmp	r2, #101	@ 0x65
 800b742:	f43f ab68 	beq.w	800ae16 <_strtod_l+0x276>
 800b746:	2a45      	cmp	r2, #69	@ 0x45
 800b748:	f43f ab65 	beq.w	800ae16 <_strtod_l+0x276>
 800b74c:	2301      	movs	r3, #1
 800b74e:	f7ff bba0 	b.w	800ae92 <_strtod_l+0x2f2>
 800b752:	bf00      	nop
 800b754:	f3af 8000 	nop.w
 800b758:	ffc00000 	.word	0xffc00000
 800b75c:	41dfffff 	.word	0x41dfffff
 800b760:	94a03595 	.word	0x94a03595
 800b764:	3fcfffff 	.word	0x3fcfffff

0800b768 <_strtod_r>:
 800b768:	4b01      	ldr	r3, [pc, #4]	@ (800b770 <_strtod_r+0x8>)
 800b76a:	f7ff ba19 	b.w	800aba0 <_strtod_l>
 800b76e:	bf00      	nop
 800b770:	200000b0 	.word	0x200000b0

0800b774 <_strtol_l.isra.0>:
 800b774:	2b24      	cmp	r3, #36	@ 0x24
 800b776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b77a:	4686      	mov	lr, r0
 800b77c:	4690      	mov	r8, r2
 800b77e:	d801      	bhi.n	800b784 <_strtol_l.isra.0+0x10>
 800b780:	2b01      	cmp	r3, #1
 800b782:	d106      	bne.n	800b792 <_strtol_l.isra.0+0x1e>
 800b784:	f7fd fd8a 	bl	800929c <__errno>
 800b788:	2316      	movs	r3, #22
 800b78a:	6003      	str	r3, [r0, #0]
 800b78c:	2000      	movs	r0, #0
 800b78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b792:	4834      	ldr	r0, [pc, #208]	@ (800b864 <_strtol_l.isra.0+0xf0>)
 800b794:	460d      	mov	r5, r1
 800b796:	462a      	mov	r2, r5
 800b798:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b79c:	5d06      	ldrb	r6, [r0, r4]
 800b79e:	f016 0608 	ands.w	r6, r6, #8
 800b7a2:	d1f8      	bne.n	800b796 <_strtol_l.isra.0+0x22>
 800b7a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800b7a6:	d110      	bne.n	800b7ca <_strtol_l.isra.0+0x56>
 800b7a8:	782c      	ldrb	r4, [r5, #0]
 800b7aa:	2601      	movs	r6, #1
 800b7ac:	1c95      	adds	r5, r2, #2
 800b7ae:	f033 0210 	bics.w	r2, r3, #16
 800b7b2:	d115      	bne.n	800b7e0 <_strtol_l.isra.0+0x6c>
 800b7b4:	2c30      	cmp	r4, #48	@ 0x30
 800b7b6:	d10d      	bne.n	800b7d4 <_strtol_l.isra.0+0x60>
 800b7b8:	782a      	ldrb	r2, [r5, #0]
 800b7ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b7be:	2a58      	cmp	r2, #88	@ 0x58
 800b7c0:	d108      	bne.n	800b7d4 <_strtol_l.isra.0+0x60>
 800b7c2:	786c      	ldrb	r4, [r5, #1]
 800b7c4:	3502      	adds	r5, #2
 800b7c6:	2310      	movs	r3, #16
 800b7c8:	e00a      	b.n	800b7e0 <_strtol_l.isra.0+0x6c>
 800b7ca:	2c2b      	cmp	r4, #43	@ 0x2b
 800b7cc:	bf04      	itt	eq
 800b7ce:	782c      	ldrbeq	r4, [r5, #0]
 800b7d0:	1c95      	addeq	r5, r2, #2
 800b7d2:	e7ec      	b.n	800b7ae <_strtol_l.isra.0+0x3a>
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1f6      	bne.n	800b7c6 <_strtol_l.isra.0+0x52>
 800b7d8:	2c30      	cmp	r4, #48	@ 0x30
 800b7da:	bf14      	ite	ne
 800b7dc:	230a      	movne	r3, #10
 800b7de:	2308      	moveq	r3, #8
 800b7e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b7e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	fbbc f9f3 	udiv	r9, ip, r3
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b7f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b7f8:	2f09      	cmp	r7, #9
 800b7fa:	d80f      	bhi.n	800b81c <_strtol_l.isra.0+0xa8>
 800b7fc:	463c      	mov	r4, r7
 800b7fe:	42a3      	cmp	r3, r4
 800b800:	dd1b      	ble.n	800b83a <_strtol_l.isra.0+0xc6>
 800b802:	1c57      	adds	r7, r2, #1
 800b804:	d007      	beq.n	800b816 <_strtol_l.isra.0+0xa2>
 800b806:	4581      	cmp	r9, r0
 800b808:	d314      	bcc.n	800b834 <_strtol_l.isra.0+0xc0>
 800b80a:	d101      	bne.n	800b810 <_strtol_l.isra.0+0x9c>
 800b80c:	45a2      	cmp	sl, r4
 800b80e:	db11      	blt.n	800b834 <_strtol_l.isra.0+0xc0>
 800b810:	fb00 4003 	mla	r0, r0, r3, r4
 800b814:	2201      	movs	r2, #1
 800b816:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b81a:	e7eb      	b.n	800b7f4 <_strtol_l.isra.0+0x80>
 800b81c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b820:	2f19      	cmp	r7, #25
 800b822:	d801      	bhi.n	800b828 <_strtol_l.isra.0+0xb4>
 800b824:	3c37      	subs	r4, #55	@ 0x37
 800b826:	e7ea      	b.n	800b7fe <_strtol_l.isra.0+0x8a>
 800b828:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b82c:	2f19      	cmp	r7, #25
 800b82e:	d804      	bhi.n	800b83a <_strtol_l.isra.0+0xc6>
 800b830:	3c57      	subs	r4, #87	@ 0x57
 800b832:	e7e4      	b.n	800b7fe <_strtol_l.isra.0+0x8a>
 800b834:	f04f 32ff 	mov.w	r2, #4294967295
 800b838:	e7ed      	b.n	800b816 <_strtol_l.isra.0+0xa2>
 800b83a:	1c53      	adds	r3, r2, #1
 800b83c:	d108      	bne.n	800b850 <_strtol_l.isra.0+0xdc>
 800b83e:	2322      	movs	r3, #34	@ 0x22
 800b840:	f8ce 3000 	str.w	r3, [lr]
 800b844:	4660      	mov	r0, ip
 800b846:	f1b8 0f00 	cmp.w	r8, #0
 800b84a:	d0a0      	beq.n	800b78e <_strtol_l.isra.0+0x1a>
 800b84c:	1e69      	subs	r1, r5, #1
 800b84e:	e006      	b.n	800b85e <_strtol_l.isra.0+0xea>
 800b850:	b106      	cbz	r6, 800b854 <_strtol_l.isra.0+0xe0>
 800b852:	4240      	negs	r0, r0
 800b854:	f1b8 0f00 	cmp.w	r8, #0
 800b858:	d099      	beq.n	800b78e <_strtol_l.isra.0+0x1a>
 800b85a:	2a00      	cmp	r2, #0
 800b85c:	d1f6      	bne.n	800b84c <_strtol_l.isra.0+0xd8>
 800b85e:	f8c8 1000 	str.w	r1, [r8]
 800b862:	e794      	b.n	800b78e <_strtol_l.isra.0+0x1a>
 800b864:	0800d759 	.word	0x0800d759

0800b868 <_strtol_r>:
 800b868:	f7ff bf84 	b.w	800b774 <_strtol_l.isra.0>

0800b86c <__ssputs_r>:
 800b86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b870:	688e      	ldr	r6, [r1, #8]
 800b872:	461f      	mov	r7, r3
 800b874:	42be      	cmp	r6, r7
 800b876:	680b      	ldr	r3, [r1, #0]
 800b878:	4682      	mov	sl, r0
 800b87a:	460c      	mov	r4, r1
 800b87c:	4690      	mov	r8, r2
 800b87e:	d82d      	bhi.n	800b8dc <__ssputs_r+0x70>
 800b880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b884:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b888:	d026      	beq.n	800b8d8 <__ssputs_r+0x6c>
 800b88a:	6965      	ldr	r5, [r4, #20]
 800b88c:	6909      	ldr	r1, [r1, #16]
 800b88e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b892:	eba3 0901 	sub.w	r9, r3, r1
 800b896:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b89a:	1c7b      	adds	r3, r7, #1
 800b89c:	444b      	add	r3, r9
 800b89e:	106d      	asrs	r5, r5, #1
 800b8a0:	429d      	cmp	r5, r3
 800b8a2:	bf38      	it	cc
 800b8a4:	461d      	movcc	r5, r3
 800b8a6:	0553      	lsls	r3, r2, #21
 800b8a8:	d527      	bpl.n	800b8fa <__ssputs_r+0x8e>
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	f7fe fc24 	bl	800a0f8 <_malloc_r>
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	b360      	cbz	r0, 800b90e <__ssputs_r+0xa2>
 800b8b4:	6921      	ldr	r1, [r4, #16]
 800b8b6:	464a      	mov	r2, r9
 800b8b8:	f7fd fd1d 	bl	80092f6 <memcpy>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	6126      	str	r6, [r4, #16]
 800b8ca:	6165      	str	r5, [r4, #20]
 800b8cc:	444e      	add	r6, r9
 800b8ce:	eba5 0509 	sub.w	r5, r5, r9
 800b8d2:	6026      	str	r6, [r4, #0]
 800b8d4:	60a5      	str	r5, [r4, #8]
 800b8d6:	463e      	mov	r6, r7
 800b8d8:	42be      	cmp	r6, r7
 800b8da:	d900      	bls.n	800b8de <__ssputs_r+0x72>
 800b8dc:	463e      	mov	r6, r7
 800b8de:	6820      	ldr	r0, [r4, #0]
 800b8e0:	4632      	mov	r2, r6
 800b8e2:	4641      	mov	r1, r8
 800b8e4:	f000 fb7c 	bl	800bfe0 <memmove>
 800b8e8:	68a3      	ldr	r3, [r4, #8]
 800b8ea:	1b9b      	subs	r3, r3, r6
 800b8ec:	60a3      	str	r3, [r4, #8]
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	4433      	add	r3, r6
 800b8f2:	6023      	str	r3, [r4, #0]
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8fa:	462a      	mov	r2, r5
 800b8fc:	f000 ff29 	bl	800c752 <_realloc_r>
 800b900:	4606      	mov	r6, r0
 800b902:	2800      	cmp	r0, #0
 800b904:	d1e0      	bne.n	800b8c8 <__ssputs_r+0x5c>
 800b906:	6921      	ldr	r1, [r4, #16]
 800b908:	4650      	mov	r0, sl
 800b90a:	f7fe fb81 	bl	800a010 <_free_r>
 800b90e:	230c      	movs	r3, #12
 800b910:	f8ca 3000 	str.w	r3, [sl]
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	e7e9      	b.n	800b8f6 <__ssputs_r+0x8a>
	...

0800b924 <_svfiprintf_r>:
 800b924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b928:	4698      	mov	r8, r3
 800b92a:	898b      	ldrh	r3, [r1, #12]
 800b92c:	061b      	lsls	r3, r3, #24
 800b92e:	b09d      	sub	sp, #116	@ 0x74
 800b930:	4607      	mov	r7, r0
 800b932:	460d      	mov	r5, r1
 800b934:	4614      	mov	r4, r2
 800b936:	d510      	bpl.n	800b95a <_svfiprintf_r+0x36>
 800b938:	690b      	ldr	r3, [r1, #16]
 800b93a:	b973      	cbnz	r3, 800b95a <_svfiprintf_r+0x36>
 800b93c:	2140      	movs	r1, #64	@ 0x40
 800b93e:	f7fe fbdb 	bl	800a0f8 <_malloc_r>
 800b942:	6028      	str	r0, [r5, #0]
 800b944:	6128      	str	r0, [r5, #16]
 800b946:	b930      	cbnz	r0, 800b956 <_svfiprintf_r+0x32>
 800b948:	230c      	movs	r3, #12
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	f04f 30ff 	mov.w	r0, #4294967295
 800b950:	b01d      	add	sp, #116	@ 0x74
 800b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b956:	2340      	movs	r3, #64	@ 0x40
 800b958:	616b      	str	r3, [r5, #20]
 800b95a:	2300      	movs	r3, #0
 800b95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b95e:	2320      	movs	r3, #32
 800b960:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b964:	f8cd 800c 	str.w	r8, [sp, #12]
 800b968:	2330      	movs	r3, #48	@ 0x30
 800b96a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb08 <_svfiprintf_r+0x1e4>
 800b96e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b972:	f04f 0901 	mov.w	r9, #1
 800b976:	4623      	mov	r3, r4
 800b978:	469a      	mov	sl, r3
 800b97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b97e:	b10a      	cbz	r2, 800b984 <_svfiprintf_r+0x60>
 800b980:	2a25      	cmp	r2, #37	@ 0x25
 800b982:	d1f9      	bne.n	800b978 <_svfiprintf_r+0x54>
 800b984:	ebba 0b04 	subs.w	fp, sl, r4
 800b988:	d00b      	beq.n	800b9a2 <_svfiprintf_r+0x7e>
 800b98a:	465b      	mov	r3, fp
 800b98c:	4622      	mov	r2, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	4638      	mov	r0, r7
 800b992:	f7ff ff6b 	bl	800b86c <__ssputs_r>
 800b996:	3001      	adds	r0, #1
 800b998:	f000 80a7 	beq.w	800baea <_svfiprintf_r+0x1c6>
 800b99c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b99e:	445a      	add	r2, fp
 800b9a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f000 809f 	beq.w	800baea <_svfiprintf_r+0x1c6>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9b6:	f10a 0a01 	add.w	sl, sl, #1
 800b9ba:	9304      	str	r3, [sp, #16]
 800b9bc:	9307      	str	r3, [sp, #28]
 800b9be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9c4:	4654      	mov	r4, sl
 800b9c6:	2205      	movs	r2, #5
 800b9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9cc:	484e      	ldr	r0, [pc, #312]	@ (800bb08 <_svfiprintf_r+0x1e4>)
 800b9ce:	f7f4 fbff 	bl	80001d0 <memchr>
 800b9d2:	9a04      	ldr	r2, [sp, #16]
 800b9d4:	b9d8      	cbnz	r0, 800ba0e <_svfiprintf_r+0xea>
 800b9d6:	06d0      	lsls	r0, r2, #27
 800b9d8:	bf44      	itt	mi
 800b9da:	2320      	movmi	r3, #32
 800b9dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9e0:	0711      	lsls	r1, r2, #28
 800b9e2:	bf44      	itt	mi
 800b9e4:	232b      	movmi	r3, #43	@ 0x2b
 800b9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9f0:	d015      	beq.n	800ba1e <_svfiprintf_r+0xfa>
 800b9f2:	9a07      	ldr	r2, [sp, #28]
 800b9f4:	4654      	mov	r4, sl
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	f04f 0c0a 	mov.w	ip, #10
 800b9fc:	4621      	mov	r1, r4
 800b9fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba02:	3b30      	subs	r3, #48	@ 0x30
 800ba04:	2b09      	cmp	r3, #9
 800ba06:	d94b      	bls.n	800baa0 <_svfiprintf_r+0x17c>
 800ba08:	b1b0      	cbz	r0, 800ba38 <_svfiprintf_r+0x114>
 800ba0a:	9207      	str	r2, [sp, #28]
 800ba0c:	e014      	b.n	800ba38 <_svfiprintf_r+0x114>
 800ba0e:	eba0 0308 	sub.w	r3, r0, r8
 800ba12:	fa09 f303 	lsl.w	r3, r9, r3
 800ba16:	4313      	orrs	r3, r2
 800ba18:	9304      	str	r3, [sp, #16]
 800ba1a:	46a2      	mov	sl, r4
 800ba1c:	e7d2      	b.n	800b9c4 <_svfiprintf_r+0xa0>
 800ba1e:	9b03      	ldr	r3, [sp, #12]
 800ba20:	1d19      	adds	r1, r3, #4
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	9103      	str	r1, [sp, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bfbb      	ittet	lt
 800ba2a:	425b      	neglt	r3, r3
 800ba2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ba30:	9307      	strge	r3, [sp, #28]
 800ba32:	9307      	strlt	r3, [sp, #28]
 800ba34:	bfb8      	it	lt
 800ba36:	9204      	strlt	r2, [sp, #16]
 800ba38:	7823      	ldrb	r3, [r4, #0]
 800ba3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba3c:	d10a      	bne.n	800ba54 <_svfiprintf_r+0x130>
 800ba3e:	7863      	ldrb	r3, [r4, #1]
 800ba40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba42:	d132      	bne.n	800baaa <_svfiprintf_r+0x186>
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	1d1a      	adds	r2, r3, #4
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	9203      	str	r2, [sp, #12]
 800ba4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba50:	3402      	adds	r4, #2
 800ba52:	9305      	str	r3, [sp, #20]
 800ba54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb18 <_svfiprintf_r+0x1f4>
 800ba58:	7821      	ldrb	r1, [r4, #0]
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	4650      	mov	r0, sl
 800ba5e:	f7f4 fbb7 	bl	80001d0 <memchr>
 800ba62:	b138      	cbz	r0, 800ba74 <_svfiprintf_r+0x150>
 800ba64:	9b04      	ldr	r3, [sp, #16]
 800ba66:	eba0 000a 	sub.w	r0, r0, sl
 800ba6a:	2240      	movs	r2, #64	@ 0x40
 800ba6c:	4082      	lsls	r2, r0
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	3401      	adds	r4, #1
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba78:	4824      	ldr	r0, [pc, #144]	@ (800bb0c <_svfiprintf_r+0x1e8>)
 800ba7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba7e:	2206      	movs	r2, #6
 800ba80:	f7f4 fba6 	bl	80001d0 <memchr>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d036      	beq.n	800baf6 <_svfiprintf_r+0x1d2>
 800ba88:	4b21      	ldr	r3, [pc, #132]	@ (800bb10 <_svfiprintf_r+0x1ec>)
 800ba8a:	bb1b      	cbnz	r3, 800bad4 <_svfiprintf_r+0x1b0>
 800ba8c:	9b03      	ldr	r3, [sp, #12]
 800ba8e:	3307      	adds	r3, #7
 800ba90:	f023 0307 	bic.w	r3, r3, #7
 800ba94:	3308      	adds	r3, #8
 800ba96:	9303      	str	r3, [sp, #12]
 800ba98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba9a:	4433      	add	r3, r6
 800ba9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba9e:	e76a      	b.n	800b976 <_svfiprintf_r+0x52>
 800baa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800baa4:	460c      	mov	r4, r1
 800baa6:	2001      	movs	r0, #1
 800baa8:	e7a8      	b.n	800b9fc <_svfiprintf_r+0xd8>
 800baaa:	2300      	movs	r3, #0
 800baac:	3401      	adds	r4, #1
 800baae:	9305      	str	r3, [sp, #20]
 800bab0:	4619      	mov	r1, r3
 800bab2:	f04f 0c0a 	mov.w	ip, #10
 800bab6:	4620      	mov	r0, r4
 800bab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800babc:	3a30      	subs	r2, #48	@ 0x30
 800babe:	2a09      	cmp	r2, #9
 800bac0:	d903      	bls.n	800baca <_svfiprintf_r+0x1a6>
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d0c6      	beq.n	800ba54 <_svfiprintf_r+0x130>
 800bac6:	9105      	str	r1, [sp, #20]
 800bac8:	e7c4      	b.n	800ba54 <_svfiprintf_r+0x130>
 800baca:	fb0c 2101 	mla	r1, ip, r1, r2
 800bace:	4604      	mov	r4, r0
 800bad0:	2301      	movs	r3, #1
 800bad2:	e7f0      	b.n	800bab6 <_svfiprintf_r+0x192>
 800bad4:	ab03      	add	r3, sp, #12
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	462a      	mov	r2, r5
 800bada:	4b0e      	ldr	r3, [pc, #56]	@ (800bb14 <_svfiprintf_r+0x1f0>)
 800badc:	a904      	add	r1, sp, #16
 800bade:	4638      	mov	r0, r7
 800bae0:	f7fc facc 	bl	800807c <_printf_float>
 800bae4:	1c42      	adds	r2, r0, #1
 800bae6:	4606      	mov	r6, r0
 800bae8:	d1d6      	bne.n	800ba98 <_svfiprintf_r+0x174>
 800baea:	89ab      	ldrh	r3, [r5, #12]
 800baec:	065b      	lsls	r3, r3, #25
 800baee:	f53f af2d 	bmi.w	800b94c <_svfiprintf_r+0x28>
 800baf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800baf4:	e72c      	b.n	800b950 <_svfiprintf_r+0x2c>
 800baf6:	ab03      	add	r3, sp, #12
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	462a      	mov	r2, r5
 800bafc:	4b05      	ldr	r3, [pc, #20]	@ (800bb14 <_svfiprintf_r+0x1f0>)
 800bafe:	a904      	add	r1, sp, #16
 800bb00:	4638      	mov	r0, r7
 800bb02:	f7fc fd53 	bl	80085ac <_printf_i>
 800bb06:	e7ed      	b.n	800bae4 <_svfiprintf_r+0x1c0>
 800bb08:	0800d593 	.word	0x0800d593
 800bb0c:	0800d59d 	.word	0x0800d59d
 800bb10:	0800807d 	.word	0x0800807d
 800bb14:	0800b86d 	.word	0x0800b86d
 800bb18:	0800d599 	.word	0x0800d599

0800bb1c <__sfputc_r>:
 800bb1c:	6893      	ldr	r3, [r2, #8]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	b410      	push	{r4}
 800bb24:	6093      	str	r3, [r2, #8]
 800bb26:	da08      	bge.n	800bb3a <__sfputc_r+0x1e>
 800bb28:	6994      	ldr	r4, [r2, #24]
 800bb2a:	42a3      	cmp	r3, r4
 800bb2c:	db01      	blt.n	800bb32 <__sfputc_r+0x16>
 800bb2e:	290a      	cmp	r1, #10
 800bb30:	d103      	bne.n	800bb3a <__sfputc_r+0x1e>
 800bb32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb36:	f7fd ba32 	b.w	8008f9e <__swbuf_r>
 800bb3a:	6813      	ldr	r3, [r2, #0]
 800bb3c:	1c58      	adds	r0, r3, #1
 800bb3e:	6010      	str	r0, [r2, #0]
 800bb40:	7019      	strb	r1, [r3, #0]
 800bb42:	4608      	mov	r0, r1
 800bb44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <__sfputs_r>:
 800bb4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4c:	4606      	mov	r6, r0
 800bb4e:	460f      	mov	r7, r1
 800bb50:	4614      	mov	r4, r2
 800bb52:	18d5      	adds	r5, r2, r3
 800bb54:	42ac      	cmp	r4, r5
 800bb56:	d101      	bne.n	800bb5c <__sfputs_r+0x12>
 800bb58:	2000      	movs	r0, #0
 800bb5a:	e007      	b.n	800bb6c <__sfputs_r+0x22>
 800bb5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb60:	463a      	mov	r2, r7
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7ff ffda 	bl	800bb1c <__sfputc_r>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d1f3      	bne.n	800bb54 <__sfputs_r+0xa>
 800bb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb70 <_vfiprintf_r>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	460d      	mov	r5, r1
 800bb76:	b09d      	sub	sp, #116	@ 0x74
 800bb78:	4614      	mov	r4, r2
 800bb7a:	4698      	mov	r8, r3
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	b118      	cbz	r0, 800bb88 <_vfiprintf_r+0x18>
 800bb80:	6a03      	ldr	r3, [r0, #32]
 800bb82:	b90b      	cbnz	r3, 800bb88 <_vfiprintf_r+0x18>
 800bb84:	f7fd f8ca 	bl	8008d1c <__sinit>
 800bb88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb8a:	07d9      	lsls	r1, r3, #31
 800bb8c:	d405      	bmi.n	800bb9a <_vfiprintf_r+0x2a>
 800bb8e:	89ab      	ldrh	r3, [r5, #12]
 800bb90:	059a      	lsls	r2, r3, #22
 800bb92:	d402      	bmi.n	800bb9a <_vfiprintf_r+0x2a>
 800bb94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb96:	f7fd fbac 	bl	80092f2 <__retarget_lock_acquire_recursive>
 800bb9a:	89ab      	ldrh	r3, [r5, #12]
 800bb9c:	071b      	lsls	r3, r3, #28
 800bb9e:	d501      	bpl.n	800bba4 <_vfiprintf_r+0x34>
 800bba0:	692b      	ldr	r3, [r5, #16]
 800bba2:	b99b      	cbnz	r3, 800bbcc <_vfiprintf_r+0x5c>
 800bba4:	4629      	mov	r1, r5
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7fd fa38 	bl	800901c <__swsetup_r>
 800bbac:	b170      	cbz	r0, 800bbcc <_vfiprintf_r+0x5c>
 800bbae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbb0:	07dc      	lsls	r4, r3, #31
 800bbb2:	d504      	bpl.n	800bbbe <_vfiprintf_r+0x4e>
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb8:	b01d      	add	sp, #116	@ 0x74
 800bbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	0598      	lsls	r0, r3, #22
 800bbc2:	d4f7      	bmi.n	800bbb4 <_vfiprintf_r+0x44>
 800bbc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbc6:	f7fd fb95 	bl	80092f4 <__retarget_lock_release_recursive>
 800bbca:	e7f3      	b.n	800bbb4 <_vfiprintf_r+0x44>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbd0:	2320      	movs	r3, #32
 800bbd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbda:	2330      	movs	r3, #48	@ 0x30
 800bbdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd8c <_vfiprintf_r+0x21c>
 800bbe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbe4:	f04f 0901 	mov.w	r9, #1
 800bbe8:	4623      	mov	r3, r4
 800bbea:	469a      	mov	sl, r3
 800bbec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbf0:	b10a      	cbz	r2, 800bbf6 <_vfiprintf_r+0x86>
 800bbf2:	2a25      	cmp	r2, #37	@ 0x25
 800bbf4:	d1f9      	bne.n	800bbea <_vfiprintf_r+0x7a>
 800bbf6:	ebba 0b04 	subs.w	fp, sl, r4
 800bbfa:	d00b      	beq.n	800bc14 <_vfiprintf_r+0xa4>
 800bbfc:	465b      	mov	r3, fp
 800bbfe:	4622      	mov	r2, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7ff ffa1 	bl	800bb4a <__sfputs_r>
 800bc08:	3001      	adds	r0, #1
 800bc0a:	f000 80a7 	beq.w	800bd5c <_vfiprintf_r+0x1ec>
 800bc0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc10:	445a      	add	r2, fp
 800bc12:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc14:	f89a 3000 	ldrb.w	r3, [sl]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 809f 	beq.w	800bd5c <_vfiprintf_r+0x1ec>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295
 800bc24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc28:	f10a 0a01 	add.w	sl, sl, #1
 800bc2c:	9304      	str	r3, [sp, #16]
 800bc2e:	9307      	str	r3, [sp, #28]
 800bc30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc34:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc36:	4654      	mov	r4, sl
 800bc38:	2205      	movs	r2, #5
 800bc3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3e:	4853      	ldr	r0, [pc, #332]	@ (800bd8c <_vfiprintf_r+0x21c>)
 800bc40:	f7f4 fac6 	bl	80001d0 <memchr>
 800bc44:	9a04      	ldr	r2, [sp, #16]
 800bc46:	b9d8      	cbnz	r0, 800bc80 <_vfiprintf_r+0x110>
 800bc48:	06d1      	lsls	r1, r2, #27
 800bc4a:	bf44      	itt	mi
 800bc4c:	2320      	movmi	r3, #32
 800bc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc52:	0713      	lsls	r3, r2, #28
 800bc54:	bf44      	itt	mi
 800bc56:	232b      	movmi	r3, #43	@ 0x2b
 800bc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc60:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc62:	d015      	beq.n	800bc90 <_vfiprintf_r+0x120>
 800bc64:	9a07      	ldr	r2, [sp, #28]
 800bc66:	4654      	mov	r4, sl
 800bc68:	2000      	movs	r0, #0
 800bc6a:	f04f 0c0a 	mov.w	ip, #10
 800bc6e:	4621      	mov	r1, r4
 800bc70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc74:	3b30      	subs	r3, #48	@ 0x30
 800bc76:	2b09      	cmp	r3, #9
 800bc78:	d94b      	bls.n	800bd12 <_vfiprintf_r+0x1a2>
 800bc7a:	b1b0      	cbz	r0, 800bcaa <_vfiprintf_r+0x13a>
 800bc7c:	9207      	str	r2, [sp, #28]
 800bc7e:	e014      	b.n	800bcaa <_vfiprintf_r+0x13a>
 800bc80:	eba0 0308 	sub.w	r3, r0, r8
 800bc84:	fa09 f303 	lsl.w	r3, r9, r3
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	9304      	str	r3, [sp, #16]
 800bc8c:	46a2      	mov	sl, r4
 800bc8e:	e7d2      	b.n	800bc36 <_vfiprintf_r+0xc6>
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	1d19      	adds	r1, r3, #4
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	9103      	str	r1, [sp, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	bfbb      	ittet	lt
 800bc9c:	425b      	neglt	r3, r3
 800bc9e:	f042 0202 	orrlt.w	r2, r2, #2
 800bca2:	9307      	strge	r3, [sp, #28]
 800bca4:	9307      	strlt	r3, [sp, #28]
 800bca6:	bfb8      	it	lt
 800bca8:	9204      	strlt	r2, [sp, #16]
 800bcaa:	7823      	ldrb	r3, [r4, #0]
 800bcac:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcae:	d10a      	bne.n	800bcc6 <_vfiprintf_r+0x156>
 800bcb0:	7863      	ldrb	r3, [r4, #1]
 800bcb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcb4:	d132      	bne.n	800bd1c <_vfiprintf_r+0x1ac>
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	1d1a      	adds	r2, r3, #4
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	9203      	str	r2, [sp, #12]
 800bcbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcc2:	3402      	adds	r4, #2
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd9c <_vfiprintf_r+0x22c>
 800bcca:	7821      	ldrb	r1, [r4, #0]
 800bccc:	2203      	movs	r2, #3
 800bcce:	4650      	mov	r0, sl
 800bcd0:	f7f4 fa7e 	bl	80001d0 <memchr>
 800bcd4:	b138      	cbz	r0, 800bce6 <_vfiprintf_r+0x176>
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	eba0 000a 	sub.w	r0, r0, sl
 800bcdc:	2240      	movs	r2, #64	@ 0x40
 800bcde:	4082      	lsls	r2, r0
 800bce0:	4313      	orrs	r3, r2
 800bce2:	3401      	adds	r4, #1
 800bce4:	9304      	str	r3, [sp, #16]
 800bce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcea:	4829      	ldr	r0, [pc, #164]	@ (800bd90 <_vfiprintf_r+0x220>)
 800bcec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcf0:	2206      	movs	r2, #6
 800bcf2:	f7f4 fa6d 	bl	80001d0 <memchr>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d03f      	beq.n	800bd7a <_vfiprintf_r+0x20a>
 800bcfa:	4b26      	ldr	r3, [pc, #152]	@ (800bd94 <_vfiprintf_r+0x224>)
 800bcfc:	bb1b      	cbnz	r3, 800bd46 <_vfiprintf_r+0x1d6>
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	3307      	adds	r3, #7
 800bd02:	f023 0307 	bic.w	r3, r3, #7
 800bd06:	3308      	adds	r3, #8
 800bd08:	9303      	str	r3, [sp, #12]
 800bd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0c:	443b      	add	r3, r7
 800bd0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd10:	e76a      	b.n	800bbe8 <_vfiprintf_r+0x78>
 800bd12:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd16:	460c      	mov	r4, r1
 800bd18:	2001      	movs	r0, #1
 800bd1a:	e7a8      	b.n	800bc6e <_vfiprintf_r+0xfe>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	3401      	adds	r4, #1
 800bd20:	9305      	str	r3, [sp, #20]
 800bd22:	4619      	mov	r1, r3
 800bd24:	f04f 0c0a 	mov.w	ip, #10
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2e:	3a30      	subs	r2, #48	@ 0x30
 800bd30:	2a09      	cmp	r2, #9
 800bd32:	d903      	bls.n	800bd3c <_vfiprintf_r+0x1cc>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d0c6      	beq.n	800bcc6 <_vfiprintf_r+0x156>
 800bd38:	9105      	str	r1, [sp, #20]
 800bd3a:	e7c4      	b.n	800bcc6 <_vfiprintf_r+0x156>
 800bd3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd40:	4604      	mov	r4, r0
 800bd42:	2301      	movs	r3, #1
 800bd44:	e7f0      	b.n	800bd28 <_vfiprintf_r+0x1b8>
 800bd46:	ab03      	add	r3, sp, #12
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	462a      	mov	r2, r5
 800bd4c:	4b12      	ldr	r3, [pc, #72]	@ (800bd98 <_vfiprintf_r+0x228>)
 800bd4e:	a904      	add	r1, sp, #16
 800bd50:	4630      	mov	r0, r6
 800bd52:	f7fc f993 	bl	800807c <_printf_float>
 800bd56:	4607      	mov	r7, r0
 800bd58:	1c78      	adds	r0, r7, #1
 800bd5a:	d1d6      	bne.n	800bd0a <_vfiprintf_r+0x19a>
 800bd5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd5e:	07d9      	lsls	r1, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <_vfiprintf_r+0x1fe>
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	059a      	lsls	r2, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <_vfiprintf_r+0x1fe>
 800bd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd6a:	f7fd fac3 	bl	80092f4 <__retarget_lock_release_recursive>
 800bd6e:	89ab      	ldrh	r3, [r5, #12]
 800bd70:	065b      	lsls	r3, r3, #25
 800bd72:	f53f af1f 	bmi.w	800bbb4 <_vfiprintf_r+0x44>
 800bd76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd78:	e71e      	b.n	800bbb8 <_vfiprintf_r+0x48>
 800bd7a:	ab03      	add	r3, sp, #12
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	462a      	mov	r2, r5
 800bd80:	4b05      	ldr	r3, [pc, #20]	@ (800bd98 <_vfiprintf_r+0x228>)
 800bd82:	a904      	add	r1, sp, #16
 800bd84:	4630      	mov	r0, r6
 800bd86:	f7fc fc11 	bl	80085ac <_printf_i>
 800bd8a:	e7e4      	b.n	800bd56 <_vfiprintf_r+0x1e6>
 800bd8c:	0800d593 	.word	0x0800d593
 800bd90:	0800d59d 	.word	0x0800d59d
 800bd94:	0800807d 	.word	0x0800807d
 800bd98:	0800bb4b 	.word	0x0800bb4b
 800bd9c:	0800d599 	.word	0x0800d599

0800bda0 <__sflush_r>:
 800bda0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda8:	0716      	lsls	r6, r2, #28
 800bdaa:	4605      	mov	r5, r0
 800bdac:	460c      	mov	r4, r1
 800bdae:	d454      	bmi.n	800be5a <__sflush_r+0xba>
 800bdb0:	684b      	ldr	r3, [r1, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	dc02      	bgt.n	800bdbc <__sflush_r+0x1c>
 800bdb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	dd48      	ble.n	800be4e <__sflush_r+0xae>
 800bdbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdbe:	2e00      	cmp	r6, #0
 800bdc0:	d045      	beq.n	800be4e <__sflush_r+0xae>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bdc8:	682f      	ldr	r7, [r5, #0]
 800bdca:	6a21      	ldr	r1, [r4, #32]
 800bdcc:	602b      	str	r3, [r5, #0]
 800bdce:	d030      	beq.n	800be32 <__sflush_r+0x92>
 800bdd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	0759      	lsls	r1, r3, #29
 800bdd6:	d505      	bpl.n	800bde4 <__sflush_r+0x44>
 800bdd8:	6863      	ldr	r3, [r4, #4]
 800bdda:	1ad2      	subs	r2, r2, r3
 800bddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bdde:	b10b      	cbz	r3, 800bde4 <__sflush_r+0x44>
 800bde0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bde2:	1ad2      	subs	r2, r2, r3
 800bde4:	2300      	movs	r3, #0
 800bde6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bde8:	6a21      	ldr	r1, [r4, #32]
 800bdea:	4628      	mov	r0, r5
 800bdec:	47b0      	blx	r6
 800bdee:	1c43      	adds	r3, r0, #1
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	d106      	bne.n	800be02 <__sflush_r+0x62>
 800bdf4:	6829      	ldr	r1, [r5, #0]
 800bdf6:	291d      	cmp	r1, #29
 800bdf8:	d82b      	bhi.n	800be52 <__sflush_r+0xb2>
 800bdfa:	4a2a      	ldr	r2, [pc, #168]	@ (800bea4 <__sflush_r+0x104>)
 800bdfc:	40ca      	lsrs	r2, r1
 800bdfe:	07d6      	lsls	r6, r2, #31
 800be00:	d527      	bpl.n	800be52 <__sflush_r+0xb2>
 800be02:	2200      	movs	r2, #0
 800be04:	6062      	str	r2, [r4, #4]
 800be06:	04d9      	lsls	r1, r3, #19
 800be08:	6922      	ldr	r2, [r4, #16]
 800be0a:	6022      	str	r2, [r4, #0]
 800be0c:	d504      	bpl.n	800be18 <__sflush_r+0x78>
 800be0e:	1c42      	adds	r2, r0, #1
 800be10:	d101      	bne.n	800be16 <__sflush_r+0x76>
 800be12:	682b      	ldr	r3, [r5, #0]
 800be14:	b903      	cbnz	r3, 800be18 <__sflush_r+0x78>
 800be16:	6560      	str	r0, [r4, #84]	@ 0x54
 800be18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be1a:	602f      	str	r7, [r5, #0]
 800be1c:	b1b9      	cbz	r1, 800be4e <__sflush_r+0xae>
 800be1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be22:	4299      	cmp	r1, r3
 800be24:	d002      	beq.n	800be2c <__sflush_r+0x8c>
 800be26:	4628      	mov	r0, r5
 800be28:	f7fe f8f2 	bl	800a010 <_free_r>
 800be2c:	2300      	movs	r3, #0
 800be2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800be30:	e00d      	b.n	800be4e <__sflush_r+0xae>
 800be32:	2301      	movs	r3, #1
 800be34:	4628      	mov	r0, r5
 800be36:	47b0      	blx	r6
 800be38:	4602      	mov	r2, r0
 800be3a:	1c50      	adds	r0, r2, #1
 800be3c:	d1c9      	bne.n	800bdd2 <__sflush_r+0x32>
 800be3e:	682b      	ldr	r3, [r5, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d0c6      	beq.n	800bdd2 <__sflush_r+0x32>
 800be44:	2b1d      	cmp	r3, #29
 800be46:	d001      	beq.n	800be4c <__sflush_r+0xac>
 800be48:	2b16      	cmp	r3, #22
 800be4a:	d11e      	bne.n	800be8a <__sflush_r+0xea>
 800be4c:	602f      	str	r7, [r5, #0]
 800be4e:	2000      	movs	r0, #0
 800be50:	e022      	b.n	800be98 <__sflush_r+0xf8>
 800be52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be56:	b21b      	sxth	r3, r3
 800be58:	e01b      	b.n	800be92 <__sflush_r+0xf2>
 800be5a:	690f      	ldr	r7, [r1, #16]
 800be5c:	2f00      	cmp	r7, #0
 800be5e:	d0f6      	beq.n	800be4e <__sflush_r+0xae>
 800be60:	0793      	lsls	r3, r2, #30
 800be62:	680e      	ldr	r6, [r1, #0]
 800be64:	bf08      	it	eq
 800be66:	694b      	ldreq	r3, [r1, #20]
 800be68:	600f      	str	r7, [r1, #0]
 800be6a:	bf18      	it	ne
 800be6c:	2300      	movne	r3, #0
 800be6e:	eba6 0807 	sub.w	r8, r6, r7
 800be72:	608b      	str	r3, [r1, #8]
 800be74:	f1b8 0f00 	cmp.w	r8, #0
 800be78:	dde9      	ble.n	800be4e <__sflush_r+0xae>
 800be7a:	6a21      	ldr	r1, [r4, #32]
 800be7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be7e:	4643      	mov	r3, r8
 800be80:	463a      	mov	r2, r7
 800be82:	4628      	mov	r0, r5
 800be84:	47b0      	blx	r6
 800be86:	2800      	cmp	r0, #0
 800be88:	dc08      	bgt.n	800be9c <__sflush_r+0xfc>
 800be8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be92:	81a3      	strh	r3, [r4, #12]
 800be94:	f04f 30ff 	mov.w	r0, #4294967295
 800be98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be9c:	4407      	add	r7, r0
 800be9e:	eba8 0800 	sub.w	r8, r8, r0
 800bea2:	e7e7      	b.n	800be74 <__sflush_r+0xd4>
 800bea4:	20400001 	.word	0x20400001

0800bea8 <_fflush_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	690b      	ldr	r3, [r1, #16]
 800beac:	4605      	mov	r5, r0
 800beae:	460c      	mov	r4, r1
 800beb0:	b913      	cbnz	r3, 800beb8 <_fflush_r+0x10>
 800beb2:	2500      	movs	r5, #0
 800beb4:	4628      	mov	r0, r5
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	b118      	cbz	r0, 800bec2 <_fflush_r+0x1a>
 800beba:	6a03      	ldr	r3, [r0, #32]
 800bebc:	b90b      	cbnz	r3, 800bec2 <_fflush_r+0x1a>
 800bebe:	f7fc ff2d 	bl	8008d1c <__sinit>
 800bec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0f3      	beq.n	800beb2 <_fflush_r+0xa>
 800beca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800becc:	07d0      	lsls	r0, r2, #31
 800bece:	d404      	bmi.n	800beda <_fflush_r+0x32>
 800bed0:	0599      	lsls	r1, r3, #22
 800bed2:	d402      	bmi.n	800beda <_fflush_r+0x32>
 800bed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bed6:	f7fd fa0c 	bl	80092f2 <__retarget_lock_acquire_recursive>
 800beda:	4628      	mov	r0, r5
 800bedc:	4621      	mov	r1, r4
 800bede:	f7ff ff5f 	bl	800bda0 <__sflush_r>
 800bee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bee4:	07da      	lsls	r2, r3, #31
 800bee6:	4605      	mov	r5, r0
 800bee8:	d4e4      	bmi.n	800beb4 <_fflush_r+0xc>
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	059b      	lsls	r3, r3, #22
 800beee:	d4e1      	bmi.n	800beb4 <_fflush_r+0xc>
 800bef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bef2:	f7fd f9ff 	bl	80092f4 <__retarget_lock_release_recursive>
 800bef6:	e7dd      	b.n	800beb4 <_fflush_r+0xc>

0800bef8 <fiprintf>:
 800bef8:	b40e      	push	{r1, r2, r3}
 800befa:	b503      	push	{r0, r1, lr}
 800befc:	4601      	mov	r1, r0
 800befe:	ab03      	add	r3, sp, #12
 800bf00:	4805      	ldr	r0, [pc, #20]	@ (800bf18 <fiprintf+0x20>)
 800bf02:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf06:	6800      	ldr	r0, [r0, #0]
 800bf08:	9301      	str	r3, [sp, #4]
 800bf0a:	f7ff fe31 	bl	800bb70 <_vfiprintf_r>
 800bf0e:	b002      	add	sp, #8
 800bf10:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf14:	b003      	add	sp, #12
 800bf16:	4770      	bx	lr
 800bf18:	20000060 	.word	0x20000060

0800bf1c <__swhatbuf_r>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	460c      	mov	r4, r1
 800bf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf24:	2900      	cmp	r1, #0
 800bf26:	b096      	sub	sp, #88	@ 0x58
 800bf28:	4615      	mov	r5, r2
 800bf2a:	461e      	mov	r6, r3
 800bf2c:	da0d      	bge.n	800bf4a <__swhatbuf_r+0x2e>
 800bf2e:	89a3      	ldrh	r3, [r4, #12]
 800bf30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf34:	f04f 0100 	mov.w	r1, #0
 800bf38:	bf14      	ite	ne
 800bf3a:	2340      	movne	r3, #64	@ 0x40
 800bf3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf40:	2000      	movs	r0, #0
 800bf42:	6031      	str	r1, [r6, #0]
 800bf44:	602b      	str	r3, [r5, #0]
 800bf46:	b016      	add	sp, #88	@ 0x58
 800bf48:	bd70      	pop	{r4, r5, r6, pc}
 800bf4a:	466a      	mov	r2, sp
 800bf4c:	f000 f862 	bl	800c014 <_fstat_r>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	dbec      	blt.n	800bf2e <__swhatbuf_r+0x12>
 800bf54:	9901      	ldr	r1, [sp, #4]
 800bf56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf5e:	4259      	negs	r1, r3
 800bf60:	4159      	adcs	r1, r3
 800bf62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf66:	e7eb      	b.n	800bf40 <__swhatbuf_r+0x24>

0800bf68 <__smakebuf_r>:
 800bf68:	898b      	ldrh	r3, [r1, #12]
 800bf6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf6c:	079d      	lsls	r5, r3, #30
 800bf6e:	4606      	mov	r6, r0
 800bf70:	460c      	mov	r4, r1
 800bf72:	d507      	bpl.n	800bf84 <__smakebuf_r+0x1c>
 800bf74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	6123      	str	r3, [r4, #16]
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	6163      	str	r3, [r4, #20]
 800bf80:	b003      	add	sp, #12
 800bf82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf84:	ab01      	add	r3, sp, #4
 800bf86:	466a      	mov	r2, sp
 800bf88:	f7ff ffc8 	bl	800bf1c <__swhatbuf_r>
 800bf8c:	9f00      	ldr	r7, [sp, #0]
 800bf8e:	4605      	mov	r5, r0
 800bf90:	4639      	mov	r1, r7
 800bf92:	4630      	mov	r0, r6
 800bf94:	f7fe f8b0 	bl	800a0f8 <_malloc_r>
 800bf98:	b948      	cbnz	r0, 800bfae <__smakebuf_r+0x46>
 800bf9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf9e:	059a      	lsls	r2, r3, #22
 800bfa0:	d4ee      	bmi.n	800bf80 <__smakebuf_r+0x18>
 800bfa2:	f023 0303 	bic.w	r3, r3, #3
 800bfa6:	f043 0302 	orr.w	r3, r3, #2
 800bfaa:	81a3      	strh	r3, [r4, #12]
 800bfac:	e7e2      	b.n	800bf74 <__smakebuf_r+0xc>
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	6020      	str	r0, [r4, #0]
 800bfb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfb6:	81a3      	strh	r3, [r4, #12]
 800bfb8:	9b01      	ldr	r3, [sp, #4]
 800bfba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bfbe:	b15b      	cbz	r3, 800bfd8 <__smakebuf_r+0x70>
 800bfc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f000 f837 	bl	800c038 <_isatty_r>
 800bfca:	b128      	cbz	r0, 800bfd8 <__smakebuf_r+0x70>
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f023 0303 	bic.w	r3, r3, #3
 800bfd2:	f043 0301 	orr.w	r3, r3, #1
 800bfd6:	81a3      	strh	r3, [r4, #12]
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	431d      	orrs	r5, r3
 800bfdc:	81a5      	strh	r5, [r4, #12]
 800bfde:	e7cf      	b.n	800bf80 <__smakebuf_r+0x18>

0800bfe0 <memmove>:
 800bfe0:	4288      	cmp	r0, r1
 800bfe2:	b510      	push	{r4, lr}
 800bfe4:	eb01 0402 	add.w	r4, r1, r2
 800bfe8:	d902      	bls.n	800bff0 <memmove+0x10>
 800bfea:	4284      	cmp	r4, r0
 800bfec:	4623      	mov	r3, r4
 800bfee:	d807      	bhi.n	800c000 <memmove+0x20>
 800bff0:	1e43      	subs	r3, r0, #1
 800bff2:	42a1      	cmp	r1, r4
 800bff4:	d008      	beq.n	800c008 <memmove+0x28>
 800bff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bffe:	e7f8      	b.n	800bff2 <memmove+0x12>
 800c000:	4402      	add	r2, r0
 800c002:	4601      	mov	r1, r0
 800c004:	428a      	cmp	r2, r1
 800c006:	d100      	bne.n	800c00a <memmove+0x2a>
 800c008:	bd10      	pop	{r4, pc}
 800c00a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c00e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c012:	e7f7      	b.n	800c004 <memmove+0x24>

0800c014 <_fstat_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4d07      	ldr	r5, [pc, #28]	@ (800c034 <_fstat_r+0x20>)
 800c018:	2300      	movs	r3, #0
 800c01a:	4604      	mov	r4, r0
 800c01c:	4608      	mov	r0, r1
 800c01e:	4611      	mov	r1, r2
 800c020:	602b      	str	r3, [r5, #0]
 800c022:	f7f5 fb44 	bl	80016ae <_fstat>
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	d102      	bne.n	800c030 <_fstat_r+0x1c>
 800c02a:	682b      	ldr	r3, [r5, #0]
 800c02c:	b103      	cbz	r3, 800c030 <_fstat_r+0x1c>
 800c02e:	6023      	str	r3, [r4, #0]
 800c030:	bd38      	pop	{r3, r4, r5, pc}
 800c032:	bf00      	nop
 800c034:	20000ea0 	.word	0x20000ea0

0800c038 <_isatty_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4d06      	ldr	r5, [pc, #24]	@ (800c054 <_isatty_r+0x1c>)
 800c03c:	2300      	movs	r3, #0
 800c03e:	4604      	mov	r4, r0
 800c040:	4608      	mov	r0, r1
 800c042:	602b      	str	r3, [r5, #0]
 800c044:	f7f5 fb43 	bl	80016ce <_isatty>
 800c048:	1c43      	adds	r3, r0, #1
 800c04a:	d102      	bne.n	800c052 <_isatty_r+0x1a>
 800c04c:	682b      	ldr	r3, [r5, #0]
 800c04e:	b103      	cbz	r3, 800c052 <_isatty_r+0x1a>
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	20000ea0 	.word	0x20000ea0

0800c058 <_sbrk_r>:
 800c058:	b538      	push	{r3, r4, r5, lr}
 800c05a:	4d06      	ldr	r5, [pc, #24]	@ (800c074 <_sbrk_r+0x1c>)
 800c05c:	2300      	movs	r3, #0
 800c05e:	4604      	mov	r4, r0
 800c060:	4608      	mov	r0, r1
 800c062:	602b      	str	r3, [r5, #0]
 800c064:	f7f5 fb4c 	bl	8001700 <_sbrk>
 800c068:	1c43      	adds	r3, r0, #1
 800c06a:	d102      	bne.n	800c072 <_sbrk_r+0x1a>
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	b103      	cbz	r3, 800c072 <_sbrk_r+0x1a>
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	bd38      	pop	{r3, r4, r5, pc}
 800c074:	20000ea0 	.word	0x20000ea0

0800c078 <nan>:
 800c078:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c080 <nan+0x8>
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	00000000 	.word	0x00000000
 800c084:	7ff80000 	.word	0x7ff80000

0800c088 <abort>:
 800c088:	b508      	push	{r3, lr}
 800c08a:	2006      	movs	r0, #6
 800c08c:	f000 fbc4 	bl	800c818 <raise>
 800c090:	2001      	movs	r0, #1
 800c092:	f7f5 fabc 	bl	800160e <_exit>

0800c096 <_calloc_r>:
 800c096:	b570      	push	{r4, r5, r6, lr}
 800c098:	fba1 5402 	umull	r5, r4, r1, r2
 800c09c:	b934      	cbnz	r4, 800c0ac <_calloc_r+0x16>
 800c09e:	4629      	mov	r1, r5
 800c0a0:	f7fe f82a 	bl	800a0f8 <_malloc_r>
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	b928      	cbnz	r0, 800c0b4 <_calloc_r+0x1e>
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}
 800c0ac:	220c      	movs	r2, #12
 800c0ae:	6002      	str	r2, [r0, #0]
 800c0b0:	2600      	movs	r6, #0
 800c0b2:	e7f9      	b.n	800c0a8 <_calloc_r+0x12>
 800c0b4:	462a      	mov	r2, r5
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	f7fd f806 	bl	80090c8 <memset>
 800c0bc:	e7f4      	b.n	800c0a8 <_calloc_r+0x12>

0800c0be <rshift>:
 800c0be:	6903      	ldr	r3, [r0, #16]
 800c0c0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0c8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0cc:	f100 0414 	add.w	r4, r0, #20
 800c0d0:	dd45      	ble.n	800c15e <rshift+0xa0>
 800c0d2:	f011 011f 	ands.w	r1, r1, #31
 800c0d6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0da:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c0de:	d10c      	bne.n	800c0fa <rshift+0x3c>
 800c0e0:	f100 0710 	add.w	r7, r0, #16
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	42b1      	cmp	r1, r6
 800c0e8:	d334      	bcc.n	800c154 <rshift+0x96>
 800c0ea:	1a9b      	subs	r3, r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	1eea      	subs	r2, r5, #3
 800c0f0:	4296      	cmp	r6, r2
 800c0f2:	bf38      	it	cc
 800c0f4:	2300      	movcc	r3, #0
 800c0f6:	4423      	add	r3, r4
 800c0f8:	e015      	b.n	800c126 <rshift+0x68>
 800c0fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c0fe:	f1c1 0820 	rsb	r8, r1, #32
 800c102:	40cf      	lsrs	r7, r1
 800c104:	f105 0e04 	add.w	lr, r5, #4
 800c108:	46a1      	mov	r9, r4
 800c10a:	4576      	cmp	r6, lr
 800c10c:	46f4      	mov	ip, lr
 800c10e:	d815      	bhi.n	800c13c <rshift+0x7e>
 800c110:	1a9a      	subs	r2, r3, r2
 800c112:	0092      	lsls	r2, r2, #2
 800c114:	3a04      	subs	r2, #4
 800c116:	3501      	adds	r5, #1
 800c118:	42ae      	cmp	r6, r5
 800c11a:	bf38      	it	cc
 800c11c:	2200      	movcc	r2, #0
 800c11e:	18a3      	adds	r3, r4, r2
 800c120:	50a7      	str	r7, [r4, r2]
 800c122:	b107      	cbz	r7, 800c126 <rshift+0x68>
 800c124:	3304      	adds	r3, #4
 800c126:	1b1a      	subs	r2, r3, r4
 800c128:	42a3      	cmp	r3, r4
 800c12a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c12e:	bf08      	it	eq
 800c130:	2300      	moveq	r3, #0
 800c132:	6102      	str	r2, [r0, #16]
 800c134:	bf08      	it	eq
 800c136:	6143      	streq	r3, [r0, #20]
 800c138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c13c:	f8dc c000 	ldr.w	ip, [ip]
 800c140:	fa0c fc08 	lsl.w	ip, ip, r8
 800c144:	ea4c 0707 	orr.w	r7, ip, r7
 800c148:	f849 7b04 	str.w	r7, [r9], #4
 800c14c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c150:	40cf      	lsrs	r7, r1
 800c152:	e7da      	b.n	800c10a <rshift+0x4c>
 800c154:	f851 cb04 	ldr.w	ip, [r1], #4
 800c158:	f847 cf04 	str.w	ip, [r7, #4]!
 800c15c:	e7c3      	b.n	800c0e6 <rshift+0x28>
 800c15e:	4623      	mov	r3, r4
 800c160:	e7e1      	b.n	800c126 <rshift+0x68>

0800c162 <__hexdig_fun>:
 800c162:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c166:	2b09      	cmp	r3, #9
 800c168:	d802      	bhi.n	800c170 <__hexdig_fun+0xe>
 800c16a:	3820      	subs	r0, #32
 800c16c:	b2c0      	uxtb	r0, r0
 800c16e:	4770      	bx	lr
 800c170:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c174:	2b05      	cmp	r3, #5
 800c176:	d801      	bhi.n	800c17c <__hexdig_fun+0x1a>
 800c178:	3847      	subs	r0, #71	@ 0x47
 800c17a:	e7f7      	b.n	800c16c <__hexdig_fun+0xa>
 800c17c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c180:	2b05      	cmp	r3, #5
 800c182:	d801      	bhi.n	800c188 <__hexdig_fun+0x26>
 800c184:	3827      	subs	r0, #39	@ 0x27
 800c186:	e7f1      	b.n	800c16c <__hexdig_fun+0xa>
 800c188:	2000      	movs	r0, #0
 800c18a:	4770      	bx	lr

0800c18c <__gethex>:
 800c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c190:	b085      	sub	sp, #20
 800c192:	468a      	mov	sl, r1
 800c194:	9302      	str	r3, [sp, #8]
 800c196:	680b      	ldr	r3, [r1, #0]
 800c198:	9001      	str	r0, [sp, #4]
 800c19a:	4690      	mov	r8, r2
 800c19c:	1c9c      	adds	r4, r3, #2
 800c19e:	46a1      	mov	r9, r4
 800c1a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c1a4:	2830      	cmp	r0, #48	@ 0x30
 800c1a6:	d0fa      	beq.n	800c19e <__gethex+0x12>
 800c1a8:	eba9 0303 	sub.w	r3, r9, r3
 800c1ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800c1b0:	f7ff ffd7 	bl	800c162 <__hexdig_fun>
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d168      	bne.n	800c28c <__gethex+0x100>
 800c1ba:	49a0      	ldr	r1, [pc, #640]	@ (800c43c <__gethex+0x2b0>)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	4648      	mov	r0, r9
 800c1c0:	f7fc ff8a 	bl	80090d8 <strncmp>
 800c1c4:	4607      	mov	r7, r0
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d167      	bne.n	800c29a <__gethex+0x10e>
 800c1ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c1ce:	4626      	mov	r6, r4
 800c1d0:	f7ff ffc7 	bl	800c162 <__hexdig_fun>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d062      	beq.n	800c29e <__gethex+0x112>
 800c1d8:	4623      	mov	r3, r4
 800c1da:	7818      	ldrb	r0, [r3, #0]
 800c1dc:	2830      	cmp	r0, #48	@ 0x30
 800c1de:	4699      	mov	r9, r3
 800c1e0:	f103 0301 	add.w	r3, r3, #1
 800c1e4:	d0f9      	beq.n	800c1da <__gethex+0x4e>
 800c1e6:	f7ff ffbc 	bl	800c162 <__hexdig_fun>
 800c1ea:	fab0 f580 	clz	r5, r0
 800c1ee:	096d      	lsrs	r5, r5, #5
 800c1f0:	f04f 0b01 	mov.w	fp, #1
 800c1f4:	464a      	mov	r2, r9
 800c1f6:	4616      	mov	r6, r2
 800c1f8:	3201      	adds	r2, #1
 800c1fa:	7830      	ldrb	r0, [r6, #0]
 800c1fc:	f7ff ffb1 	bl	800c162 <__hexdig_fun>
 800c200:	2800      	cmp	r0, #0
 800c202:	d1f8      	bne.n	800c1f6 <__gethex+0x6a>
 800c204:	498d      	ldr	r1, [pc, #564]	@ (800c43c <__gethex+0x2b0>)
 800c206:	2201      	movs	r2, #1
 800c208:	4630      	mov	r0, r6
 800c20a:	f7fc ff65 	bl	80090d8 <strncmp>
 800c20e:	2800      	cmp	r0, #0
 800c210:	d13f      	bne.n	800c292 <__gethex+0x106>
 800c212:	b944      	cbnz	r4, 800c226 <__gethex+0x9a>
 800c214:	1c74      	adds	r4, r6, #1
 800c216:	4622      	mov	r2, r4
 800c218:	4616      	mov	r6, r2
 800c21a:	3201      	adds	r2, #1
 800c21c:	7830      	ldrb	r0, [r6, #0]
 800c21e:	f7ff ffa0 	bl	800c162 <__hexdig_fun>
 800c222:	2800      	cmp	r0, #0
 800c224:	d1f8      	bne.n	800c218 <__gethex+0x8c>
 800c226:	1ba4      	subs	r4, r4, r6
 800c228:	00a7      	lsls	r7, r4, #2
 800c22a:	7833      	ldrb	r3, [r6, #0]
 800c22c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c230:	2b50      	cmp	r3, #80	@ 0x50
 800c232:	d13e      	bne.n	800c2b2 <__gethex+0x126>
 800c234:	7873      	ldrb	r3, [r6, #1]
 800c236:	2b2b      	cmp	r3, #43	@ 0x2b
 800c238:	d033      	beq.n	800c2a2 <__gethex+0x116>
 800c23a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c23c:	d034      	beq.n	800c2a8 <__gethex+0x11c>
 800c23e:	1c71      	adds	r1, r6, #1
 800c240:	2400      	movs	r4, #0
 800c242:	7808      	ldrb	r0, [r1, #0]
 800c244:	f7ff ff8d 	bl	800c162 <__hexdig_fun>
 800c248:	1e43      	subs	r3, r0, #1
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b18      	cmp	r3, #24
 800c24e:	d830      	bhi.n	800c2b2 <__gethex+0x126>
 800c250:	f1a0 0210 	sub.w	r2, r0, #16
 800c254:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c258:	f7ff ff83 	bl	800c162 <__hexdig_fun>
 800c25c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c260:	fa5f fc8c 	uxtb.w	ip, ip
 800c264:	f1bc 0f18 	cmp.w	ip, #24
 800c268:	f04f 030a 	mov.w	r3, #10
 800c26c:	d91e      	bls.n	800c2ac <__gethex+0x120>
 800c26e:	b104      	cbz	r4, 800c272 <__gethex+0xe6>
 800c270:	4252      	negs	r2, r2
 800c272:	4417      	add	r7, r2
 800c274:	f8ca 1000 	str.w	r1, [sl]
 800c278:	b1ed      	cbz	r5, 800c2b6 <__gethex+0x12a>
 800c27a:	f1bb 0f00 	cmp.w	fp, #0
 800c27e:	bf0c      	ite	eq
 800c280:	2506      	moveq	r5, #6
 800c282:	2500      	movne	r5, #0
 800c284:	4628      	mov	r0, r5
 800c286:	b005      	add	sp, #20
 800c288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28c:	2500      	movs	r5, #0
 800c28e:	462c      	mov	r4, r5
 800c290:	e7b0      	b.n	800c1f4 <__gethex+0x68>
 800c292:	2c00      	cmp	r4, #0
 800c294:	d1c7      	bne.n	800c226 <__gethex+0x9a>
 800c296:	4627      	mov	r7, r4
 800c298:	e7c7      	b.n	800c22a <__gethex+0x9e>
 800c29a:	464e      	mov	r6, r9
 800c29c:	462f      	mov	r7, r5
 800c29e:	2501      	movs	r5, #1
 800c2a0:	e7c3      	b.n	800c22a <__gethex+0x9e>
 800c2a2:	2400      	movs	r4, #0
 800c2a4:	1cb1      	adds	r1, r6, #2
 800c2a6:	e7cc      	b.n	800c242 <__gethex+0xb6>
 800c2a8:	2401      	movs	r4, #1
 800c2aa:	e7fb      	b.n	800c2a4 <__gethex+0x118>
 800c2ac:	fb03 0002 	mla	r0, r3, r2, r0
 800c2b0:	e7ce      	b.n	800c250 <__gethex+0xc4>
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	e7de      	b.n	800c274 <__gethex+0xe8>
 800c2b6:	eba6 0309 	sub.w	r3, r6, r9
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	4629      	mov	r1, r5
 800c2be:	2b07      	cmp	r3, #7
 800c2c0:	dc0a      	bgt.n	800c2d8 <__gethex+0x14c>
 800c2c2:	9801      	ldr	r0, [sp, #4]
 800c2c4:	f7fd ffa4 	bl	800a210 <_Balloc>
 800c2c8:	4604      	mov	r4, r0
 800c2ca:	b940      	cbnz	r0, 800c2de <__gethex+0x152>
 800c2cc:	4b5c      	ldr	r3, [pc, #368]	@ (800c440 <__gethex+0x2b4>)
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	21e4      	movs	r1, #228	@ 0xe4
 800c2d2:	485c      	ldr	r0, [pc, #368]	@ (800c444 <__gethex+0x2b8>)
 800c2d4:	f7fd f824 	bl	8009320 <__assert_func>
 800c2d8:	3101      	adds	r1, #1
 800c2da:	105b      	asrs	r3, r3, #1
 800c2dc:	e7ef      	b.n	800c2be <__gethex+0x132>
 800c2de:	f100 0a14 	add.w	sl, r0, #20
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	4655      	mov	r5, sl
 800c2e6:	469b      	mov	fp, r3
 800c2e8:	45b1      	cmp	r9, r6
 800c2ea:	d337      	bcc.n	800c35c <__gethex+0x1d0>
 800c2ec:	f845 bb04 	str.w	fp, [r5], #4
 800c2f0:	eba5 050a 	sub.w	r5, r5, sl
 800c2f4:	10ad      	asrs	r5, r5, #2
 800c2f6:	6125      	str	r5, [r4, #16]
 800c2f8:	4658      	mov	r0, fp
 800c2fa:	f7fe f87b 	bl	800a3f4 <__hi0bits>
 800c2fe:	016d      	lsls	r5, r5, #5
 800c300:	f8d8 6000 	ldr.w	r6, [r8]
 800c304:	1a2d      	subs	r5, r5, r0
 800c306:	42b5      	cmp	r5, r6
 800c308:	dd54      	ble.n	800c3b4 <__gethex+0x228>
 800c30a:	1bad      	subs	r5, r5, r6
 800c30c:	4629      	mov	r1, r5
 800c30e:	4620      	mov	r0, r4
 800c310:	f7fe fc07 	bl	800ab22 <__any_on>
 800c314:	4681      	mov	r9, r0
 800c316:	b178      	cbz	r0, 800c338 <__gethex+0x1ac>
 800c318:	1e6b      	subs	r3, r5, #1
 800c31a:	1159      	asrs	r1, r3, #5
 800c31c:	f003 021f 	and.w	r2, r3, #31
 800c320:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c324:	f04f 0901 	mov.w	r9, #1
 800c328:	fa09 f202 	lsl.w	r2, r9, r2
 800c32c:	420a      	tst	r2, r1
 800c32e:	d003      	beq.n	800c338 <__gethex+0x1ac>
 800c330:	454b      	cmp	r3, r9
 800c332:	dc36      	bgt.n	800c3a2 <__gethex+0x216>
 800c334:	f04f 0902 	mov.w	r9, #2
 800c338:	4629      	mov	r1, r5
 800c33a:	4620      	mov	r0, r4
 800c33c:	f7ff febf 	bl	800c0be <rshift>
 800c340:	442f      	add	r7, r5
 800c342:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c346:	42bb      	cmp	r3, r7
 800c348:	da42      	bge.n	800c3d0 <__gethex+0x244>
 800c34a:	9801      	ldr	r0, [sp, #4]
 800c34c:	4621      	mov	r1, r4
 800c34e:	f7fd ff9f 	bl	800a290 <_Bfree>
 800c352:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c354:	2300      	movs	r3, #0
 800c356:	6013      	str	r3, [r2, #0]
 800c358:	25a3      	movs	r5, #163	@ 0xa3
 800c35a:	e793      	b.n	800c284 <__gethex+0xf8>
 800c35c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c360:	2a2e      	cmp	r2, #46	@ 0x2e
 800c362:	d012      	beq.n	800c38a <__gethex+0x1fe>
 800c364:	2b20      	cmp	r3, #32
 800c366:	d104      	bne.n	800c372 <__gethex+0x1e6>
 800c368:	f845 bb04 	str.w	fp, [r5], #4
 800c36c:	f04f 0b00 	mov.w	fp, #0
 800c370:	465b      	mov	r3, fp
 800c372:	7830      	ldrb	r0, [r6, #0]
 800c374:	9303      	str	r3, [sp, #12]
 800c376:	f7ff fef4 	bl	800c162 <__hexdig_fun>
 800c37a:	9b03      	ldr	r3, [sp, #12]
 800c37c:	f000 000f 	and.w	r0, r0, #15
 800c380:	4098      	lsls	r0, r3
 800c382:	ea4b 0b00 	orr.w	fp, fp, r0
 800c386:	3304      	adds	r3, #4
 800c388:	e7ae      	b.n	800c2e8 <__gethex+0x15c>
 800c38a:	45b1      	cmp	r9, r6
 800c38c:	d8ea      	bhi.n	800c364 <__gethex+0x1d8>
 800c38e:	492b      	ldr	r1, [pc, #172]	@ (800c43c <__gethex+0x2b0>)
 800c390:	9303      	str	r3, [sp, #12]
 800c392:	2201      	movs	r2, #1
 800c394:	4630      	mov	r0, r6
 800c396:	f7fc fe9f 	bl	80090d8 <strncmp>
 800c39a:	9b03      	ldr	r3, [sp, #12]
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d1e1      	bne.n	800c364 <__gethex+0x1d8>
 800c3a0:	e7a2      	b.n	800c2e8 <__gethex+0x15c>
 800c3a2:	1ea9      	subs	r1, r5, #2
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f7fe fbbc 	bl	800ab22 <__any_on>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d0c2      	beq.n	800c334 <__gethex+0x1a8>
 800c3ae:	f04f 0903 	mov.w	r9, #3
 800c3b2:	e7c1      	b.n	800c338 <__gethex+0x1ac>
 800c3b4:	da09      	bge.n	800c3ca <__gethex+0x23e>
 800c3b6:	1b75      	subs	r5, r6, r5
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	9801      	ldr	r0, [sp, #4]
 800c3bc:	462a      	mov	r2, r5
 800c3be:	f7fe f977 	bl	800a6b0 <__lshift>
 800c3c2:	1b7f      	subs	r7, r7, r5
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	f100 0a14 	add.w	sl, r0, #20
 800c3ca:	f04f 0900 	mov.w	r9, #0
 800c3ce:	e7b8      	b.n	800c342 <__gethex+0x1b6>
 800c3d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c3d4:	42bd      	cmp	r5, r7
 800c3d6:	dd6f      	ble.n	800c4b8 <__gethex+0x32c>
 800c3d8:	1bed      	subs	r5, r5, r7
 800c3da:	42ae      	cmp	r6, r5
 800c3dc:	dc34      	bgt.n	800c448 <__gethex+0x2bc>
 800c3de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d022      	beq.n	800c42c <__gethex+0x2a0>
 800c3e6:	2b03      	cmp	r3, #3
 800c3e8:	d024      	beq.n	800c434 <__gethex+0x2a8>
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d115      	bne.n	800c41a <__gethex+0x28e>
 800c3ee:	42ae      	cmp	r6, r5
 800c3f0:	d113      	bne.n	800c41a <__gethex+0x28e>
 800c3f2:	2e01      	cmp	r6, #1
 800c3f4:	d10b      	bne.n	800c40e <__gethex+0x282>
 800c3f6:	9a02      	ldr	r2, [sp, #8]
 800c3f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	2301      	movs	r3, #1
 800c400:	6123      	str	r3, [r4, #16]
 800c402:	f8ca 3000 	str.w	r3, [sl]
 800c406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c408:	2562      	movs	r5, #98	@ 0x62
 800c40a:	601c      	str	r4, [r3, #0]
 800c40c:	e73a      	b.n	800c284 <__gethex+0xf8>
 800c40e:	1e71      	subs	r1, r6, #1
 800c410:	4620      	mov	r0, r4
 800c412:	f7fe fb86 	bl	800ab22 <__any_on>
 800c416:	2800      	cmp	r0, #0
 800c418:	d1ed      	bne.n	800c3f6 <__gethex+0x26a>
 800c41a:	9801      	ldr	r0, [sp, #4]
 800c41c:	4621      	mov	r1, r4
 800c41e:	f7fd ff37 	bl	800a290 <_Bfree>
 800c422:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c424:	2300      	movs	r3, #0
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	2550      	movs	r5, #80	@ 0x50
 800c42a:	e72b      	b.n	800c284 <__gethex+0xf8>
 800c42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1f3      	bne.n	800c41a <__gethex+0x28e>
 800c432:	e7e0      	b.n	800c3f6 <__gethex+0x26a>
 800c434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1dd      	bne.n	800c3f6 <__gethex+0x26a>
 800c43a:	e7ee      	b.n	800c41a <__gethex+0x28e>
 800c43c:	0800d591 	.word	0x0800d591
 800c440:	0800d527 	.word	0x0800d527
 800c444:	0800d5ac 	.word	0x0800d5ac
 800c448:	1e6f      	subs	r7, r5, #1
 800c44a:	f1b9 0f00 	cmp.w	r9, #0
 800c44e:	d130      	bne.n	800c4b2 <__gethex+0x326>
 800c450:	b127      	cbz	r7, 800c45c <__gethex+0x2d0>
 800c452:	4639      	mov	r1, r7
 800c454:	4620      	mov	r0, r4
 800c456:	f7fe fb64 	bl	800ab22 <__any_on>
 800c45a:	4681      	mov	r9, r0
 800c45c:	117a      	asrs	r2, r7, #5
 800c45e:	2301      	movs	r3, #1
 800c460:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c464:	f007 071f 	and.w	r7, r7, #31
 800c468:	40bb      	lsls	r3, r7
 800c46a:	4213      	tst	r3, r2
 800c46c:	4629      	mov	r1, r5
 800c46e:	4620      	mov	r0, r4
 800c470:	bf18      	it	ne
 800c472:	f049 0902 	orrne.w	r9, r9, #2
 800c476:	f7ff fe22 	bl	800c0be <rshift>
 800c47a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c47e:	1b76      	subs	r6, r6, r5
 800c480:	2502      	movs	r5, #2
 800c482:	f1b9 0f00 	cmp.w	r9, #0
 800c486:	d047      	beq.n	800c518 <__gethex+0x38c>
 800c488:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	d015      	beq.n	800c4bc <__gethex+0x330>
 800c490:	2b03      	cmp	r3, #3
 800c492:	d017      	beq.n	800c4c4 <__gethex+0x338>
 800c494:	2b01      	cmp	r3, #1
 800c496:	d109      	bne.n	800c4ac <__gethex+0x320>
 800c498:	f019 0f02 	tst.w	r9, #2
 800c49c:	d006      	beq.n	800c4ac <__gethex+0x320>
 800c49e:	f8da 3000 	ldr.w	r3, [sl]
 800c4a2:	ea49 0903 	orr.w	r9, r9, r3
 800c4a6:	f019 0f01 	tst.w	r9, #1
 800c4aa:	d10e      	bne.n	800c4ca <__gethex+0x33e>
 800c4ac:	f045 0510 	orr.w	r5, r5, #16
 800c4b0:	e032      	b.n	800c518 <__gethex+0x38c>
 800c4b2:	f04f 0901 	mov.w	r9, #1
 800c4b6:	e7d1      	b.n	800c45c <__gethex+0x2d0>
 800c4b8:	2501      	movs	r5, #1
 800c4ba:	e7e2      	b.n	800c482 <__gethex+0x2f6>
 800c4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4be:	f1c3 0301 	rsb	r3, r3, #1
 800c4c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d0f0      	beq.n	800c4ac <__gethex+0x320>
 800c4ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c4ce:	f104 0314 	add.w	r3, r4, #20
 800c4d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c4d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c4da:	f04f 0c00 	mov.w	ip, #0
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c4e8:	d01b      	beq.n	800c522 <__gethex+0x396>
 800c4ea:	3201      	adds	r2, #1
 800c4ec:	6002      	str	r2, [r0, #0]
 800c4ee:	2d02      	cmp	r5, #2
 800c4f0:	f104 0314 	add.w	r3, r4, #20
 800c4f4:	d13c      	bne.n	800c570 <__gethex+0x3e4>
 800c4f6:	f8d8 2000 	ldr.w	r2, [r8]
 800c4fa:	3a01      	subs	r2, #1
 800c4fc:	42b2      	cmp	r2, r6
 800c4fe:	d109      	bne.n	800c514 <__gethex+0x388>
 800c500:	1171      	asrs	r1, r6, #5
 800c502:	2201      	movs	r2, #1
 800c504:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c508:	f006 061f 	and.w	r6, r6, #31
 800c50c:	fa02 f606 	lsl.w	r6, r2, r6
 800c510:	421e      	tst	r6, r3
 800c512:	d13a      	bne.n	800c58a <__gethex+0x3fe>
 800c514:	f045 0520 	orr.w	r5, r5, #32
 800c518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c51a:	601c      	str	r4, [r3, #0]
 800c51c:	9b02      	ldr	r3, [sp, #8]
 800c51e:	601f      	str	r7, [r3, #0]
 800c520:	e6b0      	b.n	800c284 <__gethex+0xf8>
 800c522:	4299      	cmp	r1, r3
 800c524:	f843 cc04 	str.w	ip, [r3, #-4]
 800c528:	d8d9      	bhi.n	800c4de <__gethex+0x352>
 800c52a:	68a3      	ldr	r3, [r4, #8]
 800c52c:	459b      	cmp	fp, r3
 800c52e:	db17      	blt.n	800c560 <__gethex+0x3d4>
 800c530:	6861      	ldr	r1, [r4, #4]
 800c532:	9801      	ldr	r0, [sp, #4]
 800c534:	3101      	adds	r1, #1
 800c536:	f7fd fe6b 	bl	800a210 <_Balloc>
 800c53a:	4681      	mov	r9, r0
 800c53c:	b918      	cbnz	r0, 800c546 <__gethex+0x3ba>
 800c53e:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a8 <__gethex+0x41c>)
 800c540:	4602      	mov	r2, r0
 800c542:	2184      	movs	r1, #132	@ 0x84
 800c544:	e6c5      	b.n	800c2d2 <__gethex+0x146>
 800c546:	6922      	ldr	r2, [r4, #16]
 800c548:	3202      	adds	r2, #2
 800c54a:	f104 010c 	add.w	r1, r4, #12
 800c54e:	0092      	lsls	r2, r2, #2
 800c550:	300c      	adds	r0, #12
 800c552:	f7fc fed0 	bl	80092f6 <memcpy>
 800c556:	4621      	mov	r1, r4
 800c558:	9801      	ldr	r0, [sp, #4]
 800c55a:	f7fd fe99 	bl	800a290 <_Bfree>
 800c55e:	464c      	mov	r4, r9
 800c560:	6923      	ldr	r3, [r4, #16]
 800c562:	1c5a      	adds	r2, r3, #1
 800c564:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c568:	6122      	str	r2, [r4, #16]
 800c56a:	2201      	movs	r2, #1
 800c56c:	615a      	str	r2, [r3, #20]
 800c56e:	e7be      	b.n	800c4ee <__gethex+0x362>
 800c570:	6922      	ldr	r2, [r4, #16]
 800c572:	455a      	cmp	r2, fp
 800c574:	dd0b      	ble.n	800c58e <__gethex+0x402>
 800c576:	2101      	movs	r1, #1
 800c578:	4620      	mov	r0, r4
 800c57a:	f7ff fda0 	bl	800c0be <rshift>
 800c57e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c582:	3701      	adds	r7, #1
 800c584:	42bb      	cmp	r3, r7
 800c586:	f6ff aee0 	blt.w	800c34a <__gethex+0x1be>
 800c58a:	2501      	movs	r5, #1
 800c58c:	e7c2      	b.n	800c514 <__gethex+0x388>
 800c58e:	f016 061f 	ands.w	r6, r6, #31
 800c592:	d0fa      	beq.n	800c58a <__gethex+0x3fe>
 800c594:	4453      	add	r3, sl
 800c596:	f1c6 0620 	rsb	r6, r6, #32
 800c59a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c59e:	f7fd ff29 	bl	800a3f4 <__hi0bits>
 800c5a2:	42b0      	cmp	r0, r6
 800c5a4:	dbe7      	blt.n	800c576 <__gethex+0x3ea>
 800c5a6:	e7f0      	b.n	800c58a <__gethex+0x3fe>
 800c5a8:	0800d527 	.word	0x0800d527

0800c5ac <L_shift>:
 800c5ac:	f1c2 0208 	rsb	r2, r2, #8
 800c5b0:	0092      	lsls	r2, r2, #2
 800c5b2:	b570      	push	{r4, r5, r6, lr}
 800c5b4:	f1c2 0620 	rsb	r6, r2, #32
 800c5b8:	6843      	ldr	r3, [r0, #4]
 800c5ba:	6804      	ldr	r4, [r0, #0]
 800c5bc:	fa03 f506 	lsl.w	r5, r3, r6
 800c5c0:	432c      	orrs	r4, r5
 800c5c2:	40d3      	lsrs	r3, r2
 800c5c4:	6004      	str	r4, [r0, #0]
 800c5c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c5ca:	4288      	cmp	r0, r1
 800c5cc:	d3f4      	bcc.n	800c5b8 <L_shift+0xc>
 800c5ce:	bd70      	pop	{r4, r5, r6, pc}

0800c5d0 <__match>:
 800c5d0:	b530      	push	{r4, r5, lr}
 800c5d2:	6803      	ldr	r3, [r0, #0]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5da:	b914      	cbnz	r4, 800c5e2 <__match+0x12>
 800c5dc:	6003      	str	r3, [r0, #0]
 800c5de:	2001      	movs	r0, #1
 800c5e0:	bd30      	pop	{r4, r5, pc}
 800c5e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c5ea:	2d19      	cmp	r5, #25
 800c5ec:	bf98      	it	ls
 800c5ee:	3220      	addls	r2, #32
 800c5f0:	42a2      	cmp	r2, r4
 800c5f2:	d0f0      	beq.n	800c5d6 <__match+0x6>
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	e7f3      	b.n	800c5e0 <__match+0x10>

0800c5f8 <__hexnan>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	680b      	ldr	r3, [r1, #0]
 800c5fe:	6801      	ldr	r1, [r0, #0]
 800c600:	115e      	asrs	r6, r3, #5
 800c602:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c606:	f013 031f 	ands.w	r3, r3, #31
 800c60a:	b087      	sub	sp, #28
 800c60c:	bf18      	it	ne
 800c60e:	3604      	addne	r6, #4
 800c610:	2500      	movs	r5, #0
 800c612:	1f37      	subs	r7, r6, #4
 800c614:	4682      	mov	sl, r0
 800c616:	4690      	mov	r8, r2
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c61e:	46b9      	mov	r9, r7
 800c620:	463c      	mov	r4, r7
 800c622:	9502      	str	r5, [sp, #8]
 800c624:	46ab      	mov	fp, r5
 800c626:	784a      	ldrb	r2, [r1, #1]
 800c628:	1c4b      	adds	r3, r1, #1
 800c62a:	9303      	str	r3, [sp, #12]
 800c62c:	b342      	cbz	r2, 800c680 <__hexnan+0x88>
 800c62e:	4610      	mov	r0, r2
 800c630:	9105      	str	r1, [sp, #20]
 800c632:	9204      	str	r2, [sp, #16]
 800c634:	f7ff fd95 	bl	800c162 <__hexdig_fun>
 800c638:	2800      	cmp	r0, #0
 800c63a:	d151      	bne.n	800c6e0 <__hexnan+0xe8>
 800c63c:	9a04      	ldr	r2, [sp, #16]
 800c63e:	9905      	ldr	r1, [sp, #20]
 800c640:	2a20      	cmp	r2, #32
 800c642:	d818      	bhi.n	800c676 <__hexnan+0x7e>
 800c644:	9b02      	ldr	r3, [sp, #8]
 800c646:	459b      	cmp	fp, r3
 800c648:	dd13      	ble.n	800c672 <__hexnan+0x7a>
 800c64a:	454c      	cmp	r4, r9
 800c64c:	d206      	bcs.n	800c65c <__hexnan+0x64>
 800c64e:	2d07      	cmp	r5, #7
 800c650:	dc04      	bgt.n	800c65c <__hexnan+0x64>
 800c652:	462a      	mov	r2, r5
 800c654:	4649      	mov	r1, r9
 800c656:	4620      	mov	r0, r4
 800c658:	f7ff ffa8 	bl	800c5ac <L_shift>
 800c65c:	4544      	cmp	r4, r8
 800c65e:	d952      	bls.n	800c706 <__hexnan+0x10e>
 800c660:	2300      	movs	r3, #0
 800c662:	f1a4 0904 	sub.w	r9, r4, #4
 800c666:	f844 3c04 	str.w	r3, [r4, #-4]
 800c66a:	f8cd b008 	str.w	fp, [sp, #8]
 800c66e:	464c      	mov	r4, r9
 800c670:	461d      	mov	r5, r3
 800c672:	9903      	ldr	r1, [sp, #12]
 800c674:	e7d7      	b.n	800c626 <__hexnan+0x2e>
 800c676:	2a29      	cmp	r2, #41	@ 0x29
 800c678:	d157      	bne.n	800c72a <__hexnan+0x132>
 800c67a:	3102      	adds	r1, #2
 800c67c:	f8ca 1000 	str.w	r1, [sl]
 800c680:	f1bb 0f00 	cmp.w	fp, #0
 800c684:	d051      	beq.n	800c72a <__hexnan+0x132>
 800c686:	454c      	cmp	r4, r9
 800c688:	d206      	bcs.n	800c698 <__hexnan+0xa0>
 800c68a:	2d07      	cmp	r5, #7
 800c68c:	dc04      	bgt.n	800c698 <__hexnan+0xa0>
 800c68e:	462a      	mov	r2, r5
 800c690:	4649      	mov	r1, r9
 800c692:	4620      	mov	r0, r4
 800c694:	f7ff ff8a 	bl	800c5ac <L_shift>
 800c698:	4544      	cmp	r4, r8
 800c69a:	d936      	bls.n	800c70a <__hexnan+0x112>
 800c69c:	f1a8 0204 	sub.w	r2, r8, #4
 800c6a0:	4623      	mov	r3, r4
 800c6a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c6a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c6aa:	429f      	cmp	r7, r3
 800c6ac:	d2f9      	bcs.n	800c6a2 <__hexnan+0xaa>
 800c6ae:	1b3b      	subs	r3, r7, r4
 800c6b0:	f023 0303 	bic.w	r3, r3, #3
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	3401      	adds	r4, #1
 800c6b8:	3e03      	subs	r6, #3
 800c6ba:	42b4      	cmp	r4, r6
 800c6bc:	bf88      	it	hi
 800c6be:	2304      	movhi	r3, #4
 800c6c0:	4443      	add	r3, r8
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f843 2b04 	str.w	r2, [r3], #4
 800c6c8:	429f      	cmp	r7, r3
 800c6ca:	d2fb      	bcs.n	800c6c4 <__hexnan+0xcc>
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	b91b      	cbnz	r3, 800c6d8 <__hexnan+0xe0>
 800c6d0:	4547      	cmp	r7, r8
 800c6d2:	d128      	bne.n	800c726 <__hexnan+0x12e>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	603b      	str	r3, [r7, #0]
 800c6d8:	2005      	movs	r0, #5
 800c6da:	b007      	add	sp, #28
 800c6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e0:	3501      	adds	r5, #1
 800c6e2:	2d08      	cmp	r5, #8
 800c6e4:	f10b 0b01 	add.w	fp, fp, #1
 800c6e8:	dd06      	ble.n	800c6f8 <__hexnan+0x100>
 800c6ea:	4544      	cmp	r4, r8
 800c6ec:	d9c1      	bls.n	800c672 <__hexnan+0x7a>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6f4:	2501      	movs	r5, #1
 800c6f6:	3c04      	subs	r4, #4
 800c6f8:	6822      	ldr	r2, [r4, #0]
 800c6fa:	f000 000f 	and.w	r0, r0, #15
 800c6fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c702:	6020      	str	r0, [r4, #0]
 800c704:	e7b5      	b.n	800c672 <__hexnan+0x7a>
 800c706:	2508      	movs	r5, #8
 800c708:	e7b3      	b.n	800c672 <__hexnan+0x7a>
 800c70a:	9b01      	ldr	r3, [sp, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0dd      	beq.n	800c6cc <__hexnan+0xd4>
 800c710:	f1c3 0320 	rsb	r3, r3, #32
 800c714:	f04f 32ff 	mov.w	r2, #4294967295
 800c718:	40da      	lsrs	r2, r3
 800c71a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c71e:	4013      	ands	r3, r2
 800c720:	f846 3c04 	str.w	r3, [r6, #-4]
 800c724:	e7d2      	b.n	800c6cc <__hexnan+0xd4>
 800c726:	3f04      	subs	r7, #4
 800c728:	e7d0      	b.n	800c6cc <__hexnan+0xd4>
 800c72a:	2004      	movs	r0, #4
 800c72c:	e7d5      	b.n	800c6da <__hexnan+0xe2>

0800c72e <__ascii_mbtowc>:
 800c72e:	b082      	sub	sp, #8
 800c730:	b901      	cbnz	r1, 800c734 <__ascii_mbtowc+0x6>
 800c732:	a901      	add	r1, sp, #4
 800c734:	b142      	cbz	r2, 800c748 <__ascii_mbtowc+0x1a>
 800c736:	b14b      	cbz	r3, 800c74c <__ascii_mbtowc+0x1e>
 800c738:	7813      	ldrb	r3, [r2, #0]
 800c73a:	600b      	str	r3, [r1, #0]
 800c73c:	7812      	ldrb	r2, [r2, #0]
 800c73e:	1e10      	subs	r0, r2, #0
 800c740:	bf18      	it	ne
 800c742:	2001      	movne	r0, #1
 800c744:	b002      	add	sp, #8
 800c746:	4770      	bx	lr
 800c748:	4610      	mov	r0, r2
 800c74a:	e7fb      	b.n	800c744 <__ascii_mbtowc+0x16>
 800c74c:	f06f 0001 	mvn.w	r0, #1
 800c750:	e7f8      	b.n	800c744 <__ascii_mbtowc+0x16>

0800c752 <_realloc_r>:
 800c752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c756:	4607      	mov	r7, r0
 800c758:	4614      	mov	r4, r2
 800c75a:	460d      	mov	r5, r1
 800c75c:	b921      	cbnz	r1, 800c768 <_realloc_r+0x16>
 800c75e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c762:	4611      	mov	r1, r2
 800c764:	f7fd bcc8 	b.w	800a0f8 <_malloc_r>
 800c768:	b92a      	cbnz	r2, 800c776 <_realloc_r+0x24>
 800c76a:	f7fd fc51 	bl	800a010 <_free_r>
 800c76e:	4625      	mov	r5, r4
 800c770:	4628      	mov	r0, r5
 800c772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c776:	f000 f86b 	bl	800c850 <_malloc_usable_size_r>
 800c77a:	4284      	cmp	r4, r0
 800c77c:	4606      	mov	r6, r0
 800c77e:	d802      	bhi.n	800c786 <_realloc_r+0x34>
 800c780:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c784:	d8f4      	bhi.n	800c770 <_realloc_r+0x1e>
 800c786:	4621      	mov	r1, r4
 800c788:	4638      	mov	r0, r7
 800c78a:	f7fd fcb5 	bl	800a0f8 <_malloc_r>
 800c78e:	4680      	mov	r8, r0
 800c790:	b908      	cbnz	r0, 800c796 <_realloc_r+0x44>
 800c792:	4645      	mov	r5, r8
 800c794:	e7ec      	b.n	800c770 <_realloc_r+0x1e>
 800c796:	42b4      	cmp	r4, r6
 800c798:	4622      	mov	r2, r4
 800c79a:	4629      	mov	r1, r5
 800c79c:	bf28      	it	cs
 800c79e:	4632      	movcs	r2, r6
 800c7a0:	f7fc fda9 	bl	80092f6 <memcpy>
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	f7fd fc32 	bl	800a010 <_free_r>
 800c7ac:	e7f1      	b.n	800c792 <_realloc_r+0x40>

0800c7ae <__ascii_wctomb>:
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4608      	mov	r0, r1
 800c7b2:	b141      	cbz	r1, 800c7c6 <__ascii_wctomb+0x18>
 800c7b4:	2aff      	cmp	r2, #255	@ 0xff
 800c7b6:	d904      	bls.n	800c7c2 <__ascii_wctomb+0x14>
 800c7b8:	228a      	movs	r2, #138	@ 0x8a
 800c7ba:	601a      	str	r2, [r3, #0]
 800c7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c0:	4770      	bx	lr
 800c7c2:	700a      	strb	r2, [r1, #0]
 800c7c4:	2001      	movs	r0, #1
 800c7c6:	4770      	bx	lr

0800c7c8 <_raise_r>:
 800c7c8:	291f      	cmp	r1, #31
 800c7ca:	b538      	push	{r3, r4, r5, lr}
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	d904      	bls.n	800c7dc <_raise_r+0x14>
 800c7d2:	2316      	movs	r3, #22
 800c7d4:	6003      	str	r3, [r0, #0]
 800c7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
 800c7dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c7de:	b112      	cbz	r2, 800c7e6 <_raise_r+0x1e>
 800c7e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7e4:	b94b      	cbnz	r3, 800c7fa <_raise_r+0x32>
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	f000 f830 	bl	800c84c <_getpid_r>
 800c7ec:	4622      	mov	r2, r4
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7f6:	f000 b817 	b.w	800c828 <_kill_r>
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d00a      	beq.n	800c814 <_raise_r+0x4c>
 800c7fe:	1c59      	adds	r1, r3, #1
 800c800:	d103      	bne.n	800c80a <_raise_r+0x42>
 800c802:	2316      	movs	r3, #22
 800c804:	6003      	str	r3, [r0, #0]
 800c806:	2001      	movs	r0, #1
 800c808:	e7e7      	b.n	800c7da <_raise_r+0x12>
 800c80a:	2100      	movs	r1, #0
 800c80c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c810:	4620      	mov	r0, r4
 800c812:	4798      	blx	r3
 800c814:	2000      	movs	r0, #0
 800c816:	e7e0      	b.n	800c7da <_raise_r+0x12>

0800c818 <raise>:
 800c818:	4b02      	ldr	r3, [pc, #8]	@ (800c824 <raise+0xc>)
 800c81a:	4601      	mov	r1, r0
 800c81c:	6818      	ldr	r0, [r3, #0]
 800c81e:	f7ff bfd3 	b.w	800c7c8 <_raise_r>
 800c822:	bf00      	nop
 800c824:	20000060 	.word	0x20000060

0800c828 <_kill_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4d07      	ldr	r5, [pc, #28]	@ (800c848 <_kill_r+0x20>)
 800c82c:	2300      	movs	r3, #0
 800c82e:	4604      	mov	r4, r0
 800c830:	4608      	mov	r0, r1
 800c832:	4611      	mov	r1, r2
 800c834:	602b      	str	r3, [r5, #0]
 800c836:	f7f4 feda 	bl	80015ee <_kill>
 800c83a:	1c43      	adds	r3, r0, #1
 800c83c:	d102      	bne.n	800c844 <_kill_r+0x1c>
 800c83e:	682b      	ldr	r3, [r5, #0]
 800c840:	b103      	cbz	r3, 800c844 <_kill_r+0x1c>
 800c842:	6023      	str	r3, [r4, #0]
 800c844:	bd38      	pop	{r3, r4, r5, pc}
 800c846:	bf00      	nop
 800c848:	20000ea0 	.word	0x20000ea0

0800c84c <_getpid_r>:
 800c84c:	f7f4 bec7 	b.w	80015de <_getpid>

0800c850 <_malloc_usable_size_r>:
 800c850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c854:	1f18      	subs	r0, r3, #4
 800c856:	2b00      	cmp	r3, #0
 800c858:	bfbc      	itt	lt
 800c85a:	580b      	ldrlt	r3, [r1, r0]
 800c85c:	18c0      	addlt	r0, r0, r3
 800c85e:	4770      	bx	lr

0800c860 <_init>:
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c862:	bf00      	nop
 800c864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c866:	bc08      	pop	{r3}
 800c868:	469e      	mov	lr, r3
 800c86a:	4770      	bx	lr

0800c86c <_fini>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	bf00      	nop
 800c870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c872:	bc08      	pop	{r3}
 800c874:	469e      	mov	lr, r3
 800c876:	4770      	bx	lr
